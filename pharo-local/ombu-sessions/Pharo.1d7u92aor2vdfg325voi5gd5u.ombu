OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-02-22T11:14:59.720374-03:00' ],		#prior : OmReference [ 'Pharo.214j6wkz215u3olw47lliiwud', '4539' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Educia-Core,		#affectedPackageName : #Educia-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-02-22T11:14:59.782301-03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-02-22T11:15:52.611872-03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-02-22T12:36:39.937452-03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @21,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-02-22T12:37:10.126238-03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2018-02-22T12:37:14.81437-03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:37:26.596997-03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newComment : '',		#oldStamp : '<historical>',		#newStamp : 'jmdc 2/22/2018 12:37'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:37:32.325456-03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'cpu',		#oldStamp : 'jmdc 2/22/2018 12:37',		#newStamp : 'jmdc 2/22/2018 12:37'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:37:37.462732-03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @7,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'clock',		#newStamp : 'jmdc 2/22/2018 12:37'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:37:49.103126-03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:37:54.151305-03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @7,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'instt',		#newStamp : 'jmdc 2/22/2018 12:37'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:15.70918-03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #EduRoot\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EduRoot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #EduRoot,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EduRoot class\r\tinstanceVariableNames: \'\''				},				#name : #'EduRoot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EduRoot,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:20.151625-03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #EduRoot\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EduRoot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #EduRoot,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EduRoot class\r\tinstanceVariableNames: \'\''				},				#name : #'EduRoot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EduRoot,					#isMetaSide : false				},				#parent : @7,				#content : 'root',				#stamp : 'jmdc 2/22/2018 12:38'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'root',		#newStamp : 'jmdc 2/22/2018 12:38'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:34.022686-03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @23,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:34.1071-03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @23,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:44.116727-03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #EduRoot\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EduRoot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #EduRoot,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EduRoot class\r\tinstanceVariableNames: \'\''				},				#name : #'EduRoot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EduRoot,					#isMetaSide : false				},				#parent : @7,				#content : 'root',				#stamp : 'jmdc 2/22/2018 12:38'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #EduRoot\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EduRoot,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EduRoot class\r\tinstanceVariableNames: \'\''				},				#name : #'EduRoot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EduRoot,					#isMetaSide : false				},				#parent : @23,				#content : 'root',				#stamp : 'jmdc 2/22/2018 12:38'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:49.149681-03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @7,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @23,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:49.240825-03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @7,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @23,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:55.610969-03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @7,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @21,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:38:55.692223-03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @7,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @21,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:39:18.643166-03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:39:22.761882-03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @7,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'memory',		#newStamp : 'jmdc 2/22/2018 12:39'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:39:49.864817-03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #MicroInstrucction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MicroInstrucction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MicroInstrucction class\r\tinstanceVariableNames: \'\''				},				#name : #'MicroInstrucction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MicroInstrucction,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:39:53.402728-03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #MicroInstrucction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MicroInstrucction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MicroInstrucction class\r\tinstanceVariableNames: \'\''				},				#name : #'MicroInstrucction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MicroInstrucction,					#isMetaSide : false				},				#parent : @7,				#content : 'micro',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'micro',		#newStamp : 'jmdc 2/22/2018 12:39'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:40:04.469359-03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #CPU\r\tinstanceVariableNames: \'registers\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #CPU\r\tinstanceVariableNames: \'registers micro\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @23				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #micro,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @23,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:40:37.906489-03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'EduRoot class',				#isMetaSide : true			},			#name : #new,			#protocol : #'as yet unclassified',			#sourceCode : 'new\r\r\t^ super new initialize',			#stamp : 'jmdc 2/22/2018 12:40',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:40:37.950818-03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'EduRoot class',				#isMetaSide : true			},			#name : #new,			#protocol : #'as yet unclassified',			#sourceCode : 'new\r\r\t^ super new initialize',			#stamp : 'jmdc 2/22/2018 12:40',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'EduRoot class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\t^ super new initialize',			#stamp : 'jmdc 2/22/2018 12:40',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:40:47.444524-03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EduRoot,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\t""',			#stamp : 'jmdc 2/22/2018 12:40',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:40:47.485899-03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EduRoot,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\t""',			#stamp : 'jmdc 2/22/2018 12:40',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #EduRoot,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t""',			#stamp : 'jmdc 2/22/2018 12:40',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:41:04.087638-03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @7,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #ClockManager\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ClockManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClockManager,						#isMetaSide : false					},					#name : #process,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClockManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ClockManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClockManager,					#isMetaSide : false				},				#parent : @23,				#content : 'clock',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:41:30.538759-03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #'as yet unclassified',			#sourceCode : 'default\r\r\t^ super new initialize ',			#stamp : 'jmdc 2/22/2018 12:41',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:41:30.596201-03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #'as yet unclassified',			#sourceCode : 'default\r\r\t^ super new initialize ',			#stamp : 'jmdc 2/22/2018 12:41',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\t^ super new initialize ',			#stamp : 'jmdc 2/22/2018 12:41',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:41:44.999973-03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\t^ super new initialize ',			#stamp : 'jmdc 2/22/2018 12:41',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\r\t^ super new initialize ',			#stamp : 'jmdc 2/22/2018 12:41',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:42:47.199799-03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\r\t^ super new initialize ',			#stamp : 'jmdc 2/22/2018 12:41',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\tInstance ifNil:[ Instance := super new].\r',			#stamp : 'jmdc 2/22/2018 12:42',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:42:52.824921-03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\tInstance ifNil:[ Instance := super new].\r',			#stamp : 'jmdc 2/22/2018 12:42',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\t^ Instance ifNil:[ Instance := super new].\r',			#stamp : 'jmdc 2/22/2018 12:42',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:43:31.759892-03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\r\t^ Instance ifNil:[ Instance := super new].\r',			#stamp : 'jmdc 2/22/2018 12:42',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClockManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #accessing,			#sourceCode : 'default\r\t^ Instance ifNil: [ Instance := super new ]',			#stamp : 'jmdc 2/22/2018 12:43',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:44:02.009092-03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #CPU\r\tinstanceVariableNames: \'registers micro\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #micro,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @7,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #CPU\r\tinstanceVariableNames: \'registers pc micro\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CPU,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #registers,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #pc,					#parent : @25				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CPU,						#isMetaSide : false					},					#name : #micro,					#parent : @25				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPU class\r\tinstanceVariableNames: \'\''				},				#name : #'CPU class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @25			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CPU,					#isMetaSide : false				},				#parent : @25,				#content : 'cpu',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:44:24.787513-03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\r\t',			#stamp : 'jmdc 2/22/2018 12:44',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:44:24.836623-03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\r\t',			#stamp : 'jmdc 2/22/2018 12:44',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\t',			#stamp : 'jmdc 2/22/2018 12:44',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:44:44.434493-03:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\t',			#stamp : 'jmdc 2/22/2018 12:44',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tprocess := 1.',			#stamp : 'jmdc 2/22/2018 12:44',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:49:54.712664-03:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tprocess := 1.',			#stamp : 'jmdc 2/22/2018 12:44',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\t\t[true] whileTrue: [\r\t\t\r\t\t\t(Delay forMilliseconds: 10) wait.\r\t\t\t^self tick ]',			#stamp : 'jmdc 2/22/2018 12:49',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:50:01.271165-03:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\t\t[true] whileTrue: [\r\t\t\r\t\t\t(Delay forMilliseconds: 10) wait.\r\t\t\t^self tick ]',			#stamp : 'jmdc 2/22/2018 12:49',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClockManager,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r"\r"\r\t[ true ]\r\t\twhileTrue: [ (Delay forMilliseconds: 10) wait.\r\t\t\t^ self tick ]',			#stamp : 'jmdc 2/22/2018 12:50',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:50:21.250588-03:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize',			#stamp : 'jmdc 2/22/2018 12:50',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:50:21.293067-03:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize',			#stamp : 'jmdc 2/22/2018 12:50',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize',			#stamp : 'jmdc 2/22/2018 12:50',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:51:50.848591-03:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize',			#stamp : 'jmdc 2/22/2018 12:50',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tself initializeRegisters;\r\t initializeMemory;\r\t initializeMicroInstructions;\r\t loadProgram;\r\t run. ',			#stamp : 'jmdc 2/22/2018 12:51',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:52:39.891358-03:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBExtractMethodRefactoring extract: (14 to: 112) from: #initialize in: CPU)'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2018-02-22T12:52:39.89894-03:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeRegisters,			#protocol : #initialization,			#sourceCode : 'initializeRegisters\r\tself\r\t\tinitializeRegisters;\r\t\tinitializeMemory;\r\t\tinitializeMicroInstructions;\r\t\tloadProgram;\r\t\trun',			#stamp : 'jmdc 2/22/2018 12:52',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2018-02-22T12:52:39.915969-03:00' ],		#trigger : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tself initializeRegisters;\r\t initializeMemory;\r\t initializeMicroInstructions;\r\t loadProgram;\r\t run. ',			#stamp : 'jmdc 2/22/2018 12:51',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tself initializeRegisters',			#stamp : 'jmdc 2/22/2018 12:52',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:52:57.91185-03:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tself initializeRegisters',			#stamp : 'jmdc 2/22/2018 12:52',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tself\r\t\tinitializeRegisters;\r\t\tinitializeMemory;\r\t\tinitializeMicroInstructions;\r\t\tloadProgram;\r\t\trun',			#stamp : 'jmdc 2/22/2018 12:52',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:07.356949-03:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeMemory,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeMemory',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:07.395611-03:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeMemory,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeMemory',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeMemory,			#protocol : #initialization,			#sourceCode : 'initializeMemory',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:23.28019-03:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeMicroInstructions,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeMicroInstructions',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:23.322988-03:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeMicroInstructions,			#protocol : #'as yet unclassified',			#sourceCode : 'initializeMicroInstructions',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeMicroInstructions,			#protocol : #initialization,			#sourceCode : 'initializeMicroInstructions',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:35.421922-03:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #loadProgram,			#protocol : #'as yet unclassified',			#sourceCode : 'loadProgram',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:46.336705-03:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #run,			#protocol : #'as yet unclassified',			#sourceCode : 'run',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:53:46.352677-03:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #run,			#protocol : #'as yet unclassified',			#sourceCode : 'run',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #run,			#protocol : #running,			#sourceCode : 'run',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:54:00.831013-03:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #loadProgram,			#protocol : #'as yet unclassified',			#sourceCode : 'loadProgram',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #loadProgram,			#protocol : #initialization,			#sourceCode : 'loadProgram',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:54:23.648736-03:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeRegisters,			#protocol : #initialization,			#sourceCode : 'initializeRegisters\r\tself\r\t\tinitializeRegisters;\r\t\tinitializeMemory;\r\t\tinitializeMicroInstructions;\r\t\tloadProgram;\r\t\trun',			#stamp : 'jmdc 2/22/2018 12:52',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #initializeRegisters,			#protocol : #initialization,			#sourceCode : 'initializeRegisters\r\t pc:= self startPoint.',			#stamp : 'jmdc 2/22/2018 12:54',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:54:41.295455-03:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #startPoint,			#protocol : #'as yet unclassified',			#sourceCode : 'startPoint\r\r\t^ 0',			#stamp : 'jmdc 2/22/2018 12:54',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:54:41.347775-03:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #startPoint,			#protocol : #'as yet unclassified',			#sourceCode : 'startPoint\r\r\t^ 0',			#stamp : 'jmdc 2/22/2018 12:54',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #startPoint,			#protocol : #accessing,			#sourceCode : 'startPoint\r\r\t^ 0',			#stamp : 'jmdc 2/22/2018 12:54',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:55:05.77003-03:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Registers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Registers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Registers class\r\tinstanceVariableNames: \'\''				},				#name : #'Registers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Registers,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:55:11.855202-03:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Registers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Registers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Registers class\r\tinstanceVariableNames: \'\''				},				#name : #'Registers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Registers,					#isMetaSide : false				},				#parent : @7,				#content : 'register',				#stamp : 'jmdc 2/22/2018 12:55'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'register',		#newStamp : 'jmdc 2/22/2018 12:55'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:59:55.348338-03:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Arquitecture\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Arquitecture,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Arquitecture class\r\tinstanceVariableNames: \'\''				},				#name : #'Arquitecture class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Arquitecture,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T12:59:59.221299-03:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Arquitecture\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Arquitecture,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Arquitecture class\r\tinstanceVariableNames: \'\''				},				#name : #'Arquitecture class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Arquitecture,					#isMetaSide : false				},				#parent : @7,				#content : 'arq',				#stamp : 'jmdc 2/22/2018 12:59'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'arq',		#newStamp : 'jmdc 2/22/2018 12:59'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:00:14.675637-03:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Registers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Registers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Registers class\r\tinstanceVariableNames: \'\''				},				#name : #'Registers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Registers,					#isMetaSide : false				},				#parent : @7,				#content : 'register',				#stamp : 'jmdc 2/22/2018 12:55'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Registers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Registers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Registers class\r\tinstanceVariableNames: \'\''				},				#name : #'Registers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Registers,					#isMetaSide : false				},				#parent : @21,				#content : 'register',				#stamp : 'jmdc 2/22/2018 12:55'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:00:14.763492-03:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Registers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Registers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Registers class\r\tinstanceVariableNames: \'\''				},				#name : #'Registers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Registers,					#isMetaSide : false				},				#parent : @7,				#content : 'register',				#stamp : 'jmdc 2/22/2018 12:55'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Arquitecture',				#traitCompositionSource : '{}',				#definitionSource : 'Arquitecture subclass: #Registers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Registers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Registers class\r\tinstanceVariableNames: \'\''				},				#name : #'Registers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Registers,					#isMetaSide : false				},				#parent : @21,				#content : 'register',				#stamp : 'jmdc 2/22/2018 12:55'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:00:24.037671-03:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #MicroInstrucction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MicroInstrucction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MicroInstrucction class\r\tinstanceVariableNames: \'\''				},				#name : #'MicroInstrucction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MicroInstrucction,					#isMetaSide : false				},				#parent : @7,				#content : 'micro',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #MicroInstrucction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MicroInstrucction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MicroInstrucction class\r\tinstanceVariableNames: \'\''				},				#name : #'MicroInstrucction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MicroInstrucction,					#isMetaSide : false				},				#parent : @21,				#content : 'micro',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:00:24.133495-03:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #MicroInstrucction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MicroInstrucction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MicroInstrucction class\r\tinstanceVariableNames: \'\''				},				#name : #'MicroInstrucction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MicroInstrucction,					#isMetaSide : false				},				#parent : @7,				#content : 'micro',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Arquitecture',				#traitCompositionSource : '{}',				#definitionSource : 'Arquitecture subclass: #MicroInstrucction\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MicroInstrucction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MicroInstrucction class\r\tinstanceVariableNames: \'\''				},				#name : #'MicroInstrucction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MicroInstrucction,					#isMetaSide : false				},				#parent : @21,				#content : 'micro',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:00:53.356124-03:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @7,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'storage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Memory,						#isMetaSide : false					},					#name : #storage,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @21,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:01:15.039517-03:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Hardware\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Hardware,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Hardware class\r\tinstanceVariableNames: \'\''				},				#name : #'Hardware class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Hardware,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:01:19.430289-03:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Hardware\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Hardware,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Hardware class\r\tinstanceVariableNames: \'\''				},				#name : #'Hardware class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Hardware,					#isMetaSide : false				},				#parent : @7,				#content : 'hw',				#stamp : 'jmdc 2/22/2018 13:01'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'hw',		#newStamp : 'jmdc 2/22/2018 13:01'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:01:47.335779-03:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Data\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Data,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Data class\r\tinstanceVariableNames: \'\''				},				#name : #'Data class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Data,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:01:52.076728-03:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Data\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Data,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Data class\r\tinstanceVariableNames: \'\''				},				#name : #'Data class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Data,					#isMetaSide : false				},				#parent : @7,				#content : 'data',				#stamp : 'jmdc 2/22/2018 13:01'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'data',		#newStamp : 'jmdc 2/22/2018 13:01'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:02:03.916124-03:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Address\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Address,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Address class\r\tinstanceVariableNames: \'\''				},				#name : #'Address class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Address,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:02:07.52116-03:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Address\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Address,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Address class\r\tinstanceVariableNames: \'\''				},				#name : #'Address class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Address,					#isMetaSide : false				},				#parent : @7,				#content : 'dire',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'dire',		#newStamp : 'jmdc 2/22/2018 13:02'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:02:44.967622-03:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #ValueAccess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ValueAccess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ValueAccess class\r\tinstanceVariableNames: \'\''				},				#name : #'ValueAccess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ValueAccess,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:02:48.700134-03:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #ValueAccess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ValueAccess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ValueAccess class\r\tinstanceVariableNames: \'\''				},				#name : #'ValueAccess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ValueAccess,					#isMetaSide : false				},				#parent : @7,				#content : 'value',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'value',		#newStamp : 'jmdc 2/22/2018 13:02'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:02:52.864524-03:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #ValueAccess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ValueAccess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ValueAccess class\r\tinstanceVariableNames: \'\''				},				#name : #'ValueAccess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ValueAccess,					#isMetaSide : false				},				#parent : @7,				#content : 'value',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #ValueAccess\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ValueAccess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ValueAccess,						#isMetaSide : false					},					#name : #value,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ValueAccess class\r\tinstanceVariableNames: \'\''				},				#name : #'ValueAccess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ValueAccess,					#isMetaSide : false				},				#parent : @21,				#content : 'value',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:03:00.603485-03:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Data\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Data,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Data class\r\tinstanceVariableNames: \'\''				},				#name : #'Data class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Data,					#isMetaSide : false				},				#parent : @7,				#content : 'data',				#stamp : 'jmdc 2/22/2018 13:01'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Data\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Data,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Data class\r\tinstanceVariableNames: \'\''				},				#name : #'Data class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Data,					#isMetaSide : false				},				#parent : @21,				#content : 'data',				#stamp : 'jmdc 2/22/2018 13:01'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:03:00.698388-03:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Data\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Data,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Data class\r\tinstanceVariableNames: \'\''				},				#name : #'Data class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Data,					#isMetaSide : false				},				#parent : @7,				#content : 'data',				#stamp : 'jmdc 2/22/2018 13:01'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ValueAccess',				#traitCompositionSource : '{}',				#definitionSource : 'ValueAccess subclass: #Data\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Data,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Data class\r\tinstanceVariableNames: \'\''				},				#name : #'Data class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Data,					#isMetaSide : false				},				#parent : @21,				#content : 'data',				#stamp : 'jmdc 2/22/2018 13:01'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:03:09.345095-03:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Address\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Address,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Address class\r\tinstanceVariableNames: \'\''				},				#name : #'Address class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Address,					#isMetaSide : false				},				#parent : @7,				#content : 'dire',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Address\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Address,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Address class\r\tinstanceVariableNames: \'\''				},				#name : #'Address class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Address,					#isMetaSide : false				},				#parent : @21,				#content : 'dire',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:03:09.443244-03:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Address\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Address,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Address class\r\tinstanceVariableNames: \'\''				},				#name : #'Address class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Address,					#isMetaSide : false				},				#parent : @7,				#content : 'dire',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ValueAccess',				#traitCompositionSource : '{}',				#definitionSource : 'ValueAccess subclass: #Address\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Address,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Address class\r\tinstanceVariableNames: \'\''				},				#name : #'Address class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Address,					#isMetaSide : false				},				#parent : @21,				#content : 'dire',				#stamp : 'jmdc 2/22/2018 13:02'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:03:41.587485-03:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'storage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Memory,						#isMetaSide : false					},					#name : #storage,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @7,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'storage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Memory,						#isMetaSide : false					},					#name : #storage,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @23,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:03:41.679815-03:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Memory\r\tinstanceVariableNames: \'storage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Memory,						#isMetaSide : false					},					#name : #storage,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @7,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Hardware',				#traitCompositionSource : '{}',				#definitionSource : 'Hardware subclass: #Memory\r\tinstanceVariableNames: \'storage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Memory,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Memory,						#isMetaSide : false					},					#name : #storage,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Memory class\r\tinstanceVariableNames: \'\''				},				#name : #'Memory class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Memory,					#isMetaSide : false				},				#parent : @23,				#content : 'memory',				#stamp : 'jmdc 2/22/2018 12:39'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:04:19.407774-03:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\r\tstorage := Dictionary new.',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:04:19.462508-03:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\r\tstorage := Dictionary new.',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tstorage := Dictionary new.',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:04:31.210676-03:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #'as yet unclassified',			#sourceCode : 'at: aAddres ',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:04:31.261479-03:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #'as yet unclassified',			#sourceCode : 'at: aAddres ',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aAddres ',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:05:17.908047-03:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aAddres ',			#stamp : 'jmdc 2/22/2018 13:04',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aAddres \r\r\t^ storage  at: aAddres  ',			#stamp : 'jmdc 2/22/2018 13:05',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:05:49.538467-03:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:put:',			#protocol : #accessing,			#sourceCode : 'at: aAddres put:  aData \r\r\t^ storage  at: aAddres put: aData  ',			#stamp : 'jmdc 2/22/2018 13:05',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:05:58.490001-03:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aAddres \r\r\t^ storage  at: aAddres  ',			#stamp : 'jmdc 2/22/2018 13:05',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aAddres \r\r\t^ storage  at: aAddres value',			#stamp : 'jmdc 2/22/2018 13:05',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:06:06.856424-03:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:put:',			#protocol : #accessing,			#sourceCode : 'at: aAddres put:  aData \r\r\t^ storage  at: aAddres put: aData  ',			#stamp : 'jmdc 2/22/2018 13:05',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Memory,				#isMetaSide : false			},			#name : #'at:put:',			#protocol : #accessing,			#sourceCode : 'at: aAddres put:  aData \r\r\t^ storage  at: aAddres value put: aData  ',			#stamp : 'jmdc 2/22/2018 13:06',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:06:28.675821-03:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #ProgramLoader\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ProgramLoader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ProgramLoader class\r\tinstanceVariableNames: \'\''				},				#name : #'ProgramLoader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ProgramLoader,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:06:38.257608-03:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #ProgramLoader\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ProgramLoader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ProgramLoader class\r\tinstanceVariableNames: \'\''				},				#name : #'ProgramLoader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ProgramLoader,					#isMetaSide : false				},				#parent : @7,				#content : 'Load de program',				#stamp : 'jmdc 2/22/2018 13:06'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load de program',		#newStamp : 'jmdc 2/22/2018 13:06'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:07:12.621608-03:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #loadProgram,			#protocol : #initialization,			#sourceCode : 'loadProgram',			#stamp : 'jmdc 2/22/2018 12:53',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CPU,				#isMetaSide : false			},			#name : #loadProgram,			#protocol : #initialization,			#sourceCode : 'loadProgram\r\r\tProgramLoader default loadProgramOn: self ',			#stamp : 'jmdc 2/22/2018 13:07',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:07:31.735076-03:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProgramLoader,				#isMetaSide : false			},			#name : #'loadProgramOn:',			#protocol : #'as yet unclassified',			#sourceCode : 'loadProgramOn: aCPU',			#stamp : 'jmdc 2/22/2018 13:07',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:08:21.630747-03:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @7,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @21,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:08:21.719525-03:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @7,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ValueAccess',				#traitCompositionSource : '{}',				#definitionSource : 'ValueAccess subclass: #Instruccions\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Instruccions,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Instruccions class\r\tinstanceVariableNames: \'\''				},				#name : #'Instruccions class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Instruccions,					#isMetaSide : false				},				#parent : @21,				#content : 'instt',				#stamp : 'jmdc 2/22/2018 12:37'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:08:57.603587-03:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDA class\r\tinstanceVariableNames: \'\''				},				#name : #'LDA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDA,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T13:09:11.557842-03:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDA class\r\tinstanceVariableNames: \'\''				},				#name : #'LDA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDA,					#isMetaSide : false				},				#parent : @7,				#content : 'lda instruccions',				#stamp : 'jmdc 2/22/2018 13:09'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'lda instruccions',		#newStamp : 'jmdc 2/22/2018 13:09'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:00:11.030465-03:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ConfigurationOfWKHTML2PDF-TorstenBergmann.7'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2018-02-22T14:00:11.164885-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfWKHTML2PDF\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ConfigurationOfWKHTML2PDF,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWKHTML2PDF,						#isMetaSide : false					},					#name : #project,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfWKHTML2PDF class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfWKHTML2PDF class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfWKHTML2PDF,					#isMetaSide : false				},				#parent : @7,				#content : '# WKHTML2PDF for Pharo\r\r## Project info\r\rThe "WKHTML2PDF for Pharo" is a project to provide the possibility to use the [WKHTML2PDF project](http://wkhtmltopdf.org/) from [Pharo](http://www.pharo.org). It allows you to convert HTML into PDF documents.\r\rWith this tool you can provide easy portable printing for your Pharo based applications.\r\r### Project location\rThe project is located on STHub at\r[http://smalltalkhub.com/#!/~TorstenBergmann/WKHTML2PDF/](http://smalltalkhub.com/#!/~TorstenBergmann/WKHTML2PDF/)\r\r### License\rWKHTML2PDF is licensed under MIT License.\r\r## Installation\r\r### Install WKHTML2PDF\rPlease check out [http://wkhtmltopdf.org](http://wkhtmltopdf.org)/ to install the necessary software on your machine. Note that the library/executable should be accessible to Pharo. Often it is enough by providing the binary files next to the Pharo VM executable.\r\r### Install in Pharo\rYou can access the project from the Pharo configuration browser. Just select *"Tools"* -> *"Configuration Browser"* from the world menu, enter "WKHTML2PDF" and install the stable version. \r\rAlternatively to install the packages manually into your Pharo image just evaluate:\r\r    Gofer new\r        url: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main\';\r        package: \'ConfigurationOfNBSQLite3\';\r        load.\r    ((Smalltalk at: #ConfigurationOfNBSQLite3) project stableVersion) load.\r\rIf you need access to the SQLite3 database engine you need at a minimum the "NBSQLite3-Core" package which is loaded by the ConfigurationOfNBSQLite3 class. \r\rThis package includes all necessary  API to access the sqlite engine. \r\r## Use in your own application\r\r### Selecting the engine\rInitially you have to select the engine that you want to use. Either you want to use the WKHTML2PDF library or the executable.\r\r\tHTML2PDFConverter useExecutable. \r\ror \r\r\tHTML2PDFConverter useLibrary. \r\rThe executable is the default.\r\r### Converting\rNow you can convert an HTML file or an URL into a PDF document:\r\r\tHTML2PDFConverter \r\t\t\tconvert: \'http://www.pharo.org\'\r\t\t    toFile: \'pharo.pdf\'\r\t\rwill convert the Pharo homepage to a pdf document.\r\t\t\r# Packages\r\r- *WKHTML2PDF-Core* - the core package required to use the project\r- *WKHTML2PDF-Tests-Core* - includes SUnit tests for the core project\r\r# Testing\rThe package comes with tests in the package ***WKHTML2PDF-Tests-Core***. Just use the SUnit TestRunner to run them.\r\r \r   ',				#stamp : 'TorstenBergmann 12/19/2014 10:16'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWKHTML2PDF,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# WKHTML2PDF for Pharo\r\r## Project info\r\rThe "WKHTML2PDF for Pharo" is a project to provide the possibility to use the [WKHTML2PDF project](http://wkhtmltopdf.org/) from [Pharo](http://www.pharo.org). It allows you to convert HTML into PDF documents.\r\rWith this tool you can provide easy portable printing for your Pharo based applications.\r\r### Project location\rThe project is located on STHub at\r[http://smalltalkhub.com/#!/~TorstenBergmann/WKHTML2PDF/](http://smalltalkhub.com/#!/~TorstenBergmann/WKHTML2PDF/)\r\r### License\rWKHTML2PDF is licensed under MIT License.\r\r## Installation\r\r### Install WKHTML2PDF\rPlease check out [http://wkhtmltopdf.org](http://wkhtmltopdf.org)/ to install the necessary software on your machine. Note that the library/executable should be accessible to Pharo. Often it is enough by providing the binary files next to the Pharo VM executable.\r\r### Install in Pharo\rYou can access the project from the Pharo configuration browser. Just select *"Tools"* -> *"Configuration Browser"* from the world menu, enter "WKHTML2PDF" and install the stable version. \r\rAlternatively to install the packages manually into your Pharo image just evaluate:\r\r    Gofer new\r        url: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main\';\r        package: \'ConfigurationOfNBSQLite3\';\r        load.\r    ((Smalltalk at: #ConfigurationOfNBSQLite3) project stableVersion) load.\r\rIf you need access to the SQLite3 database engine you need at a minimum the "NBSQLite3-Core" package which is loaded by the ConfigurationOfNBSQLite3 class. \r\rThis package includes all necessary  API to access the sqlite engine. \r\r## Use in your own application\r\r### Selecting the engine\rInitially you have to select the engine that you want to use. Either you want to use the WKHTML2PDF library or the executable.\r\r\tHTML2PDFConverter useExecutable. \r\ror \r\r\tHTML2PDFConverter useLibrary. \r\rThe executable is the default.\r\r### Converting\rNow you can convert an HTML file or an URL into a PDF document:\r\r\tHTML2PDFConverter \r\t\t\tconvert: \'http://www.pharo.org\'\r\t\t    toFile: \'pharo.pdf\'\r\t\rwill convert the Pharo homepage to a pdf document.\r\t\t\r# Packages\r\r- *WKHTML2PDF-Core* - the core package required to use the project\r- *WKHTML2PDF-Tests-Core* - includes SUnit tests for the core project\r\r# Testing\rThe package comes with tests in the package ***WKHTML2PDF-Tests-Core***. Just use the SUnit TestRunner to run them.\r\r \r   ',		#newStamp : 'TorstenBergmann 12/19/2014 10:16'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2018-02-22T14:00:11.166642-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ConfigurationOfWKHTML2PDF,		#affectedPackageName : #ConfigurationOfWKHTML2PDF	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2018-02-22T14:00:11.199517-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfWKHTML2PDF\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ConfigurationOfWKHTML2PDF\''			},			#name : #ConfigurationOfWKHTML2PDF,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWKHTML2PDF,						#isMetaSide : false					},					#name : #project,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfWKHTML2PDF class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfWKHTML2PDF class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfWKHTML2PDF,					#isMetaSide : false				},				#parent : @8,				#content : '# WKHTML2PDF for Pharo\r\r## Project info\r\rThe "WKHTML2PDF for Pharo" is a project to provide the possibility to use the [WKHTML2PDF project](http://wkhtmltopdf.org/) from [Pharo](http://www.pharo.org). It allows you to convert HTML into PDF documents.\r\rWith this tool you can provide easy portable printing for your Pharo based applications.\r\r### Project location\rThe project is located on STHub at\r[http://smalltalkhub.com/#!/~TorstenBergmann/WKHTML2PDF/](http://smalltalkhub.com/#!/~TorstenBergmann/WKHTML2PDF/)\r\r### License\rWKHTML2PDF is licensed under MIT License.\r\r## Installation\r\r### Install WKHTML2PDF\rPlease check out [http://wkhtmltopdf.org](http://wkhtmltopdf.org)/ to install the necessary software on your machine. Note that the library/executable should be accessible to Pharo. Often it is enough by providing the binary files next to the Pharo VM executable.\r\r### Install in Pharo\rYou can access the project from the Pharo configuration browser. Just select *"Tools"* -> *"Configuration Browser"* from the world menu, enter "WKHTML2PDF" and install the stable version. \r\rAlternatively to install the packages manually into your Pharo image just evaluate:\r\r    Gofer new\r        url: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main\';\r        package: \'ConfigurationOfNBSQLite3\';\r        load.\r    ((Smalltalk at: #ConfigurationOfNBSQLite3) project stableVersion) load.\r\rIf you need access to the SQLite3 database engine you need at a minimum the "NBSQLite3-Core" package which is loaded by the ConfigurationOfNBSQLite3 class. \r\rThis package includes all necessary  API to access the sqlite engine. \r\r## Use in your own application\r\r### Selecting the engine\rInitially you have to select the engine that you want to use. Either you want to use the WKHTML2PDF library or the executable.\r\r\tHTML2PDFConverter useExecutable. \r\ror \r\r\tHTML2PDFConverter useLibrary. \r\rThe executable is the default.\r\r### Converting\rNow you can convert an HTML file or an URL into a PDF document:\r\r\tHTML2PDFConverter \r\t\t\tconvert: \'http://www.pharo.org\'\r\t\t    toFile: \'pharo.pdf\'\r\t\rwill convert the Pharo homepage to a pdf document.\r\t\t\r# Packages\r\r- *WKHTML2PDF-Core* - the core package required to use the project\r- *WKHTML2PDF-Tests-Core* - includes SUnit tests for the core project\r\r# Testing\rThe package comes with tests in the package ***WKHTML2PDF-Tests-Core***. Just use the SUnit TestRunner to run them.\r\r \r   ',				#stamp : 'TorstenBergmann 12/19/2014 10:16'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfWKHTML2PDF,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @8				}			],			#category : #ConfigurationOfWKHTML2PDF,			#package : #ConfigurationOfWKHTML2PDF,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2018-02-22T14:00:11.257014-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #DevelopmentSupport,			#protocol : #'development support',			#sourceCode : 'DevelopmentSupport\r\r"See the methods in the \'development support\' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."\r\t<apiDocumentation>\r',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2018-02-22T14:00:11.259199-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #'baseConfigurationClassIfAbsent:',			#protocol : #private,			#sourceCode : 'baseConfigurationClassIfAbsent: aBlock\r\r\t^Smalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\tself ensureMetacelloBaseConfiguration.\r\t\t\tSmalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].\r',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2018-02-22T14:00:11.261455-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #catalogChangeLog,			#protocol : #catalog,			#sourceCode : 'catalogChangeLog\r\t"Returns a paragraph describing the most important changes in the configuration class."\r\t^ \'2.0 is current version for Pharo 4 and 5\'',			#stamp : 'TorstenBergmann 9/24/2015 12:52',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2018-02-22T14:00:11.263359-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #catalogContactInfo,			#protocol : #catalog,			#sourceCode : 'catalogContactInfo\r\t"Returns a paragraph describing contact information such as email, mailing lists and website."\r\t^ \'You can contact the author on the Pharo-dev mailing list\'',			#stamp : 'TorstenBergmann 9/24/2015 12:48',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2018-02-22T14:00:11.265563-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #catalogDescription,			#protocol : #catalog,			#sourceCode : 'catalogDescription\r\t"Returns a paragraph describing the project"\r\t^ \'Render HTML into PDF and various image formats using the (external) Qt WebKit rendering engine directly from Pharo.\'',			#stamp : 'TorstenBergmann 9/24/2015 12:49',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2018-02-22T14:00:11.266905-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #catalogKeyClassesAndExample,			#protocol : #catalog,			#sourceCode : 'catalogKeyClassesAndExample\r\t"Returns a paragraph or more describing the key classes of your project. You can use Pillar/Pier syntax to layout out the text i.e., ==Code== and - for bullet."\r\t^ \'Please check out http://wkhtmltopdf.org/ to install the necessary software on your machine. Note that the library/executable should be accessible to Pharo. Often it is enough by providing the binary files next to the Pharo VM executable.\r\rFirst select the engine:\r\t\r\tHTML2PDFConverter useExecutable. \r\ror \r\r  HTML2PDFConverter useLibrary. \r\rand then convert:\r\r  HTML2PDFConverter \r        convert: \'\'http://www.pharo.org\'\'\r        toFile: \'\'pharo.pdf\'\'\'',			#stamp : 'TorstenBergmann 9/24/2015 12:51',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2018-02-22T14:00:11.268399-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #catalogKeywords,			#protocol : #catalog,			#sourceCode : 'catalogKeywords\r\t"Returns an array of symbols"\r\t^ #(pdf html reporting) ',			#stamp : 'TorstenBergmann 9/24/2015 12:48',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2018-02-22T14:00:11.27042-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #ensureMetacello,			#protocol : #private,			#sourceCode : 'ensureMetacello\r\r\t(self baseConfigurationClassIfAbsent: []) ensureMetacello',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2018-02-22T14:00:11.271948-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #ensureMetacelloBaseConfiguration,			#protocol : #private,			#sourceCode : 'ensureMetacelloBaseConfiguration\r\r\tSmalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\t| repository version |\r\t\t\trepository := MCHttpRepository location: \'http://seaside.gemstone.com/ss/metacello\' user: \'\' password: \'\'.\r\t\t\trepository\r\t\t\t\tversionReaderForFileNamed: \'Metacello-Base-DaleHenrichs.2.mcz\'\r\t\t\t\tdo: [ :reader | \r\t\t\t\t\tversion := reader version.\r\t\t\t\t\tversion load.\r\t\t\t\t\tversion workingCopy repositoryGroup addRepository: repository ] ]',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2018-02-22T14:00:11.274134-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #isMetacelloConfig,			#protocol : #'metacello tool support',			#sourceCode : 'isMetacelloConfig\r\t"Answer true and the Metacello tools will operate on you"\r\t\r\t^true',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2018-02-22T14:00:11.275735-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #load,			#protocol : #loading,			#sourceCode : 'load\r\t"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."\r\r\t"self load"\r\r\t<apiDocumentation>\r\t^(self project version: #stable) load',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2018-02-22T14:00:11.277045-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #loadBleedingEdge,			#protocol : #loading,			#sourceCode : 'loadBleedingEdge\r\t"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."\r\r\t"self loadBleedingEdge"\r\r\t<apiDocumentation>\r\t^(self project version: #bleedingEdge) load',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2018-02-22T14:00:11.278304-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #loadDevelopment,			#protocol : #loading,			#sourceCode : 'loadDevelopment\r\t"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."\r\r\t"self loadDevelopment"\r\r\t<apiDocumentation>\r\t^(self project version: #development) load',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2018-02-22T14:00:11.280242-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^self new project',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2018-02-22T14:00:11.281502-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfWKHTML2PDF class',				#isMetaSide : true			},			#name : #validate,			#protocol : #'development support',			#sourceCode : 'validate\r\t"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). \r\tErrors identify specification issues that will result in unexpected behaviour when you load the configuration. \r\tCritical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.\r\tWarnings identify specification issues that are technically correct, but are worth take a look at."\r\r\t"self validate"\r\r\t<apiDocumentation>\r\tself ensureMetacello.\r\t^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2018-02-22T14:00:11.283047-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'baseline01:',			#protocol : #baselines,			#sourceCode : 'baseline01: spec\r\t<version: \'0.1-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main/\'.\r\t\tspec project: \'OSProcess\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfOSProcess;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://www.squeaksource.com/MetacelloRepository\' ].\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: [\r\t\t\t\tspec requires: #(\'OSProcess\' ). ];\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: [\r\t\t\t\tspec requires: #(\'WKHTML2PDF-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'default\' with: #(\'Core\' \'Tests\' );\r\t\t\tgroup: \'Core\' with: #(\'WKHTML2PDF-Core\' );\r\t\t\tgroup: \'Tests\' with: #(\'WKHTML2PDF-Tests-Core\' ). ].\r',			#stamp : 'TorstenBergmann 12/19/2014 10:39',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2018-02-22T14:00:11.284439-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'baseline02:',			#protocol : #baselines,			#sourceCode : 'baseline02: spec\r\t<version: \'0.2-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main/\'.\r\t\tspec project: \'OSProcess\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfOSProcess;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://www.squeaksource.com/MetacelloRepository\' ].\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: [\r\t\t\t\tspec requires: #(\'OSProcess\' ). ];\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: [\r\t\t\t\tspec requires: #(\'WKHTML2PDF-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'default\' with: #(\'Core\' \'Tests\' );\r\t\t\tgroup: \'Core\' with: #(\'WKHTML2PDF-Core\' );\r\t\t\tgroup: \'Tests\' with: #(\'WKHTML2PDF-Tests-Core\' ). ].\r',			#stamp : 'TorstenBergmann 9/24/2015 12:46',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2018-02-22T14:00:11.286517-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'baseline03:',			#protocol : #baselines,			#sourceCode : 'baseline03: spec\r\t<version: \'0.3-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main/\'.\r\t\tspec project: \'OSProcess\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfOSProcess;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://www.squeaksource.com/MetacelloRepository\' ].\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: [\r\t\t\t\tspec requires: #(\'OSProcess\' ). ];\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: [\r\t\t\t\tspec requires: #(\'WKHTML2PDF-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'default\' with: #(\'Core\' \'Tests\' );\r\t\t\tgroup: \'Core\' with: #(\'WKHTML2PDF-Core\' );\r\t\t\tgroup: \'Tests\' with: #(\'WKHTML2PDF-Tests-Core\' ). ].\r',			#stamp : 'TorstenBergmann 11/14/2016 08:55',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2018-02-22T14:00:11.28791-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'baseline04:',			#protocol : #baselines,			#sourceCode : 'baseline04: spec\r\t<version: \'0.4-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://smalltalkhub.com/mc/TorstenBergmann/WKHTML2PDF/main/\'.\r\t\tspec project: \'OSProcess\' with: [\r\t\t\t\tspec\r\t\t\t\t\tclassName: #ConfigurationOfOSProcess;\r\t\t\t\t\tversionString: #\'stable\';\r\t\t\t\t\trepository: \'http://www.squeaksource.com/MetacelloRepository\' ].\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: [\r\t\t\t\tspec requires: #(\'OSProcess\' ). ];\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: [\r\t\t\t\tspec requires: #(\'WKHTML2PDF-Core\' ). ].\r\t\tspec \r\t\t\tgroup: \'default\' with: #(\'Core\' \'Tests\' );\r\t\t\tgroup: \'Core\' with: #(\'WKHTML2PDF-Core\' );\r\t\t\tgroup: \'Tests\' with: #(\'WKHTML2PDF-Tests-Core\' ). ].\r',			#stamp : 'TorstenBergmann 11/14/2016 08:39',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2018-02-22T14:00:11.28956-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #customProjectAttributes,			#protocol : #accessing,			#sourceCode : 'customProjectAttributes\r\t "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #\'Condition1\' with: #\'Condition2.\r\tFor more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"\r\r\t^ #().',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2018-02-22T14:00:11.290901-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'development:',			#protocol : #'symbolic versions',			#sourceCode : 'development: spec\r\t<symbolicVersion: #\'development\'>\r\r\tspec for: #\'common\' version: \'0.4-baseline\'.\r',			#stamp : 'TorstenBergmann 11/14/2016 08:39',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2018-02-22T14:00:11.292285-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^ project ifNil: [ \r\t\t"Bootstrap Metacello if it is not already loaded"\r\t\t(self class baseConfigurationClassIfAbsent: []) ensureMetacello.\r\t\t"Construct Metacello project"\r\t\tproject := MetacelloMCProject new projectAttributes: self customProjectAttributes. \r\t\t(Smalltalk at: #MetacelloVersionConstructor) on: self project: project.\r\t\tproject loadType: #linear. "change to #atomic if desired"\r\t\tproject ]',			#stamp : 'TorstenBergmann 12/19/2014 09:40',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2018-02-22T14:00:11.294369-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'stable:',			#protocol : #'symbolic versions',			#sourceCode : 'stable: spec\r\t<symbolicVersion: #\'stable\'>\r\r\tspec for: #\'common\' version: \'3.0\'.\r\tspec for: #\'pharo3.x\' version: \'2.0\'. \r\tspec for: #\'pharo4.x\' version: \'2.0\'.\r',			#stamp : 'TorstenBergmann 11/14/2016 08:42',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2018-02-22T14:00:11.295964-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'version10:',			#protocol : #versions,			#sourceCode : 'version10: spec\r\t<version: \'1.0\' imports: #(\'0.1-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 1.0\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'12/19/2014 10:39\'.\r\t\tspec project: \'OSProcess\' with: \'4.5.12\'.\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: \'WKHTML2PDF-Core-TorstenBergmann.14\';\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: \'WKHTML2PDF-Tests-Core-TorstenBergmann.1\'. ].\r',			#stamp : 'TorstenBergmann 12/19/2014 10:39',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2018-02-22T14:00:11.297347-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'version20:',			#protocol : #versions,			#sourceCode : 'version20: spec\r\t<version: \'2.0\' imports: #(\'0.2-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 2.0\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'24/9/2015 10:39\'.\r\t\tspec project: \'OSProcess\' with: #\'stable\'.\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: \'WKHTML2PDF-Core-TorstenBergmann.14\';\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: \'WKHTML2PDF-Tests-Core-TorstenBergmann.1\'. ].\r',			#stamp : 'TorstenBergmann 9/24/2015 12:46',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2018-02-22T14:00:11.29874-03:00' ],		#trigger : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfWKHTML2PDF,				#isMetaSide : false			},			#name : #'version30:',			#protocol : #versions,			#sourceCode : 'version30: spec\r\t<version: \'3.0\' imports: #(\'0.3-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'stable\'.\r\t\tspec description: \'version 3.0\'.\r\t\tspec author: \'TorstenBergmann\'.\r\t\tspec timestamp: \'24/9/2015 10:39\'.\r\t\tspec project: \'OSProcess\' with: #\'stable\'.\r\t\tspec \r\t\t\tpackage: \'WKHTML2PDF-Core\' with: \'WKHTML2PDF-Core-TorstenBergmann.20\';\r\t\t\tpackage: \'WKHTML2PDF-Tests-Core\' with: \'WKHTML2PDF-Tests-Core-TorstenBergmann.1\'. ].\r',			#stamp : 'TorstenBergmann 11/14/2016 08:55',			#package : #ConfigurationOfWKHTML2PDF		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:00:20.128311-03:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ConfigurationOfOSProcess-hsj.44'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2018-02-22T14:00:20.261069-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfOSProcess\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ConfigurationOfOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfOSProcess,						#isMetaSide : false					},					#name : #project,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfOSProcess,					#isMetaSide : false				},				#parent : @7,				#content : 'OSProcess provides access to operating system functions, including pipes and child process creation. It is implemented using pluggable primitives in a shared library for Unix or Linux, and a DLL for Windows. The Smalltalk code, including the classes which implement pluggable primitives for Unix or Win32 operating system functions, may be loaded into any Squeak image, but the primitives are only useful on Unix and Windows systems. Placeholder classes are provided for MacOS, OS/2 and RiscOS, but are not yet implemented.\r\rConfigurationOfOSProcess project stableVersion load.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfOSProcess,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'OSProcess provides access to operating system functions, including pipes and child process creation. It is implemented using pluggable primitives in a shared library for Unix or Linux, and a DLL for Windows. The Smalltalk code, including the classes which implement pluggable primitives for Unix or Win32 operating system functions, may be loaded into any Squeak image, but the primitives are only useful on Unix and Windows systems. Placeholder classes are provided for MacOS, OS/2 and RiscOS, but are not yet implemented.\r\rConfigurationOfOSProcess project stableVersion load.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2018-02-22T14:00:20.262075-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ConfigurationOfOSProcess,		#affectedPackageName : #ConfigurationOfOSProcess	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2018-02-22T14:00:20.287519-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfOSProcess\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ConfigurationOfOSProcess\''			},			#name : #ConfigurationOfOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfOSProcess,						#isMetaSide : false					},					#name : #project,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'OSProcess provides access to operating system functions, including pipes and child process creation. It is implemented using pluggable primitives in a shared library for Unix or Linux, and a DLL for Windows. The Smalltalk code, including the classes which implement pluggable primitives for Unix or Win32 operating system functions, may be loaded into any Squeak image, but the primitives are only useful on Unix and Windows systems. Placeholder classes are provided for MacOS, OS/2 and RiscOS, but are not yet implemented.\r\rConfigurationOfOSProcess project stableVersion load.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfOSProcess,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @8				}			],			#category : #ConfigurationOfOSProcess,			#package : #ConfigurationOfOSProcess,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2018-02-22T14:00:20.353997-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #'bootstrapPackage:from:',			#protocol : #private,			#sourceCode : 'bootstrapPackage: aString from: aPath \r\t| repository version |\r\trepository := MCHttpRepository\r\t\t\t\tlocation: aPath\r\t\t\t\tuser: \'\'\r\t\t\t\tpassword: \'\'.\r\trepository\r\t\tversionReaderForFileNamed: aString , \'.mcz\'\r\t\tdo: [:reader | \r\t\t\tversion := reader version.\r\t\t\tversion load.\r\t\t\tversion workingCopy repositoryGroup addRepository: repository]',			#stamp : 'MiguelCoba 1/12/2010 23:39',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2018-02-22T14:00:20.356847-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #ensureMetacello,			#protocol : #private,			#sourceCode : 'ensureMetacello\r\t"Bootstrap Gofer (if necessary), bootstrap ConfigurationOfMetacello (using old Gofer API), then load the latest \r\tversion of Metacello itself."\r\r\tSmalltalk at: #MetacelloProject ifAbsent: [\r\t\tSmalltalk at: #Gofer ifAbsent: [\r\t\t\t"Current version of Gofer from which to bootstrap - as of 1.0-beta.15"\r\t\t\tself bootstrapPackage: \'Gofer-lr.83\' from: \'http://seaside.gemtalksystems.com/ss/metacello\' ].\r\t\tSmalltalk at: #Gofer ifPresent: [:goferClass | | gofer |\r\t\t\tgofer := goferClass new\r\t\t\t\turl: \'http://seaside.gemtalksystems.com/ss/metacello\';\r\t\t\t\tyourself.\r\t\t\t[ gofer addPackage: \'ConfigurationOfMetacello\' ] on: Warning do: [:ex | ex resume ].\r\t\t\tgofer load ].\r\t\t"load \'default\' group of Metacello"\r\t\t(Smalltalk at: #ConfigurationOfMetacello) perform: #load ]',			#stamp : 'hsj 1/17/2018 07:06',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2018-02-22T14:00:20.359997-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #isMetacelloConfig,			#protocol : #'metacello tool support',			#sourceCode : 'isMetacelloConfig\r\t"Answer true and the Metacello tools will operate on you"\r\t\r\t^true',			#stamp : 'MiguelCoba 1/12/2010 23:39',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2018-02-22T14:00:20.363544-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #lastMetacelloVersionLoad,			#protocol : #'metacello tool support',			#sourceCode : 'lastMetacelloVersionLoad\r\t"Answer the last version loaded and the list of packages loaded for that version."\r\r\tLastVersionLoad == nil ifTrue: [ LastVersionLoad := nil -> \'default\' ].\r\t^LastVersionLoad',			#stamp : 'MiguelCoba 1/12/2010 23:39',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2018-02-22T14:00:20.365522-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #load,			#protocol : #loading,			#sourceCode : 'load\r\t"self load"\r\r\t| r osp |\r\tr := self project latestVersion load.\r\t(osp := Smalltalk at: #ThisOSProcess) notNil\r\t\tifTrue: [ "initialize" osp startUp: true ]',			#stamp : 'ThierryGoubier 7/27/2017 22:36',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2018-02-22T14:00:20.367246-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #'metacelloVersion:loads:',			#protocol : #'metacello tool support',			#sourceCode : 'metacelloVersion: versionString loads: anArrayOrString\r\t"Stash the last version loaded and the list of packages loaded for that version. The list\r\t of packages will be used by the tools when doing \'Load Package Version\'"\r\r\tLastVersionLoad := versionString -> anArrayOrString',			#stamp : 'MiguelCoba 1/12/2010 23:39',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2018-02-22T14:00:20.369326-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfOSProcess class',				#isMetaSide : true			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^self new project',			#stamp : 'MiguelCoba 1/12/2010 23:39',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2018-02-22T14:00:20.373278-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'baseline4312:',			#protocol : #baselines,			#sourceCode : 'baseline4312: spec\r\t<version: \'4.3.12-baseline\'>\r\t\r\tspec for: #common do: [\r\t\tspec blessing: #baseline.\r\t\tspec description: \'Initial baseline for OSProcess\'.\r\t\tspec repository: \'http://www.squeaksource.com/OSProcess\' ].\r\t\r\tspec for: #squeakCommon do: [\r\t\tspec\r\t\t\trepository: \'http://www.squeaksource.com/OSProcess\';\r\t\t\tpackage: \'OSProcess-Base\';\r   \t\t\tpackage: \'OSProcess-AIO\' with: [ spec requires: \'OSProcess-Base\' ];\r  \t\t\tpackage: \'OSProcess-Mac\' with: [ spec requires: \'OSProcess-Base\' ];\r  \t\t\tpackage: \'OSProcess-OS2\' with: [ spec requires: \'OSProcess-Base\' ];\r  \t\t\tpackage: \'OSProcess-RiscOS\' with: [ spec requires: \'OSProcess-Base\' ];\r  \t\t\tpackage: \'OSProcess-Unix\' with: [ spec requires: \'OSProcess-Base\' ];\r  \t\t\tpackage: \'OSProcess-Win32\' with: [ spec requires: \'OSProcess-Base\' ];\r  \t\t\tpackage: \'OSProcess-Tests\' with: [ spec requires: \'OSProcess-Base\' ] ].\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tgroup: \'default\' with: #(\'OSProcess\' \'OSProcess-AIO\' \'Tests\');\r\t\t\tgroup: \'OSProcess\' with: #(\'OSProcess-Base\' \'Platforms\');\r\t\t\tgroup: \'Platforms\' with: \'OSProcess-Mac\';\r\t\t\tgroup: \'Platforms\' with: \'OSProcess-OS2\';\r\t\t\tgroup: \'Platforms\' with: \'OSProcess-RiscOS\';\r\t\t\tgroup: \'Platforms\' with: \'OSProcess-Unix\';\r\t\t\tgroup: \'Platforms\' with: \'OSProcess-Win32\';\r\t\t\tgroup: \'Tests\' with: \'OSProcess-Tests\' ].',			#stamp : 'MiguelCoba 2/19/2011 01:33',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2018-02-22T14:00:20.37631-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'baseline43:',			#protocol : #baselines,			#sourceCode : 'baseline43: spec\r\t<version: \'4.3-baseline\'>\r\t\r\tspec for: #common do: [\r\t\tspec blessing: #baseline.\r\t\tspec description: \'Initial baseline for OSProcess\'.\r\t\tspec repository: \'http://www.squeaksource.com/OSProcess\' ].\r\t\r\tspec for: #squeakCommon do: [\r\t\tspec\r\t\t\trepository: \'http://www.squeaksource.com/OSProcess\';\r\t\t\tpackage: \'OSProcess\';\r  \t\t\tpackage: \'Tests-OSProcess\' with: [ spec requires: \'OSProcess\' ] ].\r\t\r\tspec for: #common do: [\r\t\tspec\r\t\t\tgroup: \'default\' with: \'OSProcess\';\r\t\t\tgroup: \'Tests\' with: \'Tests-OSProcess\' ].',			#stamp : 'MiguelCoba 1/13/2010 13:10',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2018-02-22T14:00:20.380024-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'baseline446:',			#protocol : #baselines,			#sourceCode : 'baseline446: spec\r\t<version: \'4.4.6-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec description: \'Load the OSProcess-* packages instead of the OSProcess all-in-one package.\r\rDavid Lewis has said that these packages will be kept in sync with the al-in-one and this will give us greater flexibility in what to load.\r\rFor example, we can now optionally load the tests. This seemed possible with the previous version, but actually the tests were always loaded as part of the all-in-one\'.\r\t\tspec repository: \'http://www.squeaksource.com/OSProcess\'.\r\t\tspec project: \'Pipeability\' with: [\r\t\t\tspec\r\t\t\t\trepository: \'http://www.squeaksource.com/MetacelloRepository\';\r\t\t\t\tclassName: \'ConfigurationOfCommandShell\';\r\t\t\t\tloads: #(\'Piping\') ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-AIO\';\r\t\t\tpackage: \'OSProcess-Base\' with: [ spec requires: #(\'OSProcess-AIO\') ];\r\t\t\tpackage: \'OSProcess-OS2\' with: [ spec requires: #(\'OSProcess-Base\') ];\r\t\t\tpackage: \'OSProcess-Win32\' with: [ spec requires: #(\'OSProcess-Base\') ];\r\t\t\tpackage: \'OSProcess-Unix\' with: [ spec requires: #(\'OSProcess-Base\') ];\r\t\t\tpackage: \'OSProcess-Mac\' with: [ spec requires: #(\'OSProcess-Base\') ];\r\t\t\tpackage: \'OSProcess-RiscOS\' with: [ spec requires: #(\'OSProcess-Base\') ];\r\t\t\tpackage: \'OSProcess-Tests\' with: [ spec requires: #(\'OSProcess-Base\') ].\r\t\tspec\r\t\t\tgroup: \'All OS\' with: #(\'OSProcess-OS2\' \'OSProcess-Win32\' \'OSProcess-Unix\' \'OSProcess-Mac\' \'OSProcess-RiscOS\');\r\t\t\tgroup: \'Core\' with: #(\'OSProcess-AIO\' \'OSProcess-Base\' \'All OS\');\r\t\t\tgroup: \'Core with Output\' with: #(\'Core\' \'Pipeability\');\r\t\t\tgroup: \'Tests\' with: #(\'OSProcess-Tests\' ). ].\r',			#stamp : 'SeanDeNigris 2/12/2013 10:05',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2018-02-22T14:00:20.38308-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'baseline44:',			#protocol : #baselines,			#sourceCode : 'baseline44: spec\r\t<version: \'4.4-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://www.squeaksource.com/OSProcess\'.\r\t\tspec \r\t\t\tpackage: \'OSProcess\';\r\t\t\tpackage: \'OSProcess-Tests\' with: [\r\t\t\t\tspec requires: #(\'OSProcess\' ). ].\r\t\tspec \r\t\t\tgroup: \'default\' with: #(\'OSProcess\' );\r\t\t\tgroup: \'Tests\' with: #(\'OSProcess-Tests\' ). ].\r',			#stamp : 'MiguelCoba 2/19/2011 01:53',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2018-02-22T14:00:20.38553-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #loadType,			#protocol : #private,			#sourceCode : 'loadType\r\r\tself flag: \'OSProcess\'\'s packages are highly interdependent (some circular), so we must load atomically for now. After these issues are resolved, this can be shanged to #linear\'.\r\t^ #atomic.',			#stamp : 'SeanDeNigris 2/12/2013 10:24',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2018-02-22T14:00:20.389639-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^ project ifNil: [ | constructor |\r\t\t"Bootstrap Metacello if it is not already loaded"\r\t\tself class ensureMetacello.\r\t\t"Construct Metacello project"\r\t\tconstructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.\r\t\tproject := constructor project.\r\t\tproject loadType: self loadType.\r\t\tproject ]',			#stamp : 'SeanDeNigris 7/6/2012 11:04',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2018-02-22T14:00:20.392161-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'stable:',			#protocol : #'symbolic versions',			#sourceCode : 'stable: spec\r\t<symbolicVersion: #\'stable\'>\r\r\tspec for: #\'common\' version: \'4.6.9\'.\r\tspec for: #\'pharo1.4.x\' version: \'4.4.6\'.\r\tspec for: #\'pharo2.x\' version: \'4.5.8\'.',			#stamp : 'ThierryGoubier 7/27/2017 22:59',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2018-02-22T14:00:20.398-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version4311:',			#protocol : #versions,			#sourceCode : 'version4311: spec\r\t<version: \'4.3.11\' imports: #(\'4.3-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec blessing: #development.\r\t\tspec description: \'Release 4.3.11\'.\r\t\tspec author: \'MiguelCoba\'.\r\t\tspec timestamp: \'01/14/2010 00:30\' ].\r\t\r\tspec for: #squeakCommon do: [\r\t\tspec\r\t\t  \tpackage: \'OSProcess\' with: \'OSProcess-dtl.53\';\r\t\t\tpackage: \'Tests-OSProcess\' with: \'Tests-OSProcess-dtl.20\' ].',			#stamp : 'MiguelCoba 1/14/2010 00:31',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2018-02-22T14:00:20.400867-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version4312:',			#protocol : #versions,			#sourceCode : 'version4312: spec\r\t<version: \'4.3.12\' imports: #(\'4.3.12-baseline\')>\r\t\r\tspec for: #common do: [\r\t\tspec blessing: #development.\r\t\tspec description: \'Release 4.3.12\'.\r\t\tspec author: \'dtl\'.\r\t\tspec timestamp: \'06/30/2010 19:55\' ].\r\t\r\tspec for: #squeakCommon do: [\r\t\tspec\r\t\t  \tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.4\';\r\t\t  \tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.1\';\r\t\t  \tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.1\';\r\t\t  \tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.1\';\r\t\t  \tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.1\';\r\t\t  \tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.3\';\r\t\t  \tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.2\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.1\' ].',			#stamp : 'MiguelCoba 2/19/2011 01:32',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2018-02-22T14:00:20.40383-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version440:',			#protocol : #versions,			#sourceCode : 'version440: spec\r\t<version: \'4.4.0\' imports: #(\'4.4-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Version 4.4.0\'.\r\t\tspec author: \'MiguelCoba\'.\r\t\tspec timestamp: \'2/19/2011 01:59\'.\r\t\tspec \r\t\t\tpackage: \'OSProcess\' with: \'OSProcess-dtl.59\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.4\'. ].\r',			#stamp : 'mt 6/9/2011 13:25:13.015',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2018-02-22T14:00:20.407658-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version442:',			#protocol : #versions,			#sourceCode : 'version442: spec\r\t<version: \'4.4.2\' imports: #(\'4.4-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Version 4.4.2\'.\r\t\tspec author: \'MiguelCoba\'.\r\t\tspec timestamp: \'5/29/2011 12:34\'.\r\t\tspec \r\t\t\tpackage: \'OSProcess\' with: \'OSProcess-dtl.61\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.4\'. ].\r',			#stamp : 'mt 6/9/2011 13:25:09.479',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2018-02-22T14:00:20.410607-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version445:',			#protocol : #versions,			#sourceCode : 'version445: spec\r\t<version: \'4.4.5\' imports: #(\'4.4-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #release.\r\t\tspec description: \'Version 4.4.5\'.\r\t\tspec author: \'Marcel Taeumel\'.\r\t\tspec timestamp: \'9/28/2011 14:00\'.\r\t\tspec \r\t\t\tpackage: \'OSProcess\' with: \'OSProcess-dtl.65\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.7\'. ].\r',			#stamp : 'mt 9/28/2011 14:14:43.783',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2018-02-22T14:00:20.414261-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version446:',			#protocol : #versions,			#sourceCode : 'version446: spec\r\t<version: \'4.4.6\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'SeanDeNigris\'.\r\t\tspec timestamp: \'7/5/2012 12:57\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'1.0\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.9\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.20\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.1\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.7\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.12\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.1\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.4\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.1\'. ].\r',			#stamp : 'SeanDeNigris 2/12/2013 10:06',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2018-02-22T14:00:20.417354-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version4511:',			#protocol : #versions,			#sourceCode : 'version4511: spec\r\t<version: \'4.5.11\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'6/18/2014 16:42\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.8\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.11\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.43\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.11\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.19\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\'. ].\r',			#stamp : 'ThierryGoubier 10/5/2014 09:34',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2018-02-22T14:00:20.419906-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version4512:',			#protocol : #versions,			#sourceCode : 'version4512: spec\r\t<version: \'4.5.12\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'6/18/2014 16:42\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.9\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.11\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.45\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.11\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.20\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\'. ].\r',			#stamp : 'ThierryGoubier 10/10/2014 16:38',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2018-02-22T14:00:20.424102-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version4513:',			#protocol : #versions,			#sourceCode : 'version4513: spec\r\t<version: \'4.5.13\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'6/18/2014 16:42\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.9\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.11\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.45\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.12\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.20\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\'. ].\r',			#stamp : 'ThierryGoubier 2/1/2015 10:05',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2018-02-22T14:00:20.42681-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version457:',			#protocol : #versions,			#sourceCode : 'version457: spec\r\t<version: \'4.5.7\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'9/23/2013 10:36\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.7\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.11\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.37\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.9\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.17\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\'. ].\r',			#stamp : 'ThierryGoubier 9/23/2013 10:36',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2018-02-22T14:00:20.430854-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version458:',			#protocol : #versions,			#sourceCode : 'version458: spec\r\t<version: \'4.5.8\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'9/23/2013 10:36\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.7\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.11\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.39\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.9\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.17\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\'. ].\r',			#stamp : 'ThierryGoubier 10/24/2013 17:38',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2018-02-22T14:00:20.433556-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version45:',			#protocol : #versions,			#sourceCode : 'version45: spec\r\t<version: \'4.5\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'StephaneDucasse\'.\r\t\tspec timestamp: \'10/02/2013 12:57\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'1.1\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.10\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.27\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.9\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.15\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.5\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\'. ].\r',			#stamp : 'SeanDeNigris 2/12/2013 10:07',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2018-02-22T14:00:20.436648-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version462:',			#protocol : #versions,			#sourceCode : 'version462: spec\r\t<version: \'4.6.2\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'6/18/2014 16:42\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.12\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.49\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.13\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.23\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.14\'. ].\r',			#stamp : 'ThierryGoubier 4/25/2015 18:23',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2018-02-22T14:00:20.440522-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version463:',			#protocol : #versions,			#sourceCode : 'version463: spec\r\t<version: \'4.6.3\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Update to latest package versions\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'6/17/2015 20:06\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.13\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.50\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.14\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.24\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.14\'. ].\r',			#stamp : 'ThierryGoubier 6/18/2015 07:22',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2018-02-22T14:00:20.443534-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version464:',			#protocol : #versions,			#sourceCode : 'version464: spec\r\t<version: \'4.6.4\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Updated to CommandShell 4.6.15\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'7/6/2015 19:13\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.15\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.8\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-dtl.51\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.14\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.24\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-dtl.14\'. ].\r',			#stamp : 'ThierryGoubier 7/6/2015 19:14',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2018-02-22T14:00:20.447204-03:00' ],		#trigger : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfOSProcess,				#isMetaSide : false			},			#name : #'version469:',			#protocol : #versions,			#sourceCode : 'version469: spec\r\t<version: \'4.6.9\' imports: #(\'4.4.6-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'Updated to version 4.6.9\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'7/27/2017 22:24\'.\r\t\tspec project: \'Pipeability\' with: [ spec version: \'4.6.20\' ].\r\t\tspec \r\t\t\tpackage: \'OSProcess-AIO\' with: \'OSProcess-AIO-dtl.9\';\r\t\t\tpackage: \'OSProcess-Base\' with: \'OSProcess-Base-ThierryGoubier.58\';\r\t\t\tpackage: \'OSProcess-Mac\' with: \'OSProcess-Mac-dtl.2\';\r\t\t\tpackage: \'OSProcess-OS2\' with: \'OSProcess-OS2-dtl.2\';\r\t\t\tpackage: \'OSProcess-RiscOS\' with: \'OSProcess-RiscOS-dtl.2\';\r\t\t\tpackage: \'OSProcess-Tests\' with: \'OSProcess-Tests-dtl.15\';\r\t\t\tpackage: \'OSProcess-Unix\' with: \'OSProcess-Unix-dtl.24\';\r\t\t\tpackage: \'OSProcess-Win32\' with: \'OSProcess-Win32-ThierryGoubier.15\'. ].\r',			#stamp : 'ThierryGoubier 10/16/2017 21:03',			#package : #ConfigurationOfOSProcess		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:00:21.26919-03:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ConfigurationOfCommandShell-ThierryGoubier.23'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2018-02-22T14:00:21.415934-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfCommandShell\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ConfigurationOfCommandShell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfCommandShell,						#isMetaSide : false					},					#name : #project,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfCommandShell class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfCommandShell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfCommandShell,					#isMetaSide : false				},				#parent : @7,				#content : 'ConfigurationOfCommandShell project stableVersion load',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfCommandShell,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'ConfigurationOfCommandShell project stableVersion load',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2018-02-22T14:00:21.417307-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ConfigurationOfCommandShell,		#affectedPackageName : #ConfigurationOfCommandShell	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2018-02-22T14:00:21.448704-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ConfigurationOfCommandShell\r\tinstanceVariableNames: \'project\'\r\tclassVariableNames: \'LastVersionLoad\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ConfigurationOfCommandShell\''			},			#name : #ConfigurationOfCommandShell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfCommandShell,						#isMetaSide : false					},					#name : #project,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ConfigurationOfCommandShell class\r\tinstanceVariableNames: \'\''				},				#name : #'ConfigurationOfCommandShell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ConfigurationOfCommandShell,					#isMetaSide : false				},				#parent : @8,				#content : 'ConfigurationOfCommandShell project stableVersion load',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ConfigurationOfCommandShell,						#isMetaSide : false					},					#name : #LastVersionLoad,					#parent : @8				}			],			#category : #ConfigurationOfCommandShell,			#package : #ConfigurationOfCommandShell,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2018-02-22T14:00:21.52044-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #DevelopmentSupport,			#protocol : #'development support',			#sourceCode : 'DevelopmentSupport\r\r"See the methods in the \'development support\' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."\r\t<apiDocumentation>\r',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2018-02-22T14:00:21.523428-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #'baseConfigurationClassIfAbsent:',			#protocol : #private,			#sourceCode : 'baseConfigurationClassIfAbsent: aBlock\r\r\t^Smalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\tself ensureMetacelloBaseConfiguration.\r\t\t\tSmalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].\r',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2018-02-22T14:00:21.525465-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #ensureMetacello,			#protocol : #private,			#sourceCode : 'ensureMetacello\r\r\t(self baseConfigurationClassIfAbsent: []) ensureMetacello',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2018-02-22T14:00:21.526644-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #ensureMetacelloBaseConfiguration,			#protocol : #private,			#sourceCode : 'ensureMetacelloBaseConfiguration\r\r\tSmalltalk\r\t\tat: #MetacelloBaseConfiguration\r\t\tifAbsent: [ \r\t\t\t| repository version |\r\t\t\trepository := MCHttpRepository location: \'http://seaside.gemstone.com/ss/metacello\' user: \'\' password: \'\'.\r\t\t\trepository\r\t\t\t\tversionReaderForFileNamed: \'Metacello-Base-DaleHenrichs.2.mcz\'\r\t\t\t\tdo: [ :reader | \r\t\t\t\t\tversion := reader version.\r\t\t\t\t\tversion load.\r\t\t\t\t\tversion workingCopy repositoryGroup addRepository: repository ] ]',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2018-02-22T14:00:21.527539-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #isMetacelloConfig,			#protocol : #'metacello tool support',			#sourceCode : 'isMetacelloConfig\r\t"Answer true and the Metacello tools will operate on you"\r\t\r\t^true',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2018-02-22T14:00:21.52834-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #load,			#protocol : #loading,			#sourceCode : 'load\r\t"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."\r\r\t"self load"\r\r\t<apiDocumentation>\r\t^(self project version: #stable) load',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2018-02-22T14:00:21.529096-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #loadBleedingEdge,			#protocol : #loading,			#sourceCode : 'loadBleedingEdge\r\t"Load the latest versions of the mcz files defined for this project. It is not likely that the #bleedingEdge has been tested."\r\r\t"self loadBleedingEdge"\r\r\t<apiDocumentation>\r\t^(self project version: #bleedingEdge) load',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2018-02-22T14:00:21.531327-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #loadDevelopment,			#protocol : #loading,			#sourceCode : 'loadDevelopment\r\t"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."\r\r\t"self loadDevelopment"\r\r\t<apiDocumentation>\r\t^(self project version: #development) load',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2018-02-22T14:00:21.532115-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^self new project',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2018-02-22T14:00:21.532922-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ConfigurationOfCommandShell class',				#isMetaSide : true			},			#name : #validate,			#protocol : #'development support',			#sourceCode : 'validate\r\t"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). \r\tErrors identify specification issues that will result in unexpected behaviour when you load the configuration. \r\tCritical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.\r\tWarnings identify specification issues that are technically correct, but are worth take a look at."\r\r\t"self validate"\r\r\t<apiDocumentation>\r\tself ensureMetacello.\r\t^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2018-02-22T14:00:21.534392-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'baseline10:',			#protocol : #baselines,			#sourceCode : 'baseline10: spec\r\t<version: \'1.0-baseline\'>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'baseline\'.\r\t\tspec repository: \'http://www.squeaksource.com/CommandShell\'.\r\t\tspec project: \'OSProcess\' with: [\r\t\t\tspec\r\t\t\t\tclassName: \'ConfigurationOfOSProcess\';\r\t\t\t\tloads: #(\'Core\');\r\t\t\t\trepository: \'http://www.squeaksource.com/MetacelloRepository\' ].\r\t\tspec\r\t\t\tpackage: \'CommandShell-Base\' with: [ \r\t\t\t\t"Base actually requires the following packages, but the dependency is circular, so we\'ll include until it\'\'s fixed"\r\t\t\t\tspec includes: #(\'CommandShell-Commands\' \'CommandShell-Piping\' \'CommandShell-UI\') ];\r\t\t\tpackage: \'CommandShell-Commands\' with: [ spec requires: #(\'CommandShell-Base\') ];\r\t\t\tpackage: \'CommandShell-Morphic\' with: [ spec requires: #(\'CommandShell-Base\') ];\r\t\t\tpackage: \'CommandShell-Piping\' with: [ spec requires: #(\'CommandShell-Base\' \'OSProcess\') ];\r\t\t\tpackage: \'CommandShell-UI\' with: [ spec requires: #(\'CommandShell-Base\' \'CommandShell-Morphic\') ];\r\t\t\tpackage: \'CommandShellPharo\' with: [ spec requires: #(\'CommandShell-Base\') ];\r\t\t\tpackage: \'CommandShell-Tests\' with: [ spec requires: #(\'CommandShell-Base\' \'CommandShell-Piping\' \'OSProcess\') ].\r\r\t\tspec\r\t\t\tgroup: \'Core\' with: #(\'CommandShell-Base\' \'CommandShell-Commands\' \'CommandShell-Morphic\' \'CommandShell-Piping\' \'CommandShell-UI\' \'CommandShellPharo\' );\r\t\t\tgroup: \'Piping\' with: #(\'CommandShell-Piping\');\r\t\t\tgroup: \'Tests\' with: #(\'CommandShell-Tests\'). ].\r\t\r\tspec for: #\'squeak\' do: [\t\r\t\tspec package: \'CommandShell-MVC\' with: [ "Unknown dependencies" ] ].',			#stamp : 'SeanDeNigris 2/12/2013 10:52',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2018-02-22T14:00:21.535652-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'development:',			#protocol : #'symbolic versions',			#sourceCode : 'development: spec\r\t<symbolicVersion: #\'development\'>\r\r\tspec for: #\'common\' version: \'4.6.20\'.\r',			#stamp : 'ThierryGoubier 10/16/2017 21:04',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2018-02-22T14:00:21.538226-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #project,			#protocol : #accessing,			#sourceCode : 'project\r\r\t^ project ifNil: [ | constructor |\r\t\t"Bootstrap Metacello if it is not already loaded"\r\t\t(self class baseConfigurationClassIfAbsent: []) ensureMetacello.\r\t\t"Construct Metacello project"\r\t\tconstructor := (Smalltalk at: #MetacelloVersionConstructor) on: self.\r\t\tproject := constructor project.\r\t\tproject loadType: #linear. "change to #atomic if desired"\r\t\tproject ]',			#stamp : 'SeanDeNigris 7/5/2012 15:51',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2018-02-22T14:00:21.539627-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'stable:',			#protocol : #'symbolic versions',			#sourceCode : 'stable: spec\r\t<symbolicVersion: #\'stable\'>\r\r\tspec for: #\'common\' version: \'4.6.20\'.\r\tspec for: #\'pharo1.4.x\' version: \'1.0\'.',			#stamp : 'ThierryGoubier 10/16/2017 21:04',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2018-02-22T14:00:21.540968-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version10:',			#protocol : #versions,			#sourceCode : 'version10: spec\r\t<version: \'1.0\' imports: #(\'1.0-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'development\'.\r\t\tspec description: \'\'.\r\t\tspec author: \'SeanDeNigris\'.\r\t\tspec timestamp: \'7/5/2012 15:51\'.\r\t\tspec project: \'OSProcess\' with: [ spec version: \'4.4.6\' ].\r\t\tspec \r\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.23\';\r\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-dtl.10\';\r\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.1\';\r\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.10\';\r\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.9\';\r\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-dtl.9\' ].\r\t\t\r\tspec for: #\'pharo\' do: [\r\t\tspec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\t\r\tspec for: #\'squeak\' do: [\r\t\tspec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.2\' ].\r',			#stamp : 'SeanDeNigris 2/12/2013 10:52',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2018-02-22T14:00:21.542274-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version11:',			#protocol : #versions,			#sourceCode : 'version11: spec\r\t<version: \'1.1\' imports: #(\'1.0-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'\'.\r\t\tspec author: \'StephaneDucasse\'.\r\t\tspec timestamp: \'10/02/2013 12:57\'.\r\t\tspec project: \'OSProcess\' with: [ spec version: \'4.5\' ].\r\t\tspec \r\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.31\';\r\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-dtl.14\';\r\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\r\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.13\';\r\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-dtl.10\' ].\r\t\t\r\tspec for: #\'pharo\' do: [\r\t\tspec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\r\tspec for: #\'squeak\' do: [\r\t\tspec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ].',			#stamp : 'SeanDeNigris 2/12/2013 10:54',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2018-02-22T14:00:21.543585-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version4612:',			#protocol : #versions,			#sourceCode : 'version4612: spec\r\t<version: \'4.6.12\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'4/25/2015 18:19\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.6.2\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.41\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-ThierryGoubier.16\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.18\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-ThierryGoubier.12\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 4/25/2015 18:24',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2018-02-22T14:00:21.546529-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version4613:',			#protocol : #versions,			#sourceCode : 'version4613: spec\r\t<version: \'4.6.13\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'6/17/2015 20:09\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.6.3\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.42\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-ThierryGoubier.16\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.19\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-ThierryGoubier.12\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 6/17/2015 20:10',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2018-02-22T14:00:21.548044-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version4614:',			#protocol : #versions,			#sourceCode : 'version4614: spec\r\t<version: \'4.6.14\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'6/18/2015 07:22\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.6.4\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.43\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-ThierryGoubier.16\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.19\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-ThierryGoubier.12\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 6/18/2015 07:22',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2018-02-22T14:00:21.549344-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version4615:',			#protocol : #versions,			#sourceCode : 'version4615: spec\r\t<version: \'4.6.15\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'CommandShell 4.6.15\r\rBy Thierry Goubier: Reimplement CrLfFileEditor as subclass of Model to remove StringHolder reference.\r\rUse CrLfFileStream only if the preferred MultiByteFileStream is not present in the image (old images).\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'7/6/2015 19:14\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.6.4\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.44\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-dtl.18\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.19\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.13\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-dtl.13\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 7/6/2015 19:15',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2018-02-22T14:00:21.550678-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version4619:',			#protocol : #versions,			#sourceCode : 'version4619: spec\r\t<version: \'4.6.19\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'CommandShell 4.6.19\r\rBy Thierry Goubier: Handle Pharo deprecation of #ifNotNilDo:.\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'7/27/2017 22:51\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.6.9\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-ThierryGoubier.52\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-dtl.18\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-ThierryGoubier.20\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.13\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-dtl.13\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 7/27/2017 22:52',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2018-02-22T14:00:21.553625-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version4620:',			#protocol : #versions,			#sourceCode : 'version4620: spec\r\t<version: \'4.6.20\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ spec blessing: #release.\r\t\t\tspec\r\t\t\t\tdescription:\r\t\t\t\t\t\'CommandShell 4.6.20\r\rFix bug in file path name for CrLfFileEditor file save.\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'10/16/2017 20:57\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.6.9\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.53\';\r\t\t\t\tpackage: \'CommandShell-Commands\'\r\t\t\t\t\twith: \'CommandShell-Commands-dtl.19\';\r\t\t\t\tpackage: \'CommandShell-Morphic\'\r\t\t\t\t\twith: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\'\r\t\t\t\t\twith: \'CommandShell-Piping-ThierryGoubier.20\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.14\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-dtl.18\' ].\r\tspec\r\t\tfor: #pharo\r\t\tdo: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec\r\t\tfor: #squeak\r\t\tdo: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 10/16/2017 21:01',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2018-02-22T14:00:21.555143-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version466:',			#protocol : #versions,			#sourceCode : 'version466: spec\r\t<version: \'4.6.6\' imports: #(\'1.0-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'09/11/2013 10:13\'.\r\t\tspec project: \'OSProcess\' with: [ spec version: \'4.5.7\' ].\r\t\tspec \r\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.34\';\r\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-dtl.15\';\r\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\r\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.14\';\r\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-dtl.11\' ].\r\t\t\r\tspec for: #\'pharo\' do: [\r\t\tspec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\r\tspec for: #\'squeak\' do: [\r\t\tspec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ].',			#stamp : 'ThierryGoubier 9/11/2013 10:15',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2018-02-22T14:00:21.556534-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version467:',			#protocol : #versions,			#sourceCode : 'version467: spec\r\t<version: \'4.6.7\' imports: #(\'1.0-baseline\' )>\r\r\tspec for: #\'common\' do: [\r\t\tspec blessing: #\'release\'.\r\t\tspec description: \'\'.\r\t\tspec author: \'ThierryGoubier\'.\r\t\tspec timestamp: \'9/23/2013 10:12\'.\r\t\tspec project: \'OSProcess\' with: [ spec version: \'4.5.8\' ].\r\t\tspec \r\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.36\';\r\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-ThierryGoubier.16\';\r\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\r\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.14\';\r\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-ThierryGoubier.12\' ].\r\t\t\r\tspec for: #\'pharo\' do: [\r\t\tspec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\r\tspec for: #\'squeak\' do: [\r\t\tspec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ].',			#stamp : 'ThierryGoubier 10/24/2013 17:40',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2018-02-22T14:00:21.557836-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version468:',			#protocol : #versions,			#sourceCode : 'version468: spec\r\t<version: \'4.6.8\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'2014-10-05T09:22:59.050216+02:00\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.5.11\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.37\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-ThierryGoubier.16\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.15\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-ThierryGoubier.12\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 10/5/2014 09:23',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2018-02-22T14:00:21.559493-03:00' ],		#trigger : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ConfigurationOfCommandShell,				#isMetaSide : false			},			#name : #'version469:',			#protocol : #versions,			#sourceCode : 'version469: spec\r\t<version: \'4.6.9\' imports: #(\'1.0-baseline\')>\r\tspec\r\t\tfor: #common\r\t\tdo: [ \r\t\t\tspec blessing: #release.\r\t\t\tspec description: \'\'.\r\t\t\tspec author: \'ThierryGoubier\'.\r\t\t\tspec timestamp: \'2014-10-05T09:22:59.050216+02:00\'.\r\t\t\tspec project: \'OSProcess\' with: [ spec version: \'4.5.13\' ].\r\t\t\tspec\r\t\t\t\tpackage: \'CommandShell-Base\' with: \'CommandShell-Base-dtl.38\';\r\t\t\t\tpackage: \'CommandShell-Commands\' with: \'CommandShell-Commands-ThierryGoubier.16\';\r\t\t\t\tpackage: \'CommandShell-Morphic\' with: \'CommandShell-Morphic-dtl.2\';\r\t\t\t\tpackage: \'CommandShell-Piping\' with: \'CommandShell-Piping-dtl.16\';\r\t\t\t\tpackage: \'CommandShell-Tests\' with: \'CommandShell-Tests-dtl.11\';\r\t\t\t\tpackage: \'CommandShell-UI\' with: \'CommandShell-UI-ThierryGoubier.12\' ].\r\tspec for: #pharo do: [ spec package: \'CommandShellPharo\' with: \'CommandShellPharo-dtl.2\' ].\r\tspec for: #squeak do: [ spec package: \'CommandShell-MVC\' with: \'CommandShell-MVC-dtl.3\' ]',			#stamp : 'ThierryGoubier 3/6/2015 07:17',			#package : #ConfigurationOfCommandShell		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:09.718804-03:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'OSProcess-AIO-dtl.9',			'OSProcess-Base-ThierryGoubier.58',			'OSProcess-OS2-dtl.2',			'OSProcess-Win32-ThierryGoubier.15',			'OSProcess-Unix-dtl.24',			'OSProcess-Mac-dtl.2',			'OSProcess-RiscOS-dtl.2'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2018-02-22T14:01:10.390363-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #ExternalPipe\r\tinstanceVariableNames: \'writer reader blocking\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalPipe,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalPipe,						#isMetaSide : false					},					#name : #writer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalPipe,						#isMetaSide : false					},					#name : #reader,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalPipe,						#isMetaSide : false					},					#name : #blocking,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalPipe class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalPipe class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalPipe,					#isMetaSide : false				},				#parent : @7,				#content : 'I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.\r\rSubclasses implement buffering behavior for the reader end of a pipe.',				#stamp : 'dtl 3/10/2006 11:06'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.\r\rSubclasses implement buffering behavior for the reader end of a pipe.',		#newStamp : 'dtl 3/10/2006 11:06'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2018-02-22T14:01:10.391439-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-Base,		#affectedPackageName : #OSProcess-Base	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2018-02-22T14:01:10.417467-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #ExternalPipe\r\tinstanceVariableNames: \'writer reader blocking\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #ExternalPipe,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalPipe,						#isMetaSide : false					},					#name : #writer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalPipe,						#isMetaSide : false					},					#name : #reader,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalPipe,						#isMetaSide : false					},					#name : #blocking,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalPipe class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalPipe class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalPipe,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.\r\rSubclasses implement buffering behavior for the reader end of a pipe.',				#stamp : 'dtl 3/10/2006 11:06'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ],		#time : DateAndTime [ '2018-02-22T14:01:10.42311-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalPipe',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalPipe subclass: #OSPipe\r\tinstanceVariableNames: \'nextChar\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OSPipe,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSPipe,						#isMetaSide : false					},					#name : #nextChar,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSPipe class\r\tinstanceVariableNames: \'\''				},				#name : #'OSPipe class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSPipe,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.\r\rI use a single-character buffer to implement #peek without losing data from the external OS pipe.',				#stamp : 'dtl 3/8/2006 07:27'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.\r\rI use a single-character buffer to implement #peek without losing data from the external OS pipe.',		#newStamp : 'dtl 3/8/2006 07:27'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2018-02-22T14:01:10.424983-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalPipe',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalPipe subclass: #OSPipe\r\tinstanceVariableNames: \'nextChar\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSPipe,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSPipe,						#isMetaSide : false					},					#name : #nextChar,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSPipe class\r\tinstanceVariableNames: \'\''				},				#name : #'OSPipe class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSPipe,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a pipe provided by the underlying operating system, such as a Unix pipe. I have a reader stream and a writer stream which behave similarly to a read-only FileStream and a writeable FileStream.\r\rI use a single-character buffer to implement #peek without losing data from the external OS pipe.',				#stamp : 'dtl 3/8/2006 07:27'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2018-02-22T14:01:10.428938-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'StandardFileStream',				#traitCompositionSource : '{}',				#definitionSource : 'StandardFileStream subclass: #AttachableFileStream\r\tinstanceVariableNames: \'autoClose\'\r\tclassVariableNames: \'UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AttachableFileStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AttachableFileStream,						#isMetaSide : false					},					#name : #autoClose,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AttachableFileStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AttachableFileStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AttachableFileStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a stream on an input or output channel provided by the underlying operating system. I behave like an ordinary file stream, except that I can attach myself to an input or output stream which has already been opened by the underlying operating system.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AttachableFileStream,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a stream on an input or output channel provided by the underlying operating system. I behave like an ordinary file stream, except that I can attach myself to an input or output stream which has already been opened by the underlying operating system.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2018-02-22T14:01:10.431411-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'StandardFileStream',				#traitCompositionSource : '{}',				#definitionSource : 'StandardFileStream subclass: #AttachableFileStream\r\tinstanceVariableNames: \'autoClose\'\r\tclassVariableNames: \'UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #AttachableFileStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AttachableFileStream,						#isMetaSide : false					},					#name : #autoClose,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AttachableFileStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AttachableFileStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AttachableFileStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a stream on an input or output channel provided by the underlying operating system. I behave like an ordinary file stream, except that I can attach myself to an input or output stream which has already been opened by the underlying operating system.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AttachableFileStream,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2018-02-22T14:01:10.43534-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AttachableFileStream',				#traitCompositionSource : '{}',				#definitionSource : 'AttachableFileStream subclass: #AsyncFileReadStream\r\tinstanceVariableNames: \'eventHandler\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AsyncFileReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AsyncFileReadStream,						#isMetaSide : false					},					#name : #eventHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AsyncFileReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AsyncFileReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AsyncFileReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'AsyncFileReadStream implements event-driven read behavior on a file stream. Whenever data is available, a #changed event is generated. An AsyncFileReadStream expects to have a client object respond immediately to the change notification by reading the available data, otherwise a possibly endless stream of change notifications will be generated.\r\rAsyncFileReadStream requires aio support in the AioPlugin module.',				#stamp : 'dtl 7/9/2003 21:04'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AsyncFileReadStream implements event-driven read behavior on a file stream. Whenever data is available, a #changed event is generated. An AsyncFileReadStream expects to have a client object respond immediately to the change notification by reading the available data, otherwise a possibly endless stream of change notifications will be generated.\r\rAsyncFileReadStream requires aio support in the AioPlugin module.',		#newStamp : 'dtl 7/9/2003 21:04'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2018-02-22T14:01:10.436959-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AttachableFileStream',				#traitCompositionSource : '{}',				#definitionSource : 'AttachableFileStream subclass: #AsyncFileReadStream\r\tinstanceVariableNames: \'eventHandler\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #AsyncFileReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AsyncFileReadStream,						#isMetaSide : false					},					#name : #eventHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AsyncFileReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AsyncFileReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AsyncFileReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'AsyncFileReadStream implements event-driven read behavior on a file stream. Whenever data is available, a #changed event is generated. An AsyncFileReadStream expects to have a client object respond immediately to the change notification by reading the available data, otherwise a possibly endless stream of change notifications will be generated.\r\rAsyncFileReadStream requires aio support in the AioPlugin module.',				#stamp : 'dtl 7/9/2003 21:04'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2018-02-22T14:01:10.451485-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AsyncFileReadStream',				#traitCompositionSource : '{}',				#definitionSource : 'AsyncFileReadStream subclass: #BufferedAsyncFileReadStream\r\tinstanceVariableNames: \'nonBlockingMode readBuffer readSyncSemaphore dataAvailableSemaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #BufferedAsyncFileReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #nonBlockingMode,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #readBuffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #readSyncSemaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #dataAvailableSemaphore,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BufferedAsyncFileReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'BufferedAsyncFileReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BufferedAsyncFileReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'BufferedAsyncFileReadStream adds output buffering behavior to an event driven file stream, permitting blocking reads without risk of blocking the Squeak VM. This is useful for OS pipes, for which Squeak may wish to read and write the pipe without concern for VM deadlocks.\r\rA BufferedAsyncFileReadStream may be set for either blocking or nonblocking reads. When in blocking mode, a Smalltalk Process that requests a read will be blocked until data is available, but the VM will not be blocked and other Smalltalk Processes can proceed normally.\r\rWhenever data becomes available, a dataAvailableSemaphore is signalled and a #changed event is generated.',				#stamp : 'dtl 3/7/2006 06:55'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'BufferedAsyncFileReadStream adds output buffering behavior to an event driven file stream, permitting blocking reads without risk of blocking the Squeak VM. This is useful for OS pipes, for which Squeak may wish to read and write the pipe without concern for VM deadlocks.\r\rA BufferedAsyncFileReadStream may be set for either blocking or nonblocking reads. When in blocking mode, a Smalltalk Process that requests a read will be blocked until data is available, but the VM will not be blocked and other Smalltalk Processes can proceed normally.\r\rWhenever data becomes available, a dataAvailableSemaphore is signalled and a #changed event is generated.',		#newStamp : 'dtl 3/7/2006 06:55'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2018-02-22T14:01:10.454132-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AsyncFileReadStream',				#traitCompositionSource : '{}',				#definitionSource : 'AsyncFileReadStream subclass: #BufferedAsyncFileReadStream\r\tinstanceVariableNames: \'nonBlockingMode readBuffer readSyncSemaphore dataAvailableSemaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #BufferedAsyncFileReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #nonBlockingMode,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #readBuffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #readSyncSemaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BufferedAsyncFileReadStream,						#isMetaSide : false					},					#name : #dataAvailableSemaphore,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BufferedAsyncFileReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'BufferedAsyncFileReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BufferedAsyncFileReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'BufferedAsyncFileReadStream adds output buffering behavior to an event driven file stream, permitting blocking reads without risk of blocking the Squeak VM. This is useful for OS pipes, for which Squeak may wish to read and write the pipe without concern for VM deadlocks.\r\rA BufferedAsyncFileReadStream may be set for either blocking or nonblocking reads. When in blocking mode, a Smalltalk Process that requests a read will be blocked until data is available, but the VM will not be blocked and other Smalltalk Processes can proceed normally.\r\rWhenever data becomes available, a dataAvailableSemaphore is signalled and a #changed event is generated.',				#stamp : 'dtl 3/7/2006 06:55'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2018-02-22T14:01:10.458487-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AioEventHandlerExample\r\tinstanceVariableNames: \'handler ioStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AioEventHandlerExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandlerExample,						#isMetaSide : false					},					#name : #handler,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandlerExample,						#isMetaSide : false					},					#name : #ioStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AioEventHandlerExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AioEventHandlerExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AioEventHandlerExample,					#isMetaSide : false				},				#parent : @8,				#content : 'Demonstrate asynchronous read handers for file streams, OS pipes, standard input, and sockets. See class category "examples". Some examples require OSProcess.',				#stamp : 'dtl 7/5/2003 18:38'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Demonstrate asynchronous read handers for file streams, OS pipes, standard input, and sockets. See class category "examples". Some examples require OSProcess.',		#newStamp : 'dtl 7/5/2003 18:38'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2018-02-22T14:01:10.459037-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-AIO,		#affectedPackageName : #OSProcess-AIO	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2018-02-22T14:01:10.487322-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AioEventHandlerExample\r\tinstanceVariableNames: \'handler ioStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-AIO\''			},			#name : #AioEventHandlerExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandlerExample,						#isMetaSide : false					},					#name : #handler,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandlerExample,						#isMetaSide : false					},					#name : #ioStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AioEventHandlerExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AioEventHandlerExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AioEventHandlerExample,					#isMetaSide : false				},				#parent : @8,				#content : 'Demonstrate asynchronous read handers for file streams, OS pipes, standard input, and sockets. See class category "examples". Some examples require OSProcess.',				#stamp : 'dtl 7/5/2003 18:38'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-AIO,			#package : #OSProcess-AIO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2018-02-22T14:01:10.491355-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #OSFileLock\r\tinstanceVariableNames: \'fileStream exclusive\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OSFileLock,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSFileLock,						#isMetaSide : false					},					#name : #fileStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSFileLock,						#isMetaSide : false					},					#name : #exclusive,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSFileLock class\r\tinstanceVariableNames: \'\''				},				#name : #'OSFileLock class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSFileLock,					#isMetaSide : false				},				#parent : @8,				#content : 'I describe the region representing the entire addressable space of an external file, including regions that have not yet been allocated for use by the file. On platforms that support file locking, an OSFileLock is used to describe a lock on the entire file.\r',				#stamp : 'dtl 2/23/2004 19:36'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I describe the region representing the entire addressable space of an external file, including regions that have not yet been allocated for use by the file. On platforms that support file locking, an OSFileLock is used to describe a lock on the entire file.\r',		#newStamp : 'dtl 2/23/2004 19:36'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2018-02-22T14:01:10.493076-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #OSFileLock\r\tinstanceVariableNames: \'fileStream exclusive\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSFileLock,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSFileLock,						#isMetaSide : false					},					#name : #fileStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSFileLock,						#isMetaSide : false					},					#name : #exclusive,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSFileLock class\r\tinstanceVariableNames: \'\''				},				#name : #'OSFileLock class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSFileLock,					#isMetaSide : false				},				#parent : @8,				#content : 'I describe the region representing the entire addressable space of an external file, including regions that have not yet been allocated for use by the file. On platforms that support file locking, an OSFileLock is used to describe a lock on the entire file.\r',				#stamp : 'dtl 2/23/2004 19:36'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2018-02-22T14:01:10.496581-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSFileLock',				#traitCompositionSource : '{}',				#definitionSource : 'OSFileLock subclass: #OSFileRegionLock\r\tinstanceVariableNames: \'interval\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OSFileRegionLock,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSFileRegionLock,						#isMetaSide : false					},					#name : #interval,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSFileRegionLock class\r\tinstanceVariableNames: \'\''				},				#name : #'OSFileRegionLock class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSFileRegionLock,					#isMetaSide : false				},				#parent : @8,				#content : 'I describe an addressable region of contiguous bytes in an external file. On platforms that support file locking, an OSFileRegionLock is used to specify a portion of the file to be locked.\r',				#stamp : 'jf 2/22/2004 19:50'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I describe an addressable region of contiguous bytes in an external file. On platforms that support file locking, an OSFileRegionLock is used to specify a portion of the file to be locked.\r',		#newStamp : 'jf 2/22/2004 19:50'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2018-02-22T14:01:10.498253-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSFileLock',				#traitCompositionSource : '{}',				#definitionSource : 'OSFileLock subclass: #OSFileRegionLock\r\tinstanceVariableNames: \'interval\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSFileRegionLock,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSFileRegionLock,						#isMetaSide : false					},					#name : #interval,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSFileRegionLock class\r\tinstanceVariableNames: \'\''				},				#name : #'OSFileRegionLock class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSFileRegionLock,					#isMetaSide : false				},				#parent : @8,				#content : 'I describe an addressable region of contiguous bytes in an external file. On platforms that support file locking, an OSFileRegionLock is used to specify a portion of the file to be locked.\r',				#stamp : 'jf 2/22/2004 19:50'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2018-02-22T14:01:10.502688-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #OSProcess\r\tinstanceVariableNames: \'pid\'\r\tclassVariableNames: \'UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcess,						#isMetaSide : false					},					#name : #pid,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'OSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an operating system process, such as the process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcess,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an operating system process, such as the process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2018-02-22T14:01:10.504358-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #OSProcess\r\tinstanceVariableNames: \'pid\'\r\tclassVariableNames: \'UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcess,						#isMetaSide : false					},					#name : #pid,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'OSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an operating system process, such as the process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcess,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2018-02-22T14:01:10.507913-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcess subclass: #ExternalOSProcess\r\tinstanceVariableNames: \'runState initialStdIn initialStdOut initialStdErr\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #runState,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #initialStdIn,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #initialStdOut,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #initialStdErr,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an OSProcess other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an OSProcess other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2018-02-22T14:01:10.510284-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcess subclass: #ExternalOSProcess\r\tinstanceVariableNames: \'runState initialStdIn initialStdOut initialStdErr\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #ExternalOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #runState,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #initialStdIn,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #initialStdOut,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOSProcess,						#isMetaSide : false					},					#name : #initialStdErr,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an OSProcess other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2018-02-22T14:01:10.522867-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalMacOSProcess\r\tinstanceVariableNames: \'ppid exitStatus\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalMacOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalMacOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalMacOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalMacOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalMacOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalMacOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external MacOS process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton MacOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent MacOSProcess (a singleton) to check the status of all its ExternalMacOSProcess children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an external MacOS process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton MacOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent MacOSProcess (a singleton) to check the status of all its ExternalMacOSProcess children, and #update: them accordingly.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2018-02-22T14:01:10.523473-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-Mac,		#affectedPackageName : #OSProcess-Mac	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2018-02-22T14:01:10.550346-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalMacOSProcess\r\tinstanceVariableNames: \'ppid exitStatus\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Mac\''			},			#name : #ExternalMacOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalMacOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalMacOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalMacOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalMacOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalMacOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external MacOS process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton MacOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent MacOSProcess (a singleton) to check the status of all its ExternalMacOSProcess children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Mac,			#package : #OSProcess-Mac,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2018-02-22T14:01:10.554401-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalOS2Process\r\tinstanceVariableNames: \'ppid exitStatus\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalOS2Process,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOS2Process,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOS2Process,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalOS2Process class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalOS2Process class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalOS2Process,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external OS2 process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton OS2ProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent OS2Process (a singleton) to check the status of all its ExternalOS2Process children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an external OS2 process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton OS2ProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent OS2Process (a singleton) to check the status of all its ExternalOS2Process children, and #update: them accordingly.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ],		#time : DateAndTime [ '2018-02-22T14:01:10.554903-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-OS2,		#affectedPackageName : #OSProcess-OS2	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ],		#time : DateAndTime [ '2018-02-22T14:01:10.580431-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalOS2Process\r\tinstanceVariableNames: \'ppid exitStatus\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-OS2\''			},			#name : #ExternalOS2Process,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOS2Process,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalOS2Process,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalOS2Process class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalOS2Process class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalOS2Process,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external OS2 process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton OS2ProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent OS2Process (a singleton) to check the status of all its ExternalOS2Process children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-OS2,			#package : #OSProcess-OS2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ],		#time : DateAndTime [ '2018-02-22T14:01:10.592685-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalRiscOSProcess\r\tinstanceVariableNames: \'ppid exitStatus\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalRiscOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalRiscOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalRiscOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalRiscOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalRiscOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalRiscOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external RiscOS task other than the process in which this Squeak is executing. I maintain information about the state of the external task during and after the lifetime of the task. In particular, I hold the exit status of the task after it completes execution. When the external task changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton RiscOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent RiscOSProcess (a singleton) to check the status of all its ExternalRiscOSProcess children, and #update: them accordingly.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an external RiscOS task other than the process in which this Squeak is executing. I maintain information about the state of the external task during and after the lifetime of the task. In particular, I hold the exit status of the task after it completes execution. When the external task changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton RiscOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent RiscOSProcess (a singleton) to check the status of all its ExternalRiscOSProcess children, and #update: them accordingly.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ],		#time : DateAndTime [ '2018-02-22T14:01:10.593253-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-RiscOS,		#affectedPackageName : #OSProcess-RiscOS	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ],		#time : DateAndTime [ '2018-02-22T14:01:10.618193-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalRiscOSProcess\r\tinstanceVariableNames: \'ppid exitStatus\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-RiscOS\''			},			#name : #ExternalRiscOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalRiscOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalRiscOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalRiscOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalRiscOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalRiscOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external RiscOS task other than the process in which this Squeak is executing. I maintain information about the state of the external task during and after the lifetime of the task. In particular, I hold the exit status of the task after it completes execution. When the external task changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton RiscOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent RiscOSProcess (a singleton) to check the status of all its ExternalRiscOSProcess children, and #update: them accordingly.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-RiscOS,			#package : #OSProcess-RiscOS,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ],		#time : DateAndTime [ '2018-02-22T14:01:10.622954-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalUnixOSProcess\r\tinstanceVariableNames: \'ppid pwd exitStatus programName arguments initialEnvironment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalUnixOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #pwd,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #programName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #arguments,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #initialEnvironment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalUnixOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalUnixOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalUnixOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external Unix process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton UnixProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent UnixProcess (a singleton) to check the status of all its ExternalUnixProcess children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an external Unix process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton UnixProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent UnixProcess (a singleton) to check the status of all its ExternalUnixProcess children, and #update: them accordingly.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ],		#time : DateAndTime [ '2018-02-22T14:01:10.623496-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-Unix,		#affectedPackageName : #OSProcess-Unix	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ],		#time : DateAndTime [ '2018-02-22T14:01:10.647628-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalUnixOSProcess\r\tinstanceVariableNames: \'ppid pwd exitStatus programName arguments initialEnvironment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Unix\''			},			#name : #ExternalUnixOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #pwd,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #programName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #arguments,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalUnixOSProcess,						#isMetaSide : false					},					#name : #initialEnvironment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalUnixOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalUnixOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalUnixOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external Unix process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton UnixProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent UnixProcess (a singleton) to check the status of all its ExternalUnixProcess children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Unix,			#package : #OSProcess-Unix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ],		#time : DateAndTime [ '2018-02-22T14:01:10.659224-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalWindowsOSProcess\r\tinstanceVariableNames: \'ppid exitStatus handle threads commandLine pwd\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalWindowsOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #handle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #threads,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #commandLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #pwd,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalWindowsOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalWindowsOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalWindowsOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external Windows process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton WindowsOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent WindowsOSProcess (a singleton) to check the status of all its ExternalWindowsOSProcess children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an external Windows process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton WindowsOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent WindowsOSProcess (a singleton) to check the status of all its ExternalWindowsOSProcess children, and #update: them accordingly.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ],		#time : DateAndTime [ '2018-02-22T14:01:10.659781-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-Win32,		#affectedPackageName : #OSProcess-Win32	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ],		#time : DateAndTime [ '2018-02-22T14:01:10.685023-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ExternalOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ExternalOSProcess subclass: #ExternalWindowsOSProcess\r\tinstanceVariableNames: \'ppid exitStatus handle threads commandLine pwd\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Win32\''			},			#name : #ExternalWindowsOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #handle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #threads,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #commandLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalWindowsOSProcess,						#isMetaSide : false					},					#name : #pwd,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalWindowsOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalWindowsOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalWindowsOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an external Windows process other than the process in which this Squeak is executing. I maintain information about the state of the external process during and after the lifetime of the process. In particular, I hold the exit status of the process after it completes execution. When the external process changes state (e.g. it exits), the VM signals a Squeak semaphore. A singleton WindowsOSProcessAccessor maintains a process which waits on the semaphore, and sends a changed: #childProcessStatus message to itself, thereby notifying its dependent WindowsOSProcess (a singleton) to check the status of all its ExternalWindowsOSProcess children, and #update: them accordingly.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Win32,			#package : #OSProcess-Win32,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ],		#time : DateAndTime [ '2018-02-22T14:01:10.690113-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcess subclass: #ThisOSProcess\r\tinstanceVariableNames: \'sessionID stdIn stdOut stdErr processAccessor childProcessList accessProtect\'\r\tclassVariableNames: \'ChildListSize ThisInstance\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ThisOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #sessionID,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #stdIn,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #stdOut,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #stdErr,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #processAccessor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #childProcessList,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #accessProtect,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ThisOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ThisOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ThisOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the operating system process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems by collaborating with corresponding subclasses of OSProcessAccessor to provide primitive access to the external operating system.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #ChildListSize,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #ThisInstance,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the operating system process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems by collaborating with corresponding subclasses of OSProcessAccessor to provide primitive access to the external operating system.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ],		#time : DateAndTime [ '2018-02-22T14:01:10.691911-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcess subclass: #ThisOSProcess\r\tinstanceVariableNames: \'sessionID stdIn stdOut stdErr processAccessor childProcessList accessProtect\'\r\tclassVariableNames: \'ChildListSize ThisInstance\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #ThisOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #sessionID,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #stdIn,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #stdOut,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #stdErr,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #processAccessor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #childProcessList,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #accessProtect,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ThisOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'ThisOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ThisOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the operating system process in which the Squeak VM is currently running. My subclasses implement system specific features for Unix, Windows, MacOS, or other operating systems by collaborating with corresponding subclasses of OSProcessAccessor to provide primitive access to the external operating system.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #ChildListSize,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ThisOSProcess,						#isMetaSide : false					},					#name : #ThisInstance,					#parent : @8				}			],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ],		#time : DateAndTime [ '2018-02-22T14:01:10.695321-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #MacProcess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #MacProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MacProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'MacProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MacProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a Macintosh operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of MacOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my MacOSProcessAccessor.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Macintosh operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of MacOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my MacOSProcessAccessor.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ],		#time : DateAndTime [ '2018-02-22T14:01:10.697914-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #MacProcess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Mac\''			},			#name : #MacProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MacProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'MacProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MacProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a Macintosh operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of MacOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my MacOSProcessAccessor.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Mac,			#package : #OSProcess-Mac,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ],		#time : DateAndTime [ '2018-02-22T14:01:10.701442-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #OS2Process\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OS2Process,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OS2Process class\r\tinstanceVariableNames: \'\''				},				#name : #'OS2Process class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OS2Process,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an OS2 operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of OS2OSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my OS2OSProcessAccessor.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an OS2 operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of OS2OSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my OS2OSProcessAccessor.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ],		#time : DateAndTime [ '2018-02-22T14:01:10.703055-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #OS2Process\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-OS2\''			},			#name : #OS2Process,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OS2Process class\r\tinstanceVariableNames: \'\''				},				#name : #'OS2Process class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OS2Process,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an OS2 operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of OS2OSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my OS2OSProcessAccessor.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-OS2,			#package : #OSProcess-OS2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ],		#time : DateAndTime [ '2018-02-22T14:01:10.706523-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #RiscOSProcess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #RiscOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RiscOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'RiscOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RiscOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an Acorn RiscOS operating system task, such as the task in which the Squeak VM is currently running. I collaborate with a singleton instance of RiscOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of a RiscOSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my RiscOSProcessAccessor.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an Acorn RiscOS operating system task, such as the task in which the Squeak VM is currently running. I collaborate with a singleton instance of RiscOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of a RiscOSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my RiscOSProcessAccessor.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ],		#time : DateAndTime [ '2018-02-22T14:01:10.708176-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #RiscOSProcess\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-RiscOS\''			},			#name : #RiscOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RiscOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'RiscOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RiscOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an Acorn RiscOS operating system task, such as the task in which the Squeak VM is currently running. I collaborate with a singleton instance of RiscOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of a RiscOSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my RiscOSProcessAccessor.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-RiscOS,			#package : #OSProcess-RiscOS,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ],		#time : DateAndTime [ '2018-02-22T14:01:10.720916-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #UnixProcess\r\tinstanceVariableNames: \'ppid pthread path programName arguments environment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #pthread,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #path,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #programName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #arguments,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #environment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the Unix operating system process in which this Squeak session is running. I collaborate with an instance of UnixOSProcessAccessor to provide access to the external operating system. My instance variables are updated when my process accessor changes, allowing them to be monitored with a Smalltalk inspector.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the Unix operating system process in which this Squeak session is running. I collaborate with an instance of UnixOSProcessAccessor to provide access to the external operating system. My instance variables are updated when my process accessor changes, allowing them to be monitored with a Smalltalk inspector.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ],		#time : DateAndTime [ '2018-02-22T14:01:10.722605-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #UnixProcess\r\tinstanceVariableNames: \'ppid pthread path programName arguments environment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Unix\''			},			#name : #UnixProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #ppid,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #pthread,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #path,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #programName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #arguments,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcess,						#isMetaSide : false					},					#name : #environment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the Unix operating system process in which this Squeak session is running. I collaborate with an instance of UnixOSProcessAccessor to provide access to the external operating system. My instance variables are updated when my process accessor changes, allowing them to be monitored with a Smalltalk inspector.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Unix,			#package : #OSProcess-Unix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ],		#time : DateAndTime [ '2018-02-22T14:01:10.727133-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #WindowsProcess\r\tinstanceVariableNames: \'processHandle environment mainThread threads\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WindowsProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #processHandle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #environment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #mainThread,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #threads,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WindowsProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'WindowsProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WindowsProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a Windows operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of WindowsOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my WindowsOSProcessAccessor.\r\rMy process ID and process handle (a Win32 HANDLE) are held by my pid and processHandle variables. The main thread for this process is held by my mainThread variable.\r\rStandard input, output, and error streams are available, and my be used when the console is open (WindowsProcess>>openConsole). They can also be reassigned to file streams (WindowsOSProcessAccessor>>setStdOut:).\r\rWhen external processes are created, they are added to my allMyChildren collection, and a thread is created to wait for any of them to exit. This thread is held by my childWatcherThread instance variable while the thread is active, and is also added to my threads collection.\r\rWhenever a child process exits, the childWatcherThread will signal a Semaphore (a Smalltalk Semaphore, not a Windows semaphore), then exit. A Squeak process in my processAccessor waits on this Semaphore, and sends an \'update: #childProcessStatus\' message to me. In response to this, I update the status of my active child processes, one or more of which will have exited. If any of my child processes are still active, I set a new childWatcherThread to wait for them to exit.\r\rNote that some Windows applications will exit their main process after creating another application process. These applications will appear to Squeak as if they have exited immediately, even though the application is running.',				#stamp : 'dtl 9/25/2005 16:31'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a Windows operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of WindowsOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my WindowsOSProcessAccessor.\r\rMy process ID and process handle (a Win32 HANDLE) are held by my pid and processHandle variables. The main thread for this process is held by my mainThread variable.\r\rStandard input, output, and error streams are available, and my be used when the console is open (WindowsProcess>>openConsole). They can also be reassigned to file streams (WindowsOSProcessAccessor>>setStdOut:).\r\rWhen external processes are created, they are added to my allMyChildren collection, and a thread is created to wait for any of them to exit. This thread is held by my childWatcherThread instance variable while the thread is active, and is also added to my threads collection.\r\rWhenever a child process exits, the childWatcherThread will signal a Semaphore (a Smalltalk Semaphore, not a Windows semaphore), then exit. A Squeak process in my processAccessor waits on this Semaphore, and sends an \'update: #childProcessStatus\' message to me. In response to this, I update the status of my active child processes, one or more of which will have exited. If any of my child processes are still active, I set a new childWatcherThread to wait for them to exit.\r\rNote that some Windows applications will exit their main process after creating another application process. These applications will appear to Squeak as if they have exited immediately, even though the application is running.',		#newStamp : 'dtl 9/25/2005 16:31'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ],		#time : DateAndTime [ '2018-02-22T14:01:10.728952-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ThisOSProcess',				#traitCompositionSource : '{}',				#definitionSource : 'ThisOSProcess subclass: #WindowsProcess\r\tinstanceVariableNames: \'processHandle environment mainThread threads\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Win32\''			},			#name : #WindowsProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #processHandle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #environment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #mainThread,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsProcess,						#isMetaSide : false					},					#name : #threads,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WindowsProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'WindowsProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WindowsProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a Windows operating system process, such as the process in which the Squeak VM is currently running. I collaborate with an instance of WindowsOSProcessAccessor to provide primitive access to the external operating system. My instance variables are maintained as a convenience to allow inspection of an OSProcess. Access to these variables should always be done with my accessor methods, which update the instance variables by querying my WindowsOSProcessAccessor.\r\rMy process ID and process handle (a Win32 HANDLE) are held by my pid and processHandle variables. The main thread for this process is held by my mainThread variable.\r\rStandard input, output, and error streams are available, and my be used when the console is open (WindowsProcess>>openConsole). They can also be reassigned to file streams (WindowsOSProcessAccessor>>setStdOut:).\r\rWhen external processes are created, they are added to my allMyChildren collection, and a thread is created to wait for any of them to exit. This thread is held by my childWatcherThread instance variable while the thread is active, and is also added to my threads collection.\r\rWhenever a child process exits, the childWatcherThread will signal a Semaphore (a Smalltalk Semaphore, not a Windows semaphore), then exit. A Squeak process in my processAccessor waits on this Semaphore, and sends an \'update: #childProcessStatus\' message to me. In response to this, I update the status of my active child processes, one or more of which will have exited. If any of my child processes are still active, I set a new childWatcherThread to wait for them to exit.\r\rNote that some Windows applications will exit their main process after creating another application process. These applications will appear to Squeak as if they have exited immediately, even though the application is running.',				#stamp : 'dtl 9/25/2005 16:31'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Win32,			#package : #OSProcess-Win32,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ],		#time : DateAndTime [ '2018-02-22T14:01:10.732594-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #UnixProcessExitStatus\r\tinstanceVariableNames: \'intValue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcessExitStatus,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessExitStatus,						#isMetaSide : false					},					#name : #intValue,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessExitStatus class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessExitStatus class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessExitStatus,					#isMetaSide : false				},				#parent : @8,				#content : 'A UnixProcessExitStatus represents the exit status of a unix process. This is an integer bit field answered by the wait() system call that contains information about exit status of the process. The meaning of the bit field varies according to the cause of process exit. \r\rFollowing a normal process exit, the status may be decoded to provide a small positive integer value in the range 0 - 255, which is the value that is presented by a unix shell as the exit status of a program. If terminated by a signal, the corresponding value is the signal number of the signal that caused process exit.\r\rUnixExitStatus decodes the process exit status in a manner compatible with a typical GNU unix implementation. It is not guaranteed to be portable and may produce misleading results on other unix systems.\r',				#stamp : 'dtl 8/23/2012 22:48'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A UnixProcessExitStatus represents the exit status of a unix process. This is an integer bit field answered by the wait() system call that contains information about exit status of the process. The meaning of the bit field varies according to the cause of process exit. \r\rFollowing a normal process exit, the status may be decoded to provide a small positive integer value in the range 0 - 255, which is the value that is presented by a unix shell as the exit status of a program. If terminated by a signal, the corresponding value is the signal number of the signal that caused process exit.\r\rUnixExitStatus decodes the process exit status in a manner compatible with a typical GNU unix implementation. It is not guaranteed to be portable and may produce misleading results on other unix systems.\r',		#newStamp : 'dtl 8/23/2012 22:48'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ],		#time : DateAndTime [ '2018-02-22T14:01:10.734294-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #UnixProcessExitStatus\r\tinstanceVariableNames: \'intValue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Unix\''			},			#name : #UnixProcessExitStatus,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessExitStatus,						#isMetaSide : false					},					#name : #intValue,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessExitStatus class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessExitStatus class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessExitStatus,					#isMetaSide : false				},				#parent : @8,				#content : 'A UnixProcessExitStatus represents the exit status of a unix process. This is an integer bit field answered by the wait() system call that contains information about exit status of the process. The meaning of the bit field varies according to the cause of process exit. \r\rFollowing a normal process exit, the status may be decoded to provide a small positive integer value in the range 0 - 255, which is the value that is presented by a unix shell as the exit status of a program. If terminated by a signal, the corresponding value is the signal number of the signal that caused process exit.\r\rUnixExitStatus decodes the process exit status in a manner compatible with a typical GNU unix implementation. It is not guaranteed to be portable and may produce misleading results on other unix systems.\r',				#stamp : 'dtl 8/23/2012 22:48'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Unix,			#package : #OSProcess-Unix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ],		#time : DateAndTime [ '2018-02-22T14:01:10.738608-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WindowsThread\r\tinstanceVariableNames: \'threadID handle runState\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WindowsThread,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsThread,						#isMetaSide : false					},					#name : #threadID,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsThread,						#isMetaSide : false					},					#name : #handle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsThread,						#isMetaSide : false					},					#name : #runState,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WindowsThread class\r\tinstanceVariableNames: \'\''				},				#name : #'WindowsThread class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WindowsThread,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a thread of execution within a Windows process. May threadID is a unique\ridentifier for the thread, and my handle is a Windows HANDLE to the thread. My handle\rshould be closed when the thread exits.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a thread of execution within a Windows process. May threadID is a unique\ridentifier for the thread, and my handle is a Windows HANDLE to the thread. My handle\rshould be closed when the thread exits.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ],		#time : DateAndTime [ '2018-02-22T14:01:10.740393-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WindowsThread\r\tinstanceVariableNames: \'threadID handle runState\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Win32\''			},			#name : #WindowsThread,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsThread,						#isMetaSide : false					},					#name : #threadID,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsThread,						#isMetaSide : false					},					#name : #handle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsThread,						#isMetaSide : false					},					#name : #runState,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WindowsThread class\r\tinstanceVariableNames: \'\''				},				#name : #'WindowsThread class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WindowsThread,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a thread of execution within a Windows process. May threadID is a unique\ridentifier for the thread, and my handle is a Windows HANDLE to the thread. My handle\rshould be closed when the thread exits.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Win32,			#package : #OSProcess-Win32,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ],		#time : DateAndTime [ '2018-02-22T14:01:10.744892-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #AioEventHandler\r\tinstanceVariableNames: \'semaphore semaIndex handlerProc descriptor\'\r\tclassVariableNames: \'AioPluginPresent\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AioEventHandler,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #semaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #semaIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #handlerProc,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #descriptor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AioEventHandler class\r\tinstanceVariableNames: \'\''				},				#name : #'AioEventHandler class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AioEventHandler,					#isMetaSide : false				},				#parent : @8,				#content : 'AioEventHandler responds to external IO events, such as data available on a file descriptor. When an external IO event is received, an instance of AioEventHandler sends #changed to itself to notify its dependents that the event has occurred.',				#stamp : 'dtl 11/25/2006 15:55'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #AioPluginPresent,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AioEventHandler responds to external IO events, such as data available on a file descriptor. When an external IO event is received, an instance of AioEventHandler sends #changed to itself to notify its dependents that the event has occurred.',		#newStamp : 'dtl 11/25/2006 15:55'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ],		#time : DateAndTime [ '2018-02-22T14:01:10.746567-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #AioEventHandler\r\tinstanceVariableNames: \'semaphore semaIndex handlerProc descriptor\'\r\tclassVariableNames: \'AioPluginPresent\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-AIO\''			},			#name : #AioEventHandler,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #semaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #semaIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #handlerProc,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #descriptor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AioEventHandler class\r\tinstanceVariableNames: \'\''				},				#name : #'AioEventHandler class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AioEventHandler,					#isMetaSide : false				},				#parent : @8,				#content : 'AioEventHandler responds to external IO events, such as data available on a file descriptor. When an external IO event is received, an instance of AioEventHandler sends #changed to itself to notify its dependents that the event has occurred.',				#stamp : 'dtl 11/25/2006 15:55'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AioEventHandler,						#isMetaSide : false					},					#name : #AioPluginPresent,					#parent : @8				}			],			#category : #OSProcess-AIO,			#package : #OSProcess-AIO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ],		#time : DateAndTime [ '2018-02-22T14:01:10.750213-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #OSProcessAccessor\r\tinstanceVariableNames: \'sessionIdentifier grimReaper canObtainSessionIdentifierFromPlugin\'\r\tclassVariableNames: \'EmulateWin32FileLocking FileLockRegistry ThisOSProcessAccessor UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #sessionIdentifier,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #grimReaper,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #canObtainSessionIdentifierFromPlugin,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'OSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.\r\rThe single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.\r\rWhen an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.\r',				#stamp : 'dtl 7/7/2010 07:58'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #EmulateWin32FileLocking,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #FileLockRegistry,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #ThisOSProcessAccessor,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.\r\rThe single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.\r\rWhen an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.\r',		#newStamp : 'dtl 7/7/2010 07:58'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ],		#time : DateAndTime [ '2018-02-22T14:01:10.752156-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #OSProcessAccessor\r\tinstanceVariableNames: \'sessionIdentifier grimReaper canObtainSessionIdentifierFromPlugin\'\r\tclassVariableNames: \'EmulateWin32FileLocking FileLockRegistry ThisOSProcessAccessor UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #sessionIdentifier,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #grimReaper,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #canObtainSessionIdentifierFromPlugin,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'OSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.\r\rThe single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.\r\rWhen an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.\r',				#stamp : 'dtl 7/7/2010 07:58'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #EmulateWin32FileLocking,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #FileLockRegistry,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #ThisOSProcessAccessor,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ],		#time : DateAndTime [ '2018-02-22T14:01:10.755516-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #MacOSProcessAccessor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #MacOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MacOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'MacOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MacOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Macintosh process model.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Macintosh process model.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ],		#time : DateAndTime [ '2018-02-22T14:01:10.758039-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #MacOSProcessAccessor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Mac\''			},			#name : #MacOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MacOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'MacOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MacOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Macintosh process model.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Mac,			#package : #OSProcess-Mac,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ],		#time : DateAndTime [ '2018-02-22T14:01:10.762113-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #OS2OSProcessAccessor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OS2OSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OS2OSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'OS2OSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OS2OSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the OS2 process model.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the OS2 process model.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ],		#time : DateAndTime [ '2018-02-22T14:01:10.763729-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #OS2OSProcessAccessor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-OS2\''			},			#name : #OS2OSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OS2OSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'OS2OSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OS2OSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the OS2 process model.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-OS2,			#package : #OSProcess-OS2,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ],		#time : DateAndTime [ '2018-02-22T14:01:10.767661-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #RiscOSProcessAccessor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #RiscOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RiscOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'RiscOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RiscOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to the operating system process in which the Squeak VM is currently running. I am based on the RiscOS task model. There is only one instance of me, and instances of RiscOSProcess depend on me to provide access to the operating system process which they represent. I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances ofRiscOSProcess) when these events occur.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide access to the operating system process in which the Squeak VM is currently running. I am based on the RiscOS task model. There is only one instance of me, and instances of RiscOSProcess depend on me to provide access to the operating system process which they represent. I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances ofRiscOSProcess) when these events occur.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ],		#time : DateAndTime [ '2018-02-22T14:01:10.769264-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #RiscOSProcessAccessor\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-RiscOS\''			},			#name : #RiscOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RiscOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'RiscOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RiscOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to the operating system process in which the Squeak VM is currently running. I am based on the RiscOS task model. There is only one instance of me, and instances of RiscOSProcess depend on me to provide access to the operating system process which they represent. I know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances ofRiscOSProcess) when these events occur.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-RiscOS,			#package : #OSProcess-RiscOS,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ],		#time : DateAndTime [ '2018-02-22T14:01:10.773786-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #UnixOSProcessAccessor\r\tinstanceVariableNames: \'sigChldSemaphore\'\r\tclassVariableNames: \'ThisProcessPid\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixOSProcessAccessor,						#isMetaSide : false					},					#name : #sigChldSemaphore,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to the operating system process in which the Squeak VM is currently running. I am based on the Unix process model. There is only one instance of me, and instances of UnixOSProcess depend on me to provide access to the operating system process which they represent.\r\rI know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances of UnixOSProcess) when these events occur.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixOSProcessAccessor,						#isMetaSide : false					},					#name : #ThisProcessPid,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide access to the operating system process in which the Squeak VM is currently running. I am based on the Unix process model. There is only one instance of me, and instances of UnixOSProcess depend on me to provide access to the operating system process which they represent.\r\rI know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances of UnixOSProcess) when these events occur.\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ],		#time : DateAndTime [ '2018-02-22T14:01:10.775399-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #UnixOSProcessAccessor\r\tinstanceVariableNames: \'sigChldSemaphore\'\r\tclassVariableNames: \'ThisProcessPid\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Unix\''			},			#name : #UnixOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixOSProcessAccessor,						#isMetaSide : false					},					#name : #sigChldSemaphore,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to the operating system process in which the Squeak VM is currently running. I am based on the Unix process model. There is only one instance of me, and instances of UnixOSProcess depend on me to provide access to the operating system process which they represent.\r\rI know how to create child processes. I use a semaphore to receive signals when child processes die, and I notify my dependents (instances of UnixOSProcess) when these events occur.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixOSProcessAccessor,						#isMetaSide : false					},					#name : #ThisProcessPid,					#parent : @8				}			],			#category : #OSProcess-Unix,			#package : #OSProcess-Unix,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ],		#time : DateAndTime [ '2018-02-22T14:01:10.779119-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #WindowsOSProcessAccessor\r\tinstanceVariableNames: \'sigChldSemaphore semaIndex childWatcherThread\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WindowsOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsOSProcessAccessor,						#isMetaSide : false					},					#name : #sigChldSemaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsOSProcessAccessor,						#isMetaSide : false					},					#name : #semaIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsOSProcessAccessor,						#isMetaSide : false					},					#name : #childWatcherThread,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WindowsOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'WindowsOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WindowsOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Win32 process model for Windows and Windows NT.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Win32 process model for Windows and Windows NT.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ],		#time : DateAndTime [ '2018-02-22T14:01:10.783455-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OSProcessAccessor',				#traitCompositionSource : '{}',				#definitionSource : 'OSProcessAccessor subclass: #WindowsOSProcessAccessor\r\tinstanceVariableNames: \'sigChldSemaphore semaIndex childWatcherThread\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Win32\''			},			#name : #WindowsOSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsOSProcessAccessor,						#isMetaSide : false					},					#name : #sigChldSemaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsOSProcessAccessor,						#isMetaSide : false					},					#name : #semaIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #WindowsOSProcessAccessor,						#isMetaSide : false					},					#name : #childWatcherThread,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WindowsOSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'WindowsOSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WindowsOSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide access to an operating system process, such as the process in which the Squeak VM is currently running. I am based on the Win32 process model for Windows and Windows NT.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Win32,			#package : #OSProcess-Win32,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ],		#time : DateAndTime [ '2018-02-22T14:01:10.792691-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #PseudoAioEventHandler\r\tinstanceVariableNames: \'eventGenerator\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PseudoAioEventHandler,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PseudoAioEventHandler,						#isMetaSide : false					},					#name : #eventGenerator,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PseudoAioEventHandler class\r\tinstanceVariableNames: \'\''				},				#name : #'PseudoAioEventHandler class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PseudoAioEventHandler,					#isMetaSide : false				},				#parent : @8,				#content : 'PseudoAioEventHandler is a replacement for AioEventHandler for use when an AioPlugin is not present. It creates a polling loop by generating #changed: events periodically. With a real AioEventHandler, events are generated only when actual IO activity occurs, while the PseudoAioEventHandler produces regularly timed events regardless of whether any actual IO changes have happened.',				#stamp : 'dtl 11/25/2006 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'PseudoAioEventHandler is a replacement for AioEventHandler for use when an AioPlugin is not present. It creates a polling loop by generating #changed: events periodically. With a real AioEventHandler, events are generated only when actual IO activity occurs, while the PseudoAioEventHandler produces regularly timed events regardless of whether any actual IO changes have happened.',		#newStamp : 'dtl 11/25/2006 10:42'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ],		#time : DateAndTime [ '2018-02-22T14:01:10.794436-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #PseudoAioEventHandler\r\tinstanceVariableNames: \'eventGenerator\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-AIO\''			},			#name : #PseudoAioEventHandler,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PseudoAioEventHandler,						#isMetaSide : false					},					#name : #eventGenerator,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PseudoAioEventHandler class\r\tinstanceVariableNames: \'\''				},				#name : #'PseudoAioEventHandler class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PseudoAioEventHandler,					#isMetaSide : false				},				#parent : @8,				#content : 'PseudoAioEventHandler is a replacement for AioEventHandler for use when an AioPlugin is not present. It creates a polling loop by generating #changed: events periodically. With a real AioEventHandler, events are generated only when actual IO activity occurs, while the PseudoAioEventHandler produces regularly timed events regardless of whether any actual IO changes have happened.',				#stamp : 'dtl 11/25/2006 10:42'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-AIO,			#package : #OSProcess-AIO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ],		#time : DateAndTime [ '2018-02-22T14:01:11.036604-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #OSProcessAccessor\r\tinstanceVariableNames: \'sessionIdentifier grimReaper canObtainSessionIdentifierFromPlugin\'\r\tclassVariableNames: \'EmulateWin32FileLocking FileLockRegistry ThisOSProcessAccessor UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #sessionIdentifier,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #grimReaper,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #canObtainSessionIdentifierFromPlugin,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'OSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSProcessAccessor,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.\r\rThe single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.\r\rWhen an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.\r',				#stamp : 'dtl 7/7/2010 07:58'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #EmulateWin32FileLocking,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #FileLockRegistry,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #ThisOSProcessAccessor,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @8				}			],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #OSProcessAccessor\r\tinstanceVariableNames: \'sessionIdentifier grimReaper canObtainSessionIdentifierFromPlugin\'\r\tclassVariableNames: \'EmulateWin32FileLocking FileLockRegistry ThisOSProcessAccessor UseIOHandle\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Base\''			},			#name : #OSProcessAccessor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #sessionIdentifier,					#parent : @36				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #grimReaper,					#parent : @36				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #canObtainSessionIdentifierFromPlugin,					#parent : @36				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSProcessAccessor class\r\tinstanceVariableNames: \'\''				},				#name : #'OSProcessAccessor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @36			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSProcessAccessor,					#isMetaSide : false				},				#parent : @36,				#content : 'I am an abstract class whose subclasses provide access to an operating system process, such as the process in which the Squeak VM is currently running. My subclasses collaborate with instances of OSProcess subclasses.\r\rThe single instance ThisOSProcessAccessor provides access to the OS process in which the virtual machine is running. On Unix, this instance sets a signal handler to respond to externally generated sigchld signals. This must be done after each image restart in order to call a primitive which informs the VM of the  identity of the semaphore to signal. A similar mechanism is used for Windows to obtain exit status of external OS processes. ThisOSProcessor maintains a process that waits on child exit events and updates a dependent OSProcess of changes to external OS processes.\r\rWhen an image is restarted on a different kind of platform, a new instance is assigned to ThisOSProcessAccessor to provide access to the virtual machine OS process.\r',				#stamp : 'dtl 7/7/2010 07:58'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #EmulateWin32FileLocking,					#parent : @36				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #FileLockRegistry,					#parent : @36				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #ThisOSProcessAccessor,					#parent : @36				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #OSProcessAccessor,						#isMetaSide : false					},					#name : #UseIOHandle,					#parent : @36				}			],			#category : #OSProcess-Base,			#package : #OSProcess-Base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ],		#time : DateAndTime [ '2018-02-22T14:01:11.332044-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalPipe class',				#isMetaSide : true			},			#name : #blockingPipe,			#protocol : #'instance creation',			#sourceCode : 'blockingPipe\r\t"Warning: a read on a blocking pipe will hang the VM if there is insufficient\r\tdata in the pipe to fulfill the read request."\r\r\t"OSPipe blockingPipe"\r\r\t^ super basicNew initialize; setBlocking\r',			#stamp : 'dtl 4/2/2006 21:34',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ],		#time : DateAndTime [ '2018-02-22T14:01:11.333865-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalPipe class',				#isMetaSide : true			},			#name : #bufferedBlockingPipe,			#protocol : #'instance creation',			#sourceCode : 'bufferedBlockingPipe\r\t"Warning: a read on a blocking pipe will hang the VM if there is insufficient\r\tdata in the pipe to fulfill the read request."\r\r\t"OSPipe bufferedBlockingPipe"\r\r\t^ (super basicNew initialize; setBlocking) setBufferedReader; yourself\r',			#stamp : 'dtl 4/2/2006 21:34',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ],		#time : DateAndTime [ '2018-02-22T14:01:11.334854-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalPipe class',				#isMetaSide : true			},			#name : #bufferedNonBlockingPipe,			#protocol : #'instance creation',			#sourceCode : 'bufferedNonBlockingPipe\r\r\t"OSPipe bufferedNonBlockingPipe"\r\r\t^ (super basicNew initialize; setNonBlocking) setBufferedReader; yourself\r',			#stamp : 'dtl 4/2/2006 21:33',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ],		#time : DateAndTime [ '2018-02-22T14:01:11.335642-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalPipe class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\t"ExternalPipe new"\r\r\t^ self nonBlockingPipe\r',			#stamp : 'dtl 4/2/2006 21:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ],		#time : DateAndTime [ '2018-02-22T14:01:11.337553-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalPipe class',				#isMetaSide : true			},			#name : #nonBlockingPipe,			#protocol : #'instance creation',			#sourceCode : 'nonBlockingPipe\r\r\t"OSPipe nonBlockingPipe"\r\r\t^ super basicNew initialize; setNonBlocking\r',			#stamp : 'dtl 3/25/2006 14:14',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ],		#time : DateAndTime [ '2018-02-22T14:01:11.338408-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalPipe class',				#isMetaSide : true			},			#name : #testPipe,			#protocol : #examples,			#sourceCode : 'testPipe\r\t"OSPipe testPipe inspect"\r\r\t| pipe result |\r\tpipe := self new.\r\tpipe nextPutAll: \'string to send through an OSPipe\'.\r\tpipe writer close.\r\tresult := pipe upToEnd.\r\tpipe close.\r\t^ result\r',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ],		#time : DateAndTime [ '2018-02-22T14:01:11.340093-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t"Answer whether the receiver can access any more objects."\r\r\t^ writer closed and: [self peek == nil]\r',			#stamp : 'dtl 4/2/2006 21:14',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ],		#time : DateAndTime [ '2018-02-22T14:01:11.341358-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #atEndOfFile,			#protocol : #testing,			#sourceCode : 'atEndOfFile\r\t"Answer whether the receiver is at its end based on the result of\r\tthe last read operation. This uses feof() to test the underlying file\r\tstream status, and can be used as an alternative to #atEnd, which\r\tdoes not properly report end of file status for an OSPipe."\r\r\t^ reader atEndOfFile\r',			#stamp : 'dtl 6/4/2006 16:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ],		#time : DateAndTime [ '2018-02-22T14:01:11.342478-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #blocking,			#protocol : #accessing,			#sourceCode : 'blocking\r\t"True if reader end is set to blocking mode."\r\r\t^ blocking ifNil: [blocking := true]',			#stamp : 'dtl 3/7/2006 20:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ],		#time : DateAndTime [ '2018-02-22T14:01:11.344187-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'blocking:',			#protocol : #accessing,			#sourceCode : 'blocking: trueOrFalse\r\t"True if reader end is set to blocking mode."\r\r\tblocking := trueOrFalse',			#stamp : 'dtl 3/7/2006 20:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ],		#time : DateAndTime [ '2018-02-22T14:01:11.34537-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #close,			#protocol : #finalization,			#sourceCode : 'close\r\r\tself closeWriter; closeReader\r',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ],		#time : DateAndTime [ '2018-02-22T14:01:11.346802-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #closeReader,			#protocol : #finalization,			#sourceCode : 'closeReader\r\r\treader ifNotNil: [reader close]\r',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ],		#time : DateAndTime [ '2018-02-22T14:01:11.347994-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #closeWriter,			#protocol : #finalization,			#sourceCode : 'closeWriter\r\r\twriter ifNotNil: [writer close]\r',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ],		#time : DateAndTime [ '2018-02-22T14:01:11.349125-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #closed,			#protocol : #testing,			#sourceCode : 'closed\r\r\t^ reader closed',			#stamp : 'dtl 9/16/2002 17:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ],		#time : DateAndTime [ '2018-02-22T14:01:11.350912-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"Answer contents of the pipe, and return the contents to the pipe so it can still be read."\r\r\t"ExternalPipe new nextPutAll: \'hello\'; contents"\r\r\t| s |\r\tself closed ifTrue:\r\t\t[self notify: self printString, \' \', self reader printString, \' closed\'.\r\t\t^ nil].\r\ts := self reader upToEnd.\r\ts isEmpty ifFalse:\r\t\t[self writer closed\r\t\t\tifTrue: [self notify: self printString, \' \', self writer printString,\r\t\t\t\t\t\t\t\t\' closed, cannot replace contents\']\r\t\t\tifFalse: [self nextPutAll: s]].\r\t^ s',			#stamp : 'dtl 4/16/2003 06:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ],		#time : DateAndTime [ '2018-02-22T14:01:11.3521-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #cr,			#protocol : #'character writing',			#sourceCode : 'cr\r\t"Append a return character to the receiver."\r\r\tself writer cr',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ],		#time : DateAndTime [ '2018-02-22T14:01:11.353707-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #flush,			#protocol : #accessing,			#sourceCode : 'flush\r\t^writer flush',			#stamp : 'dtl 4/12/2014 16:04',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ],		#time : DateAndTime [ '2018-02-22T14:01:11.354836-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\t^ self makePipe\r',			#stamp : 'dtl 3/25/2006 14:08',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ],		#time : DateAndTime [ '2018-02-22T14:01:11.355941-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #isPipe,			#protocol : #testing,			#sourceCode : 'isPipe\r\r\t^ true\r',			#stamp : 'dtl 3/26/2006 15:48',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ],		#time : DateAndTime [ '2018-02-22T14:01:11.357699-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #makePipe,			#protocol : #initialize-release,			#sourceCode : 'makePipe\r\t"Create an OS pipe and attach it to my input and output streams."\r\r\t| handleArray |\r\thandleArray := OSProcess accessor makePipeHandles.\r\thandleArray isNil\r\t\tifTrue:\r\t\t\t[self error: \'cannot create OS pipe\']\r\t\tifFalse:\r\t\t\t[self reader: (AttachableFileStream\r\t\t\t\t\t\t\tname: \'pipeReader\'\r\t\t\t\t\t\t\tattachTo: (handleArray at: 1)\r\t\t\t\t\t\t\twritable: false).\r\t\t\tself writer: (AttachableFileStream\r\t\t\t\t\t\t\tname: \'pipeWriter\'\r\t\t\t\t\t\t\tattachTo: (handleArray at: 2)\r\t\t\t\t\t\t\twritable: true)]\r',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ],		#time : DateAndTime [ '2018-02-22T14:01:11.358853-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t"Answer the next object accessible by the receiver."\r\r\t^ reader next',			#stamp : 'dtl 9/16/2002 17:33',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ],		#time : DateAndTime [ '2018-02-22T14:01:11.360304-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'next:',			#protocol : #accessing,			#sourceCode : 'next: anInteger \r\t"Answer the next anInteger elements of my collection."\r\r\t^ reader next: anInteger\r',			#stamp : 'dtl 9/16/2002 17:33',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ],		#time : DateAndTime [ '2018-02-22T14:01:11.361465-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #accessing,			#sourceCode : 'nextPut: anObject \r\t"Insert the argument, anObject, as the next object accessible by the \r\treceiver. Answer anObject."\r\r\t^ writer nextPut: anObject',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ],		#time : DateAndTime [ '2018-02-22T14:01:11.36316-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #accessing,			#sourceCode : 'nextPutAll: aCollection \r\t"Append the elements of aCollection to the sequence of objects accessible \r\tby the receiver. Answer aCollection."\r\r\t^ writer nextPutAll: aCollection',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ],		#time : DateAndTime [ '2018-02-22T14:01:11.364307-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #peek,			#protocol : #accessing,			#sourceCode : 'peek\r\r\t^ reader peek',			#stamp : 'dtl 9/16/2002 17:34',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ],		#time : DateAndTime [ '2018-02-22T14:01:11.365451-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\t"The implementation of Stream>>printOn: has bad side effects when used\r\tfor OSPipe. This implementation is copied from Object."\r\r\t| title |\r\ttitle := self class name.\r\taStream\r\t\tnextPutAll: (title first isVowel ifTrue: [\'an \'] ifFalse: [\'a \']);\r\t\tnextPutAll: title',			#stamp : 'dtl 4/2/2006 11:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ],		#time : DateAndTime [ '2018-02-22T14:01:11.366863-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #reader,			#protocol : #accessing,			#sourceCode : 'reader\r\t"Answer a stream on the read end of the pipe."\r\r\t^ reader',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ],		#time : DateAndTime [ '2018-02-22T14:01:11.368015-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'reader:',			#protocol : #accessing,			#sourceCode : 'reader: aReadStream\r\r\treader := aReadStream',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ],		#time : DateAndTime [ '2018-02-22T14:01:11.369776-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #setBlocking,			#protocol : #initialize-release,			#sourceCode : 'setBlocking\r\t"Set the reader side of the pipe for blocking reads."\r\r\treader ifNotNil: [OSProcess accessor setBlocking: reader ioHandle].\r\tself blocking: true\r',			#stamp : 'dtl 3/9/2006 06:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ],		#time : DateAndTime [ '2018-02-22T14:01:11.370933-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #setBufferedReader,			#protocol : #initialize-release,			#sourceCode : 'setBufferedReader\r\t"Use an event driven AsyncFileReadStream to represent the reader end of the pipe.\r\tThis should be used if the pipe will be read by a Smalltalk process. It should not\r\tbe used if the pipe is to be read by an external OS process."\r\r\treader ifNotNil:\r\t\t[reader removeDependent: self.\r\t\treader unregister.\r\t\tself reader: reader asBufferedAsyncFileReadStream.\r\t\tself setNonBlocking.\r\t\treader addDependent: self.\r\t\t^ true].\r\t^ false\r',			#stamp : 'dtl 4/2/2006 19:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ],		#time : DateAndTime [ '2018-02-22T14:01:11.372111-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #setNonBlocking,			#protocol : #initialize-release,			#sourceCode : 'setNonBlocking\r\t"Set the reader side of the pipe for non-blocking reads."\r\r\treader ifNotNil: [OSProcess accessor setNonBlocking: reader ioHandle].\r\tself blocking: false\r',			#stamp : 'dtl 3/9/2006 06:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ],		#time : DateAndTime [ '2018-02-22T14:01:11.373514-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #triggerDataReady,			#protocol : #updating,			#sourceCode : 'triggerDataReady\r\t"Notify any object waiting for data ready on the pipe."\r\r\tself triggerEvent: #dataReady.\r',			#stamp : 'dtl 3/15/2006 07:17',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ],		#time : DateAndTime [ '2018-02-22T14:01:11.375322-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #accessing,			#sourceCode : 'upToEnd\r\t"Answer the remaining elements in the string"\r\r\treader closed\r\t\tifTrue: [^ \'\']\r\t\tifFalse: [^ reader upToEnd]',			#stamp : 'dtl 9/18/2002 20:29',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ],		#time : DateAndTime [ '2018-02-22T14:01:11.376498-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #accessing,			#sourceCode : 'upToEndOfFile\r\t"Answer the remaining elements in the pipe.  Use #isAtEndOfFile: to\r\tdetermine end of file status with feof(), required for reliable end of\r\tfile test on OS pipes."\r\r\treader closed\r\t\tifTrue: [^ \'\']\r\t\tifFalse: [^ reader upToEndOfFile]',			#stamp : 'dtl 11/11/2011 09:27',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ],		#time : DateAndTime [ '2018-02-22T14:01:11.377628-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\t"Notify any object waiting for data ready on the pipe."\r\r\tself changed.\r\tself triggerDataReady.\r\t^ super update: aParameter\r',			#stamp : 'dtl 1/18/2003 14:31',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ],		#time : DateAndTime [ '2018-02-22T14:01:11.378738-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #writer,			#protocol : #accessing,			#sourceCode : 'writer\r\t"Answer a stream on the write end of the pipe."\r\r\t^ writer',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ],		#time : DateAndTime [ '2018-02-22T14:01:11.380103-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalPipe,				#isMetaSide : false			},			#name : #'writer:',			#protocol : #accessing,			#sourceCode : 'writer: aWriteStream\r\r\twriter := aWriteStream',			#stamp : 'dtl 3/7/2006 19:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ],		#time : DateAndTime [ '2018-02-22T14:01:11.381574-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipe,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t"Answer the next object accessible by the receiver."\r\r\t| c |\r\tnextChar isNil\r\t\tifTrue:\r\t\t\t[^ [reader next]\r\t\t\t\ton: Error\r\t\t\t\tdo: [nil]]\r\t\tifFalse:\r\t\t\t[c := nextChar.\r\t\t\tnextChar := nil.\r\t\t\t^ c]\r',			#stamp : 'dtl 10/14/2001 12:16',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ],		#time : DateAndTime [ '2018-02-22T14:01:11.382358-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipe,				#isMetaSide : false			},			#name : #'next:',			#protocol : #accessing,			#sourceCode : 'next: anInteger \r\t"Answer the next anInteger elements of my collection."\r\r\t| c strm |\r\tstrm := WriteStream on: String new.\r\t(1 to: anInteger) do:\r\t\t[:index |\r\t\tc := self next.\r\t\tc isNil\r\t\t\tifTrue: [^ strm contents]\t\r\t\t\tifFalse: [strm nextPut: c. false]].\r\t^ strm contents\r',			#stamp : 'dtl 2/24/2013 10:24',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ],		#time : DateAndTime [ '2018-02-22T14:01:11.383082-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipe,				#isMetaSide : false			},			#name : #peek,			#protocol : #accessing,			#sourceCode : 'peek\r\r\t^ nextChar isNil\r\t\tifTrue: [reader closed\r\t\t\t\tifFalse: [nextChar := reader next]]\r\t\tifFalse: [nextChar]',			#stamp : 'dtl 5/16/2006 06:52',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ],		#time : DateAndTime [ '2018-02-22T14:01:11.383823-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipe,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #accessing,			#sourceCode : 'upToEnd\r\t"Answer the remaining elements in the string. This method is retained for backward\r\tcompatibility with older versions of CommandShell."\r\r\t| strm s |\r\tstrm := WriteStream on: String new.\r\t[(s := self next: 2000) isEmpty\r\t\tifTrue: [^ strm contents]\r\t\tifFalse: [strm nextPutAll: s]] repeat\r',			#stamp : 'dtl 2/24/2013 10:24',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ],		#time : DateAndTime [ '2018-02-22T14:01:11.384564-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipe,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #accessing,			#sourceCode : 'upToEndOfFile\r\t"Answer the remaining elements in the pipe. Use #atEndOfFile to\r\tdetermine end of file status with feof(), required for reliable end of\r\tfile test on OS pipes. Compare #upToEnd, which uses the generic end\r\tof file test in FilePlugin."\r\r\t| strm d s |\r\tstrm := WriteStream on: String new.\r\td := Delay forMilliseconds: 200.\r\t[(s := self next: 2000) isEmpty\r\t\tifTrue: [self atEndOfFile\r\t\t\tifTrue: [^ strm contents]\r\t\t\tifFalse: [d wait]]\r\t\tifFalse: [strm nextPutAll: s]] repeat\r',			#stamp : 'dtl 2/24/2013 10:24',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ],		#time : DateAndTime [ '2018-02-22T14:01:11.385161-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AsyncFileReadStream class',				#isMetaSide : true			},			#name : #stdIn,			#protocol : #examples,			#sourceCode : 'stdIn\r\r\t"self stdIn"\r\r\t^ super stdIn initialize\r',			#stamp : 'dtl 7/9/2003 20:16',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ],		#time : DateAndTime [ '2018-02-22T14:01:11.386188-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #actAsExecutor,			#protocol : #finalization,			#sourceCode : 'actAsExecutor\r\r\tsuper actAsExecutor.\r\teventHandler := nil',			#stamp : 'dtl 6/17/2006 08:08',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ],		#time : DateAndTime [ '2018-02-22T14:01:11.387872-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #asAsyncFileReadStream,			#protocol : #converting,			#sourceCode : 'asAsyncFileReadStream\r\r\t^ self\r',			#stamp : 'dtl 7/8/2003 20:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ],		#time : DateAndTime [ '2018-02-22T14:01:11.388817-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #asAttachableFileStream,			#protocol : #converting,			#sourceCode : 'asAttachableFileStream\r\t"Answer a replacement for this object, with no asynchronous event handling.\r\tDo not close the ioHandle when this object is finalized."\r\r\tself keepOpen.\r\t^ AttachableFileStream\r\t\tname: self name\r\t\tattachTo: self ioHandle\r\t\twritable: self isReadOnly not\r',			#stamp : 'dtl 7/8/2003 19:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ],		#time : DateAndTime [ '2018-02-22T14:01:11.389713-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #asBufferedAsyncFileReadStream,			#protocol : #converting,			#sourceCode : 'asBufferedAsyncFileReadStream\r\t"Answer a replacement for this object, with buffered output."\r\r\t^ BufferedAsyncFileReadStream\r\t\tname: self name\r\t\tattachTo: self ioHandle\r\t\twritable: self isReadOnly not\r',			#stamp : 'dtl 7/8/2003 21:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ],		#time : DateAndTime [ '2018-02-22T14:01:11.390592-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\r\tself disableEventHandling.\r\t^ super close',			#stamp : 'dtl 7/8/2003 21:48',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ],		#time : DateAndTime [ '2018-02-22T14:01:11.391477-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #disableEventHandling,			#protocol : #'read event handling',			#sourceCode : 'disableEventHandling\r\r\teventHandler\r\t\tifNotNil: [eventHandler removeDependent: self; close].\r\tself eventHandler: nil',			#stamp : 'dtl 9/3/2010 16:50',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ],		#time : DateAndTime [ '2018-02-22T14:01:11.392361-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #enableEventHandling,			#protocol : #'read event handling',			#sourceCode : 'enableEventHandling\r\r\tself eventHandler: (AioEventHandler aioPluginPresent\r\t\tifTrue: [AioEventHandler\r\t\t\t\tforFileStream: self\r\t\t\t\texceptions: true\r\t\t\t\treadEvents: true\r\t\t\t\twriteEvents: false]\r\t\tifFalse: [PseudoAioEventHandler new]).\r\tself eventHandler addDependent: self',			#stamp : 'dtl 11/25/2006 10:56',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ],		#time : DateAndTime [ '2018-02-22T14:01:11.394107-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #eventHandler,			#protocol : #accessing,			#sourceCode : 'eventHandler\r\t"The aio event handler. Provides notification whenever external data is available."\r\r\t^ eventHandler',			#stamp : 'dtl 7/8/2003 19:26',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ],		#time : DateAndTime [ '2018-02-22T14:01:11.395028-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #'eventHandler:',			#protocol : #accessing,			#sourceCode : 'eventHandler: anAioEventHandler\r\t"The aio event handler. Provides notification whenever external data is available."\r\r\teventHandler := anAioEventHandler',			#stamp : 'dtl 7/8/2003 19:26',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ],		#time : DateAndTime [ '2018-02-22T14:01:11.395915-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\t"Shut the the event handler before closing the file, otherwise aio\r\tfunctions may reference a closed file handle."\r\r\teventHandler ifNotNil: [eventHandler finalize].\r\tsuper finalize\r',			#stamp : 'dtl 9/3/2010 16:57',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ],		#time : DateAndTime [ '2018-02-22T14:01:11.3968-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #hasValidHandler,			#protocol : #'read event handling',			#sourceCode : 'hasValidHandler\r\r\t^ self eventHandler notNil and: [eventHandler hasValidHandler]\r',			#stamp : 'dtl 7/8/2003 19:29',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ],		#time : DateAndTime [ '2018-02-22T14:01:11.397691-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\tsuper initialize.\r\tself readOnly.\r\tOSProcess accessor setNonBlocking: self ioHandle.\r\tself enableEventHandling\r',			#stamp : 'dtl 3/15/2006 07:45',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ],		#time : DateAndTime [ '2018-02-22T14:01:11.39916-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #open,			#protocol : #initialize-release,			#sourceCode : 'open\r\r\t^ super open initialize\r',			#stamp : 'dtl 7/8/2003 21:48',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ],		#time : DateAndTime [ '2018-02-22T14:01:11.400259-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #'read, write, position',			#sourceCode : 'upToEndOfFile\r\t"Answer a subcollection from the current access position through\r\tthe last element of the receiver.  Use #atEndOfFile to determine end\r\tof file status with feof(), required for reliable end of file test on\r\tOS pipes. Close the file when end of file is detected."\r\r\t| b |\r\tb := super upToEndOfFile.\r\tself isReadOnly\r\t\tifTrue: [self close].\r\t^ b',			#stamp : 'dtl 9/2/2006 09:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ],		#time : DateAndTime [ '2018-02-22T14:01:11.401321-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AsyncFileReadStream,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\r\t(aParameter == self eventHandler)\r\t\tifTrue: [self changed]\r',			#stamp : 'dtl 7/8/2003 21:22',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ],		#time : DateAndTime [ '2018-02-22T14:01:11.401932-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BufferedAsyncFileReadStream class',				#isMetaSide : true			},			#name : #stdIn,			#protocol : #examples,			#sourceCode : 'stdIn\r\r\t"self stdIn"\r\r\t^ super stdIn\r',			#stamp : 'dtl 7/9/2003 20:24',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ],		#time : DateAndTime [ '2018-02-22T14:01:11.403536-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #actAsExecutor,			#protocol : #finalization,			#sourceCode : 'actAsExecutor\r\r\tsuper actAsExecutor.\r\tnonBlockingMode := nil.\r\treadBuffer := nil.\r\treadSyncSemaphore := nil.\r\tdataAvailableSemaphore := nil\r',			#stamp : 'dtl 6/17/2006 08:10',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ],		#time : DateAndTime [ '2018-02-22T14:01:11.40577-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'appendAllToBuffer:',			#protocol : #'read ahead buffer',			#sourceCode : 'appendAllToBuffer: chars\r\t"Append all chars to readBuffer, then signal dataAvailableSemaphore to inform\r\tany blocked reader that the read can proceed. Also generate a #changed event\r\tto inform any interested objects that new data has become available."\r\r\t| pos |\r\tself readSyncSemaphore critical:\r\t\t[(self readBuffer position > self maxReadBufferSize) ifTrue:\r\t\t\t["Read buffer is getting too large. Replace it."\r\t\t\tself readBuffer: (ReadWriteStream on: readBuffer upToEnd)].\r\t\tpos := readBuffer position.\r\t\treadBuffer setToEnd.\r\t\treadBuffer nextPutAll: chars.\r\t\treadBuffer position: pos].\r\tself dataAvailableSemaphore signal.\r\tself changed',			#stamp : 'dtl 10/1/2006 17:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ],		#time : DateAndTime [ '2018-02-22T14:01:11.407682-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'appendToBuffer:',			#protocol : #'read ahead buffer',			#sourceCode : 'appendToBuffer: aCharacter\r\t"Append aCharacter to readBuffer, then signal dataAvailableSemaphore to inform\r\tany blocked reader that the read can proceed, and trigger a #dataReady event to\r\tinform any interested objects that new data has become available."\r\r\t| pos |\r\tself readSyncSemaphore critical:\r\t\t[pos := self readBuffer position.\r\t\treadBuffer setToEnd.\r\t\treadBuffer nextPut: aCharacter.\r\t\treadBuffer position: pos].\r\tself dataAvailableSemaphore signal.\r\tself changed',			#stamp : 'dtl 10/1/2006 17:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ],		#time : DateAndTime [ '2018-02-22T14:01:11.409148-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #asAsyncFileReadStream,			#protocol : #converting,			#sourceCode : 'asAsyncFileReadStream\r\t"Answer a replacement for this object, with asynchronous event handling but\r\tno buffering."\r\r\t^ AsyncFileReadStream\r\t\tname: self name\r\t\tattachTo: self ioHandle\r\t\twritable: self isReadOnly not\r',			#stamp : 'dtl 7/8/2003 20:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ],		#time : DateAndTime [ '2018-02-22T14:01:11.41058-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #asBufferedAsyncFileReadStream,			#protocol : #converting,			#sourceCode : 'asBufferedAsyncFileReadStream\r\r\t^ self',			#stamp : 'dtl 7/8/2003 20:55',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ],		#time : DateAndTime [ '2018-02-22T14:01:11.412697-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t"Answer whether the receiver can access any more objects.\r\r\tWarning: If this instance represents the reader end of an OS pipe, it\r\tis possible for the #atEnd test to give a false negative. In particular, after\r\tclosing the writer end of an empty OSPipe, the reader may not appear to\r\tbe atEnd until some time has elapsed, or until an explicit read on the pipe\r\tcauses the status to be updated. To illustrate the problem:\r\r\t\t(OSPipe new setBufferedReader; yourself) closeWriter; atEnd>>false\r\t\t(OSPipe new ) closeWriter; next; yourself; atEnd>>true\r\t\t(OSPipe new setBufferedReader; yourself) closeWriter; next; yourself; atEnd>>true"\r\r\t^ self readSyncSemaphore\r\t\tcritical: [self readBuffer atEnd\r\t\t\t\tand: [super atEnd]]',			#stamp : 'dtl 2/22/2007 08:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ],		#time : DateAndTime [ '2018-02-22T14:01:11.414611-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #atEndOfFile,			#protocol : #testing,			#sourceCode : 'atEndOfFile\r\t"Answer whether the receiver is at its end based on the result of\r\tthe last read operation. This uses feof() to test the underlying file\r\tstream status, and can be used as an alternative to #atEnd, which\r\tdoes not properly report end of file status for an OSPipe."\r\r\t^ self readSyncSemaphore\r\t\tcritical: [self readBuffer atEnd\r\t\t\t\tand: [fileID isNil\r\t\t\t\t\t\tor: [OSProcess accessor isAtEndOfFile: fileID]]]',			#stamp : 'dtl 2/22/2007 08:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ],		#time : DateAndTime [ '2018-02-22T14:01:11.416114-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #basicNext,			#protocol : #'read, write, position',			#sourceCode : 'basicNext\r\t"Answer the next byte from this file, or nil if at the end of the file.\r\tIf the readBuffer is empty, force a basicNext in order to ensure that\r\tthe end of file flag is updated (in stdio stream)."\r\r\t(self readSyncSemaphore\r\t\t\tcritical: [self readBuffer atEnd])\r\t\tifTrue: [^ super basicNext]\r\t\tifFalse: [[self isBlocking]\r\t\t\t\tifTrue: [self waitForDataReady].\r\t\t\t^ self readSyncSemaphore\r\t\t\t\tcritical: [readBuffer next]]',			#stamp : 'dtl 2/22/2007 08:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ],		#time : DateAndTime [ '2018-02-22T14:01:11.417616-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #dataAvailableSemaphore,			#protocol : #accessing,			#sourceCode : 'dataAvailableSemaphore\r\t"Signalled one or more times when data becomes available. Only one Process\r\tis permitted to wait on this Semaphore."\r\r\t^ dataAvailableSemaphore ifNil: [dataAvailableSemaphore := Semaphore new]\r',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ],		#time : DateAndTime [ '2018-02-22T14:01:11.419722-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #isBlocking,			#protocol : #testing,			#sourceCode : 'isBlocking\r\t"Answer true if set to blocking mode."\r\r\t^ self nonBlockingMode not',			#stamp : 'dtl 7/9/2003 20:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ],		#time : DateAndTime [ '2018-02-22T14:01:11.421566-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #maxReadBufferSize,			#protocol : #defaults,			#sourceCode : 'maxReadBufferSize\r\t"Replace readBuffer when position exceeds this."\r\r\t^ 40000\r',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ],		#time : DateAndTime [ '2018-02-22T14:01:11.423114-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'moveAvailableDataFrom:',			#protocol : #'read ahead buffer',			#sourceCode : 'moveAvailableDataFrom: sqFile\r\r\t| count bufferSize buffer |\r\t(readBuffer notNil and: [readBuffer size > self readBufferMemoryWarningThreshold])\r\t\tifTrue: [self notify: \'buffer size \', readBuffer size asString.\r\t\t\t^(Delay forSeconds: 2) wait].\r\tbufferSize := self readAheadChunkSize.\r\tbuffer := String new: bufferSize.\r\tcount := self readAvailableDataFrom: sqFile into: buffer.\r\tcount > 0\r\t\tifTrue:\r\t\t\t[count == bufferSize\r\t\t\t\tifTrue:\r\t\t\t\t\t[self appendAllToBuffer: buffer]\r\t\t\t\tifFalse:\r\t\t\t\t\t[self appendAllToBuffer: (buffer copyFrom: 1 to: count)]]\r\t\tifFalse:\r\t\t\t[(self closed or: [OSProcess accessor isAtEndOfFile: self ioHandle])\r\t\t\t\tifTrue:\r\t\t\t\t\t[self disableEventHandling]]\r',			#stamp : 'dtl 3/4/2017 14:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ],		#time : DateAndTime [ '2018-02-22T14:01:11.425196-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #moveAvailableDataToBuffer,			#protocol : #'read ahead buffer',			#sourceCode : 'moveAvailableDataToBuffer\r\r\t^ self moveAvailableDataFrom: (OSProcess accessor handleFromAccessor: self ioHandle).\r',			#stamp : 'dtl 7/6/2003 20:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ],		#time : DateAndTime [ '2018-02-22T14:01:11.426787-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #next,			#protocol : #'read, write, position',			#sourceCode : 'next\r\r\t((self readSyncSemaphore\r\t\t\t\tcritical: [self readBuffer atEnd])\r\t\t\tand: [self isBlocking])\r\t\tifTrue: [self waitForDataReady].\r\t^ self readSyncSemaphore\r\t\tcritical: [readBuffer next]',			#stamp : 'dtl 9/3/2010 17:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ],		#time : DateAndTime [ '2018-02-22T14:01:11.42857-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'next:into:startingAt:',			#protocol : #'read, write, position',			#sourceCode : 'next: n into: aString startingAt: startIndex\r\t"Read n bytes into the given string.\r\tReturn aString or a partial copy if less than n elements have been read."\r\r\t| count |\r\tcount := self readInto: aString startingAt: startIndex count: n.\r\tcount = n\r\t\tifTrue: [^ aString]\r\t\tifFalse: [^ aString copyFrom: 1 to: startIndex+count-1]',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ],		#time : DateAndTime [ '2018-02-22T14:01:11.430015-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #nonBlockingMode,			#protocol : #accessing,			#sourceCode : 'nonBlockingMode\r\t"True if nonblocking read behavior should be implemented"\r\r\t^ nonBlockingMode ifNil: [nonBlockingMode := true]\r',			#stamp : 'dtl 7/9/2003 20:57',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ],		#time : DateAndTime [ '2018-02-22T14:01:11.432076-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'nonBlockingMode:',			#protocol : #accessing,			#sourceCode : 'nonBlockingMode: trueOrFalse\r\t"True if nonblocking read behavior should be implemented"\r\r\tnonBlockingMode := trueOrFalse\r',			#stamp : 'dtl 7/9/2003 20:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ],		#time : DateAndTime [ '2018-02-22T14:01:11.433715-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #peek,			#protocol : #'read, write, position',			#sourceCode : 'peek\r\t"Answer what would be returned if the message next were sent to the\r\treceiver. If the receiver is at the end, answer nil. "\r\r\t((self readSyncSemaphore\r\t\t\t\tcritical: [self readBuffer atEnd])\r\t\t\tand: [self isBlocking])\r\t\tifTrue: [self waitForDataReady].\r\t^ self readSyncSemaphore\r\t\tcritical: [readBuffer peek]',			#stamp : 'dtl 9/3/2010 17:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ],		#time : DateAndTime [ '2018-02-22T14:01:11.4354-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #readAheadChunkSize,			#protocol : #defaults,			#sourceCode : 'readAheadChunkSize\r\t"The async read ahead process will read at most this many characters.\r\tNotes: On my system (dtl), a chunk size of 2000 leads to ExternalCommandShell\r\toverdriving the stdout stream when doing (for example) a long directory listing.\r\tI have added error handling to accommodate this, but I do know know how\r\treliable it is, so I would prefer to avoid generating the condition. A chunk\r\tsize of 200 is small enough that performance is noticably impacted in a\r\tCommandShell window. A chunk size of 1000 seems to produce good overall\r\tbehavior."\r\r\t^ 1000',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ],		#time : DateAndTime [ '2018-02-22T14:01:11.436863-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'readAvailableDataFrom:into:',			#protocol : #'read ahead buffer',			#sourceCode : 'readAvailableDataFrom: sqFile into: buffer\r\t"Some implementations of the read primitive may read character by character\r\tfrom standard input. Handle that case by looping while data available. Answer\r\tthe number of bytes read into the buffer."\r\r\t| bytesRead |\r\tbytesRead := 0.\r\t[ | count |\r\t\t[count := self primRead: sqFile\r\t\t\t\tinto: buffer\r\t\t\t\tstartingAt: 1 + bytesRead\r\t\t\t\tcount: self readAheadChunkSize - bytesRead]\r\t\t\ton: Error\t"Could fail if closed"\r\t\t\tdo: [count := 0].\r\tbytesRead := bytesRead + count.\r\tcount > 0] whileTrue.\r\t^ bytesRead.\r',			#stamp : 'dtl 3/4/2017 14:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ],		#time : DateAndTime [ '2018-02-22T14:01:11.438976-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #readBuffer,			#protocol : #accessing,			#sourceCode : 'readBuffer\r\t"Read ahead buffer, filled asynchronously as data becomes available on the IO channel"\r\r\t^ readBuffer ifNil: [readBuffer := ReadWriteStream on: String new]\r',			#stamp : 'dtl 2/24/2013 10:22',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ],		#time : DateAndTime [ '2018-02-22T14:01:11.440591-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'readBuffer:',			#protocol : #accessing,			#sourceCode : 'readBuffer: aStream\r\r\treadBuffer := aStream',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ],		#time : DateAndTime [ '2018-02-22T14:01:11.442204-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #readBufferMemoryWarningThreshold,			#protocol : #defaults,			#sourceCode : 'readBufferMemoryWarningThreshold\r\t"A read buffer larger that this may start causing problems. Issue a warning\r\tbefore the object memory becomes too large." \r\r\t^self maxReadBufferSize * 1000\r',			#stamp : 'dtl 12/7/2012 19:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ],		#time : DateAndTime [ '2018-02-22T14:01:11.444309-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'readInto:startingAt:count:',			#protocol : #'read, write, position',			#sourceCode : 'readInto: byteArray startingAt: startIndex count: count \r\t"Read into the given array as specified, and return the count actually\r\ttransferred. "\r\r\t| s size |\r\tself isBlocking\r\t\tifTrue: [self waitForDataReady: count.\r\t\t\ts := self readSyncSemaphore\r\t\t\t\t\t\tcritical: [self readBuffer next: count].\r\t\t\tsize := count]\r\t\tifFalse: [size := self readBuffer size - readBuffer position min: count.\r\t\t\ts := self readSyncSemaphore\r\t\t\t\t\t\tcritical: [self readBuffer next: size]].\r\tbyteArray\r\t\treplaceFrom: startIndex\r\t\tto: startIndex + size - 1\r\t\twith: s.\r\t^ size',			#stamp : 'dtl 3/21/2007 21:56',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ],		#time : DateAndTime [ '2018-02-22T14:01:11.445803-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #readSyncSemaphore,			#protocol : #accessing,			#sourceCode : 'readSyncSemaphore\r\t"A semaphore for synchronizing access to readBuffer"\r\r\t^ readSyncSemaphore ifNil: [readSyncSemaphore := Semaphore forMutualExclusion]',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ],		#time : DateAndTime [ '2018-02-22T14:01:11.447567-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #setBlocking,			#protocol : #initialize-release,			#sourceCode : 'setBlocking\r\t"Set for blocking reads. Default is nonblocking mode."\r\r\tself nonBlockingMode: false\r',			#stamp : 'dtl 7/9/2003 20:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ],		#time : DateAndTime [ '2018-02-22T14:01:11.449481-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #setNonBlocking,			#protocol : #initialize-release,			#sourceCode : 'setNonBlocking\r\t"Set for nonblocking reads. This is the default mode."\r\r\tself nonBlockingMode: true\r',			#stamp : 'dtl 7/9/2003 20:55',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ],		#time : DateAndTime [ '2018-02-22T14:01:11.451669-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'upTo:',			#protocol : #'read, write, position',			#sourceCode : 'upTo: delim \r\r\t^ self readSyncSemaphore critical: [self readBuffer upTo: delim]\r',			#stamp : 'dtl 3/19/2007 18:28',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ],		#time : DateAndTime [ '2018-02-22T14:01:11.453225-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #'read, write, position',			#sourceCode : 'upToEndOfFile\r\t"Answer a subcollection from the current access position through\r\tthe last element of the receiver.  Use #atEndOfFile to determine end\r\tof file status with feof(), required for reliable end of file test on\r\tOS pipes. Close the file when end of file is detected."\r\r\t| newStream buffer |\r\tbuffer := buffer1 species new: 1000.\r\tnewStream := WriteStream on: (buffer1 species new: 100).\r\t[self atEndOfFile] whileFalse:\r\t\t[self moveAvailableDataToBuffer.\r\t\tnewStream nextPutAll: (self nextInto: buffer)].\r\tself isReadOnly ifTrue: [self close].\r\t^ newStream contents\r',			#stamp : 'dtl 12/21/2007 13:14',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ],		#time : DateAndTime [ '2018-02-22T14:01:11.455075-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\t"A #changed event is generated as a side effect of this method"\r\r\t(aParameter == self eventHandler)\r\t\tifTrue: [self moveAvailableDataToBuffer]\r',			#stamp : 'dtl 7/8/2003 22:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ],		#time : DateAndTime [ '2018-02-22T14:01:11.456515-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #waitForBufferAvailable,			#protocol : #'read ahead buffer',			#sourceCode : 'waitForBufferAvailable\r\t"Block if the readBuffer has grown too large. No-op for now, but add\r\tthis later if large pipes prove to be a problem."',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ],		#time : DateAndTime [ '2018-02-22T14:01:11.458648-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #waitForDataReady,			#protocol : #'read ahead buffer',			#sourceCode : 'waitForDataReady\r\t"Block until at least one character is available in the readBuffer. This is not\r\tthread safe, and only one Process is permitted to send this message."\r\r\tself dataAvailableSemaphore wait\r',			#stamp : 'dtl 7/6/2003 10:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ],		#time : DateAndTime [ '2018-02-22T14:01:11.460142-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BufferedAsyncFileReadStream,				#isMetaSide : false			},			#name : #'waitForDataReady:',			#protocol : #'read ahead buffer',			#sourceCode : 'waitForDataReady: count \r\t"Block until at least count characters are available in the readBuffer"\r\r\t[self readSyncSemaphore\r\t\tcritical: [self readBuffer size - readBuffer position < count]]\r\t\twhileTrue: [self waitForDataReady]',			#stamp : 'dtl 2/22/2007 08:09',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ],		#time : DateAndTime [ '2018-02-22T14:01:11.461048-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'fileNamed:',			#protocol : #'file creation',			#sourceCode : 'fileNamed: fileName\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 15:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ],		#time : DateAndTime [ '2018-02-22T14:01:11.461877-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\t"AttachableFileStream initialize"\r\r\tUseIOHandle := (Smalltalk hasClassNamed: #IOHandle)\r',			#stamp : 'dtl 10/19/2001 21:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ],		#time : DateAndTime [ '2018-02-22T14:01:11.46257-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'isAFileNamed:',			#protocol : #'file creation',			#sourceCode : 'isAFileNamed: fileName\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 15:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ],		#time : DateAndTime [ '2018-02-22T14:01:11.463946-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'name:attachTo:writable:',			#protocol : #'instance creation',			#sourceCode : 'name: aSymbolOrString attachTo: anIOHandle writable: readWriteFlag \r\t"Create a new instance attached to anIOHandle, where anIOHandle\r\trepresents an open IO channel. For write streams, this represents two\r\tSmalltalk streams which write to the same OS file or output stream,\r\tpresumably with interleaved output. The purpose of this method is to\r\tpermit a FileStream to be attached to an existing IOHandle, such as\r\tthe IOHandle for standard input, standard output, and standard error."\r\r\t^ (super basicNew\r\t\tname: aSymbolOrString\r\t\tattachTo: anIOHandle\r\t\twritable: readWriteFlag) initialize',			#stamp : 'dtl 3/15/2006 19:50',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ],		#time : DateAndTime [ '2018-02-22T14:01:11.464643-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'newFileNamed:',			#protocol : #'file creation',			#sourceCode : 'newFileNamed: fileName\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 15:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ],		#time : DateAndTime [ '2018-02-22T14:01:11.465407-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'oldFileNamed:',			#protocol : #'file creation',			#sourceCode : 'oldFileNamed: fileName\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 15:55',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ],		#time : DateAndTime [ '2018-02-22T14:01:11.46608-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'readOnlyFileNamed:',			#protocol : #'file creation',			#sourceCode : 'readOnlyFileNamed: fileName\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 15:56',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ],		#time : DateAndTime [ '2018-02-22T14:01:11.466747-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'register:',			#protocol : #registry,			#sourceCode : 'register: anObject\r\t"An attachable file stream is generally either a second reference to an\r\texisting file stream, or a reference to a transient object such as a pipe\r\tendpoint. There is no need to register it for finalization."\r\r\t^ anObject',			#stamp : 'dtl 8/25/2006 18:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ],		#time : DateAndTime [ '2018-02-22T14:01:11.467584-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #stdIn,			#protocol : #examples,			#sourceCode : 'stdIn\r\r\t"self stdIn"\r\r\t^ self name: \'stdIn\' attachTo: OSProcess thisOSProcess stdIn ioHandle writable: false\r',			#stamp : 'dtl 3/7/2006 06:42',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ],		#time : DateAndTime [ '2018-02-22T14:01:11.46841-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AttachableFileStream class',				#isMetaSide : true			},			#name : #'unregister:',			#protocol : #registry,			#sourceCode : 'unregister: anObject\r\t"An attachable file stream is generally either a second reference to an\r\texisting file stream, or a reference to a transient object such as a pipe\r\tendpoint. There is no need to register it for finalization."\r\r\t^ anObject',			#stamp : 'dtl 8/25/2006 18:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ],		#time : DateAndTime [ '2018-02-22T14:01:11.470178-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #asAsyncFileReadStream,			#protocol : #converting,			#sourceCode : 'asAsyncFileReadStream\r\t"Answer a replacement for this object, with asynchronous event handling.\r\tDo not close the ioHandle when this object is finalized."\r\r\tself keepOpen.\r\t^ AsyncFileReadStream\r\t\tname: self name\r\t\tattachTo: self ioHandle\r\t\twritable: self isReadOnly not\r',			#stamp : 'dtl 7/8/2003 21:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ],		#time : DateAndTime [ '2018-02-22T14:01:11.470777-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #asAttachableFileStream,			#protocol : #converting,			#sourceCode : 'asAttachableFileStream\r\r\t^ self\r',			#stamp : 'dtl 9/16/2002 17:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ],		#time : DateAndTime [ '2018-02-22T14:01:11.47134-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #asBufferedAsyncFileReadStream,			#protocol : #converting,			#sourceCode : 'asBufferedAsyncFileReadStream\r\t"Answer a replacement for this object, with asynchronous event handling\r\tand buffered output. Do not close the ioHandle when this object is finalized."\r\r\tself keepOpen.\r\t^ BufferedAsyncFileReadStream\r\t\tname: self name\r\t\tattachTo: self ioHandle\r\t\twritable: self isReadOnly not\r',			#stamp : 'dtl 7/8/2003 21:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ],		#time : DateAndTime [ '2018-02-22T14:01:11.471877-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #autoClose,			#protocol : #finalization,			#sourceCode : 'autoClose\r\t"Private. Answer true if the file should be automatically closed when \r\tthis object is finalized."\r\r\t^ autoClose\r\t\tifNil: [autoClose := true]',			#stamp : 'dtl 9/17/2002 08:08',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ],		#time : DateAndTime [ '2018-02-22T14:01:11.472454-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #close,			#protocol : #open/close,			#sourceCode : 'close\r\t"Close this file."\r\r\t| h |\r\t(h := self ioHandle) ifNotNil:\r\t\t[UseIOHandle\r\t\t\tifTrue:\r\t\t\t\t[h close.\r\t\t\t\tself ioHandle: nil]\r\t\t\tifFalse:\r\t\t\t\t[self primCloseNoError: h.\r\t\t\t\tself unregister.\r\t\t\t\tfileID := nil]]\r',			#stamp : 'dtl 9/3/2010 17:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ],		#time : DateAndTime [ '2018-02-22T14:01:11.472989-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #disableEventHandling,			#protocol : #initialize-release,			#sourceCode : 'disableEventHandling\r\t"Subclasses may disable event handling"',			#stamp : 'dtl 4/14/2006 09:34',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ],		#time : DateAndTime [ '2018-02-22T14:01:11.473523-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #ensureOpen,			#protocol : #open/close,			#sourceCode : 'ensureOpen\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 16:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ],		#time : DateAndTime [ '2018-02-22T14:01:11.474154-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\r\tself autoClose\r\t\tifTrue: [[self primCloseNoError: fileID] on: Error do: []]',			#stamp : 'dtl 7/6/2006 22:17',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ],		#time : DateAndTime [ '2018-02-22T14:01:11.474816-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #flush,			#protocol : #'read, write, position',			#sourceCode : 'flush\r\t"Flush the external OS stream (the one in the C library)."\r\r\tOSProcess accessor flushExternalStream: self ioHandle',			#stamp : 'dtl 11/8/2000 21:55',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ],		#time : DateAndTime [ '2018-02-22T14:01:11.476132-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #ioHandle,			#protocol : #'private - IOHandle',			#sourceCode : 'ioHandle\r\r\tUseIOHandle\r\t\tifTrue: [^ super ioHandle]\r\t\tifFalse: [^ fileID]',			#stamp : 'dtl 1/29/2000 15:18',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ],		#time : DateAndTime [ '2018-02-22T14:01:11.476681-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #isPipe,			#protocol : #testing,			#sourceCode : 'isPipe\r\r\t^ false\r',			#stamp : 'dtl 3/26/2006 15:52',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ],		#time : DateAndTime [ '2018-02-22T14:01:11.477222-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #keepOpen,			#protocol : #finalization,			#sourceCode : 'keepOpen\r\t"Do not allow the file to be closed when this object is finalized."\r\r\tautoClose := false\r',			#stamp : 'dtl 9/17/2002 08:05',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ],		#time : DateAndTime [ '2018-02-22T14:01:11.477805-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #'name:attachTo:writable:',			#protocol : #attaching,			#sourceCode : 'name: aSymbolOrString attachTo: anIOHandle writable: readWriteFlag\r\t"Attach to an existing file handle, assumed to have been previously opened by the underlying operating system."\r\r\tname := aSymbolOrString.\r\tUseIOHandle\r\t\tifTrue: [self ioHandle: anIOHandle]\r\t\tifFalse: [fileID := anIOHandle].\r\treadWriteFlag ifTrue: [self readWrite] ifFalse: [self readOnly].\r\tself ascii.\r\tUseIOHandle ifFalse: [self register]\r',			#stamp : 'dtl 11/30/2002 09:22',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ],		#time : DateAndTime [ '2018-02-22T14:01:11.478339-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #open,			#protocol : #open/close,			#sourceCode : 'open\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 16:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ],		#time : DateAndTime [ '2018-02-22T14:01:11.478878-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #'open:forWrite:',			#protocol : #open/close,			#sourceCode : 'open: fileName forWrite: writeMode\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 16:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ],		#time : DateAndTime [ '2018-02-22T14:01:11.479424-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #openReadOnly,			#protocol : #open/close,			#sourceCode : 'openReadOnly\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 16:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ],		#time : DateAndTime [ '2018-02-22T14:01:11.479966-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #position,			#protocol : #'read, write, position',			#sourceCode : 'position\r\t"Return the receiver\'s current file position. If the stream is not positionable,\r\tas in the case of a Unix pipe stream, answer 0."\r\r\t^ [super position]\r\t\ton: Error\r\t\tdo: [0]\r',			#stamp : 'dtl 5/17/2009 14:11',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ],		#time : DateAndTime [ '2018-02-22T14:01:11.480533-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #reopen,			#protocol : #open/close,			#sourceCode : 'reopen\r\r\tself shouldNotImplement\r',			#stamp : 'dtl 6/12/1999 16:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ],		#time : DateAndTime [ '2018-02-22T14:01:11.481965-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #setBlocking,			#protocol : #nonblocking,			#sourceCode : 'setBlocking\r\r\tOSProcess accessor setBlocking: self ioHandle',			#stamp : 'dtl 2/17/2007 18:10',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ],		#time : DateAndTime [ '2018-02-22T14:01:11.482535-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #setNonBlocking,			#protocol : #nonblocking,			#sourceCode : 'setNonBlocking\r\r\tOSProcess accessor setNonBlocking: self ioHandle',			#stamp : 'dtl 2/17/2007 18:10',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ],		#time : DateAndTime [ '2018-02-22T14:01:11.483119-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #'read, write, position',			#sourceCode : 'upToEnd\r\t"Answer a subcollection from the current access position through the last element\r\tof the receiver. This is slower than the method in StandardFileStream, but it\r\tworks with pipes which answer false to #atEnd when no further input is\r\tcurrently available, but the pipe is not yet closed."\r\r\t| newStream buffer nextBytes |\r\tbuffer := buffer1 species new: 1000.\r\tnewStream := WriteStream on: (buffer1 species new: 100).\r\t[self atEnd or: [(nextBytes := self nextInto: buffer) isEmpty]]\r\t\twhileFalse: [newStream nextPutAll: nextBytes].\r\t^ newStream contents\r',			#stamp : 'dtl 9/2/2006 17:17',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ],		#time : DateAndTime [ '2018-02-22T14:01:11.483703-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AttachableFileStream,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #'read, write, position',			#sourceCode : 'upToEndOfFile\r\t"Answer a subcollection from the current access position through\r\tthe last element of the receiver.  Use #atEndOfFile to determine end\r\tof file status with feof(), required for reliable end of file test on\r\tOS pipes."\r\r\t| newStream buffer |\r\tbuffer := buffer1 species new: 1000.\r\tnewStream := WriteStream on: (buffer1 species new: 100).\r\t[self atEndOfFile] whileFalse: [newStream nextPutAll: (self nextInto: buffer)].\r\t^ newStream contents',			#stamp : 'dtl 6/4/2006 16:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ],		#time : DateAndTime [ '2018-02-22T14:01:11.484569-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StandardFileStream,				#isMetaSide : false			},			#name : #atEndOfFile,			#protocol : #'*OSProcess-Base',			#sourceCode : 'atEndOfFile\r\t"Answer whether the receiver is at its end based on the result of\r\tthe last read operation. This uses feof() to test the underlying file\r\tstream status, and can be used as an alternative to #atEnd, which\r\tdoes not properly report end of file status for an OSPipe."\r\r\t^ fileID isNil or: [OSProcess accessor isAtEndOfFile: fileID]\r',			#stamp : 'dtl 6/5/2006 06:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ],		#time : DateAndTime [ '2018-02-22T14:01:11.485299-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StandardFileStream,				#isMetaSide : false			},			#name : #fileID,			#protocol : #'*OSProcess-Base',			#sourceCode : 'fileID\r\t"The contents of fileID can and will change after calling this method.\r\tThe sender should copy the result rather than depending on the result\r\tto be immutable."\r\r\t^ fileID',			#stamp : 'dtl 1/13/2007 16:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ],		#time : DateAndTime [ '2018-02-22T14:01:11.485901-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StandardFileStream,				#isMetaSide : false			},			#name : #isPipe,			#protocol : #'*OSProcess-Base',			#sourceCode : 'isPipe\r\r\t^ false\r',			#stamp : 'dtl 6/5/2006 07:18',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ],		#time : DateAndTime [ '2018-02-22T14:01:11.486507-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandlerExample class',				#isMetaSide : true			},			#name : #osPipeExample,			#protocol : #examples,			#sourceCode : 'osPipeExample\r\t"Demonstrate an asynchronous read hander on an OS pipe. Output will\r\tbe displayed on the Transcript."\r\r\t"self osPipeExample"\r\r\t| pipe aio |\r\t(Smalltalk hasClassNamed: #OSProcess)\r\t\tifFalse:\r\t\t\t[self notify: \'this example requires OSProcess\']\r\t\tifTrue:\r\t\t\t[pipe := (Smalltalk at: #OSPipe) new.\r\t\t\taio := super new handler: (AioEventHandler for: pipe reader); ioStream: pipe reader.\r\t\t\taio handler addDependent: aio.\r\t\t\t(1 to: 10) do:\r\t\t\t\t[:i |\r\t\t\t\tpipe nextPutAll: \'this is line \', i asString; cr.\r\t\t\t\t(Delay forMilliseconds: 500) wait].\r\t\t\t^ aio handler close]\r',			#stamp : 'dtl 9/4/2003 06:22',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ],		#time : DateAndTime [ '2018-02-22T14:01:11.48804-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandlerExample class',				#isMetaSide : true			},			#name : #'showTtyOnTranscript:',			#protocol : #examples,			#sourceCode : 'showTtyOnTranscript: ttyName\r\t"Enter lines on /dev/tty, and watch them show up on the Transcript. Normally,\r\t/dev/tty corresponds to standard input for the Squeak process, so if you have\r\ta serial port connected to something that generates data, try this example with\r\t/dev/whatever to demonstrate asych input on a serial port.\r\r\tWarning: This method does not set the file stream for nonblocking input, so\r\tit can block the Squeak VM. The #getAvailableData attempts to work around this,\r\tbut save your image before testing with another serial interfaces."\r\r\t"self showTtyOnTranscript: \'/dev/tty\'"\r\r\t| inputStream handler example |\r\tinputStream := FileStream readOnlyFileNamed: \'/dev/tty\'.\r\thandler := AioEventHandler for: inputStream\r\t\t\t\texceptions: true\r\t\t\t\treadEvents: true\r\t\t\t\twriteEvents: false.\r\texample := super new handler: handler; ioStream: inputStream.\r\thandler addDependent: example.\r\tTranscript cr; show: \'\'.\r\tself notify: \'Enter lines on \', ttyName, \', watch the Transcript, and select "Proceed" when done\'.\r\t^ example handler close\r',			#stamp : 'dtl 9/4/2003 06:22',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ],		#time : DateAndTime [ '2018-02-22T14:01:11.488841-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandlerExample class',				#isMetaSide : true			},			#name : #standardInputExample,			#protocol : #examples,			#sourceCode : 'standardInputExample\r\t"Enter lines on stdin, and watch them show up on the Transcript."\r\r\t"self standardInputExample"\r\r\t| aio stdin |\r\t(Smalltalk hasClassNamed: #OSProcess)\r\t\tifFalse:\r\t\t\t[self notify: \'this example requires OSProcess\']\r\t\tifTrue:\r\t\t\t[Transcript cr; show: \'\'.\r\t\t\tstdin := (Smalltalk at: #OSProcess) thisOSProcess stdIn.\r\t\t\taio := super new handler: (AioEventHandler for: stdin); ioStream: stdin.\r\t\t\taio handler addDependent: aio.\r\t\t\tself notify: \'Enter lines on standard input, watch the Transcript, and select "Proceed" when done\'.\r\t\t\t^ aio handler close]\r',			#stamp : 'dtl 9/4/2003 06:23',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ],		#time : DateAndTime [ '2018-02-22T14:01:11.489652-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandlerExample class',				#isMetaSide : true			},			#name : #tcpSocketExample,			#protocol : #examples,			#sourceCode : 'tcpSocketExample\r\t"Loosely based on OldSocket>>remoteTestServerTCP. Output is displayed on the Transcript."\r\r\t"self tcpSocketExample"\r\r\t| port serverTcpSocket serverName clientTcpSocket handler example useOldStyleSockets |\r\tport := 8086.\r\tserverName := \'127.0.0.1\'.\r\r\t"The networking code was updated for Squeak 3.6. This checks for which version to use."\r\tuseOldStyleSockets := Socket respondsTo: #initializeNetworkIfFail:.\r\r\tTranscript show: \'initializing network ... \'.\r\r\tuseOldStyleSockets\r\t\tifTrue:\r\t\t\t[Socket initializeNetworkIfFail: [^Transcript show:\'failed\']]\r\t\tifFalse:\r\t\t\t[[Socket initializeNetwork]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex | ^Transcript show:\'failed\']].\r\tTranscript show:\'ok\';cr.\r\r\t"Create the server (reader) socket"\r\tserverTcpSocket := Socket newTCP.\r\tserverTcpSocket listenOn: port.\r\t[Transcript show: \'server endpoint created on port \', port asString; cr.\r\tuseOldStyleSockets\r\t\tifTrue:\r\t\t\t[serverTcpSocket waitForConnectionUntil: Socket standardDeadline]\r\t\tifFalse:\r\t\t\t[serverTcpSocket waitForConnectionFor: 10]] fork.\r\t(Delay forMilliseconds: 1000) wait.\r\r\t"Create the client (writer) socket"\r\tclientTcpSocket := Socket newTCP.\r\tclientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.\r\tuseOldStyleSockets\r\t\tifTrue:\r\t\t\t[clientTcpSocket waitForConnectionUntil: Socket standardDeadline]\r\t\tifFalse:\r\t\t\t[clientTcpSocket waitForConnectionFor: 10].\r\tTranscript show: \'client endpoint connected to \', serverName, \' port \', port asString; cr.\r\r\t"Set up a read event handler on the server socket"\r\thandler := AioEventHandler for: serverTcpSocket\r\t\t\t\texceptions: true\r\t\t\t\treadEvents: true\r\t\t\t\twriteEvents: false.\r\texample := super new handler: handler; ioStream: serverTcpSocket.\r\thandler addDependent: example.\r\tTranscript show: \'event handler started\'; cr.\r\r\t"Send a few lines of data to the client socket, waiting briefly between lines.\r\tThe event handler will watch the server socket, and copy data to the Transcript\r\teach time a new line of data is available to the server."\r\t(1 to: 10) do:\r\t\t[:i |\r\t\tclientTcpSocket sendData: \'this is line \', i asString, Character cr asString.\r\t\t(Delay forMilliseconds: 500) wait].\r\r\tclientTcpSocket closeAndDestroy.\r\tTranscript show: \'client endpoint closed\'; cr.\r\tserverTcpSocket closeAndDestroy.\r\tTranscript show: \'server endpoint closed\'; cr.\r\texample close.\r\tTranscript show: \'event handler stopped\'; cr.\r\t^ Array with: example with: serverTcpSocket with: clientTcpSocket',			#stamp : 'dtl 9/4/2003 06:24',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ],		#time : DateAndTime [ '2018-02-22T14:01:11.490239-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\r\tself handler close.\r\tself handler removeDependent: self\r',			#stamp : 'dtl 9/4/2003 06:20',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ],		#time : DateAndTime [ '2018-02-22T14:01:11.490856-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #getAvailableData,			#protocol : #updating,			#sourceCode : 'getAvailableData\r\t"Obtain all available data from ioStream. For a FileStream, keep reading until\r\ta line terminator is reached. This allows use with a FileStream that has not been\r\tset for nonblocking input."\r\r\t| ws c buffer n |\r\tbuffer := String new: 4000.\r\t(self ioStream isKindOf: FileStream)\r\t\tifTrue:\r\t\t\t[ws := WriteStream on: String new.\r\t\t\t[c := ioStream next.\r\t\t\t(c == Character lf)\r\t\t\t\tifTrue: [ws nextPut: Character cr]\r\t\t\t\tifFalse: [ws nextPut: c].\r\t\t\t(c ~= Character lf) and: [c ~= Character cr]] whileTrue.\r\t\t\t^ ws contents]\r\t\tifFalse:\r\t\t\t[ioStream dataAvailable\r\t\t\t\tifTrue:\r\t\t\t\t\t[n := ioStream receiveDataInto: buffer.\r\t\t\t\t\t^ buffer copyFrom: 1 to: n]\r\t\t\t\tifFalse:\r\t\t\t\t\t[^ \'\']]\r',			#stamp : 'dtl 2/24/2013 10:22',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ],		#time : DateAndTime [ '2018-02-22T14:01:11.491405-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #handler,			#protocol : #accessing,			#sourceCode : 'handler\r\r\t^ handler',			#stamp : 'dtl 7/5/2003 09:40',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ],		#time : DateAndTime [ '2018-02-22T14:01:11.491937-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #'handler:',			#protocol : #accessing,			#sourceCode : 'handler: anAioHandler\r\r\thandler := anAioHandler',			#stamp : 'dtl 7/5/2003 09:40',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ],		#time : DateAndTime [ '2018-02-22T14:01:11.492477-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #ioStream,			#protocol : #accessing,			#sourceCode : 'ioStream\r\r\t^ ioStream',			#stamp : 'dtl 7/5/2003 09:57',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ],		#time : DateAndTime [ '2018-02-22T14:01:11.49301-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #'ioStream:',			#protocol : #accessing,			#sourceCode : 'ioStream: aFileStream\r\r\tioStream := aFileStream',			#stamp : 'dtl 7/5/2003 09:57',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ],		#time : DateAndTime [ '2018-02-22T14:01:11.494349-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerExample,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: anObject\r\r\t(anObject isKindOf: AioEventHandler)\r\t\tifTrue: [Transcript show: self getAvailableData]\r',			#stamp : 'dtl 7/5/2003 18:23',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ],		#time : DateAndTime [ '2018-02-22T14:01:11.495057-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSFileLock class',				#isMetaSide : true			},			#name : #'onFile:exclusive:',			#protocol : #'instance creation',			#sourceCode : 'onFile: aFileStream exclusive: writeLockFlag\r\t"A region representing the whole file"\r\r\t^ super new onFile: aFileStream exclusive: writeLockFlag\r',			#stamp : 'jf 2/22/2004 17:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ],		#time : DateAndTime [ '2018-02-22T14:01:11.495724-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= aFileLock\r\t^ ((self species = aFileLock species)\r\t\tand: [self fileStream == aFileLock fileStream])\r\t\t\tand: [self exclusive == aFileLock exclusive]',			#stamp : 'dtl 11/28/2010 09:18',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ],		#time : DateAndTime [ '2018-02-22T14:01:11.496271-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'conflictsWith:',			#protocol : #'conflict testing',			#sourceCode : 'conflictsWith: otherFileLock\r\t^ (self isExclusive or: [otherFileLock isExclusive])\r\t\tand: [self overlaps: otherFileLock]',			#stamp : 'jf 2/22/2004 16:38',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ],		#time : DateAndTime [ '2018-02-22T14:01:11.496819-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #exclusive,			#protocol : #accessing,			#sourceCode : 'exclusive\r\t"Answer the value of exclusive. Default is true, indicating a read-write lock\r\tas opposed to a shared read lock."\r\r\t^ exclusive ifNil: [exclusive := true].',			#stamp : 'jf 2/22/2004 16:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ],		#time : DateAndTime [ '2018-02-22T14:01:11.497348-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'exclusive:',			#protocol : #accessing,			#sourceCode : 'exclusive: anObject\r\t"Set the value of exclusive"\r\r\texclusive := anObject',			#stamp : 'jf 2/22/2004 16:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ],		#time : DateAndTime [ '2018-02-22T14:01:11.497874-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #fileStream,			#protocol : #accessing,			#sourceCode : 'fileStream\r\t"Answer the value of fileStream"\r\r\t^ fileStream',			#stamp : 'jf 2/22/2004 16:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ],		#time : DateAndTime [ '2018-02-22T14:01:11.498395-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'fileStream:',			#protocol : #accessing,			#sourceCode : 'fileStream: anObject\r\t"Set the value of fileStream"\r\r\tfileStream := anObject',			#stamp : 'jf 2/22/2004 16:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ],		#time : DateAndTime [ '2018-02-22T14:01:11.498931-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ (self fileStream hash + self exclusive hash) hashMultiply',			#stamp : 'jf 2/22/2004 18:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ],		#time : DateAndTime [ '2018-02-22T14:01:11.500181-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ self fileStream closed not',			#stamp : 'jf 2/22/2004 18:13',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ],		#time : DateAndTime [ '2018-02-22T14:01:11.500764-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #isExclusive,			#protocol : #testing,			#sourceCode : 'isExclusive\r\t^ self exclusive',			#stamp : 'jf 2/22/2004 16:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ],		#time : DateAndTime [ '2018-02-22T14:01:11.501416-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #length,			#protocol : #private,			#sourceCode : 'length\r\t^ 0',			#stamp : 'jf 2/22/2004 18:07',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ],		#time : DateAndTime [ '2018-02-22T14:01:11.502049-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #lock,			#protocol : #'system locking',			#sourceCode : 'lock\r\t"Answer true on success"\r\r\t^ self lockIfFail: [false]\r',			#stamp : 'dtl 5/8/2006 06:52',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ],		#time : DateAndTime [ '2018-02-22T14:01:11.502663-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'lockIfFail:',			#protocol : #'system locking',			#sourceCode : 'lockIfFail: failBlock\r\r\t| handle result |\r\thandle := ThisOSProcess accessor handleFromFileStream: self fileStream.\r\tresult := ThisOSProcess accessor\r\t\tprimLockFileRegion: handle\r\t\toffset: self offset\r\t\tlength: self length\r\t\texclusive: self isExclusive.\r\tresult == 0\r\t\tifTrue: [^ true]\r\t\tifFalse: [^ failBlock value]\r',			#stamp : 'dtl 5/8/2006 06:57',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '416' ],		#self : OmReference [ '417' ],		#time : DateAndTime [ '2018-02-22T14:01:11.503196-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #offset,			#protocol : #private,			#sourceCode : 'offset\r\t^ 0',			#stamp : 'jf 2/22/2004 18:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '417' ],		#self : OmReference [ '418' ],		#time : DateAndTime [ '2018-02-22T14:01:11.503735-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'onFile:exclusive:',			#protocol : #initialize-release,			#sourceCode : 'onFile: aFileStream exclusive: writeLockFlag\r\r\tself fileStream: aFileStream.\r\tself exclusive: writeLockFlag\r',			#stamp : 'jf 2/22/2004 16:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '418' ],		#self : OmReference [ '419' ],		#time : DateAndTime [ '2018-02-22T14:01:11.50429-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'overlaps:',			#protocol : #comparing,			#sourceCode : 'overlaps: aFileLock\r\t"Answer true if the receiver represents an addressable region that overlaps aFileLock"\r\t\r\t^ aFileLock fileStream fullName = self fileStream fullName',			#stamp : 'jf 2/22/2004 16:31',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '419' ],		#self : OmReference [ '420' ],		#time : DateAndTime [ '2018-02-22T14:01:11.504832-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'overlapsRegion:',			#protocol : #comparing,			#sourceCode : 'overlapsRegion: aFileRegionLock\r\t^ aFileRegionLock fileStream fullName = self fileStream fullName',			#stamp : 'jf 2/22/2004 16:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '420' ],		#self : OmReference [ '421' ],		#time : DateAndTime [ '2018-02-22T14:01:11.506169-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #test,			#protocol : #'system locking',			#sourceCode : 'test\r\t"Answer true if this is a lockable file or region"\r\r\t| handle result |\r\thandle := ThisOSProcess accessor handleFromFileStream: self fileStream.\r\tresult := ThisOSProcess accessor\r\t\tprimTestLockableFileRegion: handle\r\t\toffset: self offset\r\t\tlength: self length\r\t\texclusive: self isExclusive.\r\t\t\r\t^ (result == -1 or: [result isNil])\r\t\tifTrue: [false]\r\t\tifFalse: [result first]',			#stamp : 'dtl 5/8/2006 07:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '421' ],		#self : OmReference [ '422' ],		#time : DateAndTime [ '2018-02-22T14:01:11.506721-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #unlock,			#protocol : #'system locking',			#sourceCode : 'unlock\r\t"Answer true on success"\r\r\t^ self unlockIfFail: [false]\r',			#stamp : 'dtl 5/8/2006 06:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '422' ],		#self : OmReference [ '423' ],		#time : DateAndTime [ '2018-02-22T14:01:11.5073-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileLock,				#isMetaSide : false			},			#name : #'unlockIfFail:',			#protocol : #'system locking',			#sourceCode : 'unlockIfFail: failBlock\r\r\t| handle result |\r\thandle := ThisOSProcess accessor handleFromFileStream: self fileStream.\r\tresult := ThisOSProcess accessor\r\t\tprimUnlockFileRegion: handle\r\t\toffset: self offset\r\t\tlength: self length.\r\tresult == 0\r\t\tifTrue: [^ true]\r\t\tifFalse: [^ failBlock value]\r',			#stamp : 'dtl 5/8/2006 06:57',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '423' ],		#self : OmReference [ '424' ],		#time : DateAndTime [ '2018-02-22T14:01:11.507945-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSFileRegionLock class',				#isMetaSide : true			},			#name : #'onFile:from:to:exclusive:',			#protocol : #'instance creation',			#sourceCode : 'onFile: aFileStream from: start to: end exclusive: writeLockFlag\r\t"A region representing part of a file"\r\r\t^ self onFile: aFileStream interval: (start to: end) exclusive: writeLockFlag\r',			#stamp : 'dtl 2/22/2004 13:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '424' ],		#self : OmReference [ '425' ],		#time : DateAndTime [ '2018-02-22T14:01:11.508616-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSFileRegionLock class',				#isMetaSide : true			},			#name : #'onFile:interval:exclusive:',			#protocol : #'instance creation',			#sourceCode : 'onFile: aFileStream interval: anInterval exclusive: writeLockFlag\r\t"A region representing part of a file"\r\r\t^ super new onFile: aFileStream interval: anInterval exclusive: writeLockFlag\r',			#stamp : 'dtl 2/22/2004 13:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '425' ],		#self : OmReference [ '426' ],		#time : DateAndTime [ '2018-02-22T14:01:11.509271-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= aFileRegion\r\r\t^ (super = aFileRegion) and: [self interval = aFileRegion interval]\r',			#stamp : 'jf 2/22/2004 18:33',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '426' ],		#self : OmReference [ '427' ],		#time : DateAndTime [ '2018-02-22T14:01:11.509832-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\r\t^ (super hash + self interval hash) hashMultiply\r',			#stamp : 'jf 2/22/2004 18:33',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '427' ],		#self : OmReference [ '428' ],		#time : DateAndTime [ '2018-02-22T14:01:11.510365-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #interval,			#protocol : #accessing,			#sourceCode : 'interval\r\t"Answer the value of interval"\r\r\t^ interval',			#stamp : 'dtl 3/10/2005 20:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '428' ],		#self : OmReference [ '429' ],		#time : DateAndTime [ '2018-02-22T14:01:11.510897-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #'interval:',			#protocol : #accessing,			#sourceCode : 'interval: anObject\r\t"Set the value of interval"\r\r\tinterval := anObject',			#stamp : 'dtl 3/10/2005 20:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '429' ],		#self : OmReference [ '430' ],		#time : DateAndTime [ '2018-02-22T14:01:11.512166-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #length,			#protocol : #private,			#sourceCode : 'length\r\t^ self interval size',			#stamp : 'jf 2/22/2004 18:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '430' ],		#self : OmReference [ '431' ],		#time : DateAndTime [ '2018-02-22T14:01:11.51273-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #offset,			#protocol : #private,			#sourceCode : 'offset\r\t^ self interval first',			#stamp : 'jf 2/22/2004 18:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '431' ],		#self : OmReference [ '432' ],		#time : DateAndTime [ '2018-02-22T14:01:11.513275-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #'onFile:interval:exclusive:',			#protocol : #initialize-release,			#sourceCode : 'onFile: aFileStream interval: anInterval exclusive: writeLockFlag\r\r\tself onFile: aFileStream exclusive: writeLockFlag.\r\tself interval: anInterval.',			#stamp : 'jf 2/22/2004 16:03',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '432' ],		#self : OmReference [ '433' ],		#time : DateAndTime [ '2018-02-22T14:01:11.513811-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #'overlaps:',			#protocol : #comparing,			#sourceCode : 'overlaps: aFileLock\r\t"Call #overlapsRegion: on aFileLock since we know we\'re a region but we don\'t know whether aFileLock is"\r\t\r\t^ aFileLock overlapsRegion: self',			#stamp : 'jf 2/22/2004 19:47',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '433' ],		#self : OmReference [ '434' ],		#time : DateAndTime [ '2018-02-22T14:01:11.514398-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSFileRegionLock,				#isMetaSide : false			},			#name : #'overlapsRegion:',			#protocol : #comparing,			#sourceCode : 'overlapsRegion: aFileRegionLock\r\t^ (super overlapsRegion: aFileRegionLock) and: [(self interval intersection: aFileRegionLock interval) isEmpty not]',			#stamp : 'jf 2/22/2004 18:56',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '434' ],		#self : OmReference [ '435' ],		#time : DateAndTime [ '2018-02-22T14:01:11.515087-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalMacOSProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if, for the current platform, this class is responsible for representing\r\tan OS process other than that in which the Squeak VM is currently running."\r\r\t^ self isNonUnixMac\r',			#stamp : 'dtl 8/30/2003 17:45',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '435' ],		#self : OmReference [ '436' ],		#time : DateAndTime [ '2018-02-22T14:01:11.515764-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalOS2Process class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if, for the current platform, this class is responsible for representing\r\tan OS process other than that in which the Squeak VM is currently running."\r\r\t^ self isOS2\r',			#stamp : 'dtl 8/30/2003 17:47',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '436' ],		#self : OmReference [ '437' ],		#time : DateAndTime [ '2018-02-22T14:01:11.51635-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalOSProcess class',				#isMetaSide : true			},			#name : #concreteClass,			#protocol : #'concrete subclasses',			#sourceCode : 'concreteClass\r\r\t"ExternalOSProcess concreteClass"\r\r\t^ self subclasses\r\t\tdetect: [:c | c isResponsibleForThisPlatform]\r\t\tifNone: [self notify: self printString,\r\t\t\t\t\t\': No concrete class implementation available for system type \',\r\t\t\t\t\tself platformName printString.\r\t\t\t\tnil]\r\r',			#stamp : 'dtl 3/5/2005 12:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '437' ],		#self : OmReference [ '438' ],		#time : DateAndTime [ '2018-02-22T14:01:11.516908-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalOSProcess class',				#isMetaSide : true			},			#name : #'exec:',			#protocol : #'instance creation',			#sourceCode : 'exec: programName\r\t"Run a program in an external OS process, and answer an instance of myself\r\twhich represents the external process."\r\r\t"ExternalOSProcess exec: \'/bin/ls\'"\r\r\t^ self concreteClass exec: programName\r',			#stamp : 'dtl 1/16/2001 05:36',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '438' ],		#self : OmReference [ '439' ],		#time : DateAndTime [ '2018-02-22T14:01:11.518188-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalOSProcess class',				#isMetaSide : true			},			#name : #shellFlags,			#protocol : #shell,			#sourceCode : 'shellFlags\r\r\t^ \'-c\'.',			#stamp : 'SeanDeNigris 12/27/2013 12:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '439' ],		#self : OmReference [ '440' ],		#time : DateAndTime [ '2018-02-22T14:01:11.518802-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #accessor,			#protocol : #accessing,			#sourceCode : 'accessor\r\t"Answer an OSProcessAccessor which may be used to obtain information about\r\tthe external OS process which I represent."\r\r\t^ OSProcess thisOSProcess processAccessor\r',			#stamp : 'dtl 11/8/2000 21:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '440' ],		#self : OmReference [ '441' ],		#time : DateAndTime [ '2018-02-22T14:01:11.51937-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #closeInitialStdErr,			#protocol : #'initialize - release',			#sourceCode : 'closeInitialStdErr\r\r\tinitialStdErr ifNotNil: [initialStdErr close]\r',			#stamp : 'dtl 3/1/2002 06:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '441' ],		#self : OmReference [ '442' ],		#time : DateAndTime [ '2018-02-22T14:01:11.519916-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #closeInitialStdIn,			#protocol : #'initialize - release',			#sourceCode : 'closeInitialStdIn\r\r\tinitialStdIn ifNotNil: [initialStdIn close]\r',			#stamp : 'dtl 3/1/2002 06:42',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '442' ],		#self : OmReference [ '443' ],		#time : DateAndTime [ '2018-02-22T14:01:11.520453-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #closeInitialStdOut,			#protocol : #'initialize - release',			#sourceCode : 'closeInitialStdOut\r\r\tinitialStdOut ifNotNil: [initialStdOut close]\r',			#stamp : 'dtl 3/1/2002 06:42',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '443' ],		#self : OmReference [ '444' ],		#time : DateAndTime [ '2018-02-22T14:01:11.521013-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #closeStreams,			#protocol : #'initialize - release',			#sourceCode : 'closeStreams\r\r\tself closeInitialStdIn; closeInitialStdOut; closeInitialStdErr',			#stamp : 'dtl 11/21/2006 14:04',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '444' ],		#self : OmReference [ '445' ],		#time : DateAndTime [ '2018-02-22T14:01:11.521657-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #complete,			#protocol : #'setting run state',			#sourceCode : 'complete\r\t"Process has exited and has been reaped. It no longer exists in the external operating system."\r\r\tself runState: #complete\r',			#stamp : 'dtl 3/4/2001 18:55',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '445' ],		#self : OmReference [ '446' ],		#time : DateAndTime [ '2018-02-22T14:01:11.522286-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #initialStdErr,			#protocol : #accessing,			#sourceCode : 'initialStdErr\r\t"The stderr stream at the time the child process is invoked. If the same as\r\tstderr for the current Squeak process, it may change as a result of Squeak\r\tusing its stderr stream. The child process may also modify its actual stderr;\r\ttherefore this is not an accurate representation of the child process stderr\r\tduring the life of the child process."\r\r\t^ initialStdErr',			#stamp : 'dtl 3/1/2002 06:38',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '446' ],		#self : OmReference [ '447' ],		#time : DateAndTime [ '2018-02-22T14:01:11.522867-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #'initialStdErr:',			#protocol : #accessing,			#sourceCode : 'initialStdErr: anExternalStream\r\r\tinitialStdErr := anExternalStream',			#stamp : 'dtl 3/1/2002 06:38',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '447' ],		#self : OmReference [ '448' ],		#time : DateAndTime [ '2018-02-22T14:01:11.524151-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #initialStdIn,			#protocol : #accessing,			#sourceCode : 'initialStdIn\r\t"The stdin stream at the time the child process is invoked. If the same as\r\tstdin for the current Squeak process, it may change as a result of Squeak\r\tusing its stdin stream. The child process may also modify its actual stdin;\r\ttherefore this is not an accurate representation of the child process stdin\r\tduring the life of the child process."\r\r\t^ initialStdIn',			#stamp : 'dtl 3/1/2002 06:39',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '448' ],		#self : OmReference [ '449' ],		#time : DateAndTime [ '2018-02-22T14:01:11.524704-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #'initialStdIn:',			#protocol : #accessing,			#sourceCode : 'initialStdIn: anExternalStream\r\r\tinitialStdIn := anExternalStream',			#stamp : 'dtl 3/1/2002 06:39',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '449' ],		#self : OmReference [ '450' ],		#time : DateAndTime [ '2018-02-22T14:01:11.525252-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #initialStdOut,			#protocol : #accessing,			#sourceCode : 'initialStdOut\r\t"The stdout stream at the time the child process is invoked. If the same as\r\tstdout for the current Squeak process, it may change as a result of Squeak\r\tusing its stdout stream. The child process may also modify its actual stdout;\r\ttherefore this is not an accurate representation of the child process stdout\r\tduring the life of the child process."\r\r\t^ initialStdOut',			#stamp : 'dtl 3/1/2002 06:39',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '450' ],		#self : OmReference [ '451' ],		#time : DateAndTime [ '2018-02-22T14:01:11.525784-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #'initialStdOut:',			#protocol : #accessing,			#sourceCode : 'initialStdOut: anExternalStream\r\r\tinitialStdOut := anExternalStream',			#stamp : 'dtl 3/1/2002 06:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '451' ],		#self : OmReference [ '452' ],		#time : DateAndTime [ '2018-02-22T14:01:11.526314-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\r\tself notYetRunning',			#stamp : 'dtl 10/6/2000 21:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '452' ],		#self : OmReference [ '453' ],		#time : DateAndTime [ '2018-02-22T14:01:11.526852-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #isAccessible,			#protocol : #testing,			#sourceCode : 'isAccessible\r\r\t^ self accessor canAccessChildProcess: self',			#stamp : 'dtl 10/7/2000 14:45',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '453' ],		#self : OmReference [ '454' ],		#time : DateAndTime [ '2018-02-22T14:01:11.527408-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #isComplete,			#protocol : #testing,			#sourceCode : 'isComplete\r\r\t^ self runState == #complete',			#stamp : 'dtl 1/20/2001 11:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '454' ],		#self : OmReference [ '455' ],		#time : DateAndTime [ '2018-02-22T14:01:11.527988-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #isNotYetRunning,			#protocol : #testing,			#sourceCode : 'isNotYetRunning\r\r\t^ self runState == #notYetRunning',			#stamp : 'dtl 1/20/2001 11:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '455' ],		#self : OmReference [ '456' ],		#time : DateAndTime [ '2018-02-22T14:01:11.528635-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #isRunning,			#protocol : #testing,			#sourceCode : 'isRunning\r\r\t^ self runState == #running',			#stamp : 'dtl 1/20/2001 11:40',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '456' ],		#self : OmReference [ '457' ],		#time : DateAndTime [ '2018-02-22T14:01:11.530027-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #notYetRunning,			#protocol : #'setting run state',			#sourceCode : 'notYetRunning\r\t"Process has not yet entered running state."\r\r\tself runState: #notYetRunning\r',			#stamp : 'dtl 3/26/2000 15:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '457' ],		#self : OmReference [ '458' ],		#time : DateAndTime [ '2018-02-22T14:01:11.53063-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\tself isComplete ifTrue: [ aStream nextPutAll: \' (\', self runState, \' with status \', self exitStatus printString, \')\' ]\r\t\tifFalse: [ aStream nextPutAll: \' (\', self runState asString, \')\' ]',			#stamp : 'dtl 3/18/2000 14:07',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '458' ],		#self : OmReference [ '459' ],		#time : DateAndTime [ '2018-02-22T14:01:11.531177-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #runState,			#protocol : #accessing,			#sourceCode : 'runState\r\r\t^ runState ifNil: [self unknownRunState]\r',			#stamp : 'dtl 1/25/2004 11:01',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '459' ],		#self : OmReference [ '460' ],		#time : DateAndTime [ '2018-02-22T14:01:11.531723-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #'runState:',			#protocol : #accessing,			#sourceCode : 'runState: aSymbol\r\r\trunState := aSymbol.\r\tself changed: #runState\r',			#stamp : 'dtl 3/18/2000 12:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '460' ],		#self : OmReference [ '461' ],		#time : DateAndTime [ '2018-02-22T14:01:11.532256-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #running,			#protocol : #'setting run state',			#sourceCode : 'running\r\t"Process is actively running."\r\r\tself runState: #running\r',			#stamp : 'dtl 3/26/2000 15:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '461' ],		#self : OmReference [ '462' ],		#time : DateAndTime [ '2018-02-22T14:01:11.532854-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #succeeded,			#protocol : #testing,			#sourceCode : 'succeeded\r\t"Answer true if my process completed successfully. Be optimistic here, and let\r\tmy subclasses implement the details."\r\r\t^ self isComplete',			#stamp : 'dtl 12/22/2001 18:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '462' ],		#self : OmReference [ '463' ],		#time : DateAndTime [ '2018-02-22T14:01:11.53341-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #unknownRunState,			#protocol : #'setting run state',			#sourceCode : 'unknownRunState\r\t"Unable to determine the current run state of the process, possibly because\r\tthis is a stale reference to a process which no longer exists."\r\r\tself runState: #unknownRunState\r',			#stamp : 'dtl 10/6/2000 20:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '463' ],		#self : OmReference [ '464' ],		#time : DateAndTime [ '2018-02-22T14:01:11.533947-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalOSProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\t"Notify any dependents if my run state changes. My subclasses will do additional\r\tupdating when the run state changes."\r\r\taParameter == #runState ifTrue: [self changed: #runState]\r',			#stamp : 'dtl 2/27/2002 09:45',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '464' ],		#self : OmReference [ '465' ],		#time : DateAndTime [ '2018-02-22T14:01:11.534525-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalRiscOSProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if, for the current platform, this class is responsible for representing\r\tan OS process other than that in which the Squeak VM is currently running."\r\r\t^ self isRiscOS\r',			#stamp : 'dtl 8/30/2003 17:48',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '465' ],		#self : OmReference [ '466' ],		#time : DateAndTime [ '2018-02-22T14:01:11.536068-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #bashShellPath,			#protocol : #shells,			#sourceCode : 'bashShellPath\r\t"A more full-featured shell from the Free Software Foundation"\r\r\t| path |\r\tpath := \'/bin/bash\'.\r\t(OSProcess fileExists: path)\r\t\tifTrue: [^ path]\r\t\tifFalse: [self notify: path, \' not found\']',			#stamp : 'dtl 1/23/2013 20:21',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '466' ],		#self : OmReference [ '467' ],		#time : DateAndTime [ '2018-02-22T14:01:11.536654-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'instance creation',			#sourceCode : 'command: aCommandString\r\r\t"ExternalUnixOSProcess command: \'ls -l /etc\'"\r\r\t^ self forkAndExec: self defaultShellPath\r\t\targuments: (Array with: \'-c\' with: aCommandString)\r\t\tenvironment: nil',			#stamp : 'dtl 7/12/2003 11:38',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '467' ],		#self : OmReference [ '468' ],		#time : DateAndTime [ '2018-02-22T14:01:11.537216-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #defaultShellPath,			#protocol : #shells,			#sourceCode : 'defaultShellPath\r\t"Default shell to run"\r\r\t| path |\r\tpath := \'/bin/sh\'.\r\t(OSProcess fileExists: path)\r\t\tifTrue: [^ path]\r\t\tifFalse: [self notify: path, \' not found\']',			#stamp : 'dtl 1/23/2013 20:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '468' ],		#self : OmReference [ '469' ],		#time : DateAndTime [ '2018-02-22T14:01:11.537755-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'exec:',			#protocol : #'instance creation',			#sourceCode : 'exec: programName\r\t"Run a program in an external OS process, and answer an instance of myself\r\twhich represents the external process."\r\r\t^ self forkAndExec: programName\r',			#stamp : 'dtl 1/16/2001 05:33',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '469' ],		#self : OmReference [ '470' ],		#time : DateAndTime [ '2018-02-22T14:01:11.538296-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'forkAndExec:',			#protocol : #'instance creation',			#sourceCode : 'forkAndExec: executableFile\r\r\t"ExternalUnixOSProcess forkAndExec: \'/bin/ls\'"\r\r\t^ super new\r\t\tprogramName: executableFile;\r\t\tinitialize;\r\t\tforkChild\r',			#stamp : 'dtl 2/27/2002 15:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '470' ],		#self : OmReference [ '471' ],		#time : DateAndTime [ '2018-02-22T14:01:11.538852-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'forkAndExec:arguments:environment:',			#protocol : #'instance creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary \r\t"Run a program in an external OS process, and answer an instance of \r\tmyself which represents the external process."\r\r\t"ExternalUnixOSProcess forkAndExec: \'/bin/ls\' arguments: (Array with: \'-l\') environment: (UnixProcess env)"\r\r\t^ super new\r\t\tprogramName: executableFile;\r\t\targuments: arrayOfStrings;\r\t\tinitialEnvironment: stringDictionary;\r\t\tinitialize;\r\t\tforkChild\r',			#stamp : 'dtl 2/27/2002 15:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '471' ],		#self : OmReference [ '472' ],		#time : DateAndTime [ '2018-02-22T14:01:11.539468-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'instance creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Run a program in an external OS process, and answer an instance of myself\r\twhich represents the external process."\r\r\t"ExternalUnixOSProcess\r\t\tforkAndExec: \'/bin/ls\'\r\t\targuments: (Array with: \'-l\')\r\t\tenvironment: (UnixProcess env)\r\t\tdescriptors: nil"\r\r\t| proc |\r\tproc := super new\r\t\tprogramName: executableFile;\r\t\targuments: arrayOfStrings;\r\t\tinitialEnvironment: stringDictionary.\r\tarrayOf3Streams ifNotNil:\r\t\t[proc initialStdIn: (arrayOf3Streams at: 1).\r\t\tproc initialStdOut: (arrayOf3Streams at: 2).\r\t\tproc initialStdErr: (arrayOf3Streams at: 3)].\r\t^ proc initialize forkChild\r',			#stamp : 'dtl 2/27/2002 15:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '472' ],		#self : OmReference [ '473' ],		#time : DateAndTime [ '2018-02-22T14:01:11.540037-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'forkAndExec:arguments:environment:descriptors:workingDir:',			#protocol : #'instance creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams workingDir: pathString\r\t"Run a program in an external OS process, and answer an instance of myself\r\twhich represents the external process."\r\r\t"ExternalUnixOSProcess forkAndExec: \'/bin/ls\' arguments: nil environment: nil descriptors: nil workingDir: \'/etc\'"\r\r\t| proc |\r\tproc := super new\r\t\tprogramName: executableFile;\r\t\targuments: arrayOfStrings;\r\t\tinitialEnvironment: stringDictionary.\r\tarrayOf3Streams ifNotNil:\r\t\t[proc initialStdIn: (arrayOf3Streams at: 1).\r\t\tproc initialStdOut: (arrayOf3Streams at: 2).\r\t\tproc initialStdErr: (arrayOf3Streams at: 3)].\r\tpathString ifNotNil: [proc pwd: pathString].\r\t^ proc initialize forkChild\r',			#stamp : 'dtl 2/27/2002 15:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '473' ],		#self : OmReference [ '474' ],		#time : DateAndTime [ '2018-02-22T14:01:11.540578-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if, for the current platform, this class is responsible for representing\r\tan OS process other than that in which the Squeak VM is currently running."\r\r\t^ self isUnix\r',			#stamp : 'dtl 8/30/2003 17:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '474' ],		#self : OmReference [ '475' ],		#time : DateAndTime [ '2018-02-22T14:01:11.54202-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #'programName:arguments:initialEnvironment:',			#protocol : #'instance creation',			#sourceCode : 'programName: executableFile arguments: arrayOfStrings initialEnvironment: stringDictionary\r\t"Answer an instance not yet running."\r\r\t^ super new\r\t\tprogramName: executableFile;\r\t\targuments: arrayOfStrings;\r\t\tinitialEnvironment: stringDictionary\r',			#stamp : 'dtl 2/28/2002 10:15',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '475' ],		#self : OmReference [ '476' ],		#time : DateAndTime [ '2018-02-22T14:01:11.542749-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #remoteShellPath,			#protocol : #shells,			#sourceCode : 'remoteShellPath\r\t"A remote shell processor. This may need to be edited for different systems."\r\r\t| path |\r\tpath := \'/usr/bin/rsh\'.\r\t(OSProcess fileExists: path)\r\t\tifTrue: [^ path]\r\t\tifFalse: [self notify: path, \' not found\']',			#stamp : 'dtl 1/23/2013 20:21',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '476' ],		#self : OmReference [ '477' ],		#time : DateAndTime [ '2018-02-22T14:01:11.543321-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalUnixOSProcess class',				#isMetaSide : true			},			#name : #tkShellPath,			#protocol : #shells,			#sourceCode : 'tkShellPath\r\t"The wish command shell for Tk/Tcl. This tends to be installed in a wide variety\r\tof places, so you may need to edit this method for your system."\r\r\t| path |\r\tpath := \'/usr/bin/wish\'.\r\t(OSProcess fileExists: path)\r\t\tifTrue: [^ path]\r\t\tifFalse: [self notify: path, \' not found\']',			#stamp : 'dtl 1/23/2013 20:21',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '477' ],		#self : OmReference [ '478' ],		#time : DateAndTime [ '2018-02-22T14:01:11.543902-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= processProxy\r\t"True if this is a proxy that represents the same OS process as processProxy"\r\r\t^ ((processProxy isKindOf: ExternalUnixOSProcess)\r\t\t\tand: [pid = processProxy pid])\r\t\t\t\tand: [ppid = processProxy ppid]',			#stamp : 'dtl 11/15/2013 10:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '478' ],		#self : OmReference [ '479' ],		#time : DateAndTime [ '2018-02-22T14:01:11.544455-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #arguments,			#protocol : #accessing,			#sourceCode : 'arguments\r\r\t^ arguments',			#stamp : 'dtl 1/20/2001 12:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '479' ],		#self : OmReference [ '480' ],		#time : DateAndTime [ '2018-02-22T14:01:11.544985-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'arguments:',			#protocol : #accessing,			#sourceCode : 'arguments: arrayOfArgumentStrings\r\r\targuments := arrayOfArgumentStrings',			#stamp : 'dtl 1/20/2001 12:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '480' ],		#self : OmReference [ '481' ],		#time : DateAndTime [ '2018-02-22T14:01:11.545538-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #exitStatus,			#protocol : #accessing,			#sourceCode : 'exitStatus\r\r\t^ exitStatus\r',			#stamp : 'dtl 7/3/1999 12:34',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '481' ],		#self : OmReference [ '482' ],		#time : DateAndTime [ '2018-02-22T14:01:11.546071-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'exitStatus:',			#protocol : #accessing,			#sourceCode : 'exitStatus: anInteger\r\r\texitStatus := anInteger\r',			#stamp : 'dtl 10/22/1999 22:21',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '482' ],		#self : OmReference [ '483' ],		#time : DateAndTime [ '2018-02-22T14:01:11.546642-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #forkChild,			#protocol : #'initialize - release',			#sourceCode : 'forkChild\r\t"Start the external OS process. All instances variables except for pid  \r\tshould have been set. The pid will be set following creation of the new \r\texternal process. Creating a child process is the responsibility of the\r\tcurrently executing OS process, so request it to do so on behalf of this\r\tinstance of ExternalUnixOSProcess."\r\r\t^ OSProcess thisOSProcess\r\t\tprocessProxy: self\r\t\tforkAndExec: programName\r\t\targuments: arguments\r\t\tenvironment: initialEnvironment\r\t\tdescriptors: (Array\r\t\t\t\twith: initialStdIn\r\t\t\t\twith: initialStdOut\r\t\t\t\twith: initialStdErr)\r',			#stamp : 'dtl 4/4/2006 21:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '483' ],		#self : OmReference [ '484' ],		#time : DateAndTime [ '2018-02-22T14:01:11.548075-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\r\t^ (pid ifNil: [self identityHash]) + (ppid ifNil: [self identityHash])\r',			#stamp : 'dtl 6/28/2010 22:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '484' ],		#self : OmReference [ '485' ],		#time : DateAndTime [ '2018-02-22T14:01:11.548746-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #initialEnvironment,			#protocol : #accessing,			#sourceCode : 'initialEnvironment\r\r\t^ initialEnvironment',			#stamp : 'dtl 3/11/2001 09:17',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '485' ],		#self : OmReference [ '486' ],		#time : DateAndTime [ '2018-02-22T14:01:11.549438-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'initialEnvironment:',			#protocol : #accessing,			#sourceCode : 'initialEnvironment: aDictionary\r\r\tinitialEnvironment := aDictionary',			#stamp : 'dtl 1/21/2001 11:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '486' ],		#self : OmReference [ '487' ],		#time : DateAndTime [ '2018-02-22T14:01:11.550023-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\r\tsuper initialize.\r\t^ self setDefaults\r',			#stamp : 'dtl 2/11/2001 19:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '487' ],		#self : OmReference [ '488' ],		#time : DateAndTime [ '2018-02-22T14:01:11.55056-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #pid,			#protocol : #accessing,			#sourceCode : 'pid\r\r\t^ pid\r',			#stamp : 'dtl 7/3/1999 12:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '488' ],		#self : OmReference [ '489' ],		#time : DateAndTime [ '2018-02-22T14:01:11.551096-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'pid:',			#protocol : #accessing,			#sourceCode : 'pid: aPid\r\r\tpid := aPid\r',			#stamp : 'dtl 10/22/1999 22:21',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '489' ],		#self : OmReference [ '490' ],		#time : DateAndTime [ '2018-02-22T14:01:11.551632-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #ppid,			#protocol : #accessing,			#sourceCode : 'ppid\r\r\t^ ppid\r',			#stamp : 'dtl 7/3/1999 12:33',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '490' ],		#self : OmReference [ '491' ],		#time : DateAndTime [ '2018-02-22T14:01:11.552161-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'ppid:',			#protocol : #accessing,			#sourceCode : 'ppid: aPid\r\r\tppid := aPid\r',			#stamp : 'dtl 10/22/1999 22:21',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '491' ],		#self : OmReference [ '492' ],		#time : DateAndTime [ '2018-02-22T14:01:11.552775-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tself programName isNil\r\t\tifTrue:\r\t\t\t[^ super printOn: aStream]\r\t\tifFalse:\r\t\t\t[aStream\r\t\t\t\tnextPutAll: \'an \';\r\t\t\t\tnextPutAll: self class name, \' with pid \';\r\t\t\t\tnextPutAll: self pid printString;\r\t\t\t\tnextPutAll: \' on \';\r\t\t\t\tnextPutAll: programName;\r\t\t\t\tnextPutAll: \' (\';\r\t\t\t\tnextPutAll: self runState asString.\r\t\t\tself isComplete\r\t\t\t\tifTrue: [aStream nextPutAll: \', \';\r\t\t\t\t\tnextPutAll: (UnixProcessExitStatus for: exitStatus) printString].\r\t\t\taStream nextPut: $)].\r',			#stamp : 'dtl 8/23/2012 22:45',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '492' ],		#self : OmReference [ '493' ],		#time : DateAndTime [ '2018-02-22T14:01:11.55412-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #programName,			#protocol : #accessing,			#sourceCode : 'programName\r\r\t^ programName',			#stamp : 'dtl 1/20/2001 12:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '493' ],		#self : OmReference [ '494' ],		#time : DateAndTime [ '2018-02-22T14:01:11.554672-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'programName:',			#protocol : #accessing,			#sourceCode : 'programName: fileName\r\r\tprogramName := fileName',			#stamp : 'dtl 1/20/2001 12:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '494' ],		#self : OmReference [ '495' ],		#time : DateAndTime [ '2018-02-22T14:01:11.555321-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #pwd,			#protocol : #accessing,			#sourceCode : 'pwd\r\r\tpwd ifNil: [pwd := self accessor primGetCurrentWorkingDirectory].\r\t^ pwd',			#stamp : 'dtl 3/31/2001 17:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '495' ],		#self : OmReference [ '496' ],		#time : DateAndTime [ '2018-02-22T14:01:11.555987-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'pwd:',			#protocol : #accessing,			#sourceCode : 'pwd: pathString\r\r\tpwd := pathString',			#stamp : 'dtl 3/31/2001 17:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '496' ],		#self : OmReference [ '497' ],		#time : DateAndTime [ '2018-02-22T14:01:11.556639-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #setDefaults,			#protocol : #'initialize - release',			#sourceCode : 'setDefaults\r\r\t| this |\r\tthis := OSProcess thisOSProcess.\r\tinitialEnvironment ifNil: [self initialEnvironment: this environment].\r\tinitialStdIn ifNil: [self initialStdIn: this stdIn].\r\tinitialStdOut ifNil: [self initialStdOut: this stdOut].\r\tinitialStdErr ifNil: [self initialStdErr: this stdErr].\t\r\tself pwd\r\r',			#stamp : 'dtl 3/31/2001 17:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '497' ],		#self : OmReference [ '498' ],		#time : DateAndTime [ '2018-02-22T14:01:11.557197-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigabrt,			#protocol : #'OS signal sending',			#sourceCode : 'sigabrt\r\t"Send a SIGABRT signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigabrt: self',			#stamp : 'dtl 7/6/2000 16:44',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '498' ],		#self : OmReference [ '499' ],		#time : DateAndTime [ '2018-02-22T14:01:11.55775-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigalrm,			#protocol : #'OS signal sending',			#sourceCode : 'sigalrm\r\t"Send a SIGALRM signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigalrm: self',			#stamp : 'dtl 7/6/2000 16:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '499' ],		#self : OmReference [ '500' ],		#time : DateAndTime [ '2018-02-22T14:01:11.558294-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigchld,			#protocol : #'OS signal sending',			#sourceCode : 'sigchld\r\t"Send a SIGCHLD signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigchld: self',			#stamp : 'dtl 7/6/2000 16:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '500' ],		#self : OmReference [ '501' ],		#time : DateAndTime [ '2018-02-22T14:01:11.558843-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigcont,			#protocol : #'OS signal sending',			#sourceCode : 'sigcont\r\t"Send a SIGCONT signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigcont: self',			#stamp : 'dtl 7/6/2000 16:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '501' ],		#self : OmReference [ '502' ],		#time : DateAndTime [ '2018-02-22T14:01:11.560204-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sighup,			#protocol : #'OS signal sending',			#sourceCode : 'sighup\r\t"Send a SIGHUP signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sighup: self',			#stamp : 'dtl 7/6/2000 16:53',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '502' ],		#self : OmReference [ '503' ],		#time : DateAndTime [ '2018-02-22T14:01:11.560793-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigint,			#protocol : #'OS signal sending',			#sourceCode : 'sigint\r\t"Send a SIGINT signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigint: self',			#stamp : 'dtl 7/6/2000 16:53',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '503' ],		#self : OmReference [ '504' ],		#time : DateAndTime [ '2018-02-22T14:01:11.561358-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigkill,			#protocol : #'OS signal sending',			#sourceCode : 'sigkill\r\t"Send a SIGKILL signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigkill: self',			#stamp : 'dtl 7/6/2000 16:54',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '504' ],		#self : OmReference [ '505' ],		#time : DateAndTime [ '2018-02-22T14:01:11.562048-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigpipe,			#protocol : #'OS signal sending',			#sourceCode : 'sigpipe\r\t"Send a SIGPIPE signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigpipe: self',			#stamp : 'dtl 7/6/2000 16:54',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '505' ],		#self : OmReference [ '506' ],		#time : DateAndTime [ '2018-02-22T14:01:11.562715-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigquit,			#protocol : #'OS signal sending',			#sourceCode : 'sigquit\r\t"Send a SIGQUIT signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigquit: self',			#stamp : 'dtl 7/6/2000 16:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '506' ],		#self : OmReference [ '507' ],		#time : DateAndTime [ '2018-02-22T14:01:11.563328-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigstop,			#protocol : #'OS signal sending',			#sourceCode : 'sigstop\r\t"Send a SIGSTOP signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigstop: self',			#stamp : 'dtl 7/6/2000 16:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '507' ],		#self : OmReference [ '508' ],		#time : DateAndTime [ '2018-02-22T14:01:11.563885-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigterm,			#protocol : #'OS signal sending',			#sourceCode : 'sigterm\r\t"Send a SIGTERM signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigterm: self',			#stamp : 'dtl 7/6/2000 16:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '508' ],		#self : OmReference [ '509' ],		#time : DateAndTime [ '2018-02-22T14:01:11.564434-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigusr1,			#protocol : #'OS signal sending',			#sourceCode : 'sigusr1\r\t"Send a SIGUSR1 signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigusr1: self',			#stamp : 'dtl 7/6/2000 16:56',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '509' ],		#self : OmReference [ '510' ],		#time : DateAndTime [ '2018-02-22T14:01:11.565771-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #sigusr2,			#protocol : #'OS signal sending',			#sourceCode : 'sigusr2\r\t"Send a SIGUSR2 signal to the external process which I represent."\r\r\tOSProcess thisOSProcess sigusr2: self',			#stamp : 'dtl 7/6/2000 16:56',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '510' ],		#self : OmReference [ '511' ],		#time : DateAndTime [ '2018-02-22T14:01:11.566363-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #succeeded,			#protocol : #testing,			#sourceCode : 'succeeded\r\r\t^ self isComplete and: [self exitStatus == 0]',			#stamp : 'dtl 12/22/2001 18:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '511' ],		#self : OmReference [ '512' ],		#time : DateAndTime [ '2018-02-22T14:01:11.566928-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #terminate,			#protocol : #'terminating child',			#sourceCode : 'terminate\r\t"Kill the child process which I represent."\r\r\tself sigkill.\r\tself finalize\r\r',			#stamp : 'dtl 2/11/2001 16:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '512' ],		#self : OmReference [ '513' ],		#time : DateAndTime [ '2018-02-22T14:01:11.567531-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter \r\r\t| accessible |\r\taParameter == #runState\r\t\tifTrue: [| statusArray | \r\t\t\t"Has the process exited?"\r\t\t\tstatusArray := self accessor primGetChildExitStatus: self pid.\r\t\t\tstatusArray notNil\r\t\t\t\tifTrue: [self exitStatus: (statusArray at: 2).\r\t\t\t\t\t\t^ self complete]].\r\taParameter == #accessibility\r\t\tifTrue: ["Does the process still exist, and is it reachable?"\r\t\t\t((accessible := self isAccessible) notNil and: [accessible])\r\t\t\t\tifFalse: [^ self isRunning ifTrue: [self unknownRunState]]].\r\tsuper update: aParameter\r',			#stamp : 'dtl 7/6/2006 10:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '513' ],		#self : OmReference [ '514' ],		#time : DateAndTime [ '2018-02-22T14:01:11.568095-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalUnixOSProcess,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Start the external process"\r\r\tself isNotYetRunning ifTrue: [self forkChild; closeStreams]\r',			#stamp : 'dtl 11/21/2006 14:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '514' ],		#self : OmReference [ '515' ],		#time : DateAndTime [ '2018-02-22T14:01:11.568745-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalWindowsOSProcess class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'instance creation',			#sourceCode : 'command: aCommandString\r\r\t"ExternalWindowsOSProcess command: \'SOL\'"\r\t"ExternalWindowsOSProcess command: \'NoSuchProgram\'"\r\r\t^ (self commandNoEvaluate: aCommandString) value\r',			#stamp : 'dtl 2/28/2002 10:56',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '515' ],		#self : OmReference [ '516' ],		#time : DateAndTime [ '2018-02-22T14:01:11.569489-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalWindowsOSProcess class',				#isMetaSide : true			},			#name : #'commandNoEvaluate:',			#protocol : #'instance creation',			#sourceCode : 'commandNoEvaluate: aCommandString\r\t"Answer an instance not yet running."\r\r\t"ExternalWindowsOSProcess commandNoEvaluate: \'SOL\'"\r\r\t^ super new\r\t\tcommandLine: aCommandString;\r\t\tppid: OSProcess thisOSProcess pid;\r\t\tnotYetRunning\r',			#stamp : 'dtl 2/28/2002 10:49',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '516' ],		#self : OmReference [ '517' ],		#time : DateAndTime [ '2018-02-22T14:01:11.570104-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalWindowsOSProcess class',				#isMetaSide : true			},			#name : #defaultShellPath,			#protocol : #shells,			#sourceCode : 'defaultShellPath\r\r\t^ \'C:\\Windows\\System32\\cmd.exe\'.',			#stamp : 'SeanDeNigris 12/27/2013 10:17',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '517' ],		#self : OmReference [ '518' ],		#time : DateAndTime [ '2018-02-22T14:01:11.570653-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalWindowsOSProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if, for the current platform, this class is responsible for representing\r\tan OS process other than that in which the Squeak VM is currently running."\r\r\t^ self isWindows\r',			#stamp : 'dtl 8/30/2003 17:50',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '518' ],		#self : OmReference [ '519' ],		#time : DateAndTime [ '2018-02-22T14:01:11.572016-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalWindowsOSProcess class',				#isMetaSide : true			},			#name : #'programName:arguments:initialEnvironment:',			#protocol : #'instance creation',			#sourceCode : 'programName: executableFile arguments: arrayOfStrings initialEnvironment: stringDictionary\r\t"This is for protocol compatibility with ExternalUnixOSProcess. For now, just reassemble\r\ta command line string and ignore the environment argument."\r\r\t| commandLine |\r\tcommandLine := WriteStream on: String new.\r\tcommandLine nextPutAll: executableFile.\r\tarrayOfStrings ifNotNil:\r\t\t[arrayOfStrings do: [:arg | commandLine nextPut: Character space; nextPutAll: arg]].\r\t^ self commandNoEvaluate: commandLine contents\r',			#stamp : 'dtl 3/1/2002 07:02',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '519' ],		#self : OmReference [ '520' ],		#time : DateAndTime [ '2018-02-22T14:01:11.572605-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalWindowsOSProcess class',				#isMetaSide : true			},			#name : #shellFlags,			#protocol : #shell,			#sourceCode : 'shellFlags\r\r\t^ \'/c\'.',			#stamp : 'SeanDeNigris 12/27/2013 12:31',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '520' ],		#self : OmReference [ '521' ],		#time : DateAndTime [ '2018-02-22T14:01:11.573192-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= processProxy\r\t"True if this is a proxy that represents the same OS process as processProxy"\r\r\t^ ((processProxy isKindOf: ExternalWindowsOSProcess)\r\t\t\tand: [pid = processProxy pid])\r\t\t\t\tand: [ppid = processProxy ppid]',			#stamp : 'dtl 11/15/2013 10:30',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '521' ],		#self : OmReference [ '522' ],		#time : DateAndTime [ '2018-02-22T14:01:11.573832-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #closeHandles,			#protocol : #'initialize - release',			#sourceCode : 'closeHandles\r\t"Clean up after process exits."\r\r\tself threads do: [:thread | thread closeHandle].\r\thandle ifNotNil:\r\t\t[OSProcess accessor primCloseHandle: handle.\r\t\thandle := nil]\r',			#stamp : 'dtl 3/1/2002 07:44',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '522' ],		#self : OmReference [ '523' ],		#time : DateAndTime [ '2018-02-22T14:01:11.574385-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #commandLine,			#protocol : #accessing,			#sourceCode : 'commandLine\r\r\t^ commandLine',			#stamp : 'dtl 2/26/2002 10:09',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '523' ],		#self : OmReference [ '524' ],		#time : DateAndTime [ '2018-02-22T14:01:11.574989-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'commandLine:',			#protocol : #accessing,			#sourceCode : 'commandLine: aCommandLineString\r\r\tcommandLine := aCommandLineString',			#stamp : 'dtl 2/26/2002 10:09',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '524' ],		#self : OmReference [ '525' ],		#time : DateAndTime [ '2018-02-22T14:01:11.575716-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #complete,			#protocol : #'setting run state',			#sourceCode : 'complete\r\t"Process has exited and has been reaped. It no longer exists in the external operating system."\r\r\t(threads notNil and: [threads size > 0]) ifTrue: [threads do: [:t | t complete]].\r\tself closeHandles.\r\tsuper complete\r',			#stamp : 'dtl 6/24/2006 08:41',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '525' ],		#self : OmReference [ '526' ],		#time : DateAndTime [ '2018-02-22T14:01:11.576362-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #exitStatus,			#protocol : #accessing,			#sourceCode : 'exitStatus\r\r\t^ exitStatus',			#stamp : 'dtl 2/25/2002 08:32',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '526' ],		#self : OmReference [ '527' ],		#time : DateAndTime [ '2018-02-22T14:01:11.576985-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'exitStatus:',			#protocol : #accessing,			#sourceCode : 'exitStatus: status\r\r\texitStatus := status\r',			#stamp : 'dtl 2/25/2002 08:33',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '527' ],		#self : OmReference [ '528' ],		#time : DateAndTime [ '2018-02-22T14:01:11.578414-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #handle,			#protocol : #accessing,			#sourceCode : 'handle\r\t"A Windows HANDLE for this OS process, represented as a ByteArray. The\r\thandle should be closed when the process exits."\r\r\t^ handle',			#stamp : 'dtl 2/25/2002 07:24',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '528' ],		#self : OmReference [ '529' ],		#time : DateAndTime [ '2018-02-22T14:01:11.579031-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'handle:',			#protocol : #accessing,			#sourceCode : 'handle: aHandleObject\r\t"A Windows HANDLE for this OS process, represented as a ByteArray. The\r\thandle should be closed when the process exits."\r\r\thandle := aHandleObject',			#stamp : 'dtl 2/25/2002 07:32',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '529' ],		#self : OmReference [ '530' ],		#time : DateAndTime [ '2018-02-22T14:01:11.579674-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\r\t^ (pid ifNil: [self identityHash]) + (ppid ifNil: [self identityHash])\r',			#stamp : 'dtl 6/28/2010 22:27',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '530' ],		#self : OmReference [ '531' ],		#time : DateAndTime [ '2018-02-22T14:01:11.580215-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #ppid,			#protocol : #accessing,			#sourceCode : 'ppid\r\r\t^ ppid\r',			#stamp : 'dtl 2/25/2002 07:29',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '531' ],		#self : OmReference [ '532' ],		#time : DateAndTime [ '2018-02-22T14:01:11.580762-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'ppid:',			#protocol : #accessing,			#sourceCode : 'ppid: aProcessID\r\r\tppid := aProcessID',			#stamp : 'dtl 2/25/2002 07:29',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '532' ],		#self : OmReference [ '533' ],		#time : DateAndTime [ '2018-02-22T14:01:11.581371-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tself commandLine isNil\r\t\tifTrue:\r\t\t\t[^ super printOn: aStream]\r\t\tifFalse:\r\t\t\t[aStream\r\t\t\t\tnextPutAll: \'a \';\r\t\t\t\tnextPutAll: self class name, \' with pid \';\r\t\t\t\tnextPutAll: self pid printString.\r\t\t\t(self isComplete and: [handle isNil])\r\t\t\t\tifTrue:\r\t\t\t\t\t[aStream nextPutAll: \' (handle closed)\']\r\t\t\t\tifFalse:\r\t\t\t\t\t[aStream nextPutAll: \' handle \';\r\t\t\t\t\t\tnextPutAll: (handle isNil\r\t\t\t\t\t\t\tifTrue: [handle printString]\r\t\t\t\t\t\t\tifFalse: [handle asArray printString])].\r\t\t\taStream\r\t\t\t\tnextPutAll: \' on \'\'\';\r\t\t\t\tnextPutAll: commandLine;\r\t\t\t\tnextPutAll: \'\'\' (\';\r\t\t\t\tnextPutAll: self runState asString;\r\t\t\t\tnextPut: $)]\r\r',			#stamp : 'dtl 2/26/2002 10:42',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '533' ],		#self : OmReference [ '534' ],		#time : DateAndTime [ '2018-02-22T14:01:11.58195-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #pwd,			#protocol : #accessing,			#sourceCode : 'pwd\r\t"Answer the current working directory string."\r\r\t^ pwd',			#stamp : 'dtl 2/28/2002 10:28',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '534' ],		#self : OmReference [ '535' ],		#time : DateAndTime [ '2018-02-22T14:01:11.58265-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'pwd:',			#protocol : #accessing,			#sourceCode : 'pwd: pathString\r\t"The current working directory string."\r\r\tpwd := pathString',			#stamp : 'dtl 2/28/2002 10:28',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '535' ],		#self : OmReference [ '536' ],		#time : DateAndTime [ '2018-02-22T14:01:11.583323-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #threads,			#protocol : #accessing,			#sourceCode : 'threads\r\t"One or more threads of execution within the OS process"\r\r\t^ threads ifNil: [threads := OrderedCollection new]\r',			#stamp : 'dtl 2/25/2002 07:09',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '536' ],		#self : OmReference [ '537' ],		#time : DateAndTime [ '2018-02-22T14:01:11.584737-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter \r\r\t| accessible stat |\r\taParameter == #runState\r\t\tifTrue:\r\t\t\t["Has the process exited?"\r\t \t\tstat := self accessor primGetExitStatusForHandle: self handle.\r\t\t\tstat ifNotNil: [self complete closeHandles exitStatus: stat]].\r\taParameter == #accessibility\r\t\tifTrue: ["Does the process still exist, and is it reachable?"\r\t\t\t((accessible := self isAccessible) notNil and: [accessible])\r\t\t\t\tifFalse: [self isRunning ifTrue: [self unknownRunState]]].\r\tsuper update: aParameter\r',			#stamp : 'dtl 2/27/2002 09:45',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '537' ],		#self : OmReference [ '538' ],		#time : DateAndTime [ '2018-02-22T14:01:11.585485-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalWindowsOSProcess,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Start the external process"\r\r\t| procInfo mainThread |\r\tself isNotYetRunning ifTrue:\r\t\t[procInfo := OSProcess accessor primCommand: self commandLine.\r\t\tprocInfo isNil\r\t\t\tifTrue:\r\t\t\t\t[ | err | (err := self initialStdErr) notNil ifTrue: [\r\t\t\t\t\terr nextPutAll: \'cannot execute \', self commandLine; cr ].\r\t\t\t\tself exitStatus: #cannotExecuteCommandLine.\r\t\t\t\t"FIXME: Close the OSPipes now, otherwise the image will block on a read"\r\t\t\t\tself closeStreams.\r\t\t\t\t[self complete] fork "defer execution so OSPipes stay in place for now"]\r\t\t\tifFalse:\r\t\t\t\t[self pid: (procInfo at: 3).\r\t\t\t\tself handle: (procInfo at: 1).\r\t\t\t\tmainThread := WindowsThread\r\t\t\t\t\t\tthreadID: (procInfo at: 4)\r\t\t\t\t\t\thandle: (procInfo at: 2)\r\t\t\t\t\t\trunning: true.\r\t\t\t\tself threads add: mainThread.\r \t\t\t\tself running.\r\t\t\t\tOSProcess thisOSProcess registerChildProcess: self.\r\t\t\t\t"FIXME: Close the initial pipe handles. For now, I have not implemented\r\t\t\t\tpassing these to the child, and there is no support yet for nonblocking\r\t\t\t\tWindows OS pipes. Once those are available, this method needs to change\r\t\t\t\tto support."\r\t\t\t\tself closeStreams]].\r',			#stamp : 'ThierryGoubier 7/27/2017 22:38',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '538' ],		#self : OmReference [ '539' ],		#time : DateAndTime [ '2018-02-22T14:01:11.586063-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #accessor,			#protocol : #'external process access',			#sourceCode : 'accessor\r\t"Answer an OSProcessAccessor for this OS process."\r\r\t^ self thisOSProcess processAccessor\r',			#stamp : 'dtl 11/8/2000 22:04',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '539' ],		#self : OmReference [ '540' ],		#time : DateAndTime [ '2018-02-22T14:01:11.586974-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #allTestResults,			#protocol : #sUnit,			#sourceCode : 'allTestResults\r\t"Run all available sUnit tests and save the results in a file named\r\t\'OSProcessTestResults-<platform>.txt\'. Display results on the Transcript as\r\ttests are run. Answer a string with the test results."\r\r\t"OSProcess allTestResults"\r\r\t| resultsFileName writeStream resultString results fs problems result wordSize |\r\tself listLoadedModules\r\t\tdetect: [:e | \'*OSProcessPlugin*\' match: e]\r\t\tifNone: [self notify: \'no OSProcessPlugin loaded\'].\r\twordSize := (Smalltalk respondsTo: #wordSize)\r\t\tifTrue: [Smalltalk wordSize]\r\t\tifFalse: [4].\r\tresultsFileName := \'OSProcessTestResults-\' , OSProcess platformName , \'-\' ,\r\t\t(wordSize * 8) asString , \'bitImage-\' ,\r\t\t(OSProcess accessor sizeOfPointer * 8) asString , \'bitHw.txt\'.\r\t[fs := FileStream newFileNamed: resultsFileName.\r\tproblems := false.\r\twriteStream := WriteStream on: String new.\r\twriteStream nextPutAll: self authorInitials , \' running OSProcess unit tests \' , DateAndTime now asString; cr.\r\twriteStream nextPutAll: \'OSProcess platformName => \' , OSProcess platformName; cr.\r\twriteStream nextPutAll: \'OSProcess platformSubtype => \' , OSProcess platformSubtype; cr.\r\twriteStream nextPutAll: \'OSProcess osVersion => \' , OSProcess osVersion; cr.\r\twriteStream nextPutAll: \'OSProcess vmVersion => \' , OSProcess vmVersion; cr.\r\twriteStream nextPutAll: \'size of C int: OSProcess accessor sizeOfInt ==> \' , OSProcess accessor sizeOfInt asString; cr.\r\twriteStream nextPutAll: \'size of C pointer: OSProcess accessor sizeOfPointer ==> \' , OSProcess accessor sizeOfPointer asString; cr.\r\twriteStream nextPutAll: \'OSProcess versionInformation asString => \' , OSProcess versionInformation asString; cr.\r\tTranscript show: writeStream contents.\r\t(((Class allSubInstances select: [:class | #\'OSProcess-Tests\' = class category]) ,\r\t\t(Class allSubInstances select: [:class | #\'CommandShell-Tests\' = class category]))\r\t\t\treject: [:class | \'Abstract*\' match: class name])\r\t\tdo: [:testCase | \r\t\t\twriteStream nextPutAll: \'running tests in \' , testCase name; cr.\r\t\t\tTranscript show: \'running tests in \' , testCase name; cr.\r\t\t\ttestCase allTestSelectors\r\t\t\t\tdo: [:testSelector |\r\t\t\t\t\tOSProcess thisOSProcess stdOut nextPutAll:\r\t\t\t\t\t\ttestCase name, \'>>\',testSelector, String lf; flush.\r\t\t\t\t\tresultString := (testSelector\r\t\t\t\t\t\t\t\t-> ([result := (testCase selector: testSelector) run.\r\t\t\t\t\t\t\t\t\tresult hasPassed\r\t\t\t\t\t\t\t\t\t\tifFalse: [problems := true].\r\t\t\t\t\t\t\t\t\tresult]\r\t\t\t\t\t\t\t\t\t\ton: Error\r\t\t\t\t\t\t\t\t\t\tdo: [:ex | problems := true.\r\t\t\t\t\t\t\t\t\t\t\t\'caught exception \' , ex printString])) printString.\r\t\t\t\t\twriteStream nextPutAll: resultString; cr.\r\t\t\t\t\tTranscript show: resultString; cr]].\r\tproblems\r\t\tifTrue: [writeStream nextPutAll: \'one or more problems found\'; cr.\r\t\t\tTranscript show: \'one or more problems were found, see results file\'; cr]\r\t\tifFalse: [writeStream nextPutAll: \'all tests completed without problems\'; cr.\r\t\t\tTranscript show: \'all tests completed without problems\'; cr].\r\tresults := writeStream contents copyReplaceAll: String cr with: String lf.\r\tfs nextPutAll: results]\r\t\tensure: [fs close].\r\tTranscript show: \'tests results have been saved in a file named \'\'\' , resultsFileName , \'\'\'\'; cr.\r\t^ results',			#stamp : 'dtl 6/17/2015 19:31',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '540' ],		#self : OmReference [ '541' ],		#time : DateAndTime [ '2018-02-22T14:01:11.587553-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #arguments,			#protocol : #'external system access',			#sourceCode : 'arguments\r\r\t"OSProcess arguments"\r\r\t^ self thisOSProcess arguments\r',			#stamp : 'dtl 1/7/2001 12:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '541' ],		#self : OmReference [ '542' ],		#time : DateAndTime [ '2018-02-22T14:01:11.58812-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #authorInitials,			#protocol : #sUnit,			#sourceCode : 'authorInitials\r\t"Get the author initials from the system."\r\r\t((Smalltalk respondsTo: #metacelloPlatformAttributes)\r\t\tand: [ \r\t\t\t(Smalltalk metacelloPlatformAttributes includes: #\'pharo3.x\')\r\t\t\t\tor: [ Smalltalk metacelloPlatformAttributes includes: #\'pharo2.x\' ] ])\r\t\tifTrue: [ ^ (Smalltalk at: #Author) fullName select: [ :c | c isUppercase ] ].\r\t^ (Smalltalk at: #Utilities) authorInitials',			#stamp : 'ThierryGoubier 10/11/2013 11:16',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '542' ],		#self : OmReference [ '543' ],		#time : DateAndTime [ '2018-02-22T14:01:11.588702-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #classForThisOSProcess,			#protocol : #private,			#sourceCode : 'classForThisOSProcess\r\t"Answer the class which represents the OS process in which Squeak runs."\r\r\t^ ThisOSProcess concreteClass',			#stamp : 'dtl 1/7/2001 13:13',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '543' ],		#self : OmReference [ '544' ],		#time : DateAndTime [ '2018-02-22T14:01:11.589363-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'external command processing',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library,\r\texcept that aCommandString runs asynchronously in a child process."\r\r\t"OSProcess command: \'ls -l /etc\'"\r\r\t^ self thisOSProcess command: aCommandString\r',			#stamp : 'dtl 1/7/2001 12:09',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '544' ],		#self : OmReference [ '545' ],		#time : DateAndTime [ '2018-02-22T14:01:11.590115-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'debugMessage:',			#protocol : #debugging,			#sourceCode : 'debugMessage: aString\r\t"Print aString on standard output. The debug message is prefixed with the\r\tidentity of the process in which the method is being evaluated, and the\r\tidentity of the object which received the message. Useful for debugging\r\ttiming or deadlock problems."\r\r\t[self thisOSProcess stdOut\r\t\t"The process in which the traced message is being evaluated"\r\t\tnextPutAll: Processor activeProcess hash printString, \':\';\r\t\t"The identity of the object being traced"\r\t\tnextPutAll: thisContext sender sender sender receiver hash printString, \':\';\r\t\t"The debug message"\r\t\tnextPutAll: aString asString; nextPut: Character lf; flush]\r\t\t\ton: Error\r\t\t\tdo: []',			#stamp : 'dtl 4/2/2005 12:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '545' ],		#self : OmReference [ '546' ],		#time : DateAndTime [ '2018-02-22T14:01:11.591554-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #defaultPathString,			#protocol : #'version dependent',			#sourceCode : 'defaultPathString\r\r\t^ self useFileSystem\r\t\tifTrue: [(((Smalltalk at: #Path) perform: #workingDirectory) perform: #asFileReference) pathString]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) default pathName]\r',			#stamp : 'dtl 1/27/2013 21:48',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '546' ],		#self : OmReference [ '547' ],		#time : DateAndTime [ '2018-02-22T14:01:11.592266-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'deleteFileNamed:',			#protocol : #'version dependent',			#sourceCode : 'deleteFileNamed: fileName\r\t"Delete the file with the given name."\r\r\tself useFileSystem\r\t\tifTrue: [ | file sel |\r\t\t\tfile := fileName perform: #asFileReference.\r\t\t\t(sel := {#ensureDelete . #ensureDeleted . #delete}\r\t\t\t\tdetect: [ :e | file respondsTo: e ]\r\t\t\t\tifNone: [ self error: \'do not know how to ensureDelete\' ]) notNil\r\t\t\t\tifTrue: [ file perform: sel ].\r\t\t\t(file respondsTo: #ensureDelete)\r\t\t\t\tifTrue: [ file perform: #ensureDelete ]\r\t\t\t\tifFalse: [ file perform: #ensureDeleted ] ]\r\t\tifFalse:\r\t\t\t[ (Smalltalk at: #FileDirectory) default deleteFileNamed: fileName ]',			#stamp : 'ThierryGoubier 7/27/2017 22:37',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '547' ],		#self : OmReference [ '548' ],		#time : DateAndTime [ '2018-02-22T14:01:11.592872-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'directoryEntryNames:',			#protocol : #'version dependent',			#sourceCode : 'directoryEntryNames: path\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) children collect: [:e | e perform: #basename] ]\r\t\tifFalse: [ ((Smalltalk at: #FileDirectory) on: path) entries collect: [:e | e name] ]\r',			#stamp : 'dtl 1/27/2013 21:49',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '548' ],		#self : OmReference [ '549' ],		#time : DateAndTime [ '2018-02-22T14:01:11.59345-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'directoryExists:',			#protocol : #'version dependent',			#sourceCode : 'directoryExists: path\r\t"Answer true if a directory of the given name exists. The given name may\r\tbe either a full path name or a local directory within this directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) exists ]\r\t\tifFalse: [ (Smalltalk at: #FileDirectory) default directoryExists: path ]\r',			#stamp : 'dtl 1/27/2013 21:49',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '549' ],		#self : OmReference [ '550' ],		#time : DateAndTime [ '2018-02-22T14:01:11.594023-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'fileExists:',			#protocol : #'version dependent',			#sourceCode : 'fileExists: path\r\t"Answer true if a file of the given name exists. The given name may be\r\teither a full path name or a local file within this directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) exists ]\r\t\tifFalse: [ (Smalltalk at: #FileDirectory) default fileExists: path ]\r',			#stamp : 'dtl 1/27/2013 21:49',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '550' ],		#self : OmReference [ '551' ],		#time : DateAndTime [ '2018-02-22T14:01:11.594583-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'getSystemAttribute:',			#protocol : #'version dependent',			#sourceCode : 'getSystemAttribute: attributeID \r\t"After Squeak version 3.6, #getSystemAttribute was moved to SmalltalkImage "\r\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk getSystemAttribute: attributeID]) current getSystemAttribute: attributeID',			#stamp : 'dtl 3/5/2005 11:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '551' ],		#self : OmReference [ '552' ],		#time : DateAndTime [ '2018-02-22T14:01:11.595149-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #helloStdErr,			#protocol : #examples,			#sourceCode : 'helloStdErr\r\t"Write a message on the standard error stream of the OS process, normally\r\tthe terminal or window from which Squeak is being run. Most operating\r\tsystems implement stdin, stdout, and stderr in some manner, so this shown\r\tas an OSProcess example even though the implemention is in my subclasses."\r\r\t"OSProcess helloStdErr"\r\r\t| this |\r\tthis := self thisOSProcess.\r\tthis stdErr ifNil: [self noAccessorAvailable. ^ nil].\r\t^ this stdErr nextPutAll: \'Hello stderr\'; nextPut: (Character lf); yourself',			#stamp : 'dtl 7/12/2000 21:52',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '552' ],		#self : OmReference [ '553' ],		#time : DateAndTime [ '2018-02-22T14:01:11.595857-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #helloWorld,			#protocol : #examples,			#sourceCode : 'helloWorld\r\t"Write a message on the standard output stream of the OS process, normally\r\tthe terminal or window from which Squeak is being run. Most operating\r\tsystems implement stdin, stdout, and stderr in some manner, so this shown\r\tas an OSProcess example even though the implemention is in my subclasses."\r\r\t"OSProcess helloWorld"\r\r\t| this |\r\tthis := self thisOSProcess.\r\tthis stdOut ifNil: [self noAccessorAvailable. ^ nil].\r\t^ this stdOut nextPutAll: \'Hello world\'; nextPut: Character lf; yourself',			#stamp : 'dtl 7/12/2000 21:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '553' ],		#self : OmReference [ '554' ],		#time : DateAndTime [ '2018-02-22T14:01:11.597583-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\t"OSProcess initialize"\r\r\tUseIOHandle := (Smalltalk hasClassNamed: #IOHandle)\r',			#stamp : 'dtl 10/19/2001 18:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '554' ],		#self : OmReference [ '555' ],		#time : DateAndTime [ '2018-02-22T14:01:11.59834-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isNonUnixMac,			#protocol : #'platform identification',			#sourceCode : 'isNonUnixMac\r\t"True if the platform is Mac OS prior to OSX"\r\r\t"OSProcess isNonUnixMac"\r\r\t| numericOsVersion |\r\tnumericOsVersion := self osVersion asInteger ifNil: [0].\r\t^ (self platformName = \'Mac OS\') and: [numericOsVersion < 1000]\r',			#stamp : 'dtl 3/5/2005 11:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '555' ],		#self : OmReference [ '556' ],		#time : DateAndTime [ '2018-02-22T14:01:11.598921-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isOS2,			#protocol : #'platform identification',			#sourceCode : 'isOS2\r\t"True if the platform is OS2"\r\t"FIXME please - What is the correct platform name for OS2?"\r\r\t"OSProcess isOS2"\r\r\t^ self platformName = \'OS2\'\r',			#stamp : 'dtl 3/5/2005 11:42',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '556' ],		#self : OmReference [ '557' ],		#time : DateAndTime [ '2018-02-22T14:01:11.599546-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isPharo3AndLater,			#protocol : #'version dependent',			#sourceCode : 'isPharo3AndLater\r\t"True if this image is a pharo of major version 3 or greater"\r\r\tSmalltalk\r\t\tat: #SystemVersion\r\t\tifPresent: [:cls | ((cls canUnderstand: #type) and: [ cls canUnderstand: #major ])\r\t\t\tifTrue: [^ cls current type = \'Pharo\' and: [ cls current major >= 3 ]]].\r\t^false\r',			#stamp : 'dtl 9/4/2013 08:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '557' ],		#self : OmReference [ '558' ],		#time : DateAndTime [ '2018-02-22T14:01:11.600128-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isPharo5Update50558AndLater,			#protocol : #'version dependent',			#sourceCode : 'isPharo5Update50558AndLater\r\t"True if this image is a pharo of major version 5 at upldate 50558 or greater"\r\t\r\t"OSProcess isPharo5Update50558AndLater"\r\r\tSmalltalk\r\t\tat: #SystemVersion\r\t\tifPresent: [:cls | ((cls canUnderstand: #type) and: [ cls canUnderstand: #major ])\r\t\t\tifTrue: [ ^ (cls current type = \'Pharo\' and: [ cls current major >= 5 ])\r\t\t\t\t\t\tand: [ cls current  highestUpdate >= 50558]]].\r\t^false\r',			#stamp : 'dtl 2/18/2016 21:14',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '558' ],		#self : OmReference [ '559' ],		#time : DateAndTime [ '2018-02-22T14:01:11.60068-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class has responsibilities for the platform on which the\r\tSqueak VM is currently running."\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 8/24/2003 09:52',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '559' ],		#self : OmReference [ '560' ],		#time : DateAndTime [ '2018-02-22T14:01:11.601232-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isRiscOS,			#protocol : #'platform identification',			#sourceCode : 'isRiscOS\r\t"True if the platform is RiscOS"\r\r\t"OSProcess isRiscOS"\r\r\t^ self platformName = \'RiscOS\'',			#stamp : 'dtl 3/5/2005 11:43',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '560' ],		#self : OmReference [ '561' ],		#time : DateAndTime [ '2018-02-22T14:01:11.601815-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isUnix,			#protocol : #'platform identification',			#sourceCode : 'isUnix\r\t"True if the platform is Unix (including Linux, Mac OS X, or other unix-like OS).\r\tNote: Keep this method in sync with UnixOSProcessPlugin>>isResponsibleForThisPlatform."\r\r\t"OSProcess isUnix"\r\r\t| numericOsVersion |\r\r\t^ (self platformName = \'unix\') or:\r\t\t[numericOsVersion := self osVersion asInteger ifNil: [0].\r\t\t(self platformName = \'Mac OS\') and: [numericOsVersion >= 1000]]\r',			#stamp : 'dtl 3/5/2005 11:43',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '561' ],		#self : OmReference [ '562' ],		#time : DateAndTime [ '2018-02-22T14:01:11.602464-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isUnixMac,			#protocol : #'platform identification',			#sourceCode : 'isUnixMac\r\t"True if the platform is Mac OS on OSX"\r\r\t"OSProcess isUnixMac"\r\r\t| osVersion numericOsVersion |\r\tosVersion := self osVersion.\r\t^ (\'darwin*\' match: osVersion "Ian\'s VM")\r\t\tor: [numericOsVersion := osVersion asInteger ifNil: [0].\r\t\t\t(self platformName = \'Mac OS\') and: [numericOsVersion >= 1000] "John\'s VM"]\r',			#stamp : 'dtl 3/5/2005 11:46',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '562' ],		#self : OmReference [ '563' ],		#time : DateAndTime [ '2018-02-22T14:01:11.604038-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #isWindows,			#protocol : #'platform identification',			#sourceCode : 'isWindows\r\t"True if the platform is an MS Windows OS"\r\r\t"OSProcess isWindows"\r\r\t^ self platformName = \'Win32\'',			#stamp : 'dtl 3/5/2005 11:46',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '563' ],		#self : OmReference [ '564' ],		#time : DateAndTime [ '2018-02-22T14:01:11.604652-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #listLoadedModules,			#protocol : #'version dependent',			#sourceCode : 'listLoadedModules\r\t"After Squeak version 3.6, #listLoadedModules was moved to SmalltalkImage "\r\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk listLoadedModules]) current listLoadedModules',			#stamp : 'dtl 10/27/2007 10:55',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '564' ],		#self : OmReference [ '565' ],		#time : DateAndTime [ '2018-02-22T14:01:11.605276-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #makeVM,			#protocol : #utility,			#sourceCode : 'makeVM\r\t"Rebuild the virtual machine and plugins, assuming that this Squeak\r\tis running from a home directory in the appropriate place in the\r\tsource code tree. If the build is successful, save the image and\r\trestart using the new VM."\r\r\t"OSProcess makeVM"\r\r\t^ self makeVmIn: OSProcess defaultPathString, OSProcess pathSeparator, \'build\'\r',			#stamp : 'dtl 1/24/2013 19:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '565' ],		#self : OmReference [ '566' ],		#time : DateAndTime [ '2018-02-22T14:01:11.605832-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'makeVmIn:',			#protocol : #utility,			#sourceCode : 'makeVmIn: buildDirectoryPathName\r\t"Rebuild the virtual machine and plugins in the buildDirectoryPathName\r\tdirectory. If the build is successful, save the image and restart using the\r\tnew VM. This assumes that the currently executing VM is either located in,\r\tor linked to, the buildDirectoryPathName directory."\r\r\t"OSProcess makeVmIn: OSProcess defaultPathString, OSProcess pathSeparator, \'build\'"\r\r\t^ self classForThisOSProcess makeVmIn: buildDirectoryPathName\r\r',			#stamp : 'dtl 1/25/2013 18:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '566' ],		#self : OmReference [ '567' ],		#time : DateAndTime [ '2018-02-22T14:01:11.606372-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #noAccessorAvailable,			#protocol : #private,			#sourceCode : 'noAccessorAvailable\r\r\tself notify: \'process accessor module not available\'',			#stamp : 'dtl 6/29/2005 14:18',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '567' ],		#self : OmReference [ '568' ],		#time : DateAndTime [ '2018-02-22T14:01:11.606989-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #osVersion,			#protocol : #'version dependent',			#sourceCode : 'osVersion\r\t"After Squeak version 3.6, #osVersion was moved to SmalltalkImage. Some\r\tversions of Pharo move this to OSPlatform and issue deprecation warnings\r\tabout the other usages. Pharo3 deprecated OSPlatform direct access."\r\r\t"self osVersion"\r\t\r\tself isPharo3AndLater\r\t\tifTrue: [ ^ (Smalltalk perform: #os) version ].\r\t^ (((Smalltalk hasClassNamed: #OSPlatform)\r\t\t\tand: [(Smalltalk at: #OSPlatform)\r\t\t\t\t\trespondsTo: #osVersion])\r\t\tifTrue: [Smalltalk at: #OSPlatform]\r\t\tifFalse: [((Smalltalk classNamed: \'SmalltalkImage\')\r\t\t\t\tifNil: [^ Smalltalk osVersion]) current]) osVersion',			#stamp : 'ThierryGoubier 9/5/2013 11:13',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '568' ],		#self : OmReference [ '569' ],		#time : DateAndTime [ '2018-02-22T14:01:11.607574-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #pathSeparator,			#protocol : #'version dependent',			#sourceCode : 'pathSeparator\r\r\t^ self useFileSystem\r\t\tifTrue: [((Smalltalk at: #DiskStore) current perform: #delimiter) asString]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) slash]\r',			#stamp : 'SeanDeNigris 2/13/2013 09:46',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '569' ],		#self : OmReference [ '570' ],		#time : DateAndTime [ '2018-02-22T14:01:11.608189-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #platformName,			#protocol : #'version dependent',			#sourceCode : 'platformName \r\t"After Squeak version 3.6, #platformName was moved to SmalltalkImage Some\r\tversions of Pharo move this to OSPlatform and issue deprecation warnings\r\tabout the other usages. The original idiom (Squeak 3.6 and earlier) is the sensible\r\tdefault, but here we attempt to support other implementations if the sensible\r\tdefault is not available."\r\r\t"OSProcess platformName"\r\r\t(Smalltalk respondsTo: #platformName)\r\t\tifTrue: [^ Smalltalk platformName].\r\tself isPharo3AndLater\r\t\tifTrue: [ ^ (Smalltalk perform: #os) name ].\r\t^ (((Smalltalk hasClassNamed: #OSPlatform)\r\t\t\tand: [(Smalltalk at: #OSPlatform)\r\t\t\t\t\trespondsTo: #platformName])\r\t\tifTrue: [Smalltalk at: #OSPlatform]\r\t\tifFalse: [((Smalltalk classNamed: \'SmalltalkImage\')\r\t\t\t\tifNil: [^ Smalltalk osVersion]) current]) platformName',			#stamp : 'dtl 1/2/2014 20:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '570' ],		#self : OmReference [ '571' ],		#time : DateAndTime [ '2018-02-22T14:01:11.608791-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #platformSubtype,			#protocol : #'version dependent',			#sourceCode : 'platformSubtype \r\t"After Squeak version 3.6, #platformSubtype was moved to SmalltalkImage "\r\r\t"OSProcess platformSubtype"\r\r\tself isPharo3AndLater\r\t\tifTrue: [ ^ (Smalltalk perform: #os) perform: #subtype ].\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk platformSubtype]) current platformSubtype',			#stamp : 'dtl 9/4/2013 08:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '571' ],		#self : OmReference [ '572' ],		#time : DateAndTime [ '2018-02-22T14:01:11.610481-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #programName,			#protocol : #'external system access',			#sourceCode : 'programName\r\r\t"OSProcess programName"\r\r\t^ self thisOSProcess programName\r',			#stamp : 'dtl 1/7/2001 12:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '572' ],		#self : OmReference [ '573' ],		#time : DateAndTime [ '2018-02-22T14:01:11.611141-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #quitAndRestart,			#protocol : #utility,			#sourceCode : 'quitAndRestart\r\t"Save image, start a new instance from the saved image, and quit this instance.\r\tThis is useful if the VM has been recompiled or if a new pluggable primitive\r\thas been added."\r\r\t"OSProcess quitAndRestart"\r\r\t| firstPid this |\r\tfirstPid := OSProcess thisOSProcess pid.\r\tfirstPid ifNil: \r\t\t\t[self noAccessorAvailable.\r\t\t\t^ nil].\r\tSmalltalk saveSession.\r\t"Value of firstPid gets saved in the image"\r\tthis := OSProcess thisOSProcess.\r\tthis pid = firstPid ifTrue: [self squeak ifNotNil: [Smalltalk quitPrimitive]].\r\t^ this',			#stamp : 'dtl 1/7/2001 12:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '573' ],		#self : OmReference [ '574' ],		#time : DateAndTime [ '2018-02-22T14:01:11.611761-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #readFromStdIn,			#protocol : #examples,			#sourceCode : 'readFromStdIn\r\t"Type some text on the standard input terminal, followed by <return> or <enter>,\r\tthen call this method. Any available input text in the stdin stream will be read.\r\tThis method sets standard input for the Squeak OS process for non-blocking reads\r\tin order to prevent the Smalltalk image from blocking on the read. After the read,\r\tstandard input is set back to its normal blocking I/O mode.\r\r\tMost operating systems implement stdin, stdout, and stderr in some manner, so this\r\tis shown as an OSProcess example even though the implemention is in my subclasses."\r\r\t"OSProcess readFromStdIn inspect"\r\r\t| input ioHandle resultString |\r\tinput := self thisOSProcess stdIn.\r\tinput ifNil: [self noAccessorAvailable. ^ nil].\r\tioHandle := input ioHandle.\r\tself accessor setNonBlocking: ioHandle.\r\tresultString := self thisOSProcess stdIn next: 10000.\r\tself accessor setBlocking: ioHandle.\r\t^ resultString\r',			#stamp : 'dtl 11/8/2000 23:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '574' ],		#self : OmReference [ '575' ],		#time : DateAndTime [ '2018-02-22T14:01:11.61235-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'snapshot:andQuit:',			#protocol : #'version dependent',			#sourceCode : 'snapshot: save andQuit: quit\r\t"After Squeak version 3.6, #snapshot:andQuit: was moved to SmalltalkImage "\r\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk snapshot: save andQuit: quit embedded: false]) current snapshot: save andQuit: quit',			#stamp : 'dtl 12/15/2013 14:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '575' ],		#self : OmReference [ '576' ],		#time : DateAndTime [ '2018-02-22T14:01:11.612903-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #squeak,			#protocol : #'external command processing',			#sourceCode : 'squeak\r\t"Start a new instance of Squeak running in a child OS process. The new instance\r\twill restart from the image file, so it is a clone of this image as it existed at the\r\tmost recent image save. Note that subclasses can implement additional methods of\r\tstarting Squeak images, especially for Unix systems."\r\r\t"OSProcess squeak"\r\r\t^ self thisOSProcess squeak\r\r',			#stamp : 'dtl 1/7/2001 13:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '576' ],		#self : OmReference [ '577' ],		#time : DateAndTime [ '2018-02-22T14:01:11.613542-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #systemAttributes,			#protocol : #utility,			#sourceCode : 'systemAttributes\r\t"Answer a Dictionary of all of the system attributes which can be obtained from\r\tSystemDictionary>>getSystemAttribute."\r\r\t"OSProcess systemAttributes"\r\r\t| args idx a |\r\targs := Dictionary new.\r\r\tidx := -1.\r\t[a := self getSystemAttribute: idx.\r\ta notNil and: [a size > 0]]\r\t\twhileTrue: [args at: idx put: a. idx := idx - 1].\r\r\ta := self getSystemAttribute: 0.\r\t(a notNil and: [a size > 0]) ifTrue: [args at: 0 put: a. idx := idx - 1].\r\ta := self getSystemAttribute: 1.\r\t(a notNil and: [a size > 0]) ifTrue: [args at: 1 put: a. idx := idx - 1].\r\ta := self getSystemAttribute: 2.\r\t(a notNil and: [a size > 0]) ifTrue: [args at: 2 put: a. idx := idx - 1].\r\r\tidx := 2.\r\t[a := self getSystemAttribute: idx.\r\ta notNil and: [a size > 0]]\r\t\twhileTrue: [args at: idx put: a. idx := idx + 1].\r\r\tidx := 1001.\r\t[a := self getSystemAttribute: idx.\r\ta notNil and: [a size > 0]]\r\t\twhileTrue: [args at: idx put: a. idx := idx + 1].\r\r\t^ args.\r\r',			#stamp : 'dtl 3/5/2005 11:34',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '577' ],		#self : OmReference [ '578' ],		#time : DateAndTime [ '2018-02-22T14:01:11.614095-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #thisOSProcess,			#protocol : #'instance creation',			#sourceCode : 'thisOSProcess\r\t"Answer the single instance of the class corresponding to the OS process in which\r\tthis Smalltalk image is executing."\r\r\t"OSProcess thisOSProcess"\r\r\t^ ThisOSProcess thisOSProcess\r',			#stamp : 'dtl 1/7/2001 12:03',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '578' ],		#self : OmReference [ '579' ],		#time : DateAndTime [ '2018-02-22T14:01:11.61472-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #trace,			#protocol : #debugging,			#sourceCode : 'trace\r\t"Print the sender\'s context on standard output. The debug message is\r\tprefixed with the identity of the process in which the method is being\r\tevaluated, and the identity of the object which received the message.\r\tUseful for debugging timing or deadlock problems."\r\r\t[self thisOSProcess stdOut\r\t\t"The process in which the traced message is being evaluated"\r\t\tnextPutAll: Processor activeProcess hash printString, \':\';\r\t\t"The identity of the object being traced"\r\t\tnextPutAll: thisContext sender sender sender receiver hash printString, \':\';\r\t\t"The method context describing the method being evaluated"\r\t\tnextPutAll: thisContext sender sender sender printString;\r\t\tnextPut: Character lf;\r\t\tflush]\r\t\t\ton: Error\r\t\t\tdo: []',			#stamp : 'dtl 4/2/2005 12:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '579' ],		#self : OmReference [ '580' ],		#time : DateAndTime [ '2018-02-22T14:01:11.615319-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'trace:',			#protocol : #debugging,			#sourceCode : 'trace: debugMessageString\r\t"Print trace information followed by a debug message"\r\r\t[self thisOSProcess stdOut\r\t\t"The process in which the traced message is being evaluated"\r\t\tnextPutAll: Processor activeProcess hash printString, \':\';\r\t\t"The identity of the object being traced"\r\t\tnextPutAll: thisContext sender sender sender receiver hash printString, \':\';\r\t\t"The method context describing the method being evaluated"\r\t\tnextPutAll: thisContext sender sender sender printString, \':\';\r\t\tnextPutAll: debugMessageString;\r\t\tnextPut: Character lf;\r\t\tflush]\r\t\t\ton: Error\r\t\t\tdo: []',			#stamp : 'dtl 4/2/2005 12:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '580' ],		#self : OmReference [ '581' ],		#time : DateAndTime [ '2018-02-22T14:01:11.616966-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #useFileSystem,			#protocol : #'version dependent',			#sourceCode : 'useFileSystem\r\t"If true use FileSystem, otherwise use traditional FileDirectory. See senders\r\tfor methods with file system dependencies."\r\r\t^ Smalltalk hasClassNamed: #FileReference',			#stamp : 'dtl 1/27/2013 21:48',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '581' ],		#self : OmReference [ '582' ],		#time : DateAndTime [ '2018-02-22T14:01:11.617619-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #versionInformation,			#protocol : #'version testing',			#sourceCode : 'versionInformation\r\r\t"OSProcess versionInformation"\r\r\t| osppVersion |\r\tosppVersion := (Smalltalk hasClassNamed: #OSProcessPlugin)\r\t\tifTrue:\r\t\t\t[(Smalltalk at: #OSProcessPlugin) versionInformation]\r\t\tifFalse:\r\t\t\t[\'(not installed in this image)\'].\r\t^ Array\r\t\twith: (self name, \' version \', self versionString)\r\t\twith: ((Smalltalk hasClassNamed: #CommandShell)\r\t\t\t\tifTrue:\r\t\t\t\t\t[((Smalltalk at: #CommandShell) respondsTo: #versionString)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[\'CommandShell version \', (Smalltalk at: #CommandShell) versionString]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[\'CommandShell installed (old version, no versionString)\']]\r\t\t\t\tifFalse:\r\t\t\t\t\t[\'CommandShell is not installed\'])\r\t\twith:  osppVersion\r',			#stamp : 'dtl 8/7/2003 07:28',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '582' ],		#self : OmReference [ '583' ],		#time : DateAndTime [ '2018-02-22T14:01:11.61817-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #versionString,			#protocol : #'version testing',			#sourceCode : 'versionString\r\r\t"OSProcess versionString"\r\r\t^\'4.6.9\'',			#stamp : 'ThierryGoubier 7/27/2017 22:53',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '583' ],		#self : OmReference [ '584' ],		#time : DateAndTime [ '2018-02-22T14:01:11.618752-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #vmVersion,			#protocol : #'version dependent',			#sourceCode : 'vmVersion \r\t"After Squeak version 3.6, #vmVersion was moved to SmalltalkImage. Pharo3 deprecated vmVersion."\r\r\tself isPharo3AndLater\r\t\tifTrue: [ ^ (Smalltalk perform: #vm) version ].\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk vmVersion]) current vmVersion',			#stamp : 'ThierryGoubier 9/5/2013 11:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '584' ],		#self : OmReference [ '585' ],		#time : DateAndTime [ '2018-02-22T14:01:11.619318-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcess class',				#isMetaSide : true			},			#name : #'waitForCommand:',			#protocol : #'external command processing',			#sourceCode : 'waitForCommand: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library.\r\tThe active Smalltalk process waits for completion of the external command process."\r\r\t"OSProcess waitForCommand: \'echo sleeping...; sleep 3; echo I just slept for three seconds\'"\r\r\t^ self thisOSProcess waitForCommand: aCommandString\r',			#stamp : 'dtl 1/7/2001 12:11',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '585' ],		#self : OmReference [ '586' ],		#time : DateAndTime [ '2018-02-22T14:01:11.619886-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\r\tself subclassResponsibility',			#stamp : 'dtl 5/31/1999 13:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '586' ],		#self : OmReference [ '587' ],		#time : DateAndTime [ '2018-02-22T14:01:11.620419-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcess,				#isMetaSide : false			},			#name : #isExternalProcess,			#protocol : #testing,			#sourceCode : 'isExternalProcess\r\r\t^ true',			#stamp : 'dtl 7/14/2001 21:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '587' ],		#self : OmReference [ '588' ],		#time : DateAndTime [ '2018-02-22T14:01:11.620945-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcess,				#isMetaSide : false			},			#name : #noAccessorAvailable,			#protocol : #private,			#sourceCode : 'noAccessorAvailable\r\r\t^ self class noAccessorAvailable\r',			#stamp : 'dtl 8/30/2003 10:11',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '588' ],		#self : OmReference [ '589' ],		#time : DateAndTime [ '2018-02-22T14:01:11.621522-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcess,				#isMetaSide : false			},			#name : #pid,			#protocol : #accessing,			#sourceCode : 'pid\r\r\t^ pid\r',			#stamp : 'dtl 3/18/2000 13:57',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '589' ],		#self : OmReference [ '590' ],		#time : DateAndTime [ '2018-02-22T14:01:11.623053-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcess,				#isMetaSide : false			},			#name : #'pid:',			#protocol : #accessing,			#sourceCode : 'pid: processIdentifier\r\r\tpid := processIdentifier\r',			#stamp : 'dtl 3/18/2000 13:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '590' ],		#self : OmReference [ '591' ],		#time : DateAndTime [ '2018-02-22T14:01:11.623725-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcess,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream. aStream nextPutAll: \' with pid \'. self pid printOn: aStream',			#stamp : 'dtl 10/17/1999 21:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '591' ],		#self : OmReference [ '592' ],		#time : DateAndTime [ '2018-02-22T14:01:11.624312-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MacProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for\r\tthe Squeak VM running on the current platform."\r\r\t^ self isNonUnixMac\r',			#stamp : 'dtl 8/30/2003 17:46',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '592' ],		#self : OmReference [ '593' ],		#time : DateAndTime [ '2018-02-22T14:01:11.624927-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MacProcess,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'child process creation',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in\r\tthe standard C library, except that aCommandString runs asynchronously\r\tin a child process. Answer an instance of ExternalMacOSProcess which\r\tis a proxy for the new MacOS process."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:18',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '593' ],		#self : OmReference [ '594' ],		#time : DateAndTime [ '2018-02-22T14:01:11.625518-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MacProcess,				#isMetaSide : false			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Use my processAccessor to call vfork() and execve() and create a\r\tnew child task. Answer a proxy for the new task, an instance of\r\tExternalMacOSProcess."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:18',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '594' ],		#self : OmReference [ '595' ],		#time : DateAndTime [ '2018-02-22T14:01:11.626057-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MacProcess,				#isMetaSide : false			},			#name : #getCwd,			#protocol : #environment,			#sourceCode : 'getCwd\r\t"Not yet implemented - answer a reasonable default."\r\r\t^ OSProcess defaultPathString',			#stamp : 'dtl 1/23/2013 21:10',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '595' ],		#self : OmReference [ '596' ],		#time : DateAndTime [ '2018-02-22T14:01:11.626587-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MacProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Set my instance variables to reflect the state of the OS process in which \r\tthis Smalltalk virtual machine is executing."\r',			#stamp : 'dtl 10/14/2001 14:03',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '596' ],		#self : OmReference [ '597' ],		#time : DateAndTime [ '2018-02-22T14:01:11.627122-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MacProcess,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self class isNonUnixMac',			#stamp : 'dtl 8/30/2003 17:46',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '597' ],		#self : OmReference [ '598' ],		#time : DateAndTime [ '2018-02-22T14:01:11.62769-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OS2Process class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for\r\tthe Squeak VM running on the current platform."\r\r\t^ self isOS2\r',			#stamp : 'dtl 8/30/2003 17:47',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '598' ],		#self : OmReference [ '599' ],		#time : DateAndTime [ '2018-02-22T14:01:11.629501-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OS2Process,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'child process creation',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in\r\tthe standard C library, except that aCommandString runs asynchronously\r\tin a child process. Answer an instance of ExternalOS2OSProcess which\r\tis a proxy for the new OS2 process."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:18',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '599' ],		#self : OmReference [ '600' ],		#time : DateAndTime [ '2018-02-22T14:01:11.630192-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OS2Process,				#isMetaSide : false			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Use my processAccessor to call vfork() and execve() and create a\r\tnew child task. Answer a proxy for the new task, an instance of\r\tExternalOS2OSProcess."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:18',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '600' ],		#self : OmReference [ '601' ],		#time : DateAndTime [ '2018-02-22T14:01:11.630808-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OS2Process,				#isMetaSide : false			},			#name : #getCwd,			#protocol : #environment,			#sourceCode : 'getCwd\r\t"Not yet implemented - answer a reasonable default."\r\r\t^ OSProcess defaultPathString',			#stamp : 'dtl 1/23/2013 21:09',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '601' ],		#self : OmReference [ '602' ],		#time : DateAndTime [ '2018-02-22T14:01:11.631343-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OS2Process,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Set my instance variables to reflect the state of the OS process in which \r\tthis Smalltalk virtual machine is executing."\r',			#stamp : 'dtl 10/14/2001 14:03',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '602' ],		#self : OmReference [ '603' ],		#time : DateAndTime [ '2018-02-22T14:01:11.6319-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OS2Process,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self class isOS2\r',			#stamp : 'dtl 8/30/2003 17:47',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '603' ],		#self : OmReference [ '604' ],		#time : DateAndTime [ '2018-02-22T14:01:11.63245-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RiscOSProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for\r\tthe Squeak VM running on the current platform."\r\r\t^ self isRiscOS\r',			#stamp : 'dtl 8/30/2003 17:48',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '604' ],		#self : OmReference [ '605' ],		#time : DateAndTime [ '2018-02-22T14:01:11.632996-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RiscOSProcess class',				#isMetaSide : true			},			#name : #'makeVmIn:',			#protocol : #utility,			#sourceCode : 'makeVmIn: buildDirectoryPathName\r\t"Rebuild the virtual machine and plugins in the buildDirectoryPathName\r\tdirectory. If the build is successful, save the image and restart\r\tusing the new VM. This assumes that the currently executing VM is\r\teither located in, or linked to, the buildDirectoryPathName directory."\r',			#stamp : 'dtl 3/11/2001 11:47',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '605' ],		#self : OmReference [ '606' ],		#time : DateAndTime [ '2018-02-22T14:01:11.633563-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcess,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'child process creation',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in\r\tthe standard C library, except that aCommandString runs asynchronously\r\tin a child process. Answer an instance of ExternalRiscOSProcess which\r\tis a proxy for the new RiscOS task."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:18',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '606' ],		#self : OmReference [ '607' ],		#time : DateAndTime [ '2018-02-22T14:01:11.63411-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcess,				#isMetaSide : false			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Use my processAccessor to call vfork() and execve() and create a\r\tnew child task. Answer a proxy for the new task, an instance of\r\tExternalRiscOSProcess."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:18',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '607' ],		#self : OmReference [ '608' ],		#time : DateAndTime [ '2018-02-22T14:01:11.63478-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcess,				#isMetaSide : false			},			#name : #getCwd,			#protocol : #environment,			#sourceCode : 'getCwd\r\t"Not yet implemented - answer a reasonable default."\r\r\t^ OSProcess defaultPathString',			#stamp : 'dtl 1/23/2013 21:10',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '608' ],		#self : OmReference [ '609' ],		#time : DateAndTime [ '2018-02-22T14:01:11.635314-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Set my instance variables to reflect the state of the OS process in which \r\tthis Smalltalk virtual machine is executing."\r',			#stamp : 'dtl 10/14/2001 14:04',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '609' ],		#self : OmReference [ '610' ],		#time : DateAndTime [ '2018-02-22T14:01:11.635883-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcess,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self class isRiscOS\r',			#stamp : 'dtl 8/30/2003 17:48',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '610' ],		#self : OmReference [ '611' ],		#time : DateAndTime [ '2018-02-22T14:01:11.636557-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #concreteClass,			#protocol : #'concrete subclasses',			#sourceCode : 'concreteClass\r\r\t"ThisOSProcess concreteClass"\r\r\t^ self subclasses\r\t\tdetect: [:c | c isResponsibleForThisPlatform]\r\t\tifNone: [self notify: self printString,\r\t\t\t\t\t\': No concrete class implementation available for system type \',\r\t\t\t\t\tself platformName printString.\r\t\t\t\tnil]\r\r',			#stamp : 'dtl 3/5/2005 12:08',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '611' ],		#self : OmReference [ '612' ],		#time : DateAndTime [ '2018-02-22T14:01:11.637238-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #concreteClassOrNil,			#protocol : #'concrete subclasses',			#sourceCode : 'concreteClassOrNil\r\r\t"ThisOSProcess concreteClassOrNil"\r\r\t^ self subclasses\r\t\tdetect: [:c | c isResponsibleForThisPlatform]\r\t\tifNone: [nil]\r\r',			#stamp : 'dtl 6/28/2010 21:14',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '612' ],		#self : OmReference [ '613' ],		#time : DateAndTime [ '2018-02-22T14:01:11.637889-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\t"ThisOSProcess initialize"\r\r\tOSProcess initialize.\t"required to ensure the change sets file in smoothly"\r\tAttachableFileStream initialize.\r\tOSProcessAccessor initialize.\r\tChildListSize := 20.\t"list will be pruned to this size, except for any children still running"\r\tself initializeThisOSProcess.\r\tself isPharo5Update50558AndLater\r\t\tifFalse: [ Smalltalk addToStartUpList: ThisOSProcess.\r\t\t\tSmalltalk addToShutDownList: ThisOSProcess ]\r\t\tifTrue:\r\t\t\t[ (Smalltalk at: #SessionManager) default\r\t\t\t\tperform: #registerToolClassNamed:\r\t\t\t\twith: ThisOSProcess name ]\r',			#stamp : 'dtl 2/18/2016 21:20',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '613' ],		#self : OmReference [ '614' ],		#time : DateAndTime [ '2018-02-22T14:01:11.638455-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #initializeThisOSProcess,			#protocol : #initialize-release,			#sourceCode : 'initializeThisOSProcess\r\t"Initialize the singleton instance, creating a new instance only if the\r\tplatform type has changed since shutdown (running on a different\r\ttype of computer)."\r\r\t(ThisInstance isNil or: [ThisInstance isResponsibleForThisPlatform not])\r\t\tifTrue: [ | cls |\r\t\t\t(cls := self concreteClassOrNil)\r\t\t\t\tifNil: [ThisInstance := nil "no concrete class for this platform"]\r\t\t\t\tifNotNil: [ThisInstance := cls basicNew]].\r\tThisInstance initialize',			#stamp : 'dtl 8/25/2010 22:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '614' ],		#self : OmReference [ '615' ],		#time : DateAndTime [ '2018-02-22T14:01:11.639074-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #initializeThisOSProcessWithNotifier,			#protocol : #initialize-release,			#sourceCode : 'initializeThisOSProcessWithNotifier\r\t"Initialize the singleton instance, creating a new instance only if the\r\tplatform type has changed since shutdown (running on a different\r\ttype of computer). Warn if no implementation is available for this platform."\r\r\t(ThisInstance isNil or: [ThisInstance isResponsibleForThisPlatform not])\r\t\tifTrue: [ThisInstance := self concreteClass basicNew].\r\tThisInstance initialize',			#stamp : 'dtl 7/5/2010 11:56',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '615' ],		#self : OmReference [ '616' ],		#time : DateAndTime [ '2018-02-22T14:01:11.639643-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #isHeadless,			#protocol : #testing,			#sourceCode : 'isHeadless\r\t"Answer true if the image is known to be headless, otherwise assume\r\tthat a user interface is present."\r\r\t(Smalltalk respondsTo: #isHeadless)\r\t\tifTrue: [ ^Smalltalk perform: #isHeadless ].\r\t^ false "assume that a UI is present"',			#stamp : 'dtl 8/18/2014 20:08',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '616' ],		#self : OmReference [ '617' ],		#time : DateAndTime [ '2018-02-22T14:01:11.64034-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\tself notify: self name, \': Only one instance of ThisOSProcess or any of its subclasses should exist in the image. Use #thisOSProcess to obtain the singleton instance.\'.\r\tself shouldNotImplement',			#stamp : 'dtl 11/5/2000 16:10',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '617' ],		#self : OmReference [ '618' ],		#time : DateAndTime [ '2018-02-22T14:01:11.640944-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #'shutDown:',			#protocol : #'system startup',			#sourceCode : 'shutDown: quitting\r\t"Break dependency on my OSProcessAccessor. This is done explicitly at\r\tshutDown time in order to prevent possible problems when an image is\r\trestarted on another platform type, in which case a new ThisOSProcess\r\tinstance is created and the old instance could still have an unwanted\r\tdependency on an OSProcessAccessor."\r\r\tquitting\r\t\tifTrue: [ | osp |\r\t\t\t(osp := OSProcess thisOSProcess) notNil\r\t\t\t\tifTrue: [ | acc |\r\t\t\t\t\t(acc := osp processAccessor) notNil\r\t\t\t\t\t\tifTrue: [ acc breakDependents ] ] ]',			#stamp : 'ThierryGoubier 7/27/2017 22:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '618' ],		#self : OmReference [ '619' ],		#time : DateAndTime [ '2018-02-22T14:01:11.641507-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #'startUp:',			#protocol : #'system startup',			#sourceCode : 'startUp: resuming\r\t"Initialize my singleton instance, and the singleton instance of my\r\tOSProcessAccessor. On Unix, set the signal handler in my process\r\taccessor to respond to externally generated sigchld signals. This\r\tmust be done after each image restart in order to call a primitive\r\twhich informs the VM of the identity of the semaphore to signal.\r\tWhen not running on a Unix system, the primitive fails and the\r\tmethod has no effect. Notify dependents of the singleton instance\r\tif the image has restarted in a different OS process (this is not the\r\tcase when #startUp is called after a simple image save). The\r\tnotification is done in the initialization of my OSProcessAccessor."\r\r\t| aio |\r\t(aio := Smalltalk at: #AioEventHandler)\r\t\tifNotNil: [ aio startUp: resuming ].\r\tresuming ifTrue: [ self initializeThisOSProcess ]',			#stamp : 'dtl 2/6/2015 20:19',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '619' ],		#self : OmReference [ '620' ],		#time : DateAndTime [ '2018-02-22T14:01:11.642109-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ThisOSProcess class',				#isMetaSide : true			},			#name : #thisOSProcess,			#protocol : #'instance creation',			#sourceCode : 'thisOSProcess\r\t"Answer a single instance of the class corresponding to the OS process in \r\twhich this Smalltalk image is executing."\r\r\t"ThisOSProcess thisOSProcess"\r\r\t^ ThisInstance',			#stamp : 'dtl 10/1/2006 08:38',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '620' ],		#self : OmReference [ '621' ],		#time : DateAndTime [ '2018-02-22T14:01:11.642739-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= processProxy\r\t"True if this is a proxy that represents the same OS process as processProxy"\r\r\t^ ((processProxy isKindOf: ThisOSProcess)\r\t\t\tand: [pid = processProxy pid])\r\t\tand: [sessionID = processProxy sessionID]',			#stamp : 'dtl 11/15/2013 10:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '621' ],		#self : OmReference [ '622' ],		#time : DateAndTime [ '2018-02-22T14:01:11.643448-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #activeChildren,			#protocol : #'child process management',			#sourceCode : 'activeChildren\r\t"Answer child processes which are currently believed to be running."\r\r\t"OSProcess thisOSProcess activeChildren"\r\r\t^ accessProtect critical: [ childProcessList select: [ :p | p isComplete not ] ].\r',			#stamp : 'dtl 6/5/2015 20:13',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '622' ],		#self : OmReference [ '623' ],		#time : DateAndTime [ '2018-02-22T14:01:11.644124-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #allMyChildren,			#protocol : #'child process management',			#sourceCode : 'allMyChildren\r\r\t^ Dictionary withAll: (childProcessList collect: [ :e | e pid -> e ])',			#stamp : 'dtl 2/6/2015 19:50',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '623' ],		#self : OmReference [ '624' ],		#time : DateAndTime [ '2018-02-22T14:01:11.644716-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'canConnectToXDisplay:',			#protocol : #'display management',			#sourceCode : 'canConnectToXDisplay: xDisplayName\r\t"Open and close a connection to displayName. It the connection was successfully\r\topened, answer true; otherwise false. This is intended to check for the ability\r\tto open an X display prior to actually making the attempt."\r\r\t"self thisOSProcess canConnectToXDisplay: \':0.0\' "\r\t"self thisOSProcess canConnectToXDisplay: \':1\' "\r\t"self thisOSProcess canConnectToXDisplay: \'bogus:0\' " "<-make sure network is running first!"\r\r\t(xDisplayName isKindOf: String) ifFalse: [^ false].\r\t^ self processAccessor primCanConnectToXDisplay: xDisplayName\r',			#stamp : 'dtl 8/5/2003 21:59',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '624' ],		#self : OmReference [ '625' ],		#time : DateAndTime [ '2018-02-22T14:01:11.645269-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #childPids,			#protocol : #'child process management',			#sourceCode : 'childPids\r\r\t^ childProcessList collect: [ :p | p pid ]\r',			#stamp : 'dtl 2/6/2015 20:11',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '625' ],		#self : OmReference [ '626' ],		#time : DateAndTime [ '2018-02-22T14:01:11.646029-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #closeXDisplay,			#protocol : #'display management',			#sourceCode : 'closeXDisplay\r\t"Become headless by closing the X session. All subsequent processing should involve\r\tno further display interaction."\r\r\t"self thisOSProcess closeXDisplay"\r\r\t| proc |\r\tproc := self processAccessor primKillDisplay.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc\r',			#stamp : 'dtl 8/6/2003 06:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '626' ],		#self : OmReference [ '627' ],		#time : DateAndTime [ '2018-02-22T14:01:11.64658-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'child process creation',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in\r\tthe standard C library, except that aCommandString runs asynchronously\r\tin a child process. Answer an instance of ExternalMacOSProcess which\r\tis a proxy for the new OS process."\r\r\tself subclassResponsibility',			#stamp : 'dtl 10/18/2001 20:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '627' ],		#self : OmReference [ '628' ],		#time : DateAndTime [ '2018-02-22T14:01:11.647135-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #currentXDisplayName,			#protocol : #'display management',			#sourceCode : 'currentXDisplayName\r\r\t"self thisOSProcess currentXDisplayName"\r\r\t^ self processAccessor primGetXDisplayName',			#stamp : 'dtl 8/5/2003 22:05',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '628' ],		#self : OmReference [ '629' ],		#time : DateAndTime [ '2018-02-22T14:01:11.647703-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #decapitate,			#protocol : #'display management',			#sourceCode : 'decapitate\r\t"Become headless by closing the X session. All subsequent processing should involve\r\tno further display interaction."\r\r\t"self thisOSProcess decapitate"\r\r\t^ self closeXDisplay\r',			#stamp : 'dtl 8/6/2003 06:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '629' ],		#self : OmReference [ '630' ],		#time : DateAndTime [ '2018-02-22T14:01:11.648264-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #discardExitedChildren,			#protocol : #'child process management',			#sourceCode : 'discardExitedChildren\r\t"Remove entries for completed child processed from dictionary."\r\r\tself updateAllMyChildren.\r\tchildProcessList\r\t\tselect: [ :p | p isComplete ]\r\t\tthenDo: [ :e | self unregisterChildProcess: e ].\r\t^ childProcessList\r',			#stamp : 'dtl 2/6/2015 20:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '630' ],		#self : OmReference [ '631' ],		#time : DateAndTime [ '2018-02-22T14:01:11.648824-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #disconnectXDisplay,			#protocol : #'display management',			#sourceCode : 'disconnectXDisplay\r\t"Disconnect from the X server, but do not close the existing Squeak window. A new\r\tdisplay medium must be opened before further interaction with the display."\r\r\t"self thisOSProcess disconnectXDisplay"\r\r\t| proc |\r\tproc := self processAccessor primDisconnectDisplay.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc\r',			#stamp : 'dtl 8/6/2003 06:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '631' ],		#self : OmReference [ '632' ],		#time : DateAndTime [ '2018-02-22T14:01:11.649504-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'displayOnXServer:',			#protocol : #'display management',			#sourceCode : 'displayOnXServer: xDisplayName\r\t"Check if it is possible to open a display on the X server identified by\r\txDisplayName. If so, close the current X display and reopen it on\r\tthe new server. On success, answer the previous display name. On\r\tfailure, answer a string with an error message. This method is expected\r\tto be called by a web server or other application which may wish to\r\tmake use of the result string."\r\r\t"self thisOSProcess displayOnXServer: \':0.0\' "\r\t"self thisOSProcess displayOnXServer: \'unix:0\' "\r\t"self thisOSProcess displayOnXServer: \':1\' "\r\t"self thisOSProcess displayOnXServer: \'noSuchMachine\'"\r\t"self thisOSProcess displayOnXServer: \'noSuchMachine:0\'" "<-make sure network is running first!"\r\r\t| previousDisplayName |\r\t(xDisplayName isKindOf: String)\r\t\tifFalse: [^ \'expected display name string\'].\r\tpreviousDisplayName := self currentXDisplayName.\r\t(self canConnectToXDisplay: xDisplayName)\r\t\tifTrue:\r\t\t\t[self decapitate.\r\t\t\tself setXDisplayName: xDisplayName.\r\t\t\tself recapitate.\r\t\t\t^ previousDisplayName]\r\t\tifFalse:\r\t\t\t[^ \'cannot connect to display \', xDisplayName]\r',			#stamp : 'dtl 8/5/2003 22:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '632' ],		#self : OmReference [ '633' ],		#time : DateAndTime [ '2018-02-22T14:01:11.650172-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #exitedChildren,			#protocol : #'child process management',			#sourceCode : 'exitedChildren\r\t"Answer child processes which have exited and are no longer running."\r\r\t"OSProcess thisOSProcess exitedChildren"\r\r\t^ accessProtect critical: [ childProcessList select: [ :p | p isComplete ]].\r',			#stamp : 'dtl 2/6/2015 20:14',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '633' ],		#self : OmReference [ '634' ],		#time : DateAndTime [ '2018-02-22T14:01:11.650869-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\r\tprocessAccessor\r\t\tifNotNil: \r\t\t\t[processAccessor removeDependent: self.\r\t\t\tprocessAccessor finalize].\r\tprocessAccessor := nil',			#stamp : 'dtl 11/4/2000 15:49',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '634' ],		#self : OmReference [ '635' ],		#time : DateAndTime [ '2018-02-22T14:01:11.651639-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #flushXDisplay,			#protocol : #'display management',			#sourceCode : 'flushXDisplay\r\t"Synchronize output to the X display."\r\r\t"self thisOSProcess flushXDisplay"\r\r\t^ self processAccessor primFlushXDisplay\r\r',			#stamp : 'dtl 9/1/2003 13:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '635' ],		#self : OmReference [ '636' ],		#time : DateAndTime [ '2018-02-22T14:01:11.652189-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Use my processAccessor to call vfork() and execve() and create a\r\tnew child task. Answer a proxy for the new task, an instance of\r\tExternalOSProcess."\r\r\tself subclassResponsibility',			#stamp : 'dtl 10/18/2001 20:16',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '636' ],		#self : OmReference [ '637' ],		#time : DateAndTime [ '2018-02-22T14:01:11.652751-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #getCwd,			#protocol : #environment,			#sourceCode : 'getCwd\r\r\tself subclassResponsibility',			#stamp : 'dtl 10/18/2001 20:10',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '637' ],		#self : OmReference [ '638' ],		#time : DateAndTime [ '2018-02-22T14:01:11.653301-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'handleFromAccessor:',			#protocol : #'private - IOHandle',			#sourceCode : 'handleFromAccessor: aByteArrayOrIOAccessor\r\r\tUseIOHandle\r\t\tifTrue: [aByteArrayOrIOAccessor isNil\r\t\t\tifTrue: [^ nil]\r\t\t\tifFalse: [^ aByteArrayOrIOAccessor asSQFileStruct]]\r\t\tifFalse: [^ aByteArrayOrIOAccessor]\r',			#stamp : 'dtl 9/25/2005 16:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '638' ],		#self : OmReference [ '639' ],		#time : DateAndTime [ '2018-02-22T14:01:11.653888-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'handleFromFileStream:',			#protocol : #'private - IOHandle',			#sourceCode : 'handleFromFileStream: aFileStream\r\r\tUseIOHandle\r\t\tifTrue: [^ aFileStream ioHandle asSQFileStruct]\r\t\tifFalse: [^ aFileStream fileID]\r',			#stamp : 'dtl 9/25/2005 16:22',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '639' ],		#self : OmReference [ '640' ],		#time : DateAndTime [ '2018-02-22T14:01:11.654458-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\r\t^ (pid ifNil: [self identityHash])\r\t\t+ (sessionID\r\t\t\t\tifNil: [0]\r\t\t\t\tifNotNil: [sessionID sum])',			#stamp : 'dtl 6/27/2010 22:38',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '640' ],		#self : OmReference [ '641' ],		#time : DateAndTime [ '2018-02-22T14:01:11.655053-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Set my instance variables to reflect the state of the OS process in which \r\tthis Smalltalk virtual machine is. executing."\r\r\taccessProtect := Semaphore forMutualExclusion.\r\tself initializeAllMyChildren.\r\tprocessAccessor ifNotNil:\r\t\t[processAccessor breakDependents.\r\t\tprocessAccessor := nil].\r\t((self processAccessor notNil\r\t\tand: [processAccessor canAccessSystem])\r\t\t\tand: [pid ~= processAccessor primGetPid])\r\t\tifTrue: [self resetChildProcessDictionary]\r',			#stamp : 'dtl 7/26/2010 13:51',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '641' ],		#self : OmReference [ '642' ],		#time : DateAndTime [ '2018-02-22T14:01:11.655617-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #initializeAllMyChildren,			#protocol : #'initialize - release',			#sourceCode : 'initializeAllMyChildren\r\t"Use a Dictionary if process identifiers are unique. On Windows, the\r\tprocess ID is not unique, so use an OrderedCollection instead."\r\r\t^ childProcessList := OrderedCollection new\r',			#stamp : 'dtl 2/4/2015 23:35',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '642' ],		#self : OmReference [ '643' ],		#time : DateAndTime [ '2018-02-22T14:01:11.656418-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #isConnectedToXServer,			#protocol : #'display management',			#sourceCode : 'isConnectedToXServer\r\t"Answer true if VM is currently connected to an X server."\r\r\t"self thisOSProcess isConnectedToXServer"\r\r\t^ self processAccessor primIsConnectedToXServer\r\r',			#stamp : 'dtl 8/24/2003 10:12',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '643' ],		#self : OmReference [ '644' ],		#time : DateAndTime [ '2018-02-22T14:01:11.657086-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/10/2001 21:24',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '644' ],		#self : OmReference [ '645' ],		#time : DateAndTime [ '2018-02-22T14:01:11.657792-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'isStdErr:',			#protocol : #'private - IOHandle',			#sourceCode : 'isStdErr: anIOHandle\r\t"Answer true if anIOHandle represents stderr."\r\r\t| realHandle |\r\tanIOHandle ifNil: [^ false].\r\trealHandle := self processAccessor getStdErrHandle.\r\trealHandle ifNil: [^ false].\r\tUseIOHandle\r\t\tifTrue: [^ anIOHandle handle = realHandle handle]\r\t\tifFalse: [^ anIOHandle = realHandle]\r',			#stamp : 'dtl 9/25/2005 16:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '645' ],		#self : OmReference [ '646' ],		#time : DateAndTime [ '2018-02-22T14:01:11.658364-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'isStdIn:',			#protocol : #'private - IOHandle',			#sourceCode : 'isStdIn: anIOHandle\r\t"Answer true if anIOHandle represents stdin."\r\r\t| realHandle |\r\tanIOHandle ifNil: [^ false].\r\trealHandle := self processAccessor getStdInHandle.\r\trealHandle ifNil: [^ false].\r\tUseIOHandle\r\t\tifTrue: [^ anIOHandle handle = realHandle handle]\r\t\tifFalse: [^ anIOHandle = realHandle]\r',			#stamp : 'dtl 9/25/2005 16:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '646' ],		#self : OmReference [ '647' ],		#time : DateAndTime [ '2018-02-22T14:01:11.65894-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'isStdOut:',			#protocol : #'private - IOHandle',			#sourceCode : 'isStdOut: anIOHandle\r\t"Answer true if anIOHandle represents stdout."\r\r\t| realHandle |\r\tanIOHandle ifNil: [^ false].\r\trealHandle := self processAccessor getStdOutHandle.\r\trealHandle ifNil: [^ false].\r\tUseIOHandle\r\t\tifTrue: [^ anIOHandle handle = realHandle handle]\r\t\tifFalse: [^ anIOHandle = realHandle]\r',			#stamp : 'dtl 9/25/2005 16:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '647' ],		#self : OmReference [ '648' ],		#time : DateAndTime [ '2018-02-22T14:01:11.659521-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #needsRefresh,			#protocol : #updating,			#sourceCode : 'needsRefresh\r\t"Answer true if the sessionID variable is out of date with respect to the running\r\tOS Process. Subclasses should provide implementation, answer true as default."\r\r\t^ true',			#stamp : 'dtl 2/26/2002 08:37',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '648' ],		#self : OmReference [ '649' ],		#time : DateAndTime [ '2018-02-22T14:01:11.660098-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #openXDisplay,			#protocol : #'display management',			#sourceCode : 'openXDisplay\r\t"Restore headful display opening the X session."\r\r\t"self thisOSProcess closeXDisplay. (Delay forSeconds: 5) wait. self thisOSProcess openXDisplay."\r\r\t| proc |\r\tproc := self processAccessor primOpenXDisplay.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc\r',			#stamp : 'dtl 8/6/2003 06:36',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '649' ],		#self : OmReference [ '650' ],		#time : DateAndTime [ '2018-02-22T14:01:11.660672-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #processAccessor,			#protocol : #accessing,			#sourceCode : 'processAccessor\r\r\t| a |\r\tprocessAccessor\r\t\tifNil: \r\t\t\t[a := OSProcessAccessor forThisOSProcess.\r\t\t\ta isResponsibleForThisPlatform ifTrue:\r\t\t\t\t[processAccessor := a.\r\t\t\t\tprocessAccessor addDependent: self]].\r\t^ processAccessor',			#stamp : 'dtl 2/28/2002 13:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '650' ],		#self : OmReference [ '651' ],		#time : DateAndTime [ '2018-02-22T14:01:11.661244-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'pruneExitedChildrenAfter:',			#protocol : #'child process management',			#sourceCode : 'pruneExitedChildrenAfter: size\r\t"Limit the size of the child process registry. Select the last entries, and unregister\r\tthem if they are no longer active."\r\r\t"OSProcess thisOSProcess pruneExitedChildrenAfter: 5"\r\r\t(accessProtect critical: [childProcessList allButFirst: size])\r\t\tdo: [ :e |\r\t\t\te isComplete ifTrue: [ self unregisterChildProcess: e ]]\r',			#stamp : 'dtl 2/6/2015 20:03',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '651' ],		#self : OmReference [ '652' ],		#time : DateAndTime [ '2018-02-22T14:01:11.661994-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #recapitate,			#protocol : #'display management',			#sourceCode : 'recapitate\r\t"Restore headful display opening the X session."\r\r\t"self thisOSProcess decapitate. (Delay forSeconds: 5) wait. self thisOSProcess recapitate."\r\r\t^ self openXDisplay\r',			#stamp : 'dtl 8/6/2003 06:34',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '652' ],		#self : OmReference [ '653' ],		#time : DateAndTime [ '2018-02-22T14:01:11.662565-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #refreshFromProcessAccessor,			#protocol : #updating,			#sourceCode : 'refreshFromProcessAccessor\r\t"Set my instance variables to reflect the state of the OS process in which this Smalltalk\r\tvirtual machine is executing."\r\r\tself subclassResponsibility',			#stamp : 'dtl 2/26/2002 08:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '653' ],		#self : OmReference [ '654' ],		#time : DateAndTime [ '2018-02-22T14:01:11.663209-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'registerChildProcess:',			#protocol : #'child process management',			#sourceCode : 'registerChildProcess: anOSProcess\r\t"Unregister anOSProcess, and trim the child process registry to prevent excessive\r\taccumulation of exited children."\r\r\taccessProtect critical: [ childProcessList addFirst: anOSProcess ].\r\tself pruneExitedChildrenAfter: ChildListSize.\r\t^ anOSProcess\r',			#stamp : 'dtl 2/6/2015 20:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '654' ],		#self : OmReference [ '655' ],		#time : DateAndTime [ '2018-02-22T14:01:11.663894-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #resetChildProcessDictionary,			#protocol : #updating,			#sourceCode : 'resetChildProcessDictionary\r\t"Forget all the entries in the allMyChildren dictionary. This method may be called\r\twhen a new session is started, since the child processes of the previous session are\r\tno longer children of this process."\r\r\tself allMyChildren do: [ :p | self unregisterChildProcess: p ]\r',			#stamp : 'dtl 2/27/2015 07:25',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '655' ],		#self : OmReference [ '656' ],		#time : DateAndTime [ '2018-02-22T14:01:11.664544-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #sessionID,			#protocol : #accessing,			#sourceCode : 'sessionID\r\r\t^ sessionID',			#stamp : 'dtl 9/26/2005 20:04',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '656' ],		#self : OmReference [ '657' ],		#time : DateAndTime [ '2018-02-22T14:01:11.665166-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #setStdErr,			#protocol : #private,			#sourceCode : 'setStdErr\r\t"If stdErr is nil, then set it. If not nil, check to see if it is has a valid connection to\r\tstderr. If not valid, then replace it, otherwise answer the existing valid stream.\r\tObscure bug warning: If a valid AttachableFileStream on stderr is garbage collected,\r\tthen stderr will be closed. It is advisable (but not necessary) to treat the stream\r\ton stderr as a singleton, but in any case, any extra instances attached to stderr\r\tshould not be allowed to be garbage collected."\r\r\t| stdErrHandle |\r\tstdErr ifNotNil:\r\t\t\t[(self isStdErr: stdErr ioHandle) ifTrue: [^ stdErr]].\r\tstdErrHandle := self processAccessor getStdErrHandle.\r\tstdErrHandle ifNotNil:\r\t\t\t[stdErr := AttachableFileStream name: \'stderr\' attachTo: stdErrHandle writable: true].\r\t^ stdErr\r',			#stamp : 'dtl 9/25/2005 13:28',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '657' ],		#self : OmReference [ '658' ],		#time : DateAndTime [ '2018-02-22T14:01:11.665803-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #setStdIn,			#protocol : #private,			#sourceCode : 'setStdIn\r\t"If stdIn is nil, then set it. If not nil, check to see if it is has a valid connection to\r\tstdin. If not valid, then replace it, otherwise answer the existing valid stream.\r\tObscure bug warning: If a valid AttachableFileStream on stdin is garbage collected,\r\tthen stdin will be closed. It is advisable (but not necessary) to treat the stream\r\ton stdin as a singleton, but in any case, any extra instances attached to stdin\r\tshould not be allowed to be garbage collected."\r\r\t| stdInHandle |\r\tstdIn ifNotNil:\r\t\t\t[(self isStdIn: stdIn ioHandle) ifTrue: [^ stdIn]].\r\tstdInHandle := self processAccessor getStdInHandle.\r\tstdInHandle ifNotNil:\r\t\t\t[stdIn := AttachableFileStream name: \'stdin\' attachTo: stdInHandle writable: false].\r\t^ stdIn\r\r',			#stamp : 'dtl 9/25/2005 13:28',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '658' ],		#self : OmReference [ '659' ],		#time : DateAndTime [ '2018-02-22T14:01:11.666415-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #setStdOut,			#protocol : #private,			#sourceCode : 'setStdOut\r\t"If stdOut is nil, then set it. If not nil, check to see if it is has a valid connection to\r\tstdout. If not valid, then replace it, otherwise answer the existing valid stream.\r\tObscure bug warning: If a valid AttachableFileStream on stdout is garbage collected,\r\tthen stdout will be closed. It is advisable (but not necessary) to treat the stream\r\ton stdout as a singleton, but in any case, any extra instances attached to stdout\r\tshould not be allowed to be garbage collected."\r\r\t| stdOutHandle |\r\tstdOut ifNotNil:\r\t\t\t[(self isStdOut: stdOut ioHandle) ifTrue: [^ stdOut]].\r\tstdOutHandle := self processAccessor getStdOutHandle.\r\tstdOutHandle ifNotNil:\r\t\t\t[stdOut := AttachableFileStream name: \'stdout\' attachTo: stdOutHandle writable: true].\r\t^ stdOut\r',			#stamp : 'dtl 9/25/2005 13:29',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '659' ],		#self : OmReference [ '660' ],		#time : DateAndTime [ '2018-02-22T14:01:11.666977-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'setXDisplayName:',			#protocol : #'display management',			#sourceCode : 'setXDisplayName: xDisplayName\r\t"Set X display name for use by the next call to recapitate"\r\r\t"self thisOSProcess setXDisplayName: \'unix:0\' "\r\t"self thisOSProcess setXDisplayName: \':1\' "\r\r\tself processAccessor primSetXDisplayName: xDisplayName\r\r',			#stamp : 'dtl 8/5/2003 22:16',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '660' ],		#self : OmReference [ '661' ],		#time : DateAndTime [ '2018-02-22T14:01:11.667754-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #stdErr,			#protocol : #accessing,			#sourceCode : 'stdErr\r\r\t^ stdErr',			#stamp : 'dtl 9/25/2005 13:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '661' ],		#self : OmReference [ '662' ],		#time : DateAndTime [ '2018-02-22T14:01:11.668312-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #stdIn,			#protocol : #accessing,			#sourceCode : 'stdIn\r\r\t^ stdIn',			#stamp : 'dtl 9/25/2005 13:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '662' ],		#self : OmReference [ '663' ],		#time : DateAndTime [ '2018-02-22T14:01:11.66887-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #stdOut,			#protocol : #accessing,			#sourceCode : 'stdOut\r\r\t^ stdOut',			#stamp : 'dtl 9/25/2005 13:31',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '663' ],		#self : OmReference [ '664' ],		#time : DateAndTime [ '2018-02-22T14:01:11.669473-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'unregisterChildProcess:',			#protocol : #'child process management',			#sourceCode : 'unregisterChildProcess: anOSProcess\r\r\taccessProtect\r\t\tcritical: [childProcessList remove: anOSProcess ifAbsent: [] ].\r\t^ anOSProcess\r',			#stamp : 'dtl 2/6/2015 19:49',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '664' ],		#self : OmReference [ '665' ],		#time : DateAndTime [ '2018-02-22T14:01:11.670126-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\r\taParameter == #invalidProcessAccessor ifTrue: [processAccessor := nil].\r\t^ super update: aParameter',			#stamp : 'dtl 10/15/2001 21:27',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '665' ],		#self : OmReference [ '666' ],		#time : DateAndTime [ '2018-02-22T14:01:11.67082-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #updateActiveChildren,			#protocol : #'child process management',			#sourceCode : 'updateActiveChildren\r\t"Test each active child for its completion status and update runState and exitStatus\r\taccordingly. This method may be called when a semaphore is set indicating that\r\tsome child OSProcess has died. A better approach might be to use an event queue\r\tfor death of child events; however, until event queues are part of Squeak image,\r\tthis polling mechanism is sufficient."\r\r\tself activeChildren do:\r\t\t[:child | child update: #runState]\r',			#stamp : 'dtl 2/25/2002 23:23',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '666' ],		#self : OmReference [ '667' ],		#time : DateAndTime [ '2018-02-22T14:01:11.671466-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThisOSProcess,				#isMetaSide : false			},			#name : #updateAllMyChildren,			#protocol : #'child process management',			#sourceCode : 'updateAllMyChildren\r\t"Test each child to make sure that it is still accessible. If the child is believed to be\r\trunning, check to see if it has exited, and update runState and exitStatus accordingly."\r\r\t| children |\r\taccessProtect critical: [children := self allMyChildren asArray].\r\tchildren do:\r\t\t[:child |\r\t\tchild update: #accessibility.\r\t\tchild isRunning ifTrue: [child update: #runState]]\r',			#stamp : 'dtl 2/4/2015 23:38',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '667' ],		#self : OmReference [ '668' ],		#time : DateAndTime [ '2018-02-22T14:01:11.672029-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #arguments,			#protocol : #utility,			#sourceCode : 'arguments\r\r\t"UnixProcess arguments"\r\r\t^ self thisOSProcess arguments\r',			#stamp : 'dtl 3/10/2001 09:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '668' ],		#self : OmReference [ '669' ],		#time : DateAndTime [ '2018-02-22T14:01:11.672781-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #backgroundProcessInHeadlessSqueak,			#protocol : #examples,			#sourceCode : 'backgroundProcessInHeadlessSqueak\r\t"Demonstrate running a \'\'batch job\'\' in a low priority background Squeak,\r\twith output written to an OSPipe. This Squeak image reads data from the\r\tpipe and displays it on the Transcript. The background Squeak will write\r\tenough data to block an OSPipe, so the foreground Squeak loops while\r\treading available data up to end of file.\r\r\tOpen a Transcript, then \'\' inspect it \'\' on this method. Process runs\r\tindefinitely, so terminate the process to end demo."\r\r\t"UnixProcess backgroundProcessInHeadlessSqueak"\r\r\t^ [[| pipe backgroundJob ws s | \r\tpipe := OSPipe new.\r\tbackgroundJob := OSProcess thisOSProcess\r\tforkHeadlessSqueakAndDoThenQuit: [| beers | \r\t\tOSProcess accessor nice: 1. "lower priority of background OS process"\r\t\tbeers := [:i | (i < 1 ifTrue: [\'no more\'] ifFalse: [i asString])\r\t\t\t\t\t, \' bottle\' , (i = 1 ifTrue: [\'\'] ifFalse: [\'s\'])].\r\t\t(99 to: 1 by: -1) do: [:count | pipe nextPutAll:\r\t\t\t(beers value: count) , \' of beer on the wall, \'\r\t\t\t, (beers value: count) , \' of beer\' , String cr\r\t\t\t, \'take one down and pass it around, \'\r\t\t\t, (beers value: count - 1) , \' of beer on the wall\'; cr].\r\t\tpipe close].\r\tWorldState addDeferredUIMessage:\r\t\t[Transcript show: backgroundJob asString , \' started\'; cr].\r\tpipe closeWriter. "don\'t need writer end, close it before the #upToEnd"\r\t"pipe writer blocks when pipe full, so we need to loop while reading to end "\r\tws := WriteStream on: String new.\r\t[backgroundJob isComplete] whileFalse:\r\t\t[(Delay forMilliseconds: 200) wait.\r\t\t(s := pipe upToEnd) ifNotNil: [ws nextPutAll: s]].\r\tpipe close.\r\tWorldState addDeferredUIMessage:\r\t\t[Transcript show: backgroundJob asString\r\t\t\t, \' completed, display results in 2 seconds\'; cr].\r\t(Delay forSeconds: 2) wait.\r\tWorldState addDeferredUIMessage:\r\t\t[Transcript show: ws contents.\r\t\tTranscript cr; show: \'delay 5 seconds before forking next Squeak job\'; cr].\r\t(Delay forSeconds: 5) wait] repeat]\r\t\tforkAt: Processor userBackgroundPriority',			#stamp : 'dtl 2/24/2013 10:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '669' ],		#self : OmReference [ '670' ],		#time : DateAndTime [ '2018-02-22T14:01:11.673582-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'canConnectToXDisplay:',			#protocol : #'X display - deprecated',			#sourceCode : 'canConnectToXDisplay: xDisplayName\r\t"Deprecated. See ThisOSProcess>canConnectToXDisplay:"\r\r\t"self canConnectToXDisplay: \':0.0\' "\r\r\t^ self thisOSProcess canConnectToXDisplay: xDisplayName\r',			#stamp : 'dtl 8/5/2003 22:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '670' ],		#self : OmReference [ '671' ],		#time : DateAndTime [ '2018-02-22T14:01:11.674166-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #catAFile,			#protocol : #examples,			#sourceCode : 'catAFile\r\t"Copy contents of a file to standard output. This demonstrates reassigning stdin to an open FileStream."\r\r\t"UnixProcess catAFile"\r\r\t| in proc |\r\tin := \f\f\fFileStream readOnlyFileNamed: \'/etc/hosts\'.\r\tproc := self forkJob: \'/bin/cat\'\r\t\t\targuments: nil\r\t\t\tenvironment: nil\r\t\t\tdescriptors: (Array with: in with: nil with: nil).\r\tin close.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc',			#stamp : 'dtl 7/12/2000 04:17',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '671' ],		#self : OmReference [ '672' ],		#time : DateAndTime [ '2018-02-22T14:01:11.674747-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #catFromFileToFiles,			#protocol : #examples,			#sourceCode : 'catFromFileToFiles\r\t"Copy contents of a file to another file, with any error messages going \r\tto a third file."\r\r\t"UnixProcess catFromFileToFiles"\r\r\t| in out err proc |\r\tin := FileStream readOnlyFileNamed: \'/etc/hosts\'.\r\tout := FileStream newFileNamed: \'/tmp/deleteMe.out\'.\r\terr := FileStream newFileNamed: \'/tmp/deleteMe.err\'.\r\tproc := UnixProcess\r\t\t\t\tforkJob: \'/bin/cat\'\r\t\t\t\targuments: nil\r\t\t\t\tenvironment: nil\r\t\t\t\tdescriptors: (Array\r\t\t\t\t\t\twith: in\r\t\t\t\t\t\twith: out\r\t\t\t\t\t\twith: err).\r\tin close.\r\tout close.\r\terr close.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc',			#stamp : 'dtl 7/12/2000 04:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '672' ],		#self : OmReference [ '673' ],		#time : DateAndTime [ '2018-02-22T14:01:11.675326-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #clientServerDemo,			#protocol : #examples,			#sourceCode : 'clientServerDemo\r\t"Start a new headless instance of Squeak running in a child OS process. The new\r\tinstance is a nearly identical copy of its parent, resuming execution at the same\r\tpoint as the parent. The child process will run a TCP server process in the headless\r\timage, then exit. Test results are written to the Transcript.\r\r\tAnswer \'127 0 0 1\' in response to the host address dialog."\r\r\t"UnixProcess clientServerDemo"\r\r\t| proc |\r\tproc := self forkHeadlessSqueakAndDoThenQuit: [Socket remoteTestServerTCP].\r\tproc ifNotNil: [Socket remoteTestClientTCP].\r\t^ proc\r\r',			#stamp : 'dtl 11/14/2000 00:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '673' ],		#self : OmReference [ '674' ],		#time : DateAndTime [ '2018-02-22T14:01:11.676169-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #clientServerDemo2,			#protocol : #examples,			#sourceCode : 'clientServerDemo2\r\t"Start a new instance of Squeak running in a child OS process. The new \r\tinstance is a nearly identical copy of its parent, resuming execution at\r\tthe same point as the parent. The child process will run a TCP server\r\tprocess, then exit. Test results are written to the Transcript. "\r\r\t"UnixProcess clientServerDemo2"\r\r\t| remotePort remoteHost serverBlock socket buffer n bytesToSend sendBuf\r\treceiveBuf done bytesSent bytesReceived packetsSent packetsReceived t |\r\r\tremotePort := 54321.\r\tremoteHost := \'localhost\'.\r\tserverBlock := \r\t\t\t[Transcript clear; cr; show: \'This is the server Squeak session\'; cr.\r\t\t\tSocket initializeNetworkIfFail: [^ nil].\r\t\t\tsocket := Socket newTCP.\r\t\t\tsocket listenOn: remotePort.\r\t\t\tbuffer := String new: 4000.\r\t\t\tsocket waitForConnectionUntil: Socket standardDeadline.\r\t\t\t[socket isConnected]\r\t\t\t\twhileTrue: [socket dataAvailable\r\t\t\t\t\t\tifTrue: \r\t\t\t\t\t\t\t[n := socket receiveDataInto: buffer.\r\t\t\t\t\t\t\tsocket sendData: buffer count: n]].\r\t\t\tsocket closeAndDestroy].\r\r\t(UnixProcess forkSqueakAndDoThenQuit: serverBlock)\r\t\tifNil: [self noAccessorAvailable. ^ nil].\r\tTranscript cr; show: \'This is the client Squeak session\'; cr.\r\tTranscript show: \'starting client/server TCP test\'; cr.\r\tTranscript show: \'initializing network ... \'.\r\tSocket initializeNetworkIfFail: [^ Transcript show: \'failed\'].\r\tTranscript show: \'ok\'; cr.\r\tsocket := Socket newTCP.\r\tsocket connectTo: (NetNameResolver addressForName: remoteHost) port: remotePort.\r\tsocket waitForConnectionUntil: Socket standardDeadline.\r\tTranscript show: \'client endpoint created\'; cr.\r\tbytesToSend := 1000000.\r\tsendBuf := String new: 4000 withAll: $x.\r\treceiveBuf := String new: 50000.\r\tdone := false.\r\tbytesSent := bytesReceived := packetsSent := packetsReceived := 0.\r\tt := Time\r\t\t\t\tmillisecondsToRun: \r\t\t\t\t\t[[done]\r\t\t\t\t\t\twhileFalse: \r\t\t\t\t\t\t\t[(socket sendDone and: [bytesSent < bytesToSend])\r\t\t\t\t\t\t\t\tifTrue: \r\t\t\t\t\t\t\t\t\t[packetsSent := packetsSent + 1.\r\t\t\t\t\t\t\t\t\tbytesSent := bytesSent + (socket sendData: sendBuf)].\r\t\t\t\t\t\t\tsocket dataAvailable\r\t\t\t\t\t\t\t\tifTrue: \r\t\t\t\t\t\t\t\t\t[packetsReceived := packetsReceived + 1.\r\t\t\t\t\t\t\t\t\tbytesReceived := bytesReceived + (socket receiveDataInto: receiveBuf)].\r\t\t\t\t\t\t\tdone := bytesSent >= bytesToSend].\r\t\t\t\t\t[bytesReceived < bytesToSend]\r\t\t\t\t\t\twhileTrue: [socket dataAvailable\r\t\t\t\t\t\t\t\tifTrue: \r\t\t\t\t\t\t\t\t\t[packetsReceived := packetsReceived + 1.\r\t\t\t\t\t\t\t\t\tbytesReceived := bytesReceived + (socket receiveDataInto: receiveBuf)]]].\r\tsocket closeAndDestroy.\r\tTranscript show: \'remoteClient TCP test done; time = \' , t printString; cr.\r\tTranscript show: packetsSent printString , \' packets, \' , bytesSent printString ,\r\t\t\' bytes sent (\' , (bytesSent * 1000 // t) printString , \' bytes/sec)\'; cr.\r\tTranscript show: packetsReceived printString , \' packets, \' , bytesReceived printString ,\r\t\t\' bytes received (\' , (bytesReceived * 1000 // t) printString , \' bytes/sec)\'; cr.\r\t^ bytesReceived',			#stamp : 'dtl 1/7/2001 12:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '674' ],		#self : OmReference [ '675' ],		#time : DateAndTime [ '2018-02-22T14:01:11.676809-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #cloneSqueak,			#protocol : #examples,			#sourceCode : 'cloneSqueak\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tnearly identical copy of its parent, resuming execution at the same point as the\r\tparent, and differentiated only by the return value of this method."\r\r\t"UnixProcess cloneSqueak"\r\r\t| proc |\r\tproc := self forkSqueak.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc\r',			#stamp : 'dtl 9/9/2000 16:00',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '675' ],		#self : OmReference [ '676' ],		#time : DateAndTime [ '2018-02-22T14:01:11.677484-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #currentXDisplayName,			#protocol : #'X display - deprecated',			#sourceCode : 'currentXDisplayName\r\t"Deprecated. See ThisOSProcess>>currentXDisplayName"\r\r\t"self currentXDisplayName"\r\r\t^ self thisOSProcess currentXDisplayName\r',			#stamp : 'dtl 8/5/2003 22:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '676' ],		#self : OmReference [ '677' ],		#time : DateAndTime [ '2018-02-22T14:01:11.678113-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #decapitate,			#protocol : #'X display - deprecated',			#sourceCode : 'decapitate\r\t"Deprecated. See ThisOSProcess>>decapitate"\r\r\t"self decapitate"\r\r\t^ OSProcess thisOSProcess decapitate',			#stamp : 'dtl 8/5/2003 22:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '677' ],		#self : OmReference [ '678' ],		#time : DateAndTime [ '2018-02-22T14:01:11.678677-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'displayOnXServer:',			#protocol : #'X display - deprecated',			#sourceCode : 'displayOnXServer: xDisplayName\r\t"Deprecated. See ThisOSProcess>>displayOnXServer"\r\r\t"self displayOnXServer: \':0.0\' "\r\t"self displayOnXServer: \'unix:0\' "\r\t"self displayOnXServer: \':1\' "\r\t"self displayOnXServer: \'noSuchMachine\'"\r\t"self displayOnXServer: \'noSuchMachine:0\'" "<-make sure network is running first!"\r\r\t^ OSProcess thisOSProcess displayOnXServer: xDisplayName',			#stamp : 'dtl 8/5/2003 22:18',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '678' ],		#self : OmReference [ '679' ],		#time : DateAndTime [ '2018-02-22T14:01:11.679594-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #eightLeafSqueakTree,			#protocol : #examples,			#sourceCode : 'eightLeafSqueakTree\r\t"Clone this squeak three times, resulting in a total of (2 raisedTo: 3) nearly identical\r\tsqueaks. Have a look at the pidArray inspectors and to the debug messages on stdout\r\tin order to see what is going on. The tree of processes looks like this:\r\r\t111\r\t +--------+--------+\r\t |\t\t |\t\t |\r\t011\t\t101\t\t110\r\t +---+\t |\r\t |\t |\t100\r\t010\t001\r\t\t |\r\t\t000\r\t"\r\r\t"UnixProcess eightLeafSqueakTree inspect"\r\r\t| depth this pidArray debugString |\r\tdepth := 3.\r\tthis := OSProcess thisOSProcess.\r\tthis stdOut ifNil: [self noAccessorAvailable. ^ nil].\r\tpidArray := Array new: depth.\r\t(1 to: depth) do: [ :e | | p pid |\r\t\tp := this forkSqueak.\r\t\tpid := (p == this) ifTrue: [0] ifFalse: [p pid].\t"Use Unix fork(2) convention"\r\t\tpidArray at: e put: pid].\r\tdebugString := \'pid \', (this pid printString), \' ppid \', (this ppid printString), \' \',\r\t\t(pidArray printString), (Character lf asString).\r\tthis stdOut nextPutAll: debugString.\r\t^ pidArray',			#stamp : 'dtl 7/12/2000 04:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '679' ],		#self : OmReference [ '680' ],		#time : DateAndTime [ '2018-02-22T14:01:11.680143-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #env,			#protocol : #utility,			#sourceCode : 'env\r\t"Note: The #environment selector has special meaning for classes, so use #env."\r\r\t"UnixProcess env"\r\r\t^ self thisOSProcess environment\r',			#stamp : 'dtl 12/27/2000 17:18',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '680' ],		#self : OmReference [ '681' ],		#time : DateAndTime [ '2018-02-22T14:01:11.680724-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'forkHeadlessSqueakAndDo:',			#protocol : #'child process creation',			#sourceCode : 'forkHeadlessSqueakAndDo: aBlock \r\t"Start a new instance of Squeak running in a child OS process, and  \r\texecute aBlock in the child instance. The new instance is a clone of \r\tthis image, but without a connection to the X display. The child instance \r\texecutes aBlock, which hopefully does not involve interaction with the \r\tX display; and the parent continues normally.  \r\t  \r\tThe child should not depend on using existing connections to external  \r\tresources. For example, the child may lose its connections to stdin, \r\tstdout, and stderr after its parent exits."\r\r\t"UnixProcess forkHeadlessSqueakAndDo: [UnixProcess helloWorld]"\r\r\t^ self thisOSProcess forkHeadlessSqueakAndDo: aBlock\r\r',			#stamp : 'dtl 12/27/2000 16:57',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '681' ],		#self : OmReference [ '682' ],		#time : DateAndTime [ '2018-02-22T14:01:11.681269-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'forkHeadlessSqueakAndDoThenQuit:',			#protocol : #'child process creation',			#sourceCode : 'forkHeadlessSqueakAndDoThenQuit: aBlock \r\t"Start a new instance of Squeak running in a child OS process, and \r\texecute aBlock in the child instance. The new instance is a clone of\r\tthis image, but without a connection to the X display. The child instance\r\texecutes aBlock, which hopefully does not involve interaction with the\r\tX display; and the parent continues normally.\r\r\tThe child should not depend on using existing connections to external \r\tresources. For example, the child may lose its connections to stdin, stdout,\r\tand stderr after its parent exits."\r\r\t"UnixProcess forkHeadlessSqueakAndDoThenQuit: [UnixProcess helloWorld]"\r\r\t^ self thisOSProcess forkHeadlessSqueakAndDoThenQuit: aBlock\r',			#stamp : 'dtl 12/27/2000 17:00',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '682' ],		#self : OmReference [ '683' ],		#time : DateAndTime [ '2018-02-22T14:01:11.681845-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'forkJob:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkJob: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams \r\t"Call Unix vfork() and execve() to create a child process, and answer the \r\tchild process. Delegate this to the singleton OSProcess>>thisOSProcess."\r\r\t^ self thisOSProcess\r\t\tforkJob: executableFile\r\t\targuments: arrayOfStrings\r\t\tenvironment: stringDictionary\r\t\tdescriptors: arrayOf3Streams',			#stamp : 'dtl 12/27/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '683' ],		#self : OmReference [ '684' ],		#time : DateAndTime [ '2018-02-22T14:01:11.682399-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #forkSqueak,			#protocol : #'child process creation',			#sourceCode : 'forkSqueak\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\t"UnixProcess forkSqueak"\r\r\t^ self thisOSProcess forkSqueak.\r',			#stamp : 'dtl 7/5/2000 07:19',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '684' ],		#self : OmReference [ '685' ],		#time : DateAndTime [ '2018-02-22T14:01:11.682972-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'forkSqueakAndDo:',			#protocol : #'child process creation',			#sourceCode : 'forkSqueakAndDo: aBlock\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\t"UnixProcess forkSqueakAndDo:\r\t\t[Object inform: \'Hi, I am the child Squeak process.\']"\r\r\t^ self thisOSProcess forkSqueakAndDo: aBlock\r',			#stamp : 'dtl 10/8/2001 20:40',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '685' ],		#self : OmReference [ '686' ],		#time : DateAndTime [ '2018-02-22T14:01:11.683626-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'forkSqueakAndDoThenQuit:',			#protocol : #'child process creation',			#sourceCode : 'forkSqueakAndDoThenQuit: aBlock\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\t"UnixProcess forkSqueakAndDoThenQuit:\r\t\t[Object inform: \'Hi, I am the child Squeak process. Click OK to exit the child Squeak.\']"\r\r\t^ self thisOSProcess forkSqueakAndDoThenQuit: aBlock\r',			#stamp : 'dtl 10/8/2001 20:41',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '686' ],		#self : OmReference [ '687' ],		#time : DateAndTime [ '2018-02-22T14:01:11.684356-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #headlessChild,			#protocol : #examples,			#sourceCode : 'headlessChild\r\t"Start a new instance of Squeak running in a child OS process. The new\r\tinstance is a nearly identical copy of its parent, resuming execution at the\r\tsame point as the parent, and differentiated only by the return value of\r\tthis method. The child squeak will write a message to standard output,\r\tthen exit."\r\r\t"UnixProcess headlessChild"\r\r\t| this childBlock |\r\tthis := OSProcess thisOSProcess.\r\tchildBlock :=\r\t\t[this stdOut nextPutAll: \'hello world from child process \'.\r\t\tthis pid printOn: OSProcess thisOSProcess stdOut.\r\t\tthis stdOut nextPut: Character lf ].\r\t^ self forkHeadlessSqueakAndDoThenQuit: childBlock\r\r',			#stamp : 'dtl 7/12/2000 05:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '687' ],		#self : OmReference [ '688' ],		#time : DateAndTime [ '2018-02-22T14:01:11.685199-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for\r\tthe Squeak VM running on the current platform."\r\r\t^ self isUnix\r',			#stamp : 'dtl 8/30/2003 17:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '688' ],		#self : OmReference [ '689' ],		#time : DateAndTime [ '2018-02-22T14:01:11.685787-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #listDirectory,			#protocol : #examples,			#sourceCode : 'listDirectory\r\t"Execute a simple command, sending output to standard output."\r\r\t"UnixProcess listDirectory"\r\r\t| proc |\r\tproc := self\r\t\t\tforkJob: \'/bin/ls\'\r\t\t\targuments: nil\r\t\t\tenvironment: nil\r\t\t\tdescriptors: nil.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc',			#stamp : 'dtl 7/12/2000 04:34',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '689' ],		#self : OmReference [ '690' ],		#time : DateAndTime [ '2018-02-22T14:01:11.686358-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'makeVmIn:',			#protocol : #'utility - VM building',			#sourceCode : 'makeVmIn: buildDirectoryPathName\r\t"Rebuild the virtual machine and plugins in the buildDirectoryPathName\r\tdirectory. If the build is successful, save the image and restart using the\r\tnew VM. This assumes that the currently executing VM is either located in,\r\tor linked to, the buildDirectoryPathName directory."\r\r\t"UnixProcess makeVmIn: \'/usr/local/squeak/Squeak-2.8/build\'"\r\t"UnixProcess makeVmIn: nil"\r\r\t^ self makeVmIn: (buildDirectoryPathName ifNil: [\'\']) interactive: true\r\r',			#stamp : 'dtl 10/19/2001 13:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '690' ],		#self : OmReference [ '691' ],		#time : DateAndTime [ '2018-02-22T14:01:11.687002-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'makeVmIn:interactive:',			#protocol : #'utility - VM building',			#sourceCode : 'makeVmIn: buildDirectoryPathName interactive: aBoolean\r\t"Rebuild the virtual machine and plugins in the buildDirectoryPathName\r\tdirectory. If the build is successful, save the image and restart using the\r\tnew VM. This assumes that the currently executing VM is either located in,\r\tor linked to, the buildDirectoryPathName directory. If aBoolean is true,\r\tdisplay interactive dialogs, otherwise output goes only to the Transcript."\r\r\t"UnixProcess makeVmIn: \'/usr/local/squeak/Squeak-2.8/build\' interactive: true"\r\r\t| commandString result |\r\tcommandString := \'cd \', buildDirectoryPathName, \'; make\'.\r\tTranscript cr; show: \'running external command "\', commandString, \'"\'; cr.\r\tresult := self waitForCommandOutputArray: commandString.\r\t((result at: 3) == 0 and: [(result at: 2) isEmpty])\r\t\tifTrue:\r\t\t\t[Transcript show: \'make completed successfully, restarting VM\'; cr.\r\t\t\taBoolean ifTrue:\r\t\t\t\t[self inform: \'make completed successfully, restarting VM\'].\r\t\t\tself quitAndRestart]\r\t\tifFalse:\r\t\t\t[Transcript show: (result at: 2); cr.\r\t\t\tTranscript show: \'make did not succeed, VM will not be restarted\'; cr.\r\t\t\taBoolean ifTrue:\r\t\t\t\t[self inform: \'make did not succeed, VM will not be restarted\'.\r\t\t\t\tself inform: (result at: 2)]].\r\t^ result\r',			#stamp : 'dtl 10/19/2001 11:41',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '691' ],		#self : OmReference [ '692' ],		#time : DateAndTime [ '2018-02-22T14:01:11.687583-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #path,			#protocol : #utility,			#sourceCode : 'path\r\t"UnixProcess path"\r\r\t^ self thisOSProcess path\r',			#stamp : 'dtl 12/27/2000 17:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '692' ],		#self : OmReference [ '693' ],		#time : DateAndTime [ '2018-02-22T14:01:11.688127-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #programName,			#protocol : #utility,			#sourceCode : 'programName\r\r\t"UnixProcess programName"\r\r\t^ self thisOSProcess programName\r',			#stamp : 'dtl 3/10/2001 09:53',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '693' ],		#self : OmReference [ '694' ],		#time : DateAndTime [ '2018-02-22T14:01:11.688688-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #recapitate,			#protocol : #'X display - deprecated',			#sourceCode : 'recapitate\r\t"Deprecated. See ThisOSProcess>>recapitate"\r\r\t"self decapitate. (Delay forSeconds: 5) wait. self recapitate."\r\r\t^ OSProcess thisOSProcess recapitate',			#stamp : 'dtl 8/5/2003 22:15',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '694' ],		#self : OmReference [ '695' ],		#time : DateAndTime [ '2018-02-22T14:01:11.689259-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #restartVirtualMachine,			#protocol : #utility,			#sourceCode : 'restartVirtualMachine\r\t"Fork a new instance and quit this one. This moves the running VM into a new\r\tOS process, and starts a new X display for the new process. It does not reload the\r\tVM program text, so this cannot be used to restart the VM after rebuild."\r\r\t"UnixProcess restartVirtualMachine"\r\r\t| proc |\r\tproc := self forkSqueak.\r\tproc isNil\r\t\tifTrue: \r\t\t\t[self noAccessorAvailable.\r\t\t\tnil]\r\t\tifFalse:\r\t\t\t[OSProcess thisOSProcess == proc\r\t\t\t\tifFalse:\r\t\t\t\t\t["Quit if this is the parent process"\r\t\t\t\t\tSmalltalk quitPrimitive]].\r\t^ proc',			#stamp : 'dtl 3/17/2002 13:38',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '695' ],		#self : OmReference [ '696' ],		#time : DateAndTime [ '2018-02-22T14:01:11.690763-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #runTests,			#protocol : #'unit tests',			#sourceCode : 'runTests\r\t"Run a few tests to see if things are working correctly on Unix/Linux. \r\tOutput is on stdout, stderr, and the Squeak Transcript. One of the tests \r\trequires input from stdin, so Squeak should be run from a shell command\r\tline and not as a background process.\r\r\tWarning: This test will crash your VM if your are using the -xshm command\r\tline option. For reasons which I do not quite understand, the X shared\r\tmemory segment becomes invalid when the Squeak VM which initially\r\topened the shared memory exits. The remaining Squeak children will crash\r\twhen then then next try to update the display.\r\r\tNote: If you see \'select: Bad file descriptor\' messages on your console standard\r\toutput, these are occuring while running headless in the decapitate/recapitate\r\ttests.\r\r\tImportant: Prior to evaluating this method, please type one line of text\r\tfollowed by a <cr> on the terminal standard input. This provides the\r\tinput for the stdin test. Failing to provide this input prior to evaluating\r\tthe tests will cause one of the test cases to fail."\r\r\t"UnixProcess runTests"\r\r\t| this s p failures result a |\r\tfailures := 0.\r\tTranscript show: \'Begin OSProcess tests\'; cr.\r\tTranscript show: \'Test for working ProcessAccessor ... \'.\r\tthis := OSProcess thisOSProcess.\r\t(this pid isKindOf: Integer)\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'Echo one line of text previously entered from stdin ... \'.\r\ts := OSProcess readFromStdIn.\r\ts size > 0\r\t\tifTrue: [Transcript show: \'OK\'; cr; show: s; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'Message to stdout ... \'.\r\t(OSProcess helloWorld isKindOf: AttachableFileStream)\r\t\tifTrue: [Transcript show: \'OK\'; cr; show: s; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'Message to stderr ... \'.\r\t(OSProcess helloStdErr isKindOf: AttachableFileStream)\r\t\tifTrue: [Transcript show: \'OK\'; cr; show: s; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess cataFile ... \'.\r\tp := UnixProcess catAFile.\r\t(Delay forSeconds: 1) wait.\r\tp exitStatus == 0\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess testEnvSet ... \'.\r\tp := UnixProcess testEnvSet.\r\t(Delay forSeconds: 1) wait.\r\tp exitStatus == 0\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess catFromFileToFiles ... \'.\r\tOSProcess command: \'rm /tmp/deleteMe.out\'.\r\tOSProcess command: \'rm /tmp/deleteMe.err\'.\r\tp := UnixProcess catFromFileToFiles.\r\t(Delay forSeconds: 1) wait.\r\tp exitStatus == 0\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess testRunCommand ... \'.\r\tOSProcess command: \'rm /tmp/deleteMe.out\'.\r\tOSProcess command: \'rm /tmp/deleteMe.err\'.\r\tp := UnixProcess testRunCommand.\r\t(Delay forSeconds: 1) wait.\r\tp exitStatus == 256\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess testPipe ... \'.\r\tUnixProcess testPipe = \'this is some text to write into the pipe\'\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess testPipeLine ... \'.\r\tUnixProcess testPipeLine = \'This is the text to write out through one pipe, copy through an external cat command, and then read back in through another pipe.\'\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess spawnTenHeadlessChildren ... \'.\r\tp := UnixProcess spawnTenHeadlessChildren.\r\t(p size == 10 and: [(p select: [:e | (e runState == #running) | (e exitStatus == 0)]) size == 10])\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess cloneSqueak ... \'.\r\tp := UnixProcess cloneSqueak.\r\t(p isKindOf: UnixProcess)\r\t\tifTrue: \r\t\t\t[(Delay forSeconds: 1) wait.\r\t\t\tOSProcess snapshot: false andQuit: true].\r\t(Delay forSeconds: 5) wait.\r\tp exitStatus == 0\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess squeakSqueak ... \'.\r\tp := UnixProcess squeakSqueak.\r\t(Delay forSeconds: 5) wait.\r\tOSProcess thisOSProcess sigkill: p.\r\t(Delay forSeconds: 1) wait.\r\tp exitStatus == 9\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess restartVirtualMachine ... \'.\r\tp := UnixProcess restartVirtualMachine.\r\tp pid == OSProcess thisOSProcess pid\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess command: \'\'cat\'\' input: \'\'this is some test data\'\' ... \'.\r\tp := (OSProcess thisOSProcess\r\t\tcommand: \'cat\'\r\t\tinput: \'this is some test data\').\r\t(Delay forSeconds: 1) wait.\r\tp upToEnd = \'this is some test data\'\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'UnixProcess waitForCommandOutput: \'\'echo sleeping...; sleep 1; echo I just slept for one second\'\' ... \'.\r\t(\'*I just slept for one second*\' match:\r\t\t(OSProcess thisOSProcess\r\t\t\twaitForCommandOutput: \'echo sleeping...; sleep 1; echo I just slept for one second\'))\r\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1].\r\tTranscript show: \'Unix command pipeline with output and error returned in an array ... \'.\r\t(Smalltalk hasClassNamed: #PipeableOSProcess)\r\t\tifTrue:\r\t\t\t[a := (((Smalltalk at: #PipeableOSProcess) command: \'echo this is a test; BOGUS\') | \'cut -c11-14\') outputAndError.\r\t\t\t(((a isKindOf: Array)\r\t\t\t\tand: [\'test*\' match: (a at: 1)])\r\t\t\t\t\tand: [\'*BOGUS*\' match: (a at: 2)])\r\t\t\t\t\t\tifTrue: [Transcript show: \'OK\'; cr]\r\t\t\t\t\t\tifFalse: [Transcript show: \'NFG\'; cr. failures := failures + 1]]\r\t\tifFalse:\r\t\t\t[Transcript show: \'skipping PipeableOSProcess test (requires CommandShell)\'; cr].\r\r\tTranscript show: \'UnixProcess decapitate and recapatiate five times\'; cr.\r\t5 timesRepeat:\r\t\t[UnixProcess decapitate.\r\t\tUnixProcess recapitate].\r\r\tfailures == 1\r\t\tifTrue: [result := \'OSProcess tests completed with \', failures printString, \' failure\']\r\t\tifFalse: [result := \'OSProcess tests completed with \', failures printString, \' failures\'].\r\tTranscript show: result; cr.\r\r\t^ result\r',			#stamp : 'dtl 3/5/2005 14:19',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '696' ],		#self : OmReference [ '697' ],		#time : DateAndTime [ '2018-02-22T14:01:11.691465-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #saveImageInBackground,			#protocol : #'utility - image save',			#sourceCode : 'saveImageInBackground\r\t"Save image in a background OS process."\r\r\t"UnixProcess saveImageInBackground"\r\r\t^ self saveImageInBackground: self uniqueNameForSavedImage nice: false\r',			#stamp : 'dtl 7/23/2010 07:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '697' ],		#self : OmReference [ '698' ],		#time : DateAndTime [ '2018-02-22T14:01:11.692154-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'saveImageInBackground:nice:',			#protocol : #'utility - image save',			#sourceCode : 'saveImageInBackground: savedImageName nice: niceFlag\r\t"When Squeak is used as a server it is sometimes desirable to periodically\r\tsave image snapshots. This method forks a headless Squeak to perform a\r\tsnapshot without impacting the server Squeak. Very little additional memory\r\tis required to do this because Unix copy-on-write memory management allows\r\tthe two Squeak images to share object memory while the save is performed.\r\tThe saved image is given a time stamped name, and the image name of\r\tthe main server Squeak remains unchanged. If niceFlag is true, the\r\tbackground OS process runs at lowered scheduling priority."\r\r\t^ self forkHeadlessSqueakAndDo:\r\t\t[| st |\r\t\t"Delay is required in the background process when forking a headless\r\t\tSqueak, probably necessary to permit X session stuff to settle down."\r\t\t(Delay forMilliseconds: 500) wait.\r\t\t(niceFlag notNil and: [niceFlag]) ifTrue:\r\t\t\t["lower priority of background OS process"\r\t\t\tOSProcess accessor nice: 1].\r\t\tst := SmalltalkImage current.\r\t\t(SourceFiles at: 2) ifNotNil:\r\t\t\t["ensure that copying the changes file will always work"\r\t\t\tst closeSourceFiles.\r\t\t\tst saveChangesInFileNamed: (st fullNameForChangesNamed: savedImageName)].\r\t\tst changeImageNameTo: savedImageName,\'.image\';\r\t\t\tcloseSourceFiles;\r\t\t\topenSourceFiles;  "so SNAPSHOT appears in new changes file"\r\t\t\tsaveImageSegments;\r\t\t\tsnapshot: true andQuit: true]\r',			#stamp : 'dtl 1/8/2008 22:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '698' ],		#self : OmReference [ '699' ],		#time : DateAndTime [ '2018-02-22T14:01:11.692741-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #saveImageInBackgroundNicely,			#protocol : #'utility - image save',			#sourceCode : 'saveImageInBackgroundNicely\r\t"Save image in a background OS process with lowered scheduling priority."\r\r\t"UnixProcess saveImageInBackgroundNicely"\r\r\t^ self saveImageInBackground: self uniqueNameForSavedImage nice: true\r',			#stamp : 'dtl 7/23/2010 07:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '699' ],		#self : OmReference [ '700' ],		#time : DateAndTime [ '2018-02-22T14:01:11.693289-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #sessionID,			#protocol : #utility,			#sourceCode : 'sessionID\r\r\t"UnixProcess sessionID"\r\r\t^ self thisOSProcess sessionID\r',			#stamp : 'dtl 3/10/2001 09:53',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '700' ],		#self : OmReference [ '701' ],		#time : DateAndTime [ '2018-02-22T14:01:11.693855-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'setXDisplayName:',			#protocol : #'X display - deprecated',			#sourceCode : 'setXDisplayName: xDisplayName\r\t"Deprecated. See ThisOSProcess>>setXDisplayName"\r\r\t"self setXDisplayName: \'unix:0\' "\r\t"self setXDisplayName: \':1\' "\r\r\t^ OSProcess thisOSProcess setXDisplayName: xDisplayName\r\r',			#stamp : 'dtl 8/5/2003 22:18',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '701' ],		#self : OmReference [ '702' ],		#time : DateAndTime [ '2018-02-22T14:01:11.694474-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #spawnTenHeadlessChildren,			#protocol : #examples,			#sourceCode : 'spawnTenHeadlessChildren\r\t"Spawn ten Squeak children, each of which writes a message to standard \r\toutput, then exits. Answer an array of pid values for the child \r\tprocesses. "\r\r\t"UnixProcess spawnTenHeadlessChildren"\r\r\t| childBlock count children this |\r\tthis := OSProcess thisOSProcess.\r\tthis stdOut ifNil: [self noAccessorAvailable. ^ nil].\r\tcount := 10.\r\tchildren := Array new: count.\r\tchildBlock := \r\t\t\t[this stdOut nextPutAll: \'hello world from child process \'.\r\t\t\tthis pid printOn: this stdOut.\r\t\t\tthis stdOut nextPut: Character lf.\r\t\t\tthis stdOut flush].\r\t(1 to: count)\r\t\tdo: \r\t\t\t[:e | \r\t\t\tOSProcess thisOSProcess stdOut flush.\r\t\t\tchildren at: e put: (self forkHeadlessSqueakAndDoThenQuit: childBlock)].\r\t^ children',			#stamp : 'dtl 7/12/2000 04:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '702' ],		#self : OmReference [ '703' ],		#time : DateAndTime [ '2018-02-22T14:01:11.695043-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #squeakSqueak,			#protocol : #examples,			#sourceCode : 'squeakSqueak\r\t"Start a new instance of Squeak running in a child OS process. The new instance\r\twill restart from the image file, so it is a clone of this image as it existed at the\r\tmost recent image save. See cloneSqueak for an example of how to clone the\r\trunning image without going back to the saved image file."\r\r\t"UnixProcess squeakSqueak"\r\r\t| proc |\r\tproc := self squeak.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc\r',			#stamp : 'dtl 7/12/2000 04:38',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '703' ],		#self : OmReference [ '704' ],		#time : DateAndTime [ '2018-02-22T14:01:11.69566-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'startSwiki:onPort:loggingTo:',			#protocol : #utility,			#sourceCode : 'startSwiki: aSwiki onPort: num loggingTo: aFileName\r\t"Start a swiki in a headless Squeak image."\r\r\t"UnixProcess startSwiki: \'myswiki\' onPort: 8081 loggingTo: \'log.txt\'"\r\r\t| proc |\r\t(Smalltalk hasClassNamed: #SwikiAction)\r\t\tifTrue:\r\t\t\t[proc := self forkSqueakAndDo:\r\t\t\t\t[(Smalltalk at: #SwikiAction) new restore: \'myswiki\'.\r\t\t\t\t(Smalltalk at: #PWS) serveOnPort: num loggingTo: aFileName.\r\t\t\t\tUnixProcess decapitate].\r\t\t\tproc ifNil: [self noAccessorAvailable].\r\t\t\t^ proc]\r\t\tifFalse:\r\t\t[self notify: \'PWS not installed in this image\']\r',			#stamp : 'dtl 7/13/2003 14:47',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '704' ],		#self : OmReference [ '705' ],		#time : DateAndTime [ '2018-02-22T14:01:11.696497-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #stdErr,			#protocol : #utility,			#sourceCode : 'stdErr\r\t"UnixProcess stdErr"\r\r\t^ self thisOSProcess stdErr\r',			#stamp : 'dtl 12/27/2000 17:12',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '705' ],		#self : OmReference [ '706' ],		#time : DateAndTime [ '2018-02-22T14:01:11.697148-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #stdIn,			#protocol : #utility,			#sourceCode : 'stdIn\r\t"UnixProcess stdIn"\r\r\t^ self thisOSProcess stdIn\r',			#stamp : 'dtl 12/27/2000 17:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '706' ],		#self : OmReference [ '707' ],		#time : DateAndTime [ '2018-02-22T14:01:11.697836-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #stdOut,			#protocol : #utility,			#sourceCode : 'stdOut\r\t"UnixProcess stdOut"\r\r\t^ self thisOSProcess stdOut\r',			#stamp : 'dtl 12/27/2000 17:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '707' ],		#self : OmReference [ '708' ],		#time : DateAndTime [ '2018-02-22T14:01:11.698521-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #testEnvSet,			#protocol : #examples,			#sourceCode : 'testEnvSet\r\t"Set up a new environment for a child process. Exec a shell to show the \r\tenvironment variables on the terminal standard output. Note that many \r\tshells will set other environment variables in addition to those which we\r\tset up prior to executing the shell."\r\r\t"UnixProcess testEnvSet"\r\r\t| e proc |\r\te := Dictionary new.\r\te at: #KEY1 put: \'value1\';\r\t at: #KEY2 put: \'value2\';\r\t at: #KEY3 put: \'value3\'.\r\tproc := self\r\t\t\tforkJob: \'/bin/sh\'\r\t\t\targuments: #(\'-c\' \'env\' )\r\t\t\tenvironment: e\r\t\t\tdescriptors: nil.\r\tproc ifNil: [self noAccessorAvailable].\r\t^ proc',			#stamp : 'dtl 7/12/2000 04:41',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '708' ],		#self : OmReference [ '709' ],		#time : DateAndTime [ '2018-02-22T14:01:11.699107-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #testPipe,			#protocol : #examples,			#sourceCode : 'testPipe\r\t"Create an OS pipe, write some text to it, and read the text back from the \r\tother end of the pipe."\r\r\t"UnixProcess testPipe inspect"\r\r\t| s p r |\r\ts := \'this is some text to write into the pipe\'.\r\tp := OSPipe new.\r\tp ifNil: \r\t\t[self noAccessorAvailable.\r\t\t^ p].\r\tp writer nextPutAll: s.\r\tp writer close.\r\tr := p reader next: s size.\r\tp reader close.\r\t^ r',			#stamp : 'dtl 2/11/2001 14:03',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '709' ],		#self : OmReference [ '710' ],		#time : DateAndTime [ '2018-02-22T14:01:11.699789-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #testPipeLine,			#protocol : #examples,			#sourceCode : 'testPipeLine\r\t"Create two OS pipes, and a child OS process with its input connected to \r\tone pipe and its  output connected to the other pipe. Write some text to\r\tthe input pipe, and read the resulting output (just echoed back by the\r\tUnix cat command) back through the output pipe. Send a SIGHUP signal\r\tto the child process to tell it to exit.\r\r\tThis test verifies the ability of Squeak to send text to an external OS process\r\tthrough a pipe, and read the output text back from another pipe.\r\tSee ConnectedUnixProcess for a more useful implementation."\r\r\t"UnixProcess testPipeLine inspect"\r\r\t| testString pipe1 pipe2 input output src dest desc result child |\r\tOSProcess accessor canAccessSystem ifFalse: [^ nil].\r\ttestString := \'This is the text to write out through one pipe, copy through an external cat command, and then read back in through another pipe.\'.\r\tpipe1 := OSPipe blockingPipe.\r\tpipe2 := OSPipe nonBlockingPipe.\r\tinput := pipe1 reader.\r\toutput := pipe2 writer.\r\tsrc := pipe1 writer.\r\tdest := pipe2 reader.\r\tdesc := Array\r\t\t\t\twith: input\r\t\t\t\twith: output\r\t\t\t\twith: nil.\r\tchild := self\r\t\t\t\tforkJob: \'/bin/cat\'\r\t\t\t\targuments: nil\r\t\t\t\tenvironment: nil\r\t\t\t\tdescriptors: desc.\r\tinput close.\r\toutput close.\r\tsrc nextPutAll: testString.\r\tsrc close.\r\t(Delay forSeconds: 1) wait.\r\tresult := dest next: testString size.\r\tdest close.\r\tchild sigterm. "Tell the child to exit"\r\t^ result\r',			#stamp : 'dtl 2/24/2001 16:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '710' ],		#self : OmReference [ '711' ],		#time : DateAndTime [ '2018-02-22T14:01:11.700407-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #testRunCommand,			#protocol : #examples,			#sourceCode : 'testRunCommand\r\t"Run the command \'ls -l /etc /etc/noSuchFile\'. The output of the \r\tcommand will be in the file \'/tmp/deleteMe.out\', and the error output\r\twill be in \'/tmp/deleteMe.err\'. "\r\r\t"UnixProcess testRunCommand"\r\r\t| out err desc args proc |\r\tout := FileStream newFileNamed: \'/tmp/deleteMe.out\'.\r\terr := FileStream newFileNamed: \'/tmp/deleteMe.err\'.\r\tdesc := Array\r\t\t\t\twith: nil\r\t\t\t\twith: out\r\t\t\t\twith: err.\r\targs := Array\r\t\t\t\twith: \'-l\'\r\t\t\t\twith: \'/etc\'\r\t\t\t\twith: \'/etc/noSuchFile\'\r\t\t\t\twith: \'/etc/anotherNonexistentFile\'.\r\tproc := self\r\t\t\t\tforkJob: \'/bin/ls\'\r\t\t\t\targuments: args\r\t\t\t\tenvironment: nil\r\t\t\t\tdescriptors: desc.\r\tproc ifNil: [self noAccessorAvailable].\r\tout close.\r\terr close.\r\t^ proc',			#stamp : 'dtl 7/12/2000 04:46',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '711' ],		#self : OmReference [ '712' ],		#time : DateAndTime [ '2018-02-22T14:01:11.701007-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #uniqueNameForSavedImage,			#protocol : #'utility - image save',			#sourceCode : 'uniqueNameForSavedImage\r\t"A time stamped image name that will sort in date order in a directory listing"\r\r\t"UnixProcess uniqueNameForSavedImage"\r\r\t| now month day hour minute second |\r\tnow := DateAndTime now.\r\tmonth := now month asString.\r\tday := now dayOfMonth asString.\r\thour := now hour24 asString.\r\tminute := now minute asString.\r\tsecond := now second asString.\r\t^ \'squeak-\',\r\t\tnow year asString,\r\t\t(month size < 2 ifTrue: [\'0\', month] ifFalse: [month]),\r\t\t(day size < 2 ifTrue: [\'0\', day] ifFalse: [day]),\r\t\t(hour size < 2 ifTrue: [\'0\', hour] ifFalse: [hour]),\r\t\t(minute size < 2 ifTrue: [\'0\', minute] ifFalse: [minute]),\r\t\t(second size < 2 ifTrue: [\'0\', second] ifFalse: [second])\r',			#stamp : 'dtl 11/8/2005 11:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '712' ],		#self : OmReference [ '713' ],		#time : DateAndTime [ '2018-02-22T14:01:11.701583-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'waitForCommandOutput:',			#protocol : #'external command processing',			#sourceCode : 'waitForCommandOutput: aCommandString \r\t"Run a command in a shell process. Similar to the system(3) call in the \r\tstandard C library. The active Smalltalk process waits for completion of\r\tthe external command process."\r\r\t"UnixProcess waitForCommandOutput: \'echo sleeping...; sleep 1; echo I just slept for one second\'"\r\t"UnixProcess waitForCommandOutput: \'ThisIsABogusCommand\'"\r\r\t^ self thisOSProcess waitForCommandOutput: aCommandString\r',			#stamp : 'dtl 1/18/2001 23:14',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '713' ],		#self : OmReference [ '714' ],		#time : DateAndTime [ '2018-02-22T14:01:11.702472-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcess class',				#isMetaSide : true			},			#name : #'waitForCommandOutputArray:',			#protocol : #'external command processing',			#sourceCode : 'waitForCommandOutputArray: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library.\r\tThe active Smalltalk process waits for completion of the external command process."\r\r\t"UnixProcess waitForCommandOutputArray: \'echo Hello world!; ls /NOSUCHFILE\'"\r\r\t^ self thisOSProcess waitForCommandOutputArray: aCommandString',			#stamp : 'dtl 1/18/2001 23:14',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '714' ],		#self : OmReference [ '715' ],		#time : DateAndTime [ '2018-02-22T14:01:11.703185-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'argsAsFlatArrayAndOffsets:',			#protocol : #private,			#sourceCode : 'argsAsFlatArrayAndOffsets: anArrayOfNullTerminatedStrings\r\t"Given anArrayOfNullTerminatedStrings, flatten the array into a string buffer,\r\tleaving space at the beginning of the buffer for a list of C pointers. Answer\r\tthe string buffer and an array of address offsets. The address offsets may later\r\tbe converted to C pointers and overlaid on the beginning of the buffer, resulting\r\tin a data structure which can be treated as a C array of strings suitable for\r\tuse as a Unix argv vector."\r\r\t"OSProcess thisOSProcess argsAsFlatArrayAndOffsets:\r\t\t(UnixProcess arguments collect:\r\t\t\t[:e | e, (Character value: 0) asString])"\r\r\t| offset arraySize flatStringArray ws addresses |\r\t"Preserve offset space to hold address pointers."\r\toffset := (anArrayOfNullTerminatedStrings size + 1) * self processAccessor sizeOfPointer.\r\t"Allocate flat strings buffer"\r\tarraySize := (anArrayOfNullTerminatedStrings collect: [:e | e size]) sum\r\t\t+ ((anArrayOfNullTerminatedStrings size + 1) * self processAccessor sizeOfPointer).\r\t"Flatten the strings out into a buffer, leaving room at the\r\tbeginning of the buffer for an array of addresses."\r\tflatStringArray := String new: arraySize.\r\tws := WriteStream on: flatStringArray.\r\toffset timesRepeat: [ws nextPut: (Character value: 0)].\r\tanArrayOfNullTerminatedStrings do: [:e | ws nextPutAll: e].\r\t"Find address offsets to be used in creating the addresses for the strings."\r\tws := WriteStream on: (Array new: anArrayOfNullTerminatedStrings size).\r\t(anArrayOfNullTerminatedStrings collect: [:e | e size])\r\t\tinject: offset into: [:p :e | ws nextPut: p. p + e].\r\taddresses := ws contents.\r\t"Results"\r\t^ Array with: flatStringArray with: addresses\r',			#stamp : 'djr 4/6/2009 14:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '715' ],		#self : OmReference [ '716' ],		#time : DateAndTime [ '2018-02-22T14:01:11.703837-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #arguments,			#protocol : #accessing,			#sourceCode : 'arguments\r\r\t^ arguments\r',			#stamp : 'dtl 11/7/2000 09:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '716' ],		#self : OmReference [ '717' ],		#time : DateAndTime [ '2018-02-22T14:01:11.704556-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'chDir:',			#protocol : #environment,			#sourceCode : 'chDir: pathString\r\t"Change current working directory, and update $PWD if it exists in the environment.\r\tAnswer nil for success, or an error message."\r\r\t"OSProcess thisOSProcess chDir: \'/tmp\'"\r\t"OSProcess thisOSProcess chDir: \'/no/such/path\'"\r\t"OSProcess thisOSProcess chDir: OSProcess defaultPathString"\r\r\t| realPath result |\r\trealPath := self processAccessor realpath: pathString.\r\trealPath ifNil: [realPath := pathString].\r\tresult := self processAccessor chDir: realPath.\r\tresult isNil\r\t\tifTrue:\r\t\t\t[(self environmentAt: #PWD)\r\t\t\t\tifNotNil:\r\t\t\t\t\t[self environmentAt: #PWD put: realPath.\r\t\t\t\t\t^ nil]]\r\t\tifFalse:\r\t\t\t[self inform: realPath, \': \', result.\r\t\t\t^ result]',			#stamp : 'dtl 1/25/2013 19:00',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '717' ],		#self : OmReference [ '718' ],		#time : DateAndTime [ '2018-02-22T14:01:11.705199-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'external command processing',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library,\r\texcept that aCommandString runs asynchronously in a child process. The command is\r\trun by a ConnectedUnixProcess in order to facilitate command pipelines within Squeak."\r\r\t"UnixProcess thisOSProcess command: \'ls -l /etc\'"\r\r\t| proc |\r\tpid isNil\r\t\tifTrue:\r\t\t\t[self class noAccessorAvailable. ^nil]\r\t\tifFalse:\r\t\t\t[proc := self\r\t\t\t\t\tforkJob: ExternalUnixOSProcess defaultShellPath\r\t\t\t\t\targuments: (Array with: \'-c\' with: aCommandString)\r\t\t\t\t\tenvironment: nil\r\t\t\t\t\tdescriptors: nil.\r\t\t\tproc ifNil: [self class noAccessorAvailable].\r\t\t\t^ proc]\r',			#stamp : 'dtl 2/27/2002 15:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '718' ],		#self : OmReference [ '719' ],		#time : DateAndTime [ '2018-02-22T14:01:11.705819-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'command:input:',			#protocol : #'external command processing',			#sourceCode : 'command: aCommandString input: aStreamOrString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library,\r\texcept that aCommandString runs asynchronously in a child process."\r\r\t"OSProcess thisOSProcess\r\t\tcommand: \'cat\'\r\t\tinput: \'this is some test data\'"\r\r\t"OSProcess thisOSProcess\r\t\tcommand: \'cat\'\r\t\tinput: (ReadStream on: \'this is some test data\')"\r\r\t| proc |\r\t(Smalltalk hasClassNamed: #PipeableOSProcess)\r\t\tifTrue:\r\t\t\t[proc := (Smalltalk at: #PipeableOSProcess) command: aCommandString.\r\t\t\tproc ifNil: [^ nil].\r\t\t\tproc nextPutAll: aStreamOrString contents.\r\t\t\tproc pipeToInput close.\r\t\t\t^ proc]\r\t\tifFalse:\r\t\t\t[self notify: \'the #command:input: method requires CommandShell, using #command: instead\'.\r\t\t\t^ self command: aStreamOrString contents]\r\r',			#stamp : 'dtl 7/12/2003 11:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '719' ],		#self : OmReference [ '720' ],		#time : DateAndTime [ '2018-02-22T14:01:11.706512-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'envAsFlatArrayAndOffsets:',			#protocol : #private,			#sourceCode : 'envAsFlatArrayAndOffsets: anEnvironmentDictionary\r\t"Given anEnvironmentDictionary, flatten the dictionary into a string buffer,\r\tleaving space at the beginning of the buffer for a list of C pointers. Answer\r\tthe string buffer and an array of address offsets. The address offsets may later\r\tbe converted to C pointers and overlaid on the beginning of the buffer, resulting\r\tin a data structure which can be treated as a C array of strings suitable for\r\tuse as a Unix process environment."\r\r\t"OSProcess thisOSProcess envAsFlatArrayAndOffsets: UnixProcess env"\r\r\t| offset envArray arraySize flatStringArray ws addresses |\r\t"Preserve offset space to hold address pointers."\r\toffset := (anEnvironmentDictionary size + 1) * self processAccessor sizeOfPointer.\r\t"Build collection of environment strings"\r\tenvArray := OrderedCollection new.\r\tanEnvironmentDictionary keysAndValuesDo: [:k :v | envArray add: (k, \'=\', v)].\r\t"Allocate flat strings buffer"\r\tarraySize := ((envArray collect: [:e | e size + 1]) sum) + offset.\r\t"Flatten the strings out into a buffer, leaving room at the beginning of\r\tthe buffer for an array of addresses."\r\tflatStringArray := String new: arraySize.\r\tws := WriteStream on: flatStringArray.\r\toffset timesRepeat: [ws nextPut: (Character value: 0)].\r\tenvArray do: [:e | ws nextPutAll: e; nextPut: (Character value: 0)].\r\t"Find address offsets to be used in creating the addresses for the strings."\r\tws := WriteStream on: (Array new: anEnvironmentDictionary size).\r\t(envArray collect: [:e | e size + 1])\r\t\tinject: offset into: [:p :e | ws nextPut: p. p + e].\r\taddresses := ws contents.\r\t"Results"\r\t^ Array with: flatStringArray with: addresses\r',			#stamp : 'djr 4/6/2009 14:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '720' ],		#self : OmReference [ '721' ],		#time : DateAndTime [ '2018-02-22T14:01:11.707055-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #environment,			#protocol : #accessing,			#sourceCode : 'environment\r\r\t^ environment\r',			#stamp : 'dtl 11/7/2000 09:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '721' ],		#self : OmReference [ '722' ],		#time : DateAndTime [ '2018-02-22T14:01:11.707917-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'environmentAt:',			#protocol : #environment,			#sourceCode : 'environmentAt: aSymbol\r\t"Answer an environment variable for the external OS process, and update the dictionary\r\tin this Smalltalk object."\r\r\t^ environment at: aSymbol asSymbol ifAbsent: []\r',			#stamp : 'dtl 3/6/2001 21:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '722' ],		#self : OmReference [ '723' ],		#time : DateAndTime [ '2018-02-22T14:01:11.70849-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'environmentAt:put:',			#protocol : #environment,			#sourceCode : 'environmentAt: aSymbol put: aString\r\t"Set an environment variable for the external OS process, and update the dictionary in\r\tthis Smalltalk object."\r\r\t| s |\r\tself initialize.\r\ts := self processAccessor environmentAt: aSymbol put: aString.\r\ts ifNotNil: [ self environment at: aSymbol asSymbol put: aString ].\r\t^ s\r\r',			#stamp : 'dtl 3/6/2001 21:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '723' ],		#self : OmReference [ '724' ],		#time : DateAndTime [ '2018-02-22T14:01:11.709076-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\t"Use this to release any external resources prior to reinitializing."\r\r\tsuper finalize.\r\tstdIn := stdIn ifNotNil:\r\t\t[[stdIn close] on: Error do: [:ex | ].\r\t\tnil].\r\tstdIn := stdOut ifNotNil:\r\t\t[[stdOut close] on: Error do: [:ex | ].\r\t\tnil].\r\tstdIn := stdErr ifNotNil:\r\t\t[[stdErr close] on: Error do: [:ex | ].\r\t\tnil].\r\tsessionID := nil.\r\tppid := nil.\r\tprogramName := nil.\r\targuments := nil.\r\tpath := nil.\r\tenvironment := nil.\r\tself updateAllMyChildren.\r\tchildProcessList := nil.\r\tprocessAccessor\r\t\tifNotNil: \r\t\t\t[processAccessor removeDependent: self.\r\t\t\tprocessAccessor := nil]\r',			#stamp : 'dtl 2/4/2015 23:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '724' ],		#self : OmReference [ '725' ],		#time : DateAndTime [ '2018-02-22T14:01:11.709661-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams \r\r\t"Call Unix vfork() and execve() to create a child process, and answer the \r\tchild process. This method is expected to be called by class side methods."\r\r\t^ ExternalUnixOSProcess\r\t\tforkAndExec: executableFile\r\t\targuments: arrayOfStrings\r\t\tenvironment: stringDictionary\r\t\tdescriptors: arrayOf3Streams',			#stamp : 'dtl 2/27/2002 15:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '725' ],		#self : OmReference [ '726' ],		#time : DateAndTime [ '2018-02-22T14:01:11.710368-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #forkHeadlessSqueak,			#protocol : #'child process creation',			#sourceCode : 'forkHeadlessSqueak\r\t"Just like forkSqueak, except that the child Squeak continues headless."\r\r\t| thisPid childPid child connected |\r\tstdOut ifNil: [^ nil].\r\tself stdOut flush.\r\tself stdErr flush.\r\tthisPid := self pid.\r\tconnected := self processAccessor canControlXDisplay\r\t\t\t\t\tand: [self flushXDisplay notNil].\r\tchildPid := self processAccessor forkSqueak.\r\t^ childPid ifNotNil: [\r\t\tchildPid == 0\r\t\t\tifTrue:\r\t\t\t\t[connected ifTrue: [self disconnectXDisplay].\r\t\t\t\tOSProcess thisOSProcess processAccessor newPid.\r\t\t\t\t^ self]\r\t\t\tifFalse:\r\t\t\t\t[child := ExternalUnixOSProcess new.\r\t\t\t\tchild pid: childPid.\r\t\t\t\tchild ppid: thisPid.\r\t\t\t\tchild programName: self programName.\r\t\t\t\tchild initialStdIn: self stdIn.\t\r\t\t\t\tchild initialStdOut: self stdOut.\r\t\t\t\tchild initialStdErr: self stdErr.\r\t\t\t\tchild arguments: self arguments.\r\t\t\t\tchild initialEnvironment: self environment.\r\t\t\t\tchild notYetRunning.\r\t\t\t\tself registerChildProcess: child.\r\t\t\t\tchild running.\r\t\t\t\t^ child]]\r',			#stamp : 'dtl 2/27/2015 20:04',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '726' ],		#self : OmReference [ '727' ],		#time : DateAndTime [ '2018-02-22T14:01:11.711067-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'forkHeadlessSqueakAndDo:',			#protocol : #'child process creation',			#sourceCode : 'forkHeadlessSqueakAndDo: aBlock \r\t"Start a new instance of Squeak running in a child OS process, and  \r\texecute aBlock in the child instance. The new instance is a clone of \r\tthis image, but without a connection to the X display. The child instance \r\texecutes aBlock, which hopefully does not involve interaction with the \r\tX display; and the parent continues normally.  \r\t  \r\tThe child should not depend on using existing connections to external  \r\tresources. For example, the child may lose its connections to stdin, \r\tstdout, and stderr after its parent exits."\r\r\t| childOrThisProc |\r\tchildOrThisProc := self forkHeadlessSqueak.\r\tchildOrThisProc\r\t\tifNil: \r\t\t\t[self class noAccessorAvailable.\r\t\t\t^ nil].\r\tchildOrThisProc == self\r\t\tifTrue:\r\t\t\t["Child process"\r\t\t\taBlock value].\r\t^ childOrThisProc\r',			#stamp : 'dtl 1/7/2001 12:59',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '727' ],		#self : OmReference [ '728' ],		#time : DateAndTime [ '2018-02-22T14:01:11.711859-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'forkHeadlessSqueakAndDoThenQuit:',			#protocol : #'child process creation',			#sourceCode : 'forkHeadlessSqueakAndDoThenQuit: aBlock \r\t"Start a new instance of Squeak running in a child OS process, and \r\texecute aBlock in the child instance. The new instance is a clone of\r\tthis image, but without a connection to the X display. The child instance\r\texecutes aBlock, which hopefully does not involve interaction with the\r\tX display; and the parent continues normally.\r\r\tThe child should not depend on using existing connections to external \r\tresources. For example, the child may lose its connections to stdin, stdout,\r\tand stderr after its parent exits."\r\r\t"self thisOSProcess forkHeadlessSqueakAndDoThenQuit:\r\t\t[OSProcess thisOSProcess stdOut nextPutAll: \'hello world!\'; nextPut: Character lf]"\r\t"self thisOSProcess forkHeadlessSqueakAndDoThenQuit: [OSProcess thisOSProcess command: \'xeyes\']"\r\r\t| childOrThisProc |\r\tchildOrThisProc := self forkHeadlessSqueak.\r\tchildOrThisProc\r\t\tifNil: \r\t\t\t[self class noAccessorAvailable.\r\t\t\t^ nil].\r\tchildOrThisProc == self\r\t\tifTrue:\r\t\t\t["Child process"\r\t\t\taBlock value.\r\t\t\tSmalltalk quitPrimitive].\r\t^ childOrThisProc',			#stamp : 'dtl 8/7/2003 07:17',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '728' ],		#self : OmReference [ '729' ],		#time : DateAndTime [ '2018-02-22T14:01:11.712446-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'forkJob:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkJob: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Call Unix vfork() and execve() to create a child process, and answer the child process.\r\tDelegate this to the singleton OSProcess>>thisOSProcess."\r\r\t^ self forkAndExec: executableFile\r\t\targuments: arrayOfStrings\r\t\tenvironment: stringDictionary\r\t\tdescriptors: arrayOf3Streams\r',			#stamp : 'dtl 12/27/2000 16:47',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '729' ],		#self : OmReference [ '730' ],		#time : DateAndTime [ '2018-02-22T14:01:11.713157-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #forkSqueak,			#protocol : #'child process creation',			#sourceCode : 'forkSqueak\r\t"Fork a child and continue running this Squeak image in both the parent and the child.\r\tParent and child are distinguished by the pid returned by primForkSqueak.\r\r\tIf continuing as the parent process, answer the ExternalUnixOSProcess which\r\trepresents the child. This can be inspected to watch the run state of the child\r\tprocess from the parent.\r\r\tIf continuing as the child process, answer OSProcess thisOSProcess. This can be\r\tinspected to watch the full state of the child process from the child. The\r\tchild cannot directly view the state of its parent.\r\r\tParent and child should be cautious about using shared connections to external\r\tresources."\r\r\t"self thisOSProcess forkSqueak"\r\r\t| thisPid childPid child connected |\r\tstdOut ifNil: [^ nil].\r\tself stdOut flush.\r\tself stdErr flush.\r\tthisPid := self pid.\r\tconnected := self processAccessor canControlXDisplay\r\t\t\t\t\tand: [self flushXDisplay notNil].\r\tchildPid := self processAccessor forkSqueak.\r\t^ childPid ifNotNil: [\r\t\tchildPid == 0\r\t\t\tifTrue:\r\t\t\t\t[connected ifTrue: [self disconnectXDisplay; recapitate].\r\t\t\t\tOSProcess thisOSProcess processAccessor newPid.\r\t\t\t\t^ self]\r\t\t\tifFalse:\r\t\t\t\t[child := ExternalUnixOSProcess new.\r\t\t\t\tchild pid: childPid.\r\t\t\t\tchild ppid: thisPid.\r\t\t\t\tchild programName: self programName.\r\t\t\t\tchild initialStdIn: self stdIn.\t\r\t\t\t\tchild initialStdOut: self stdOut.\r\t\t\t\tchild initialStdErr: self stdErr.\r\t\t\t\tchild arguments: self arguments.\r\t\t\t\tchild initialEnvironment: self environment.\r\t\t\t\tchild notYetRunning.\r\t\t\t\tself registerChildProcess: child.\r\t\t\t\tchild running.\r\t\t\t\t^ child]]\r',			#stamp : 'dtl 2/27/2015 20:04',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '730' ],		#self : OmReference [ '731' ],		#time : DateAndTime [ '2018-02-22T14:01:11.714021-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'forkSqueakAndDo:',			#protocol : #'child process creation',			#sourceCode : 'forkSqueakAndDo: aBlock\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\t"UnixProcess thisOSProcess forkSqueakAndDo:\r\t\t[Object inform: \'Hi, I am the child Squeak process.\']"\r\r\t| childOrThisProc |\r\tchildOrThisProc := self forkSqueak.\r\t(childOrThisProc == self) ifTrue: [aBlock value]. "Child process"\r\t^ childOrThisProc',			#stamp : 'dtl 10/8/2001 19:56',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '731' ],		#self : OmReference [ '732' ],		#time : DateAndTime [ '2018-02-22T14:01:11.714593-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'forkSqueakAndDoThenQuit:',			#protocol : #'child process creation',			#sourceCode : 'forkSqueakAndDoThenQuit: aBlock\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\t"UnixProcess thisOSProcess forkSqueakAndDoThenQuit:\r\t\t[Object inform: \'Hi, I am the child Squeak process.\']"\r\r\t| childOrThisProc |\r\tchildOrThisProc := self forkSqueak.\r\t(childOrThisProc == self)\r\t\tifTrue:\r\t\t\t[ aBlock value.\r\t\t\tSmalltalk quitPrimitive]. "Child process"\r\t^ childOrThisProc',			#stamp : 'dtl 10/8/2001 19:56',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '732' ],		#self : OmReference [ '733' ],		#time : DateAndTime [ '2018-02-22T14:01:11.715175-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #getArgumentList,			#protocol : #private,			#sourceCode : 'getArgumentList\r\t"Answer the argument list using anOSProcessAccessor. For Unix, the first element of the list\r\twould be the program name. This element will not be treated as an argument; rather, it is\r\tstored as the programName instance variable."\r\r\t| index val list |\r\tlist := OrderedCollection new.\r\tindex := 2.\r\t[(val := processAccessor primArgumentAt: index) notNil] whileTrue: [\r\t\tlist add: val.\r\t\tindex := index + 1].\r\t^ list asArray\r\r',			#stamp : 'dtl 3/31/2001 14:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '733' ],		#self : OmReference [ '734' ],		#time : DateAndTime [ '2018-02-22T14:01:11.715766-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #getCwd,			#protocol : #environment,			#sourceCode : 'getCwd\r\t"Get current working directory. At image startup, this is equivalent to\r\tevaluating environmentAt: #PWD"\r\r\t"OSProcess thisOSProcess getCwd"\r\r\t^ self processAccessor primGetCurrentWorkingDirectory\r\r\r',			#stamp : 'dtl 3/22/2000 05:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '734' ],		#self : OmReference [ '735' ],		#time : DateAndTime [ '2018-02-22T14:01:11.716353-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #getEnvironmentDictionary,			#protocol : #private,			#sourceCode : 'getEnvironmentDictionary\r\t"Answer an environment dictionary using an OSProcessAccessor."\r\r\t| index str key val env |\r\tenv := Dictionary new.\r\tindex := 1.\r\t[(str := processAccessor primEnvironmentAt: index) notNil] whileTrue: [\r\t\tkey := (str copyUpTo: $=) asSymbol.\r\t\tval := (str copyFrom: ((str indexOf: $=) + 1) to: (str size)).\r\t\tenv at: key put: val.\r\t\tindex := index + 1].\r\t^ env\r\r\r',			#stamp : 'dtl 3/31/2001 14:14',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '735' ],		#self : OmReference [ '736' ],		#time : DateAndTime [ '2018-02-22T14:01:11.71691-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #getProgramName,			#protocol : #private,			#sourceCode : 'getProgramName\r\t"Answer the name of the program which is being run by this OS process. Assume the\r\tUnix convention where the first element of (char **)argv is the program name."\r\r\t^ programName := processAccessor primArgumentAt: 1\r',			#stamp : 'dtl 3/31/2001 14:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '736' ],		#self : OmReference [ '737' ],		#time : DateAndTime [ '2018-02-22T14:01:11.717622-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Set my instance variables to reflect the state of the OS process in which \r\tthis Smalltalk virtual machine is executing."\r\r\tsuper initialize.\r\t(self processAccessor notNil and: [processAccessor canAccessSystem])\r\t\tifTrue: \r\t\t\t[self refreshFromProcessAccessor]\r\t\tifFalse: \r\t\t\t[stdIn := nil.\r\t\t\tstdOut := nil.\r\t\t\tstdErr := nil].\r\tprocessAccessor restartChildWatcherProcess\r',			#stamp : 'dtl 7/6/2010 21:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '737' ],		#self : OmReference [ '738' ],		#time : DateAndTime [ '2018-02-22T14:01:11.718285-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self class isUnix\r',			#stamp : 'dtl 8/30/2003 17:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '738' ],		#self : OmReference [ '739' ],		#time : DateAndTime [ '2018-02-22T14:01:11.718894-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #killCurrentChildrenAtExit,			#protocol : #'VM atexit',			#sourceCode : 'killCurrentChildrenAtExit\r\t"Arrange for the currently active child processes to receive a SIGTERM\r\tsignal then the Squeak VM exits. Each invokation of this method overrides\r\tthe effects of any previous calls."\r\r\t"OSProcess thisOSProcess killCurrentChildrenAtExit"\r\r\tself processAccessor killOnVmExit: self activeChildren withSignal: nil\r',			#stamp : 'dtl 2/6/2015 20:38',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '739' ],		#self : OmReference [ '740' ],		#time : DateAndTime [ '2018-02-22T14:01:11.719778-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #needsRefresh,			#protocol : #private,			#sourceCode : 'needsRefresh\r\t"Answer true if the sessionID variable is out of date with respect to the running OS Process."\r\r\t^ ((sessionID ~= (self processAccessor primGetSession)) | (pid ~= (self processAccessor primGetPid)))\r',			#stamp : 'dtl 11/7/2000 09:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '740' ],		#self : OmReference [ '741' ],		#time : DateAndTime [ '2018-02-22T14:01:11.720338-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #path,			#protocol : #accessing,			#sourceCode : 'path\r\r\t^ path := self pathString\r',			#stamp : 'dtl 11/7/2000 09:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '741' ],		#self : OmReference [ '742' ],		#time : DateAndTime [ '2018-02-22T14:01:11.720904-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'path:',			#protocol : #accessing,			#sourceCode : 'path: aPathString\r\r\tself environmentAt: #PATH put: aPathString.\r\tpath := self pathString',			#stamp : 'dtl 11/7/2000 09:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '742' ],		#self : OmReference [ '743' ],		#time : DateAndTime [ '2018-02-22T14:01:11.721459-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #pathString,			#protocol : #private,			#sourceCode : 'pathString\r\t"Answer the path string from the environment. Assume Unix convention in which the\r\tpath name is a colon delimited string stored in the PATH environment variable."\r\r\t^ self environment at: #PATH ifAbsent: [nil]',			#stamp : 'dtl 3/6/2001 21:46',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '743' ],		#self : OmReference [ '744' ],		#time : DateAndTime [ '2018-02-22T14:01:11.722068-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #pid,			#protocol : #accessing,			#sourceCode : 'pid\r\r\t^ pid := self processAccessor primGetPid\r',			#stamp : 'dtl 10/18/2001 20:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '744' ],		#self : OmReference [ '745' ],		#time : DateAndTime [ '2018-02-22T14:01:11.722636-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #ppid,			#protocol : #accessing,			#sourceCode : 'ppid\r\t"Always refresh ppid from the processAccessor, because it is possible for a child\r\tto be reparented when the parent exits. The child does not know about this, so\r\twe refresh ppid on every access."\r\r\t^ ppid := processAccessor primGetPPid\r',			#stamp : 'dtl 11/7/2000 09:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '745' ],		#self : OmReference [ '746' ],		#time : DateAndTime [ '2018-02-22T14:01:11.723206-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\t"In English, say \'a Unix\' rather than \'an Unix\'. Therefore do not use super printOn, which\r\ttreats $U as a vowel."\r\r\tself ppid.\t\t"Force update of ppid, in case parent may have exited."\r\taStream nextPutAll: \'a \';\r\t\t\tnextPutAll: self class name;\r\t\t\tnextPutAll: \' with pid \';\r\t\t\tnextPutAll: self pid printString\r',			#stamp : 'dtl 7/7/2010 07:37',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '746' ],		#self : OmReference [ '747' ],		#time : DateAndTime [ '2018-02-22T14:01:11.724151-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'processProxy:forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'processProxy: anExternalProcess forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Call Unix vfork() and execve() to create a child process, and answer the child process.\r\tThis method is expected to be called by class side methods. Prepare the arguments before\r\tcalling the primitive, including null termination of all strings. anExternalProcess is an\r\tobject which represents the new child process, and which responds to the #pid: message."\r\r\t| nullString progName args argVecAndOffsets argVec argOffsets\r\tenvVecAndOffsets envVec envOffsets in out err childPid pwd |\r\tstdOut ifNil: [^ nil].\r\tnullString := (Character value: 0) asString.\r\tprogName := executableFile, nullString.\t\t"Null terminated string"\r\tarrayOfStrings isNil\t\t\t\t\t\t\t"Should be a (possibly empty) array"\r\t\tifTrue:\r\t\t\t[args := Array with: progName]\t\t"First argument is the program name (Unix convention)"\r\t\tifFalse:\r\t\t\t[args := (OrderedCollection new: arrayOfStrings size + 2)\r\t\t\t\t\t\tadd: progName;\r\t\t\t\t\t\taddAll: (arrayOfStrings collect: [:e | e, nullString ]);\t"Null terminate each string"\r\t\t\t\t\t\tyourself;\r\t\t\t\t\t\tasArray].\r\targVecAndOffsets := self argsAsFlatArrayAndOffsets: args.\r\targVec := argVecAndOffsets at: 1.\r\targOffsets := argVecAndOffsets at: 2.\r\t(stringDictionary notNil and: [stringDictionary ~= (self environment)])\r\t\tifTrue:\r\t\t\t[envVecAndOffsets := self envAsFlatArrayAndOffsets: stringDictionary.\r\t\t\tenvVec := envVecAndOffsets at: 1.\r\t\t\tenvOffsets := envVecAndOffsets at: 2]\r\t\tifFalse:\r\t\t\t[envVec := nil.\r\t\t\tenvOffsets := nil].\t"Same as current environment, so just pass nil."\r\tarrayOf3Streams isNil\r\t\tifTrue:\r\t\t\t[in := self handleFromAccessor: (self stdIn ioHandle).\r\t\t\tout := self handleFromAccessor: (self stdOut ioHandle).\r\t\t\terr := self handleFromAccessor: (self stdIn ioHandle)]\r\t\tifFalse:\r\t\t\t[(arrayOf3Streams at: 1)\r\t\t\t\tisNil\r\t\t\t\t\tifTrue: [in := self handleFromAccessor: (self stdIn ioHandle)]\r\t\t\t\t\tifFalse: [in := self handleFromFileStream: (arrayOf3Streams at: 1)].\t\t\t\r\t\t\t(arrayOf3Streams at: 2)\r\t\t\t\tisNil\r\t\t\t\t\tifTrue: [ out := self handleFromAccessor: (self stdOut ioHandle)]\r\t\t\t\t\tifFalse: [ out := self handleFromFileStream: (arrayOf3Streams at: 2)].\r\t\t\t(arrayOf3Streams at: 3)\r\t\t\t\tisNil\r\t\t\t\t\tifTrue: [ err := self handleFromAccessor: (self stdErr ioHandle)]\r\t\t\t\t\tifFalse: [ err := self handleFromFileStream: (arrayOf3Streams at: 3)]].\r\tpwd := anExternalProcess pwd.\r\t(pwd = self getCwd)\r\t\tifTrue: [pwd := nil]\r\t\tifFalse: [pwd := pwd, nullString].\r\tchildPid := self processAccessor\r\t\t\t\tforkAndExec: progName\r\t\t\t\tstdIn: in\r\t\t\t\tstdOut: out\r\t\t\t\tstdErr: err\r\t\t\t\targBuf: argVec\r\t\t\t\targOffsets: argOffsets\r\t\t\t\tenvBuf: envVec\r\t\t\t\tenvOffsets: envOffsets\r\t\t\t\tworkingDir: pwd.\r\tanExternalProcess pid: childPid.\r\tanExternalProcess ppid: self pid.\r\t((childPid == 0) or: [childPid isNil])\r\t\tifTrue:\r\t\t\t[anExternalProcess unknownRunState]\r\t\tifFalse:\r\t\t\t[anExternalProcess running.\r\t\t\tself registerChildProcess: anExternalProcess].\r\t^ anExternalProcess\r',			#stamp : 'dtl 1/25/2004 12:40',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '747' ],		#self : OmReference [ '748' ],		#time : DateAndTime [ '2018-02-22T14:01:11.725145-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #programName,			#protocol : #accessing,			#sourceCode : 'programName\r\r\t^ programName\r',			#stamp : 'dtl 11/7/2000 09:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '748' ],		#self : OmReference [ '749' ],		#time : DateAndTime [ '2018-02-22T14:01:11.725763-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #pthread,			#protocol : #accessing,			#sourceCode : 'pthread\r\t"The identity of the pthread in which the interpreter executes.\r\tAlways refresh pthread from the processAccessor, because it is possible for a child\r\tto be reparented when the parent exits. The child does not know about this, so\r\twe refresh pthread on every access."\r\r\t^ pthread := processAccessor getThreadID\r',			#stamp : 'dtl 3/17/2007 22:54',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '749' ],		#self : OmReference [ '750' ],		#time : DateAndTime [ '2018-02-22T14:01:11.726363-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'redirect:to:',			#protocol : #'IO redirection',			#sourceCode : 'redirect: aFileStream to: newFileStream\r\r\t| oldfd newfd |\r\toldfd := self processAccessor unixFileNumber: aFileStream fileID.\r\tnewfd := self processAccessor unixFileNumber: newFileStream fileID.\r\tself processAccessor primUnixFileClose: oldfd.\r\t^ self processAccessor primDup: newfd to: oldfd\r',			#stamp : 'dtl 5/18/2009 21:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '750' ],		#self : OmReference [ '751' ],		#time : DateAndTime [ '2018-02-22T14:01:11.726941-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'redirectStdErrTo:',			#protocol : #'IO redirection',			#sourceCode : 'redirectStdErrTo: fileStream\r\t"Redirect the standard error stream to another output stream."\r\r\t^ self redirect: self stdErr to: fileStream\r',			#stamp : 'dtl 5/17/2009 23:12',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '751' ],		#self : OmReference [ '752' ],		#time : DateAndTime [ '2018-02-22T14:01:11.727521-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'redirectStdInTo:',			#protocol : #'IO redirection',			#sourceCode : 'redirectStdInTo: fileStream\r\t"Redirect the standard input stream to another input stream."\r\r\t^ self redirect: self stdIn to: fileStream\r',			#stamp : 'dtl 5/17/2009 23:12',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '752' ],		#self : OmReference [ '753' ],		#time : DateAndTime [ '2018-02-22T14:01:11.728093-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'redirectStdOutTo:',			#protocol : #'IO redirection',			#sourceCode : 'redirectStdOutTo: fileStream\r\t"Redirect the standard output stream to another output stream."\r\r\t"| pipe |\r\tpipe := OSPipe nonBlockingPipe.\r\tOSProcess thisOSProcess redirectStdOutTo: pipe writer.\r\tpipe"\r\t\r\t^ self redirect: self stdOut to: fileStream\r',			#stamp : 'dtl 5/17/2009 23:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '753' ],		#self : OmReference [ '754' ],		#time : DateAndTime [ '2018-02-22T14:01:11.728693-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #refreshFromProcessAccessor,			#protocol : #updating,			#sourceCode : 'refreshFromProcessAccessor\r\t"Set my instance variables to reflect the state of the OS process in which this Smalltalk\r\tvirtual machine is executing."\r\r\tself needsRefresh ifTrue: [\r\t\tsessionID := self processAccessor getSessionIdentifier.\r\t\tpid := processAccessor primGetPid.\r\t\tppid := processAccessor primGetPPid.\r\t\tpthread := processAccessor getThreadID.\r\t\tself setStdIn.\r\t\tself setStdOut.\r\t\tself setStdErr.\r\t\tprogramName := self getProgramName.\r\t\targuments := self getArgumentList.\r\t\tenvironment := self getEnvironmentDictionary.\r\t\tpath := self pathString.\r\t\tself updateAllMyChildren]\r',			#stamp : 'dtl 7/4/2010 22:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '754' ],		#self : OmReference [ '755' ],		#time : DateAndTime [ '2018-02-22T14:01:11.729271-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'registerChildProcess:',			#protocol : #'child process management',			#sourceCode : 'registerChildProcess: anOSProcess\r\r\tself processAccessor sigChldSemaphore.\r\tself processAccessor grimReaperProcess.\t "Start the reaper process if it is not running."\r\t^ super registerChildProcess: anOSProcess\r',			#stamp : 'dtl 2/5/2015 20:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '755' ],		#self : OmReference [ '756' ],		#time : DateAndTime [ '2018-02-22T14:01:11.729849-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigabrt:',			#protocol : #'OS signal sending',			#sourceCode : 'sigabrt: anExternalOSProcess\r\t"Send a SIGABRT signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigabrtTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '756' ],		#self : OmReference [ '757' ],		#time : DateAndTime [ '2018-02-22T14:01:11.730793-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigalrm:',			#protocol : #'OS signal sending',			#sourceCode : 'sigalrm: anExternalOSProcess\r\t"Send a SIGALRM signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigalrmTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '757' ],		#self : OmReference [ '758' ],		#time : DateAndTime [ '2018-02-22T14:01:11.731494-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigchld:',			#protocol : #'OS signal sending',			#sourceCode : 'sigchld: anExternalOSProcess\r\t"Send a SIGCHLD signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigchldTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '758' ],		#self : OmReference [ '759' ],		#time : DateAndTime [ '2018-02-22T14:01:11.73216-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigcont:',			#protocol : #'OS signal sending',			#sourceCode : 'sigcont: anExternalOSProcess\r\t"Send a SIGCONT signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigcontTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '759' ],		#self : OmReference [ '760' ],		#time : DateAndTime [ '2018-02-22T14:01:11.732745-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sighup:',			#protocol : #'OS signal sending',			#sourceCode : 'sighup: anExternalOSProcess\r\t"Send a SIGHUP signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSighupTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '760' ],		#self : OmReference [ '761' ],		#time : DateAndTime [ '2018-02-22T14:01:11.733311-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigint:',			#protocol : #'OS signal sending',			#sourceCode : 'sigint: anExternalOSProcess\r\t"Send a SIGINT signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigintTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '761' ],		#self : OmReference [ '762' ],		#time : DateAndTime [ '2018-02-22T14:01:11.7339-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigkill:',			#protocol : #'OS signal sending',			#sourceCode : 'sigkill: anExternalOSProcess\r\t"Send a SIGKILL signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigkillTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '762' ],		#self : OmReference [ '763' ],		#time : DateAndTime [ '2018-02-22T14:01:11.734475-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigpipe:',			#protocol : #'OS signal sending',			#sourceCode : 'sigpipe: anExternalOSProcess\r\t"Send a SIGPIPE signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigpipeTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '763' ],		#self : OmReference [ '764' ],		#time : DateAndTime [ '2018-02-22T14:01:11.735042-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigquit:',			#protocol : #'OS signal sending',			#sourceCode : 'sigquit: anExternalOSProcess\r\t"Send a SIGQUIT signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigquitTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '764' ],		#self : OmReference [ '765' ],		#time : DateAndTime [ '2018-02-22T14:01:11.735617-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigstop:',			#protocol : #'OS signal sending',			#sourceCode : 'sigstop: anExternalOSProcess\r\t"Send a SIGSTOP signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigstopTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '765' ],		#self : OmReference [ '766' ],		#time : DateAndTime [ '2018-02-22T14:01:11.736674-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigterm:',			#protocol : #'OS signal sending',			#sourceCode : 'sigterm: anExternalOSProcess\r\t"Send a SIGTERM signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigtermTo: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '766' ],		#self : OmReference [ '767' ],		#time : DateAndTime [ '2018-02-22T14:01:11.737278-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigusr1:',			#protocol : #'OS signal sending',			#sourceCode : 'sigusr1: anExternalOSProcess\r\t"Send a SIGUSR1 signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigusr1To: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '767' ],		#self : OmReference [ '768' ],		#time : DateAndTime [ '2018-02-22T14:01:11.737986-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'sigusr2:',			#protocol : #'OS signal sending',			#sourceCode : 'sigusr2: anExternalOSProcess\r\t"Send a SIGUSR2 signal to the external process represented by anExternalOSProcess."\r\r\t^ self processAccessor primSendSigusr2To: anExternalOSProcess pid',			#stamp : 'dtl 7/6/2000 16:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '768' ],		#self : OmReference [ '769' ],		#time : DateAndTime [ '2018-02-22T14:01:11.738681-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #squeak,			#protocol : #'child process creation',			#sourceCode : 'squeak\r\t"Start a new instance of Squeak running in a child OS process. The new \r\tinstance will restart from the image file, so it is a clone of this image \r\tas it existed at the most recent image save."\r\r\t"OSProcess thisOSProcess squeak"\r\r\t^ self\r\t\tforkJob: self programName\r\t\targuments: self arguments\r\t\tenvironment: nil\r\t\tdescriptors: nil',			#stamp : 'dtl 1/21/2001 11:47',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '769' ],		#self : OmReference [ '770' ],		#time : DateAndTime [ '2018-02-22T14:01:11.739307-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\t"Framework to update some or all of the instance variables based on external events,\r\tsuch as receipt of a sigchd signal when a child process exits."\r\r\t(aParameter == (self processAccessor)) ifTrue:\r\t\t[^ self refreshFromProcessAccessor; yourself].\r\t(aParameter == #pid) ifTrue:\r\t\t[^ self resetChildProcessDictionary. "Forget children of prior process"].\r\t(aParameter == #childProcessStatus) ifTrue:\r\t\t[^ self updateActiveChildren; changed; yourself].\r\t(aParameter == #startUp) ifTrue:\r\t\t[^ self update: #pid].\r\taParameter == #invalidProcessAccessor ifTrue:\r\t\t[processAccessor := processAccessor ifNotNil: [processAccessor removeDependent: self. nil].\r\t\t^ self].\r\tself error: \'Unexpected update parameter\'',			#stamp : 'dtl 10/20/2001 09:05',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '770' ],		#self : OmReference [ '771' ],		#time : DateAndTime [ '2018-02-22T14:01:11.73995-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'waitForCommand:',			#protocol : #'external command processing',			#sourceCode : 'waitForCommand: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library.\r\tThe active Smalltalk process waits for completion of the external command process. This just\r\tuses a simple polling loop, which is not very elegant but works well enough for most purposes."\r\r\t"OSProcess thisOSProcess waitForCommand: \'echo sleeping...; sleep 3; echo I just slept for three seconds\'"\r\r\t| proc d |\r\td := Delay forMilliseconds: 50.\r\tproc := self\r\t\tforkJob: ExternalUnixOSProcess defaultShellPath\r\t\targuments: (Array with: \'-c\' with: aCommandString)\r\t\tenvironment: nil\r\t\tdescriptors: nil.\r\tproc ifNil: [self class noAccessorAvailable].\r\t[proc runState == #complete] whileFalse: [d wait].\r\t^ proc\r',			#stamp : 'dtl 2/27/2002 15:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '771' ],		#self : OmReference [ '772' ],		#time : DateAndTime [ '2018-02-22T14:01:11.740583-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'waitForCommandOutput:',			#protocol : #'external command processing',			#sourceCode : 'waitForCommandOutput: aCommandString \r\t"Run a command in a shell process. Similar to the system(3) call in the \r\tstandard C library. The active Smalltalk process waits for completion of\r\tthe external command process."\r\r\t"OSProcess thisOSProcess waitForCommandOutput: \'echo sleeping...; sleep 1; echo I just slept for one second\'"\r\t"OSProcess thisOSProcess waitForCommandOutput: \'ThisIsABogusCommand\'"\r\t"OSProcess thisOSProcess waitForCommandOutput: \'/bin/ls -l /etc /bin\'"\r\t"OSProcess thisOSProcess waitForCommandOutput: \'echo Hello world!; ls /NOSUCHFILE\'"\r\r\t(Smalltalk hasClassNamed: #PipeableOSProcess)\r\t\tifTrue:\r\t\t\t[^ ((Smalltalk at: #PipeableOSProcess) command: aCommandString) output]\r\t\tifFalse:\r\t\t\t[self notify: \'the #waitForCommandOutput: method requires CommandShell\'.\r\t\t\t^ \'\']\r',			#stamp : 'dtl 7/12/2003 12:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '772' ],		#self : OmReference [ '773' ],		#time : DateAndTime [ '2018-02-22T14:01:11.741223-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcess,				#isMetaSide : false			},			#name : #'waitForCommandOutputArray:',			#protocol : #'external command processing',			#sourceCode : 'waitForCommandOutputArray: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library.\r\tThe active Smalltalk process waits for completion of the external command process."\r\r\t"OSProcess thisOSProcess waitForCommandOutputArray: \'echo Hello world!; ls /NOSUCHFILE\'"\r\r\t| proc |\r\t(Smalltalk hasClassNamed: #PipeableOSProcess)\r\t\tifTrue:\r\t\t\t[proc := (Smalltalk at: #PipeableOSProcess) command: aCommandString.\r\t\t\t^ Array\r\t\t\t\twith: proc output\r\t\t\t\twith: proc errorUpToEnd\r\t\t\t\twith: proc processProxy exitStatus]\r\t\tifFalse:\r\t\t\t[self notify: \'the #waitForCommandOutputArray: method requires CommandShell\'.\r\t\t\t^ Array with: \'\' with: \'\' with: nil]\r',			#stamp : 'dtl 7/12/2003 12:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '773' ],		#self : OmReference [ '774' ],		#time : DateAndTime [ '2018-02-22T14:01:11.74179-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WindowsProcess class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for\r\tthe Squeak VM running on the current platform."\r\r\t^ self isWindows\r',			#stamp : 'dtl 8/30/2003 17:50',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '774' ],		#self : OmReference [ '775' ],		#time : DateAndTime [ '2018-02-22T14:01:11.742733-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #activeHandles,			#protocol : #'child process management',			#sourceCode : 'activeHandles\r\t"Answer an Array of handles for all children that are believed to be running."\r\r\t^ (self activeChildren collect: [:c | c handle]) asArray\r',			#stamp : 'dtl 2/26/2002 16:08',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '775' ],		#self : OmReference [ '776' ],		#time : DateAndTime [ '2018-02-22T14:01:11.743345-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #closeConsole,			#protocol : #console,			#sourceCode : 'closeConsole\r\t"Close the console. The standard input, output and error streams will no longer be available."\r\r\t"OSProcess thisOSProcess closeConsole"\r\r\tself processAccessor primFreeConsole.\r\tself refreshFromProcessAccessor\r',			#stamp : 'dtl 9/7/2002 20:57',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '776' ],		#self : OmReference [ '777' ],		#time : DateAndTime [ '2018-02-22T14:01:11.743902-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'child process creation',			#sourceCode : 'command: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in\r\tthe standard C library, except that aCommandString runs asynchronously\r\tin a child process. Answer an instance of ExternalWindowsProcess which\r\tis a proxy for the new Windows process."\r\r\t"OSProcess command: \'SOL\'"\r\r\t^ ExternalWindowsOSProcess command: aCommandString\r',			#stamp : 'dtl 2/28/2002 14:48',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '777' ],		#self : OmReference [ '778' ],		#time : DateAndTime [ '2018-02-22T14:01:11.744538-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #environment,			#protocol : #accessing,			#sourceCode : 'environment\r\r\t^ environment\r',			#stamp : 'dtl 2/22/2002 22:02',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '778' ],		#self : OmReference [ '779' ],		#time : DateAndTime [ '2018-02-22T14:01:11.745189-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'environmentAt:',			#protocol : #environment,			#sourceCode : 'environmentAt: aSymbol\r\t"Answer an environment variable for the external OS process, and update the dictionary\r\tin this Smalltalk object."\r\r\t^ environment at: aSymbol asSymbol ifAbsent: []\r',			#stamp : 'DamienCassou 5/3/2012 11:53',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '779' ],		#self : OmReference [ '780' ],		#time : DateAndTime [ '2018-02-22T14:01:11.745818-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'environmentAt:put:',			#protocol : #environment,			#sourceCode : 'environmentAt: aSymbol put: aString\r\t"Set an environment variable for the external OS process, and update the dictionary in\r\tthis Smalltalk object."\r\r\t| s |\r\tself initialize.\r\ts := self processAccessor environmentAt: aSymbol put: aString.\r\ts ifNotNil: [ self environment at: aSymbol asSymbol put: aString ].\r\t^ s\r\r',			#stamp : 'DamienCassou 5/3/2012 11:53',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '780' ],		#self : OmReference [ '781' ],		#time : DateAndTime [ '2018-02-22T14:01:11.746352-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'forkAndExec:arguments:environment:descriptors:',			#protocol : #'child process creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams\r\t"Use my processAccessor to call vfork() and execve() and create a\r\tnew child task. Answer a proxy for the new task, an instance of\r\tExternalWindowsProcess."\r\r\tself notYetImplemented\r',			#stamp : 'dtl 10/18/2001 20:19',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '781' ],		#self : OmReference [ '782' ],		#time : DateAndTime [ '2018-02-22T14:01:11.746911-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #getCwd,			#protocol : #environment,			#sourceCode : 'getCwd\r\t"Get current working directory. If this cannot be obtained from the\r\tenvironment, answer a reasonable default."\r\r\t"OSProcess thisOSProcess getCwd"\r\r\t^ self processAccessor primGetCurrentWorkingDirectory\r\t\tifNil: [OSProcess defaultPathString]\r\r\r',			#stamp : 'dtl 1/24/2013 19:23',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '782' ],		#self : OmReference [ '783' ],		#time : DateAndTime [ '2018-02-22T14:01:11.747488-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #getEnvironmentDictionary,			#protocol : #private,			#sourceCode : 'getEnvironmentDictionary\r\t"Answer an environment dictionary using an OSProcessAccessor."\r\r\t"OSProcess thisOSProcess getEnvironmentDictionary"\r\r\t| strings env |\r\tstrings := processAccessor primGetEnvironmentStrings.\r\tstrings isNil\r\t\tifTrue:\r\t\t\t[^ nil]\r\t\tifFalse:\r\t\t\t[env := Dictionary new.\r\t\t\tstrings do: [:s |\r\t\t\t\tenv at: (s copyUpTo: $=) asSymbol put: (s copyAfterLast: $=)].\r\t\t\t^ env]\r',			#stamp : 'dtl 2/22/2002 22:00',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '783' ],		#self : OmReference [ '784' ],		#time : DateAndTime [ '2018-02-22T14:01:11.748444-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Set my instance variables to reflect the state of the OS process in which \r\tthis Smalltalk virtual machine is executing. On Windows, we cannot rely\r\ton the pid to have changed when the VM is restarted, so use a one-shot\r\tfunction to determine if we are restarting the VM (as opposed to returning\r\tfrom an image save)."\r\r\tsuper initialize.\r\t(self processAccessor canAccessSystem not or: [processAccessor primOneShot]) ifTrue:\r\t\t["Restarting the VM in a new process"\r\t\tself resetThreads.\r\t\tself threads; mainThread.\r\t\tprocessHandle := nil.\r\t\tself processHandle].\r\tself refreshFromProcessAccessor\r',			#stamp : 'dtl 8/25/2010 20:49',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '784' ],		#self : OmReference [ '785' ],		#time : DateAndTime [ '2018-02-22T14:01:11.749007-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self class isWindows\r',			#stamp : 'dtl 8/30/2003 17:50',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '785' ],		#self : OmReference [ '786' ],		#time : DateAndTime [ '2018-02-22T14:01:11.749577-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #mainThread,			#protocol : #accessing,			#sourceCode : 'mainThread\r\t"The main thread for this OS process. The handle for this thread is a\r\tpseudo-handle, and cannot be used to close the main thread."\r\r\t^ mainThread ifNil: [mainThread := processAccessor getMainThread]',			#stamp : 'dtl 2/28/2002 07:15',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '786' ],		#self : OmReference [ '787' ],		#time : DateAndTime [ '2018-02-22T14:01:11.750122-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #openConsole,			#protocol : #console,			#sourceCode : 'openConsole\r\t"Open a console. This makes the standard input, output and error streams available."\r\r\t"OSProcess thisOSProcess openConsole"\r\r\tself processAccessor primAllocConsole.\r\tself refreshFromProcessAccessor\r',			#stamp : 'dtl 9/7/2002 20:57',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '787' ],		#self : OmReference [ '788' ],		#time : DateAndTime [ '2018-02-22T14:01:11.750673-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #path,			#protocol : #environment,			#sourceCode : 'path\r\t"Newer versions of Windows mixed case"\r\r\t^ self environment\r\t\tat: #PATH\r\t\tifAbsent: [environment\r\t\t\t\tat: #Path\r\t\t\t\tifAbsent: [\'\']]',			#stamp : 'dtl 9/25/2005 05:11',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '788' ],		#self : OmReference [ '789' ],		#time : DateAndTime [ '2018-02-22T14:01:11.751315-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #pid,			#protocol : #accessing,			#sourceCode : 'pid\r\r\t^ pid := self processAccessor primGetPid\r',			#stamp : 'dtl 2/22/2002 16:43',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '789' ],		#self : OmReference [ '790' ],		#time : DateAndTime [ '2018-02-22T14:01:11.752002-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #processHandle,			#protocol : #accessing,			#sourceCode : 'processHandle\r\t"The handle for this OS process. This is a pseudo-handle, a constant provided\r\tby Windows to represent the process. Note that the main thread handle is also\r\trepresented by a pseudo-handle."\r\r\t^ processHandle ifNil: [processHandle := self processAccessor primGetPidHandle]\r',			#stamp : 'dtl 2/28/2002 07:26',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '790' ],		#self : OmReference [ '791' ],		#time : DateAndTime [ '2018-02-22T14:01:11.752623-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #refreshFromProcessAccessor,			#protocol : #updating,			#sourceCode : 'refreshFromProcessAccessor\r\t"Set my instance variables to reflect the state of the OS process in which this Smalltalk\r\tvirtual machine is executing."\r\r\tsessionID := self processAccessor getSessionIdentifier.\r\tpid := processAccessor primGetPid.\r\tself setStdIn.\r\tself setStdOut.\r\tself setStdErr.\r\tenvironment := self getEnvironmentDictionary\r',			#stamp : 'dtl 9/7/2002 20:47',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '791' ],		#self : OmReference [ '792' ],		#time : DateAndTime [ '2018-02-22T14:01:11.753216-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'registerChildProcess:',			#protocol : #'child process management',			#sourceCode : 'registerChildProcess: anOSProcess\r\t"Register the external process and set an exit handler thread to signal when\r\tthe process exits."\r\r\tsuper registerChildProcess: anOSProcess.\r\tself threads add: self restartChildWatcherThread.\r\t^ anOSProcess\r',			#stamp : 'dtl 2/5/2015 20:06',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '792' ],		#self : OmReference [ '793' ],		#time : DateAndTime [ '2018-02-22T14:01:11.754117-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #resetThreads,			#protocol : #'initialize - release',			#sourceCode : 'resetThreads\r\t"If any cleanup is required, do it here."\r\r\tthreads := nil.\r\tmainThread := nil\r',			#stamp : 'dtl 2/28/2002 07:16',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '793' ],		#self : OmReference [ '794' ],		#time : DateAndTime [ '2018-02-22T14:01:11.754692-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #restartChildWatcherThread,			#protocol : #'child process management',			#sourceCode : 'restartChildWatcherThread\r\t"Set an exit handler thread to signal when the process exits."\r\r\r\t^ self processAccessor restartChildWatcherThread: self activeHandles\r',			#stamp : 'dtl 1/13/2007 09:49',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '794' ],		#self : OmReference [ '795' ],		#time : DateAndTime [ '2018-02-22T14:01:11.755252-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #setStdErr,			#protocol : #private,			#sourceCode : 'setStdErr\r\t"Reset to nil if the console has been closed"\r\r\t^ self processAccessor getStdErr isNil\r\t\tifTrue: [stdErr := nil]\r\t\tifFalse: [super setStdErr]\r',			#stamp : 'dtl 9/7/2002 20:55',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '795' ],		#self : OmReference [ '796' ],		#time : DateAndTime [ '2018-02-22T14:01:11.755818-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #setStdIn,			#protocol : #private,			#sourceCode : 'setStdIn\r\t"Reset to nil if the console has been closed"\r\r\t^ self processAccessor getStdIn isNil\r\t\tifTrue: [stdIn := nil]\r\t\tifFalse: [super setStdIn]\r',			#stamp : 'dtl 9/7/2002 20:55',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '796' ],		#self : OmReference [ '797' ],		#time : DateAndTime [ '2018-02-22T14:01:11.75637-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #setStdOut,			#protocol : #private,			#sourceCode : 'setStdOut\r\t"Reset to nil if the console has been closed"\r\r\t^ self processAccessor getStdOut isNil\r\t\tifTrue: [stdOut := nil]\r\t\tifFalse: [super setStdOut]\r',			#stamp : 'dtl 9/7/2002 20:55',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '797' ],		#self : OmReference [ '798' ],		#time : DateAndTime [ '2018-02-22T14:01:11.75692-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #threads,			#protocol : #accessing,			#sourceCode : 'threads\r\t"One or more threads of execution within the OS process. The main\r\tthread for the process is held by the mainThread variable and is not\r\tincluded in this collection. Threads are created to wait for the exit of\r\tchild processes, so this collection grows as child processes are created."\r\r\t^ threads ifNil: [threads := OrderedCollection new]\r',			#stamp : 'dtl 2/28/2002 08:04',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '798' ],		#self : OmReference [ '799' ],		#time : DateAndTime [ '2018-02-22T14:01:11.757551-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\t"Framework to update some or all of the instance variables based on external events,\r\tsuch as receipt of a sigchd signal when a child process exits."\r\r\t(aParameter == (self processAccessor)) ifTrue:\r\t\t[^ self refreshFromProcessAccessor; yourself].\r\t(aParameter == #pid) ifTrue:\r\t\t[^ self resetChildProcessDictionary. "Forget children of prior process"].\r\t(aParameter == #childProcessStatus) ifTrue:\r\t\t[^ self updateActiveChildren; changed; yourself].\r\t(aParameter == #startUp) ifTrue:\r\t\t[^ self update: #pid].\r\taParameter == #invalidProcessAccessor ifTrue:\r\t\t[processAccessor := processAccessor ifNotNil: [processAccessor removeDependent: self. nil].\r\t\t^ self].\r\tself error: \'Unexpected update parameter\'',			#stamp : 'dtl 2/25/2002 08:29',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '799' ],		#self : OmReference [ '800' ],		#time : DateAndTime [ '2018-02-22T14:01:11.758219-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #updateActiveChildren,			#protocol : #'child process management',			#sourceCode : 'updateActiveChildren\r\r\tsuper updateActiveChildren.\r\tself restartChildWatcherThread\r',			#stamp : 'dtl 2/28/2002 08:17',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '800' ],		#self : OmReference [ '801' ],		#time : DateAndTime [ '2018-02-22T14:01:11.759228-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsProcess,				#isMetaSide : false			},			#name : #'waitForCommand:',			#protocol : #'child process creation',			#sourceCode : 'waitForCommand: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library.\r\tThe active Smalltalk process waits for completion of the external command process. This just\r\tuses a simple polling loop, which is not very elegant but works well enough for most purposes."\r\r\t| proc d |\r\td := Delay forMilliseconds: 50.\r\tproc := self command: aCommandString.\r\t\r\tproc ifNil: [self class noAccessorAvailable].\r\t[proc runState == #complete] whileFalse: [d wait].\r\t^ proc\r',			#stamp : 'dtl 11/24/2008 17:47',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '801' ],		#self : OmReference [ '802' ],		#time : DateAndTime [ '2018-02-22T14:01:11.75982-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcessExitStatus class',				#isMetaSide : true			},			#name : #'for:',			#protocol : #'instance creation',			#sourceCode : 'for: integerValue\r\r\t^self new for: integerValue\r',			#stamp : 'dtl 8/22/2012 21:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '802' ],		#self : OmReference [ '803' ],		#time : DateAndTime [ '2018-02-22T14:01:11.760462-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #exitStatus,			#protocol : #accessing,			#sourceCode : 'exitStatus\r\tself isExited ifTrue: [^self statusIfExited].\r\tself isSignaled ifTrue: [^self statusIfSignaled].\r\tself isStopped ifTrue: [^self statusIfStopped].\r\tself notify: \'cannot decode exit status \', intValue asString.\r\t^intValue',			#stamp : 'dtl 8/22/2012 23:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '803' ],		#self : OmReference [ '804' ],		#time : DateAndTime [ '2018-02-22T14:01:11.761004-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #'for:',			#protocol : #initialize-release,			#sourceCode : 'for: anInteger\r\tintValue := anInteger',			#stamp : 'dtl 8/22/2012 23:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '804' ],		#self : OmReference [ '805' ],		#time : DateAndTime [ '2018-02-22T14:01:11.761559-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #isExited,			#protocol : #testing,			#sourceCode : 'isExited\r\t"\r\t/* Nonzero if STATUS indicates normal termination.  */\r\t#define __WIFEXITED(status)     (__WTERMSIG(status) == 0)\r\t"\r\t^ self statusIfSignaled = 0\r\r',			#stamp : 'dtl 8/22/2012 22:32',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '805' ],		#self : OmReference [ '806' ],		#time : DateAndTime [ '2018-02-22T14:01:11.762152-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #isSignaled,			#protocol : #testing,			#sourceCode : 'isSignaled\r\t"\r\t/* Nonzero if STATUS indicates termination by a signal.  */\r\t#define __WIFSIGNALED(status) \\\r\t  (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)\r\t"\r\t^(((intValue bitAnd: 16r7F) + 1) >> 1) > 0\r\r',			#stamp : 'dtl 8/22/2012 23:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '806' ],		#self : OmReference [ '807' ],		#time : DateAndTime [ '2018-02-22T14:01:11.762713-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #isStopped,			#protocol : #testing,			#sourceCode : 'isStopped\r\t"\r\t/* Nonzero if STATUS indicates the child is stopped.  */\r\t#define __WIFSTOPPED(status)    (((status) & 0xff) == 0x7f)\r\t"\r\t^(intValue bitAnd: 16rFF) = 16r7F\r\r',			#stamp : 'dtl 8/22/2012 23:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '807' ],		#self : OmReference [ '808' ],		#time : DateAndTime [ '2018-02-22T14:01:11.76326-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #isSuccess,			#protocol : #testing,			#sourceCode : 'isSuccess\r\t^self exitStatus = 0',			#stamp : 'dtl 8/22/2012 23:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '808' ],		#self : OmReference [ '809' ],		#time : DateAndTime [ '2018-02-22T14:01:11.763859-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tself isExited\r\t\tifTrue: [aStream nextPutAll: \'normal termination with status \';\r\t\t\t\t nextPutAll: self statusIfExited asString].\r\tself isSignaled\r\t\tifTrue: [aStream nextPutAll: \'exit due to signal \';\r\t\t\t\tnextPutAll: self statusIfSignaled asString].\r\tself isStopped\r\t\tifTrue: [aStream nextPutAll: \'stopped due to signal \';\r\t\t\t\tnextPutAll: self statusIfStopped].',			#stamp : 'dtl 8/22/2012 23:18',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '809' ],		#self : OmReference [ '810' ],		#time : DateAndTime [ '2018-02-22T14:01:11.76487-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #statusIfExited,			#protocol : #accessing,			#sourceCode : 'statusIfExited\r\t"\r\t/* If WIFEXITED(STATUS), the low-order 8 bits of the status.  */\r\t#define __WEXITSTATUS(status)   (((status) & 0xff00) >> 8)\r\t"\r\t^(intValue bitAnd: 16rFF00) >> 8',			#stamp : 'dtl 8/22/2012 23:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '810' ],		#self : OmReference [ '811' ],		#time : DateAndTime [ '2018-02-22T14:01:11.76553-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #statusIfSignaled,			#protocol : #accessing,			#sourceCode : 'statusIfSignaled\r\t"\r\t/* If WIFSIGNALED(STATUS), the terminating signal.  */\r\t#define __WTERMSIG(status)      ((status) & 0x7f)\r\t"\r\t^intValue bitAnd: 16r7F',			#stamp : 'dtl 8/22/2012 23:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '811' ],		#self : OmReference [ '812' ],		#time : DateAndTime [ '2018-02-22T14:01:11.766136-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #statusIfStopped,			#protocol : #accessing,			#sourceCode : 'statusIfStopped\r\t"\r\t/* If WIFSTOPPED(STATUS), the signal that stopped the child.  */\r\t#define __WSTOPSIG(status)      __WEXITSTATUS(status)\r\t"\r\t^self statusIfExited',			#stamp : 'dtl 8/22/2012 22:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '812' ],		#self : OmReference [ '813' ],		#time : DateAndTime [ '2018-02-22T14:01:11.76668-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessExitStatus,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^intValue',			#stamp : 'dtl 8/22/2012 23:11',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '813' ],		#self : OmReference [ '814' ],		#time : DateAndTime [ '2018-02-22T14:01:11.767249-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WindowsThread class',				#isMetaSide : true			},			#name : #'threadID:handle:',			#protocol : #'instance creation',			#sourceCode : 'threadID: anInteger handle: aHandleObject\r\r\t^ super new threadID: anInteger; handle: aHandleObject; initialize\r',			#stamp : 'dtl 2/25/2002 07:00',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '814' ],		#self : OmReference [ '815' ],		#time : DateAndTime [ '2018-02-22T14:01:11.767851-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WindowsThread class',				#isMetaSide : true			},			#name : #'threadID:handle:running:',			#protocol : #'instance creation',			#sourceCode : 'threadID: anInteger handle: aHandleObject running: trueOrFalse\r\r\t| thread |\r\tthread := super new threadID: anInteger; handle: aHandleObject; initialize.\r\ttrueOrFalse ifTrue: [thread running].\r\t^ thread\r',			#stamp : 'dtl 2/26/2002 07:17',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '815' ],		#self : OmReference [ '816' ],		#time : DateAndTime [ '2018-02-22T14:01:11.768438-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #closeHandle,			#protocol : #'initialize - release',			#sourceCode : 'closeHandle\r\t"Clean up after thread exits."\r\r\tOSProcess accessor primCloseHandle: handle.\r\thandle := nil\r',			#stamp : 'dtl 2/25/2002 07:38',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '816' ],		#self : OmReference [ '817' ],		#time : DateAndTime [ '2018-02-22T14:01:11.768985-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #complete,			#protocol : #'setting run state',			#sourceCode : 'complete\r\t"Thread has exited."\r\r\tself closeHandle; runState: #complete\r',			#stamp : 'dtl 2/26/2002 10:45',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '817' ],		#self : OmReference [ '818' ],		#time : DateAndTime [ '2018-02-22T14:01:11.769516-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #handle,			#protocol : #accessing,			#sourceCode : 'handle\r\t"A Windows HANDLE represented as a ByteArray."\r\r\t^ handle',			#stamp : 'dtl 2/25/2002 06:39',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '818' ],		#self : OmReference [ '819' ],		#time : DateAndTime [ '2018-02-22T14:01:11.770425-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #'handle:',			#protocol : #accessing,			#sourceCode : 'handle: aHandleObject\r\t"A Windows HANDLE represented as a ByteArray."\r\r\thandle := aHandleObject',			#stamp : 'dtl 2/25/2002 06:38',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '819' ],		#self : OmReference [ '820' ],		#time : DateAndTime [ '2018-02-22T14:01:11.771083-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\r\tself runState',			#stamp : 'dtl 2/25/2002 07:03',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '820' ],		#self : OmReference [ '821' ],		#time : DateAndTime [ '2018-02-22T14:01:11.771785-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #isComplete,			#protocol : #testing,			#sourceCode : 'isComplete\r\r\t^ self runState == #complete',			#stamp : 'dtl 2/25/2002 06:37',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '821' ],		#self : OmReference [ '822' ],		#time : DateAndTime [ '2018-02-22T14:01:11.772432-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #isRunning,			#protocol : #testing,			#sourceCode : 'isRunning\r\r\t^ self runState == #running',			#stamp : 'dtl 2/25/2002 06:37',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '822' ],		#self : OmReference [ '823' ],		#time : DateAndTime [ '2018-02-22T14:01:11.773014-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\taStream nextPutAll: \' (\', self threadID printString, \', \', self runState, \')\'\r',			#stamp : 'dtl 2/27/2002 12:02',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '823' ],		#self : OmReference [ '824' ],		#time : DateAndTime [ '2018-02-22T14:01:11.773556-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #runState,			#protocol : #accessing,			#sourceCode : 'runState\r\r\t^ runState ifNil: [self unknownRunState]\r',			#stamp : 'dtl 1/25/2004 11:01',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '824' ],		#self : OmReference [ '825' ],		#time : DateAndTime [ '2018-02-22T14:01:11.774236-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #'runState:',			#protocol : #accessing,			#sourceCode : 'runState: aSymbol\r\r\trunState := aSymbol\r',			#stamp : 'dtl 2/25/2002 07:02',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '825' ],		#self : OmReference [ '826' ],		#time : DateAndTime [ '2018-02-22T14:01:11.774779-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #running,			#protocol : #'setting run state',			#sourceCode : 'running\r\t"Thread is scheduled to run."\r\r\tself runState: #running\r',			#stamp : 'dtl 2/25/2002 06:36',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '826' ],		#self : OmReference [ '827' ],		#time : DateAndTime [ '2018-02-22T14:01:11.775337-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #terminate,			#protocol : #'initialize - release',			#sourceCode : 'terminate\r\t"Force an exit. No cleanup is performed. Use with caution for a thread which\r\tis (for example) manipulating a mutex."\r\r\t(self isRunning and: [self handle notNil]) ifTrue:\r\t\t[OSProcess accessor primTerminateThread: self handle.\r\t\tself complete]\r',			#stamp : 'dtl 2/27/2002 11:35',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '827' ],		#self : OmReference [ '828' ],		#time : DateAndTime [ '2018-02-22T14:01:11.776239-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #threadID,			#protocol : #accessing,			#sourceCode : 'threadID\r\t"A unique identifier for the thread."\r\r\t^ threadID\r',			#stamp : 'dtl 2/25/2002 06:40',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '828' ],		#self : OmReference [ '829' ],		#time : DateAndTime [ '2018-02-22T14:01:11.77678-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #'threadID:',			#protocol : #accessing,			#sourceCode : 'threadID: anInteger\r\t"A unique identifier for the thread."\r\r\tthreadID := anInteger\r',			#stamp : 'dtl 2/25/2002 06:40',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '829' ],		#self : OmReference [ '830' ],		#time : DateAndTime [ '2018-02-22T14:01:11.777316-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsThread,				#isMetaSide : false			},			#name : #unknownRunState,			#protocol : #'setting run state',			#sourceCode : 'unknownRunState\r\t"Unable to determine the current run state of the thread, possibly because\r\tthis is a stale reference to a thread which no longer exists."\r\r\tself runState: #unknownRunState\r',			#stamp : 'dtl 2/25/2002 06:36',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '830' ],		#self : OmReference [ '831' ],		#time : DateAndTime [ '2018-02-22T14:01:11.777988-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #aioPluginPresent,			#protocol : #testing,			#sourceCode : 'aioPluginPresent\r\t"Answer true if an AIO plugin is available. The value of AioPluginPresent\r\tis cleared at startup time, and is reestablished once for each Squeak session.\r\tSee initializeAioPluginPresent to initialize after an image startup if warning\r\tdialog is not desired."\r\r\t"AioEventHandler aioPluginPresent"\r\r\t^ AioPluginPresent\r\t\tifNil: [AioPluginPresent := self basicNew primAioModuleVersionString notNil.\r\t\t\tAioPluginPresent ifFalse:\r\t\t\t\t[OSProcess trace: \' AioPlugin not present, AioEventHandler will use polling input\'].\r\t\t\t^ AioPluginPresent]',			#stamp : 'dtl 12/18/2016 18:06',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '831' ],		#self : OmReference [ '832' ],		#time : DateAndTime [ '2018-02-22T14:01:11.778715-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'for:',			#protocol : #'instance creation',			#sourceCode : 'for: aSocketOrFileStream\r\r\t"self for: SourceFiles first"\r\t"self for: Socket new"\r\t"self for: OSProcess thisOSProcess stdIn"\r\r\t^ self new for: aSocketOrFileStream',			#stamp : 'dtl 7/5/2003 09:16',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '832' ],		#self : OmReference [ '833' ],		#time : DateAndTime [ '2018-02-22T14:01:11.779352-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'for:exceptions:readEvents:writeEvents:',			#protocol : #'instance creation',			#sourceCode : 'for: aSocketOrFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\t"Flag parameters are true or false, indicating types of events to be handled."\r\r\t^ self new for: aSocketOrFileStream\r\t\t\texceptions: exceptionEventFlag\r\t\t\treadEvents: readEventFlag\r\t\t\twriteEvents: writeEventFlag',			#stamp : 'dtl 7/5/2003 11:14',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '833' ],		#self : OmReference [ '834' ],		#time : DateAndTime [ '2018-02-22T14:01:11.779906-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'forFileStream:',			#protocol : #'instance creation',			#sourceCode : 'forFileStream: aFileStream\r\r\t"self forFileStream: SourceFiles first"\r\r\t^ self new forFileStream: aFileStream\r\r',			#stamp : 'dtl 7/4/2003 18:47',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '834' ],		#self : OmReference [ '835' ],		#time : DateAndTime [ '2018-02-22T14:01:11.780465-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'forFileStream:exceptions:readEvents:writeEvents:',			#protocol : #'instance creation',			#sourceCode : 'forFileStream: aFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\t"Flag parameters are true or false, indicating types of events to be handled."\r\r\t"self forFileStream: SourceFiles first"\r\r\t^ self new forFileStream: aFileStream\r\t\t\texceptions: exceptionEventFlag\r\t\t\treadEvents: readEventFlag\r\t\t\twriteEvents: writeEventFlag\r',			#stamp : 'dtl 7/5/2003 11:14',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '835' ],		#self : OmReference [ '836' ],		#time : DateAndTime [ '2018-02-22T14:01:11.781087-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'forSocket:',			#protocol : #'instance creation',			#sourceCode : 'forSocket: aSocket\r\r\t"self forSocket: Socket new"\r\r\t^ self new forSocket: aSocket\r\r',			#stamp : 'dtl 7/4/2003 19:01',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '836' ],		#self : OmReference [ '837' ],		#time : DateAndTime [ '2018-02-22T14:01:11.78231-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'forSocket:exceptions:readEvents:writeEvents:',			#protocol : #'instance creation',			#sourceCode : 'forSocket: aSocket exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\t"Flag parameters are true or false, indicating types of events to be handled."\r\r\t"self forSocket: Socket new"\r\r\t^ self new forSocket: aSocket\r\t\t\texceptions: exceptionEventFlag\r\t\t\treadEvents: readEventFlag\r\t\t\twriteEvents: writeEventFlag\r',			#stamp : 'dtl 7/5/2003 11:14',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '837' ],		#self : OmReference [ '838' ],		#time : DateAndTime [ '2018-02-22T14:01:11.784698-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #initializeAioPluginPresent,			#protocol : #testing,			#sourceCode : 'initializeAioPluginPresent\r\t"Initialize the AioPluginPresent flag silently without invoking a warning\r\tif the plugin is not present, and answer the value of the flag. Send this\r\tto prevent a warning dialog from being presented after image startup,\r\tas may be preferred if the image is to be run headless."\r\r\t"AioEventHandler initializeAioPluginPresent"\r\r\t^ AioPluginPresent\r\t\tifNil: [AioPluginPresent := self basicNew primAioModuleVersionString notNil]',			#stamp : 'dtl 10/3/2012 20:24',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '838' ],		#self : OmReference [ '839' ],		#time : DateAndTime [ '2018-02-22T14:01:11.785994-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AioEventHandler class',				#isMetaSide : true			},			#name : #'startUp:',			#protocol : #'system startup',			#sourceCode : 'startUp: resuming\r\t"Clear the value of AioPluginPresent. The value will be set once when\r\t#aioPluginPresent is first sent, and will remain set to that value for the\r\tduration of this Squeak session.\r\tThis method is called by ThisOSProcess>>startUp. AioEventHandler does\r\tnot need to be registered in the system startup list."\r\r\tresuming ifTrue: [AioPluginPresent := nil]\r',			#stamp : 'dtl 11/25/2006 10:04',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '839' ],		#self : OmReference [ '840' ],		#time : DateAndTime [ '2018-02-22T14:01:11.786827-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'aioDisable:',			#protocol : #'aio event forwarding',			#sourceCode : 'aioDisable: ioDescriptor\r\t"Definitively disable asynchronous event notification for a descriptor. The ioDescriptor\r\tparameter is an object representing a low level OS file or socket descriptor."\r\r\t^ self primAioDisable: ioDescriptor\r',			#stamp : 'dtl 7/4/2003 19:10',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '840' ],		#self : OmReference [ '841' ],		#time : DateAndTime [ '2018-02-22T14:01:11.787473-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'aioEnable:forSemaphore:externalObject:',			#protocol : #'aio event forwarding',			#sourceCode : 'aioEnable: ioDescriptor forSemaphore: semaphoreIndex externalObject: trueOrFalse\r\t"Enable asynchronous notification for a descriptor. Send this message one time\r\tprior to beginning event handling for ioDescriptor. The ioDescriptor parameter is an\r\tobject representing a low level OS file or socket descriptor. The semaphoreIndex is\r\tthe index of a Semaphore to be notified, and the third parameter is a flag indicating\r\tthat ioDescriptor represents an external object which should not be closed on termination\r\tof aio handling."\r\r\t^ (self primAioEnable: ioDescriptor forSemaphore: semaphoreIndex externalObject: trueOrFalse)\r\t\t\tifNil: [self notify: \'aio event forwarding not supported\']\r',			#stamp : 'dtl 9/1/2003 16:58',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '841' ],		#self : OmReference [ '842' ],		#time : DateAndTime [ '2018-02-22T14:01:11.788076-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'aioHandle:exceptionEvents:readEvents:writeEvents:',			#protocol : #'aio event forwarding',			#sourceCode : 'aioHandle: ioDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag\r\t"Enable asynchronous notification for a descriptor. Send this message one time to\r\tenable a single event notification. Send it again after each event has been received\r\tand handled (in other words, the process which waits on the event semaphore is\r\tresponsible for re-enabling the handler by calling this method each time an event\r\tis handled). The ioDescriptor parameter is an object representing a low level OS file or\r\tsocket descriptor. The remaining three parameters are Boolean flags representing the\r\ttypes of events for which notification is being requested: handle exceptions, handle\r\tfor read, and handle for write. It is common to watch for read events and exception\r\tevents, or to watch for write events and exception events."\r\r\t^ self primAioHandle: ioDescriptor\r\t\texceptionEvents: exceptionFlag\r\t\treadEvents: readFlag\r\t\twriteEvents: writeFlag\r',			#stamp : 'dtl 7/4/2003 18:52',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '842' ],		#self : OmReference [ '843' ],		#time : DateAndTime [ '2018-02-22T14:01:11.788684-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'aioSuspend:exceptionEvents:readEvents:writeEvents:',			#protocol : #'aio event forwarding',			#sourceCode : 'aioSuspend: ioDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag\r\r\t"Temporarily suspend asynchronous event notification for a descriptor. The\r\tioDescriptor parameter is an object representing a low level OS file or socket\r\tdescriptor. The remaining three parameters are Boolean flags representing the\r\ttypes of events for which notification is being requested: handle exceptions,\r\thandle for read, and handle for write."\r\r\t^ self primAioSuspend: ioDescriptor\r\t\texceptionEvents: exceptionFlag\r\t\treadEvents: readFlag\r\t\twriteEvents: writeFlag\r',			#stamp : 'dtl 7/4/2003 19:10',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '843' ],		#self : OmReference [ '844' ],		#time : DateAndTime [ '2018-02-22T14:01:11.789286-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\t"When the FileStream or Socket handled by this aio handler is closed,\r\tit should send #close to this handler."\r\r\t| p |\r\tself breakDependents.\r\tSmalltalk unregisterExternalObject: semaphore.\r\tself aioDisable: self descriptor.\r\tsemaphore := nil.\r\tsemaIndex := nil.\r\tp := handlerProc.\r\thandlerProc := nil.\r\tp ifNotNil: [p terminate] "p may be the active process, do this last"\r',			#stamp : 'dtl 8/20/2006 18:43',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '844' ],		#self : OmReference [ '845' ],		#time : DateAndTime [ '2018-02-22T14:01:11.789871-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #defaultHandlerProcess,			#protocol : #'handler process',			#sourceCode : 'defaultHandlerProcess\r\t"Generate a #changed notification whenever an external aio event occurs"\r\r\t^ self handleReadAndExceptionsEvents',			#stamp : 'dtl 7/5/2003 10:50',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '845' ],		#self : OmReference [ '846' ],		#time : DateAndTime [ '2018-02-22T14:01:11.790881-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #descriptor,			#protocol : #accessing,			#sourceCode : 'descriptor\r\r\t^ descriptor',			#stamp : 'dtl 3/30/2003 19:05',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '846' ],		#self : OmReference [ '847' ],		#time : DateAndTime [ '2018-02-22T14:01:11.791479-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'descriptor:',			#protocol : #accessing,			#sourceCode : 'descriptor: aLowLevelIODescriptor\r\r\tdescriptor := aLowLevelIODescriptor',			#stamp : 'dtl 3/30/2003 19:05',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '847' ],		#self : OmReference [ '848' ],		#time : DateAndTime [ '2018-02-22T14:01:11.792092-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\t"Note: An aio handler will not be garbage collected until the semaphore\r\tis unregistered. When the FileStream or Socket handled by this aio\r\thandler is closed, it should send #close to this handler."\r\r\tself close\r',			#stamp : 'dtl 9/4/2003 06:54',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '848' ],		#self : OmReference [ '849' ],		#time : DateAndTime [ '2018-02-22T14:01:11.792847-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'for:',			#protocol : #initialize-release,			#sourceCode : 'for: aSocketOrFileStream\r\t"Answer an event handler for any kind of IO stream that can be associated\r\twith an OS handle for aio events. Currently, subclasses of FileStream and\r\tSocket can have aio event handlers."\r\r\t(aSocketOrFileStream isKindOf: Socket)\r\t\tifTrue: [^ self forSocket: aSocketOrFileStream].\r\t(aSocketOrFileStream isKindOf: FileStream)\r\t\tifTrue: [^ self forFileStream: aSocketOrFileStream].\r\tself error: \'expected a FileStream or Socket subclass\'',			#stamp : 'dtl 7/5/2003 09:15',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '849' ],		#self : OmReference [ '850' ],		#time : DateAndTime [ '2018-02-22T14:01:11.793526-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'for:exceptions:readEvents:writeEvents:',			#protocol : #initialize-release,			#sourceCode : 'for: aSocketOrFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\t"Answer an event handler for any kind of IO stream that can be associated\r\twith an OS handle for aio events. Currently, subclasses of FileStream and\r\tSocket can have aio event handlers."\r\r\t(aSocketOrFileStream isKindOf: Socket)\r\t\tifTrue: [^ self forSocket: aSocketOrFileStream\r\t\t\t\t\texceptions: exceptionEventFlag\r\t\t\t\t\treadEvents: readEventFlag\r\t\t\t\t\twriteEvents: writeEventFlag].\r\t(aSocketOrFileStream isKindOf: FileStream)\r\t\tifTrue: [^ self forFileStream: aSocketOrFileStream\r\t\t\t\t\texceptions: exceptionEventFlag\r\t\t\t\t\treadEvents: readEventFlag\r\t\t\t\t\twriteEvents: writeEventFlag].\r\tself error: \'expected a FileStream or Socket subclass\'',			#stamp : 'dtl 7/5/2003 11:03',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '850' ],		#self : OmReference [ '851' ],		#time : DateAndTime [ '2018-02-22T14:01:11.794129-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'forFileStream:',			#protocol : #initialize-release,			#sourceCode : 'forFileStream: aFileStream\r\r\tself descriptor: (self handleForFile: aFileStream).\r\tself setDefaultEventMask.\r',			#stamp : 'dtl 7/9/2005 14:00',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '851' ],		#self : OmReference [ '852' ],		#time : DateAndTime [ '2018-02-22T14:01:11.794713-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'forFileStream:exceptions:readEvents:writeEvents:',			#protocol : #initialize-release,			#sourceCode : 'forFileStream: aFileStream exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\r\tself descriptor: (self handleForFile: aFileStream).\r\tself initializeForExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\r',			#stamp : 'dtl 7/5/2003 11:01',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '852' ],		#self : OmReference [ '853' ],		#time : DateAndTime [ '2018-02-22T14:01:11.795312-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'forSocket:',			#protocol : #initialize-release,			#sourceCode : 'forSocket: aSocket\r\t"Any existing event handling for aSocket will be disabled. Note that this\r\twill make the socket useless for any applications that expect the prior\r\tevent handling behavior."\r\r\tself descriptor: (self handleForSocket: aSocket).\r\tself aioDisable: self descriptor.\r\tself setDefaultEventMask.\r',			#stamp : 'dtl 7/9/2005 14:00',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '853' ],		#self : OmReference [ '854' ],		#time : DateAndTime [ '2018-02-22T14:01:11.795922-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'forSocket:exceptions:readEvents:writeEvents:',			#protocol : #initialize-release,			#sourceCode : 'forSocket: aSocket exceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\t"Any existing event handling for aSocket will be disabled. Note that this\r\twill make the socket useless for any applications that expect the prior\r\tevent handling behavior."\r\r\tself descriptor: (self handleForSocket: aSocket).\r\tself aioDisable: self descriptor.\r\tself initializeForExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r',			#stamp : 'dtl 7/5/2003 12:46',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '854' ],		#self : OmReference [ '855' ],		#time : DateAndTime [ '2018-02-22T14:01:11.797013-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'handleExceptions:readEvents:writeEvents:',			#protocol : #'handler process',			#sourceCode : 'handleExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\t"Generate a #changed notification whenever the requested type of external aio event occurs."\r\r\t| p sema handler |\r\tsema := Semaphore new.\r\thandler := [[self hasValidHandler] whileTrue:\r\t\t[self aioHandle: self descriptor\r\t\t\texceptionEvents: exceptionEventFlag\r\t\t\treadEvents: readEventFlag\r\t\t\twriteEvents: writeEventFlag.\r\t\tsema signal. "event handler is ready"\r\t\tself semaphore wait.\r\t\tself changed]].\r\tp := handler forkAt: Processor userBackgroundPriority.\r\tsema wait. "until process has been started and events are being handled"\r\t^p',			#stamp : 'dtl 11/12/2011 21:25',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '855' ],		#self : OmReference [ '856' ],		#time : DateAndTime [ '2018-02-22T14:01:11.79797-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'handleForFile:',			#protocol : #private,			#sourceCode : 'handleForFile: aFileStream\r\r\t"self new handleForFile: SourceFiles first"\r\r\t| ioHandle |\r\tioHandle := self useIOHandle\r\t\tifTrue: [aFileStream ioHandle]\r\t\tifFalse: [aFileStream fileID].\r\t^ self primOSFileHandle: ioHandle\r',			#stamp : 'dtl 9/4/2003 06:40',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '856' ],		#self : OmReference [ '857' ],		#time : DateAndTime [ '2018-02-22T14:01:11.799058-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'handleForSocket:',			#protocol : #private,			#sourceCode : 'handleForSocket: aSocket\r\r\t"self new handleForSocket: Socket newTCP"\r\r\t| ioHandle |\r\tioHandle := self useIOHandle\r\t\tifTrue: [aSocket ioHandle]\r\t\tifFalse: [aSocket socketHandle].\r\t^ self primOSSocketHandle: ioHandle\r',			#stamp : 'dtl 7/4/2003 15:16',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '857' ],		#self : OmReference [ '858' ],		#time : DateAndTime [ '2018-02-22T14:01:11.799814-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #handleReadAndExceptionsEvents,			#protocol : #'handler process',			#sourceCode : 'handleReadAndExceptionsEvents\r\t"Generate a #changed notification whenever data is available for reading or an exception\r\toccurs on the external IO channel."\r\r\t^ self handleExceptions: true readEvents: true writeEvents: false\r',			#stamp : 'dtl 7/5/2003 10:49',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '858' ],		#self : OmReference [ '859' ],		#time : DateAndTime [ '2018-02-22T14:01:11.800421-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #handleReadEvents,			#protocol : #'handler process',			#sourceCode : 'handleReadEvents\r\t"Generate a #changed notification whenever data is available for reading"\r\r\t^ self handleExceptions: false readEvents: true writeEvents: false\r',			#stamp : 'dtl 7/5/2003 10:49',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '859' ],		#self : OmReference [ '860' ],		#time : DateAndTime [ '2018-02-22T14:01:11.801055-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #handlerProc,			#protocol : #accessing,			#sourceCode : 'handlerProc\r\r\t^ handlerProc',			#stamp : 'dtl 3/30/2003 19:04',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '860' ],		#self : OmReference [ '861' ],		#time : DateAndTime [ '2018-02-22T14:01:11.801664-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #hasValidHandler,			#protocol : #'handler process',			#sourceCode : 'hasValidHandler\r\t"True if the event handler is running, and if it refers to the correct external\r\tobject semaphore. For protection following an image restart."\r\r\t^ semaIndex notNil\r\t\tand: [Smalltalk externalObjects size >= semaIndex\r\t\t\tand: [(Smalltalk externalObjects at: semaIndex) == semaphore]]',			#stamp : 'dtl 4/23/2012 06:45',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '861' ],		#self : OmReference [ '862' ],		#time : DateAndTime [ '2018-02-22T14:01:11.802303-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'initializeForExceptions:readEvents:writeEvents:',			#protocol : #initialize-release,			#sourceCode : 'initializeForExceptions: exceptionEventFlag readEvents: readEventFlag writeEvents: writeEventFlag\r\r\tsemaphore := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: semaphore.\r\t([self aioEnable: self descriptor forSemaphore: self semaIndex externalObject: true]\r\t\ton: Warning\r\t\tdo: [:e |\r\t\t\tself close. "unregister the semaphore"\r\t\t\tself notify: e messageText. nil])\r\t\tifNotNil:\r\t\t\t[handlerProc := self\r\t\t\t\thandleExceptions: exceptionEventFlag\r\t\t\t\treadEvents: readEventFlag\r\t\t\t\twriteEvents: writeEventFlag]\r',			#stamp : 'dtl 9/3/2010 16:48',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '862' ],		#self : OmReference [ '863' ],		#time : DateAndTime [ '2018-02-22T14:01:11.802996-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'primAioDisable:',			#protocol : #'primitive access',			#sourceCode : 'primAioDisable: aDescriptor\r\t"Definitively disable asynchronous event notification for a descriptor. The descriptor\r\tparameter is an object representing a low level OS file or socket descriptor."\r\r\t<primitive: \'primitiveAioDisable\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:53',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '863' ],		#self : OmReference [ '864' ],		#time : DateAndTime [ '2018-02-22T14:01:11.804079-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'primAioEnable:forSemaphore:externalObject:',			#protocol : #'primitive access',			#sourceCode : 'primAioEnable: aDescriptor forSemaphore: semaphoreIndex externalObject: trueOrFalse\r\t"Enable asynchronous notification for a descriptor. The descriptor parameter is an\r\tobject representing a low level OS file or socket descriptor. The semaphoreIndex\r\tis the index of a Semaphore to be notified, and the third parameter is a flag indicating\r\tthat descriptor represents an external object which should not be closed on termination\r\tof aio handling."\r\r\t<primitive: \'primitiveAioEnable\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:53',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '864' ],		#self : OmReference [ '865' ],		#time : DateAndTime [ '2018-02-22T14:01:11.804704-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'primAioHandle:exceptionEvents:readEvents:writeEvents:',			#protocol : #'primitive access',			#sourceCode : 'primAioHandle: aDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag\r\t"Enable asynchronous notification for a descriptor. The descriptor parameter is an\r\tobject representing a low level OS file or socket descriptor. The second parameter is\r\tthe index of a Semaphore to be notified, the remaining three parameters are Boolean\r\tflags representing the types of events for which notification is being requested:\r\thandle exceptions, handle for read, and handle for write. It is common to watch for\r\tread events and exception events, or to watch for write events and exception events."\r\r\t<primitive: \'primitiveAioHandle\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:53',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '865' ],		#self : OmReference [ '866' ],		#time : DateAndTime [ '2018-02-22T14:01:11.805404-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #primAioModuleName,			#protocol : #'primitive access',			#sourceCode : 'primAioModuleName\r\t"Module name of the installed plugin, if any."\r\r\t"self new primAioModuleName"\r\r\t<primitive: \'primitiveModuleName\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:26',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '866' ],		#self : OmReference [ '867' ],		#time : DateAndTime [ '2018-02-22T14:01:11.806096-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #primAioModuleVersionString,			#protocol : #'primitive access',			#sourceCode : 'primAioModuleVersionString\r\t"Module name of the installed plugin, if any."\r\r\t"self new primAioModuleVersionString"\r\r\t<primitive: \'primitiveVersionString\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:28',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '867' ],		#self : OmReference [ '868' ],		#time : DateAndTime [ '2018-02-22T14:01:11.806725-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'primAioSuspend:exceptionEvents:readEvents:writeEvents:',			#protocol : #'primitive access',			#sourceCode : 'primAioSuspend: aDescriptor exceptionEvents: exceptionFlag readEvents: readFlag writeEvents: writeFlag\r\t"Temporarily suspend asynchronous event notification for a descriptor. The\r\tdescriptor parameter is an object representing a low level OS file or socket\r\tdescriptor. The remaining three parameters are Boolean flags representing the\r\ttypes of events for which notification is being requested: handle exceptions,\r\thandle for read, and handle for write."\r\r\t<primitive: \'primitiveAioSuspend\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:54',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '868' ],		#self : OmReference [ '869' ],		#time : DateAndTime [ '2018-02-22T14:01:11.80728-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'primOSFileHandle:',			#protocol : #'primitive access',			#sourceCode : 'primOSFileHandle: sqFile\r\t"Answer the low level file descriptor for a file IO handle."\r\r\t<primitive: \'primitiveOSFileHandle\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:54',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '869' ],		#self : OmReference [ '870' ],		#time : DateAndTime [ '2018-02-22T14:01:11.807844-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #'primOSSocketHandle:',			#protocol : #'primitive access',			#sourceCode : 'primOSSocketHandle: sqFile\r\t"Answer the low level socket descriptor for a socket IO handle."\r\r\t<primitive: \'primitiveOSSocketHandle\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/1/2003 17:54',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '870' ],		#self : OmReference [ '871' ],		#time : DateAndTime [ '2018-02-22T14:01:11.808401-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #semaIndex,			#protocol : #accessing,			#sourceCode : 'semaIndex\r\r\t^ semaIndex',			#stamp : 'dtl 3/30/2003 19:04',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '871' ],		#self : OmReference [ '872' ],		#time : DateAndTime [ '2018-02-22T14:01:11.80895-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #semaphore,			#protocol : #accessing,			#sourceCode : 'semaphore\r\r\t^ semaphore',			#stamp : 'dtl 3/30/2003 19:04',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '872' ],		#self : OmReference [ '873' ],		#time : DateAndTime [ '2018-02-22T14:01:11.809916-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #setDefaultEventMask,			#protocol : #initialize-release,			#sourceCode : 'setDefaultEventMask\r\t"Default initialization for read events and exception events"\r\r\t^ self initializeForExceptions: true readEvents: true writeEvents: false\r\r',			#stamp : 'dtl 7/9/2005 14:00',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '873' ],		#self : OmReference [ '874' ],		#time : DateAndTime [ '2018-02-22T14:01:11.810495-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandler,				#isMetaSide : false			},			#name : #useIOHandle,			#protocol : #private,			#sourceCode : 'useIOHandle\r\r\t^ Smalltalk hasClassNamed: #IOHandle',			#stamp : 'dtl 3/30/2003 19:26',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '874' ],		#self : OmReference [ '875' ],		#time : DateAndTime [ '2018-02-22T14:01:11.811518-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MacOSProcessAccessor class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for the\r\tSqueak VM running on the current platform."\r\r\t^ OSProcess isNonUnixMac\r',			#stamp : 'dtl 8/30/2003 17:44',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '875' ],		#self : OmReference [ '876' ],		#time : DateAndTime [ '2018-02-22T14:01:11.812506-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MacOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetSession,			#protocol : #'external process access',			#sourceCode : 'primGetSession\r\t"Answer the unique identifier for this session of Smalltalk running in this OS Process."\r\r\t^ nil\r',			#stamp : 'dtl 2/23/2002 05:57',			#package : #OSProcess-Mac		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '876' ],		#self : OmReference [ '877' ],		#time : DateAndTime [ '2018-02-22T14:01:11.813183-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OS2OSProcessAccessor class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for the\r\tSqueak VM running on the current platform."\r\r\t^ OSProcess isOS2\r',			#stamp : 'dtl 8/30/2003 17:47',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '877' ],		#self : OmReference [ '878' ],		#time : DateAndTime [ '2018-02-22T14:01:11.813767-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OS2OSProcessAccessor,				#isMetaSide : false			},			#name : #primGetSession,			#protocol : #'external process access',			#sourceCode : 'primGetSession\r\t"Answer the unique identifier for this session of Smalltalk running in this OS Process."\r\r\t^ nil\r',			#stamp : 'dtl 2/23/2002 05:56',			#package : #OSProcess-OS2		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '878' ],		#self : OmReference [ '879' ],		#time : DateAndTime [ '2018-02-22T14:01:11.814371-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcessAccessor class',				#isMetaSide : true			},			#name : #concreteClass,			#protocol : #'concrete subclasses',			#sourceCode : 'concreteClass\r\r\t"OSProcessAccessor concreteClass"\r\r\t^ self subclasses\r\t\tdetect: [:c | c isResponsibleForThisPlatform]\r\t\tifNone: [self notify: self printString,\r\t\t\t\t\t\': No concrete class implementation available for system type \',\r\t\t\t\t\tOSProcess platformName printString.\r\t\t\t\tnil]\r\r',			#stamp : 'dtl 3/5/2005 12:04',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '879' ],		#self : OmReference [ '880' ],		#time : DateAndTime [ '2018-02-22T14:01:11.814965-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcessAccessor class',				#isMetaSide : true			},			#name : #'emulateWin32FileLocking:',			#protocol : #initialize-release,			#sourceCode : 'emulateWin32FileLocking: trueOrFalse\r\t"This is a preference that controls whether file locking will attempt to emulation\r\tWin32 behavior, in which a lock request will fail if the requested region overlaps\r\ta region for which there is an existing lock. This behavior is valid only for locks\r\tmanaged within a single Squeak image, and will not produce the expected results\r\tfor a Squeak image cooperating with another Squeak image, or with some other\r\texternal program.\r\r\tUse of the Win32 emulation may result in performance penalties for an application\r\tthat performs a large number of lock requests, such as a database."\r\r\t"self emulateWin32FileLocking: true"\r\t"self emulateWin32FileLocking: false"\r\r\tEmulateWin32FileLocking := trueOrFalse\r',			#stamp : 'dtl 3/5/2005 13:24',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '880' ],		#self : OmReference [ '881' ],		#time : DateAndTime [ '2018-02-22T14:01:11.815538-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcessAccessor class',				#isMetaSide : true			},			#name : #forThisOSProcess,			#protocol : #'instance creation',			#sourceCode : 'forThisOSProcess\r\t"Answer a single instance corresponding to the OS process in which this \r\tSmalltalk image is executing."\r\r\t"OSProcessAccessor forThisOSProcess"\r\r\tThisOSProcessAccessor\r\t\tifNotNil: [ThisOSProcessAccessor isResponsibleForThisPlatform\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t["Common case, platform has not changed"\r\t\t\t\t\t\t^ThisOSProcessAccessor ]\r\t\t\t\t\tifFalse:\r\t\t\t\t\t\t["We are running on a different platform, so start a new accessor"\r\t\t\t\t\t\tThisOSProcessAccessor changed: #invalidProcessAccessor.\r\t\t\t\t\t\tThisOSProcessAccessor finalize]].\r\t^ ThisOSProcessAccessor := self concreteClass basicNew initialize\r',			#stamp : 'dtl 12/14/2013 09:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '881' ],		#self : OmReference [ '882' ],		#time : DateAndTime [ '2018-02-22T14:01:11.81656-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcessAccessor class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\t"OSProcessAccessor initialize"\r\r\tUseIOHandle := (Smalltalk hasClassNamed: #IOHandle).\r\tThisOSProcessAccessor := nil.\r\tself emulateWin32FileLocking: false.\r\tself allSubInstances do: [:e | e finalize]\r',			#stamp : 'dtl 12/14/2013 09:15',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '882' ],		#self : OmReference [ '883' ],		#time : DateAndTime [ '2018-02-22T14:01:11.817106-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcessAccessor class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if an instance of this class is responsible for representing the\r\tOS process for the Squeak VM running on the current platform."\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 8/24/2003 09:17',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '883' ],		#self : OmReference [ '884' ],		#time : DateAndTime [ '2018-02-22T14:01:11.817639-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'OSProcessAccessor class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\tself inform: \'use OSProcessAccessor>>forThisOSProcess to create or obtain the OSProcess instance for this Smalltalk session.\'.\r\t^ nil',			#stamp : 'dtl 3/2/2002 08:29',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '884' ],		#self : OmReference [ '885' ],		#time : DateAndTime [ '2018-02-22T14:01:11.818198-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #aioModuleName,			#protocol : #'plugin identification',			#sourceCode : 'aioModuleName\r\t"Answer a string containing the module name string for the AIO plugin."\r\r\t"OSProcess accessor aioModuleName"\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/1/2005 10:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '885' ],		#self : OmReference [ '886' ],		#time : DateAndTime [ '2018-02-22T14:01:11.818846-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #aioVersionString,			#protocol : #'plugin identification',			#sourceCode : 'aioVersionString\r\t"Answer a string containing the version string for the AIO plugin."\r\r\t"OSProcess accessor aioVersionString"\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/1/2005 10:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '886' ],		#self : OmReference [ '887' ],		#time : DateAndTime [ '2018-02-22T14:01:11.81949-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #canAccessSystem,			#protocol : #testing,			#sourceCode : 'canAccessSystem\r\t"Answer true if it is possible to access the external process. Concrete subclasses should\r\tknow how to answer true."\r\r\t^ false\r',			#stamp : 'dtl 10/18/2001 22:58',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '887' ],		#self : OmReference [ '888' ],		#time : DateAndTime [ '2018-02-22T14:01:11.820116-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'canAcquireLock:',			#protocol : #'file lock registry',			#sourceCode : 'canAcquireLock: anOSFileLockDescriptor\r\t"Answer true if the file lock cache will permit fileLock to be acquired. This method\r\tdoes not guarantee that the underlying OS will grant the lock."\r\r\t^ (self fileLockRegistry anySatisfy:\r\t\t\t[:ld | ld isActive and: [ld conflictsWith: anOSFileLockDescriptor]]) not',			#stamp : 'dtl 4/9/2005 22:44',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '888' ],		#self : OmReference [ '889' ],		#time : DateAndTime [ '2018-02-22T14:01:11.820652-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #canForwardExternalSignals,			#protocol : #testing,			#sourceCode : 'canForwardExternalSignals\r\t"Answer true if it is possible to forward OS signals to a Smalltalk Semaphore."\r\r\t^ false\r',			#stamp : 'dtl 2/14/2004 11:43',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '889' ],		#self : OmReference [ '890' ],		#time : DateAndTime [ '2018-02-22T14:01:11.821189-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #canObtainSessionIdentifierFromPlugin,			#protocol : #accessing,			#sourceCode : 'canObtainSessionIdentifierFromPlugin\r\r\t^ canObtainSessionIdentifierFromPlugin\r\t\tifNil: [canObtainSessionIdentifierFromPlugin := self primGetSession notNil]',			#stamp : 'dtl 4/7/2007 10:19',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '890' ],		#self : OmReference [ '891' ],		#time : DateAndTime [ '2018-02-22T14:01:11.82214-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #emulateWin32FileLocking,			#protocol : #'file lock registry',			#sourceCode : 'emulateWin32FileLocking\r\t"Answer the current value of this preference"\r\r\t^ EmulateWin32FileLocking',			#stamp : 'dtl 3/5/2005 13:21',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '891' ],		#self : OmReference [ '892' ],		#time : DateAndTime [ '2018-02-22T14:01:11.822701-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #fileLockRegistry,			#protocol : #'file lock registry',			#sourceCode : 'fileLockRegistry\r\r\t^ FileLockRegistry ifNil: [FileLockRegistry := Set new]\r',			#stamp : 'dtl 9/24/2009 21:36',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '892' ],		#self : OmReference [ '893' ],		#time : DateAndTime [ '2018-02-22T14:01:11.823277-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #getSessionIdentifier,			#protocol : #'session identification',			#sourceCode : 'getSessionIdentifier\r\t"Call a primitive to obtain the unique identifier for this Squeak session. If the\r\tprimitive fails, try to deduce the session identifier from an instance of\r\tStandardFileStream. Some versions of the OSProcessPlugin may not be able to\r\tobtain a session ID, so this provides a mechanism for obtaining the session ID\r\tindirectly if necessary."\r\r\t"OSProcess accessor getSessionIdentifier"\r\r\t| session |\r\tsession := self primGetSession.\r\tsession ifNil: [session :=  self getSessionIdentifierFromSourcesFile].\r\tsession ifNil: [session :=  self getSessionIdentifierFromFileInSqueakDirectory].\r\t^ session\r',			#stamp : 'dtl 8/6/2003 21:39',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '893' ],		#self : OmReference [ '894' ],		#time : DateAndTime [ '2018-02-22T14:01:11.823979-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #getSessionIdentifierFromFileInSqueakDirectory,			#protocol : #'session identification',			#sourceCode : 'getSessionIdentifierFromFileInSqueakDirectory\r\t"Deduce the session identifier using method of last resort.\r\tThis is an unreliable method, because it assumes knowledge of the internal structure\r\tof the SQFile data structure.\r\r\tDeprecated:\r\tAs of approximately Squeak 3.8 and beyond, the session id has been moved to the\r\tfirst slot of the data structure. This method will not work for a Squeak VM beyond\r\tthat point, and will not work for any 64 bit VM. However, an reliable means of\r\tobtaining sessionID is now available (#getSessionIdentifier), so this method is retained\r\tonly for backwards compatibility to allow OSPP to be built on an older VMMaker."\r\r\t"OSProcess accessor getSessionIdentifierFromFileInSqueakDirectory"\r\r\t| id s |\r\t(OSProcess directoryEntryNames: OSProcess defaultPathString) do:\r\t\t[:n | (s := FileStream readOnlyFileNamed: n) ifNotNil:\r\t\t\t[(Smalltalk hasClassNamed: #IOHandle)\r\t\t\t\tifTrue: [id := s ioHandle getHandle copyFrom: 5 to: 8]\r\t\t\t\tifFalse: [(id := s fileID) ifNotNil: [id copyFrom: 5 to: 8]].\r\t\t\ts close.\r\t\t\t^ id]].\r\t^ nil\r',			#stamp : 'dtl 1/23/2013 21:30',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '894' ],		#self : OmReference [ '895' ],		#time : DateAndTime [ '2018-02-22T14:01:11.824638-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #getSessionIdentifierFromSourcesFile,			#protocol : #'session identification',			#sourceCode : 'getSessionIdentifierFromSourcesFile\r\t"Deduce the session identifier from an existing open FileStream on the sources file.\r\tThis is an unreliable method, because it assumes knowledge of the internal structure\r\tof the SQFile data structure.\r\r\tDeprecated:\r\tAs of approximately Squeak 3.8 and beyond, the session id has been moved to the\r\tfirst slot of the data structure. This method will not work for a Squeak VM beyond\r\tthat point, and will not work for any 64 bit VM. However, an reliable means of\r\tobtaining sessionID is now available (#getSessionIdentifier), so this method is retained\r\tonly for backwards compatibility to allow OSPP to be built on an older VMMaker."\r\r\t"OSProcess accessor getSessionIdentifierFromSourcesFile"\r\r\t| s id |\r\ts := SourceFiles first.\r\ts ifNil: [^ nil].\r\t^ (Smalltalk hasClassNamed: #IOHandle)\r\t\tifTrue: [s ioHandle getHandle copyFrom: 5 to: 8]\r\t\tifFalse: [(id := s fileID) ifNotNil: [id copyFrom: 5 to: 8]]\r',			#stamp : 'dtl 8/7/2005 22:02',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '895' ],		#self : OmReference [ '896' ],		#time : DateAndTime [ '2018-02-22T14:01:11.825234-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #getStdErrHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdErrHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard error for the\r\tOS process in which I am currently executing."\r\r\t^ self subclassResponsibility\r',			#stamp : 'dtl 9/25/2005 16:07',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '896' ],		#self : OmReference [ '897' ],		#time : DateAndTime [ '2018-02-22T14:01:11.825964-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #getStdInHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdInHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard input for the\r\tOS process in which I am currently executing."\r\r\t^ self subclassResponsibility\r',			#stamp : 'dtl 9/25/2005 16:07',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '897' ],		#self : OmReference [ '898' ],		#time : DateAndTime [ '2018-02-22T14:01:11.826634-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #getStdOutHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdOutHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard output for the\r\tOS process in which I am currently executing."\r\r\t^ self subclassResponsibility\r',			#stamp : 'dtl 9/25/2005 16:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '898' ],		#self : OmReference [ '899' ],		#time : DateAndTime [ '2018-02-22T14:01:11.827212-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #grimReaper,			#protocol : #accessing,			#sourceCode : 'grimReaper\r\t"Answer the value of grimReaper"\r\r\t^ grimReaper',			#stamp : 'dtl 2/27/2015 19:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '899' ],		#self : OmReference [ '900' ],		#time : DateAndTime [ '2018-02-22T14:01:11.828268-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'grimReaper:',			#protocol : #accessing,			#sourceCode : 'grimReaper: anObject\r\t"Set the value of grimReaper"\r\r\tgrimReaper := anObject',			#stamp : 'dtl 2/27/2015 19:54',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '900' ],		#self : OmReference [ '901' ],		#time : DateAndTime [ '2018-02-22T14:01:11.828882-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'handleFromAccessor:',			#protocol : #'private - IOHandle',			#sourceCode : 'handleFromAccessor: aByteArrayOrIOAccessor\r\r\tUseIOHandle\r\t\tifTrue: [aByteArrayOrIOAccessor isNil\r\t\t\tifTrue: [^ nil]\r\t\t\tifFalse: [^ aByteArrayOrIOAccessor asSQFileStruct]]\r\t\tifFalse: [^ aByteArrayOrIOAccessor]',			#stamp : 'dtl 3/1/2002 15:19',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '901' ],		#self : OmReference [ '902' ],		#time : DateAndTime [ '2018-02-22T14:01:11.829471-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'handleFromFileStream:',			#protocol : #'private - IOHandle',			#sourceCode : 'handleFromFileStream: aFileStream\r\r\t^ UseIOHandle\r\t\tifTrue: [self handleFromAccessor: aFileStream ioHandle]\r\t\tifFalse: [aFileStream fileID]\r',			#stamp : 'dtl 1/3/2004 21:21',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '902' ],		#self : OmReference [ '903' ],		#time : DateAndTime [ '2018-02-22T14:01:11.830014-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #handlesOsSignals,			#protocol : #testing,			#sourceCode : 'handlesOsSignals\r\t"True if OS signals can be handled and forwarded to the image"\r\r\t^ false',			#stamp : 'dtl 8/8/2002 15:13',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '903' ],		#self : OmReference [ '904' ],		#time : DateAndTime [ '2018-02-22T14:01:11.830621-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\r\tcanObtainSessionIdentifierFromPlugin := nil.\r\tself canObtainSessionIdentifierFromPlugin.\r\tsessionIdentifier := nil.\r\tself sessionIdentifier.\r',			#stamp : 'dtl 2/27/2015 19:51',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '904' ],		#self : OmReference [ '905' ],		#time : DateAndTime [ '2018-02-22T14:01:11.831181-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'ioAccessorFromSQFile:',			#protocol : #'private - IOHandle',			#sourceCode : 'ioAccessorFromSQFile: aByteArray\r\t"Answer an object which represents an IO channel. If IOHandle is present in\r\tthis image, use it; otherwise just answer aByteArray."\r\r\tUseIOHandle\r\t\tifTrue: [^ (Smalltalk at: #IOHandle) newFromSqFileStruct: aByteArray]\r\t\tifFalse: [^ aByteArray]',			#stamp : 'dtl 7/12/2003 12:17',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '905' ],		#self : OmReference [ '906' ],		#time : DateAndTime [ '2018-02-22T14:01:11.831731-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'isAtEndOfFile:',			#protocol : #'file testing',			#sourceCode : 'isAtEndOfFile: anIOHandle\r\t"Answer whether the file represented by anIOHandle is at end of file, as determined\r\tby a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers\r\ttrue if the file pointer is at the end of the file, but which does not call feof() to\r\tdetermine that an end of file condition has occurred. The difference is significant\r\tif aSqFileStruct represents a pipe or a device file, which may not be positionable\r\tin the sense of a conventional disk file."\r\r\t^ self primTestEndOfFileFlag: (self handleFromAccessor: anIOHandle)\r',			#stamp : 'dtl 11/28/2010 14:04',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '906' ],		#self : OmReference [ '907' ],		#time : DateAndTime [ '2018-02-22T14:01:11.832423-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true is this is an instance of the class which is responsible for representing\r\tthe OS process for the Squeak VM running on the current platform. A false answer is\r\tusually the result of running the image on a different platform and VM."\r\r\t^ self class isResponsibleForThisPlatform',			#stamp : 'dtl 8/24/2003 09:18',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '907' ],		#self : OmReference [ '908' ],		#time : DateAndTime [ '2018-02-22T14:01:11.833119-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #makePipeHandles,			#protocol : #'pipe open',			#sourceCode : 'makePipeHandles\r\t"Create a pipe, and answer an array of two IO accessors for the pipe \r\treader and writer."\r\r\t"OSProcess accessor makePipeHandles"\r\r\t| p |\r\tp := self primCreatePipe.\r\tp isNil\r\t\tifFalse: [ ^ p collect: [ :e | self ioAccessorFromSQFile: e ] ].\r\t^ nil',			#stamp : 'ThierryGoubier 7/19/2017 22:00',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '908' ],		#self : OmReference [ '909' ],		#time : DateAndTime [ '2018-02-22T14:01:11.834158-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #newPid,			#protocol : #'initialize - release',			#sourceCode : 'newPid\r\t"This image is now being run in a new VM process with different pid. Pause the handling\r\tof child processes, and remove references to child processes that no longer pertain to\r\tthe current VM process."\r\r\tgrimReaper notNil\r\t\tifTrue: [ grimReaper terminate.\r\t\t\tgrimReaper := nil ].\r\tself changed: #pid.\r\tself restartChildWatcherProcess',			#stamp : 'ThierryGoubier 7/27/2017 22:37',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '909' ],		#self : OmReference [ '910' ],		#time : DateAndTime [ '2018-02-22T14:01:11.834713-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #osppModuleName,			#protocol : #'plugin identification',			#sourceCode : 'osppModuleName\r\t"Answer a string containing the module name string for the OSPP plugin."\r\r\t"OSProcess accessor osppModuleName"\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/1/2005 10:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '910' ],		#self : OmReference [ '911' ],		#time : DateAndTime [ '2018-02-22T14:01:11.835252-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #osppModuleVersionString,			#protocol : #'plugin identification',			#sourceCode : 'osppModuleVersionString\r\t"Answer a string containing the version string for the OSPP plugin."\r\r\t"OSProcess accessor osppModuleVersionString"\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/1/2005 10:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '911' ],		#self : OmReference [ '912' ],		#time : DateAndTime [ '2018-02-22T14:01:11.835807-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #primGetSession,			#protocol : #'session identification',			#sourceCode : 'primGetSession\r\t"Subclasses should override if they know how to obtain the session identifier."\r\r\t^ nil',			#stamp : 'dtl 3/2/2002 09:07',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '912' ],		#self : OmReference [ '913' ],		#time : DateAndTime [ '2018-02-22T14:01:11.836382-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'primTestEndOfFileFlag:',			#protocol : #'file testing',			#sourceCode : 'primTestEndOfFileFlag: aSqFileStruct\r\t"Answer whether the file represented by aSqFileStruct is at end of file, as determined\r\tby a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers\r\ttrue if the file pointer is at the end of the file, but which does not call feof() to\r\tdetermine that an end of file condition has occurred. The difference is significant\r\tif aSqFileStruct represents a pipe or a device file, which may not be positionable\r\tin the sense of a conventional disk file."\r\r\t^ self subclassResponsibility\r',			#stamp : 'dtl 4/8/2007 10:49',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '913' ],		#self : OmReference [ '914' ],		#time : DateAndTime [ '2018-02-22T14:01:11.836936-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'register:',			#protocol : #'file lock registry',			#sourceCode : 'register: fileRegionLock\r\t"If an object equal to fileRegionLock exists in the registry, answer it. Otherwise, add\r\tfileRegionLock to the registry and answer fileRegionLock."\r\r\t^ (self fileLockRegistry like: fileRegionLock)\r\t\tifNil: [self fileLockRegistry add: fileRegionLock]\r',			#stamp : 'dtl 3/5/2005 13:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '914' ],		#self : OmReference [ '915' ],		#time : DateAndTime [ '2018-02-22T14:01:11.8375-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'registeredLocksForFile:',			#protocol : #'file lock registry',			#sourceCode : 'registeredLocksForFile: aFileStream\r\t"Answer all lock descriptors associated with aFileStream"\r\r\t^ self fileLockRegistry select: [:ea | ea fileStream = aFileStream]\r',			#stamp : 'dtl 4/10/2005 15:05',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '915' ],		#self : OmReference [ '916' ],		#time : DateAndTime [ '2018-02-22T14:01:11.83808-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #removeInactiveLocks,			#protocol : #'file lock registry',			#sourceCode : 'removeInactiveLocks\r\t"Go through the lock cache and remove any that have been left\r\tbehind after their streams were closed."\r\r\t^ self fileLockRegistry copy do: [:ea | ea isActive ifFalse: [self fileLockCache remove: ea]]',			#stamp : 'jf 2/26/2004 18:06',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '916' ],		#self : OmReference [ '917' ],		#time : DateAndTime [ '2018-02-22T14:01:11.838652-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #restartChildWatcherProcess,			#protocol : #'initialize - release',			#sourceCode : 'restartChildWatcherProcess\r\tself subclassResponsibility',			#stamp : 'dtl 2/28/2015 18:31',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '917' ],		#self : OmReference [ '918' ],		#time : DateAndTime [ '2018-02-22T14:01:11.839828-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #sessionIdentifier,			#protocol : #accessing,			#sourceCode : 'sessionIdentifier\r\r\t^ sessionIdentifier ifNil: [sessionIdentifier := self getSessionIdentifier]\r',			#stamp : 'dtl 3/2/2002 08:32',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '918' ],		#self : OmReference [ '919' ],		#time : DateAndTime [ '2018-02-22T14:01:11.840446-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'setNonBlocking:',			#protocol : #'file control',			#sourceCode : 'setNonBlocking: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to set it non-blocking."\r\r\t^ self subclassResponsibility\r',			#stamp : 'dtl 2/11/2001 15:37',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '919' ],		#self : OmReference [ '920' ],		#time : DateAndTime [ '2018-02-22T14:01:11.841003-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #'unregister:',			#protocol : #'file lock registry',			#sourceCode : 'unregister: fileRegionLock\r\t"If an object equal to fileRegionLock exists in the registry, remove it and\r\tanswer the object. Otherwise answer nil."\r\r\r\t^ self fileLockRegistry remove: fileRegionLock ifAbsent: [nil]\r',			#stamp : 'dtl 3/5/2005 13:07',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '920' ],		#self : OmReference [ '921' ],		#time : DateAndTime [ '2018-02-22T14:01:11.841567-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #xdcpModuleName,			#protocol : #'plugin identification',			#sourceCode : 'xdcpModuleName\r\t"Answer a string containing the module name string for the display control plugin."\r\r\t"OSProcess accessor xdcpModuleName"\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/1/2005 10:41',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '921' ],		#self : OmReference [ '922' ],		#time : DateAndTime [ '2018-02-22T14:01:11.84212-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSProcessAccessor,				#isMetaSide : false			},			#name : #xdcpVersionString,			#protocol : #'plugin identification',			#sourceCode : 'xdcpVersionString\r\t"Answer a string containing the version string for the display control plugin."\r\r\t"OSProcess accessor xdcpVersionString"\r\r\t^ self subclassResponsibility',			#stamp : 'dtl 10/1/2005 10:42',			#package : #OSProcess-Base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '922' ],		#self : OmReference [ '923' ],		#time : DateAndTime [ '2018-02-22T14:01:11.842794-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RiscOSProcessAccessor class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for the\r\tSqueak VM running on the current platform."\r\r\t^ OSProcess isRiscOS\r',			#stamp : 'dtl 8/30/2003 17:48',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '923' ],		#self : OmReference [ '924' ],		#time : DateAndTime [ '2018-02-22T14:01:11.843384-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcessAccessor,				#isMetaSide : false			},			#name : #'primForkAndExec:withArgs:argCount:withEnv:envCount:stdIn:stdOut:stdErr:',			#protocol : #'fork and exec',			#sourceCode : 'primForkAndExec: executableFile\r\twithArgs: anArrayOfArgumentStrings\r\targCount: numberOfArgumentStrings\r\twithEnv: anArrayOfEnvironmentStrings\r\tenvCount: numberOfEnvironmentStrings\r\tstdIn: inputFileHandle\r\tstdOut: outputFileHandle\r\tstdErr: errorFileHandle\r\t"Parameters are expected to have been properly prepared by the caller,\r\tincluding string values which are to be null terminated strings.\r\tIn other words, all strings should have (Character value: 0) as the\r\tlast element in the string."',			#stamp : 'dtl 1/6/2001 23:15',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '924' ],		#self : OmReference [ '925' ],		#time : DateAndTime [ '2018-02-22T14:01:11.843941-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RiscOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetSession,			#protocol : #'external process access',			#sourceCode : 'primGetSession\r\t"Answer the unique identifier for this session of Smalltalk running in this OS Process."\r\r\t^ nil\r',			#stamp : 'dtl 2/23/2002 05:56',			#package : #OSProcess-RiscOS		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '925' ],		#self : OmReference [ '926' ],		#time : DateAndTime [ '2018-02-22T14:01:11.844527-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixOSProcessAccessor class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for the\r\tSqueak VM running on the current platform."\r\r\t^ OSProcess isUnix\r',			#stamp : 'dtl 8/30/2003 17:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '926' ],		#self : OmReference [ '927' ],		#time : DateAndTime [ '2018-02-22T14:01:11.845798-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #aioModuleName,			#protocol : #'plugin identification',			#sourceCode : 'aioModuleName\r\t"Answer a string containing the module name string for the AIO plugin."\r\r\t"OSProcess accessor aioModuleName"\r\r\t^ self primAioPluginModuleName\r',			#stamp : 'dtl 10/1/2005 10:43',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '927' ],		#self : OmReference [ '928' ],		#time : DateAndTime [ '2018-02-22T14:01:11.846752-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #aioVersionString,			#protocol : #'plugin identification',			#sourceCode : 'aioVersionString\r\t"Answer a string containing the version string for the AIO plugin."\r\r\t"OSProcess accessor aioVersionString"\r\r\t^ self primAioPluginVersionString\r',			#stamp : 'dtl 10/1/2005 10:44',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '928' ],		#self : OmReference [ '929' ],		#time : DateAndTime [ '2018-02-22T14:01:11.847584-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'canAccessChildProcess:',			#protocol : #testing,			#sourceCode : 'canAccessChildProcess: anExternalProcess\r\t"Is the child process still there? Maybe not if we have restarted the image\r\tand anExternalProcess refers to a process which died while we were not\r\twatching."\r\r\t^ self primCanReceiveSignals: anExternalProcess pid',			#stamp : 'dtl 10/7/2000 13:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '929' ],		#self : OmReference [ '930' ],		#time : DateAndTime [ '2018-02-22T14:01:11.848321-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #canAccessSystem,			#protocol : #testing,			#sourceCode : 'canAccessSystem\r\t"Answer true if it is possible to access the external process, else false. Failure\r\tto access the external process is probably due to lack of a UnixOSProcessPlugin\r\tmodule."\r\r\t^ self primGetPid notNil\r',			#stamp : 'dtl 9/9/2000 15:45',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '930' ],		#self : OmReference [ '931' ],		#time : DateAndTime [ '2018-02-22T14:01:11.849072-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #canControlXDisplay,			#protocol : #testing,			#sourceCode : 'canControlXDisplay\r\t"True if the XDisplayControlPlugin is accessible. Older versions of OSProcess relied on\r\tthe X display control to be embedded in the OSProcessPlugin module. This has been\r\tmoved to a separate display control plugin to allow support of non-X platforms and\r\tother display media on Unix platforms (OS X)."\r\r\t"OSProcess accessor canControlXDisplay"\r\r\t^ self primXDisplayControlPluginModuleName notNil\r',			#stamp : 'dtl 8/30/2003 18:43',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '931' ],		#self : OmReference [ '932' ],		#time : DateAndTime [ '2018-02-22T14:01:11.849847-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #canForwardExternalSignals,			#protocol : #testing,			#sourceCode : 'canForwardExternalSignals\r\t"Answer true if it is possible to forward OS signals to a Smalltalk Semaphore."\r\r\t^ true\r',			#stamp : 'dtl 2/14/2004 12:17',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '932' ],		#self : OmReference [ '933' ],		#time : DateAndTime [ '2018-02-22T14:01:11.850612-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'chDir:',			#protocol : #'external process access',			#sourceCode : 'chDir: pathString\r\t"Change current working directory. The $PWD environment variable is not updated (but\r\tsee UnixProcess>>chDir:). Answer nil for success, or an error message."\r\r\t"OSProcess accessor chDir: \'/tmp\'"\r\t"OSProcess accessor chDir: \'/no/such/path\'"\r\t"OSProcess accessor chDir: FileDirectory default name"\r\r\t| result message |\r\tresult := self primChdir: pathString.\r\tresult isNil\r\t\tifTrue:\r\t\t\t[^ nil]\r\t\tifFalse:\r\t\t\t[message := self primErrorMessageAt: result.\r\t\t\t^ message]\r',			#stamp : 'dtl 3/31/2001 15:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '933' ],		#self : OmReference [ '934' ],		#time : DateAndTime [ '2018-02-22T14:01:11.851351-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #clearPrintAllStacksOnSigUsr1,			#protocol : #'signal print stack trace',			#sourceCode : 'clearPrintAllStacksOnSigUsr1\r\t"Clear any signal handler in the VM that was set to print all call stacks on\r\tconsole output when a SIGUSR1 is received. Restores default SIGUSR1\r\thandler, which may result in exiting the VM on this signal. Answer an\r\tidentifier for the previously defined signal handler or nil if no handler\r\thad been set."\r\r\t^self primForwardSignal: self primSigUsr1Number toSemaphore: nil\t\r',			#stamp : 'dtl 7/20/2010 00:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '934' ],		#self : OmReference [ '935' ],		#time : DateAndTime [ '2018-02-22T14:01:11.852739-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'closeUnixFileNumber:',			#protocol : #'file control',			#sourceCode : 'closeUnixFileNumber: unixFileDescriptor\r\t"Close the file associated with unixFileDescriptor, a small integer value."\r\r\t<primitive: \'primitiveUnixFileClose\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 3/2/2009 22:42',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '935' ],		#self : OmReference [ '936' ],		#time : DateAndTime [ '2018-02-22T14:01:11.853729-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'currentSigHandlerAddress:',			#protocol : #debugging,			#sourceCode : 'currentSigHandlerAddress: signalNumber\r\t"Answer the current machine address of the signal handler for signalNumber,\r\texpressed as a ByteArray.\r\r\tTemporarily set a signal forwarded for signalNumber, and remember the\r\tmachine address of the prior signal handler. Restore the signal handler\r\tto its previous value, and answer the machine address of the handler."\r\r\t"OSProcess accessor currentSigHandlerAddress: OSProcess accessor primSigIntNumber"\r\r\t| sema index previousHandlerAddress |\r\tsema := Semaphore new.\r\tindex := Smalltalk registerExternalObject: sema.\r\t(previousHandlerAddress := self primForwardSignal: signalNumber toSemaphore: index)\r\t\tifNil:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t^ self error: \'could not forward signal number \', signalNumber asString].\r\tself restoreSignal: signalNumber.\r\t^ previousHandlerAddress',			#stamp : 'dtl 11/19/2006 09:02',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '936' ],		#self : OmReference [ '937' ],		#time : DateAndTime [ '2018-02-22T14:01:11.854537-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'environmentAt:',			#protocol : #'external process access',			#sourceCode : 'environmentAt: aSymbolOrString\r\t"Get an environment variable from the external OS process."\r\r\t"OSProcess thisOSProcess environmentAt: \'PATH\'"\r\r\t^ self primEnvironmentAtSymbol: aSymbolOrString\r',			#stamp : 'dtl 7/2/2000 19:59',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '937' ],		#self : OmReference [ '938' ],		#time : DateAndTime [ '2018-02-22T14:01:11.855319-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'environmentAt:put:',			#protocol : #'external process access',			#sourceCode : 'environmentAt: aSymbolOrString put: aString\r\t"Add or update an environment variable in the external OS process. Convert aSymbol\r\tand aString into a KEY=value string and pass this to the OS process environment.\r\tStandard C libraries provide a putenv() function for this purpose, with a parameter\r\tin the form KEY=value. Note: Maintain a reference to the return value, see note in\r\tprimitivePutEnv."\r\r\t"OSProcess accessor environmentAt: \'AAAA\' put: \'this is the value of AAAA\'"\r\t"OSProcess accessor environmentAt: \'AAAA\' put: nil"\r\t"OSProcess accessor environmentAt: \'AAAA\'"\r\r\taString isNil\r\t\tifTrue:\r\t\t\t[^ self primUnsetEnv: aSymbolOrString, (Character value: 0) asString]\r\t\tifFalse:\r\t\t\t[^ self environmentPut: (aSymbolOrString asString, \'=\', aString)]\r',			#stamp : 'dtl 10/7/2001 01:18',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '938' ],		#self : OmReference [ '939' ],		#time : DateAndTime [ '2018-02-22T14:01:11.856086-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'environmentPut:',			#protocol : #'private - primitive access',			#sourceCode : 'environmentPut: aString\r\t"Add or update an environment variable in the external OS process using a \'KEY=value\'\r\tstring. Create a null terminated string for use by the external putenv() call in a pluggable\r\tprimitive."\r\r\t"OSProcess thisOSProcess processAccessor environmentPut: \'SOMEKEY=somevalue\'"\r\r\t| cString |\r\tcString := aString, (Character value: 0) asString.\r\t^ self primPutEnv: cString\r',			#stamp : 'dtl 9/10/2000 09:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '939' ],		#self : OmReference [ '940' ],		#time : DateAndTime [ '2018-02-22T14:01:11.856873-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'fileProtectionMask:',			#protocol : #'file testing',			#sourceCode : 'fileProtectionMask: aPathString\r\t"Call stat(2) to obtain the file protection mask for a file."\r\r\t"OSProcess accessor fileProtectionMask: \'/bin/sh\'"\r\t"OSProcess accessor fileProtectionMask: \'/etc/hosts\'"\r\t"OSProcess accessor fileProtectionMask: \'/bin/su\'"\r\t"OSProcess accessor fileProtectionMask: \'/bin/NOSUCHFILE\'"\r\t"OSProcess accessor fileProtectionMask: 12345"\r\r\t| mask |\r\t(aPathString isKindOf: String) ifFalse: [self error: \'expected a path string\'. ^ nil].\r\tmask := self primFileProtectionMask: aPathString.\r\t(mask == nil) ifTrue: [^ nil].\r\t(mask isKindOf: Integer)\r\t\tifTrue: [^ self primErrorMessageAt: mask].\r\t^ mask\r',			#stamp : 'dtl 5/1/2001 05:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '940' ],		#self : OmReference [ '941' ],		#time : DateAndTime [ '2018-02-22T14:01:11.857639-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'fileStat:',			#protocol : #'file testing',			#sourceCode : 'fileStat: aPathString\r\t"Call stat(2) to obtain the UID, GID, and file protection mask for a file."\r\r\t"OSProcess accessor fileStat: \'/var/spool/news\'"\r\t"OSProcess accessor fileStat: \'/etc/hosts\'"\r\t"OSProcess accessor fileStat: \'/bin/su\'"\r\t"OSProcess accessor fileStat: \'/bin/NOSUCHFILE\'"\r\t"OSProcess accessor fileStat: 12345"\r\r\t| mask |\r\t(aPathString isKindOf: String) ifFalse: [self error: \'expected a path string\'. ^ nil].\r\tmask := self primFileStat: aPathString.\r\t(mask == nil) ifTrue: [^ nil].\r\t(mask isKindOf: Integer)\r\t\tifTrue: [^ self primErrorMessageAt: mask].\r\t^ mask\r',			#stamp : 'dtl 5/1/2001 05:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '941' ],		#self : OmReference [ '942' ],		#time : DateAndTime [ '2018-02-22T14:01:11.858418-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #finalize,			#protocol : #'initialize - release',			#sourceCode : 'finalize\r\t"Clean up grimReaper and associated semaphore."\r\r\tself grimReaper ifNotNil:\r\t\t\t[grimReaper terminate.\r\t\t\tgrimReaper := nil].\r\tself sigChldSemaphore ifNotNil:\r\t\t\t[self restoreSigChld.\r\t\t\tself sigChldSemaphore: nil]\r',			#stamp : 'dtl 7/6/2010 21:22',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '942' ],		#self : OmReference [ '943' ],		#time : DateAndTime [ '2018-02-22T14:01:11.859749-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'flushExternalStream:',			#protocol : #'file control',			#sourceCode : 'flushExternalStream: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to flush the\r\texternal I/O stream."\r\r\t^ self primSQFileFlush: (self handleFromAccessor: anIOHandle)\r',			#stamp : 'dtl 11/28/2010 12:13',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '943' ],		#self : OmReference [ '944' ],		#time : DateAndTime [ '2018-02-22T14:01:11.860686-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'forkAndExec:stdIn:stdOut:stdErr:argBuf:argOffsets:envBuf:envOffsets:workingDir:',			#protocol : #'fork and exec',			#sourceCode : 'forkAndExec: executableFile\r\tstdIn: inputFileHandle\r\tstdOut: outputFileHandle\r\tstdErr: errorFileHandle\r\targBuf: argVec\r\targOffsets: argOffsets\r\tenvBuf: envVec\r\tenvOffsets: envOffsets\r\tworkingDir: pathString\r\r\t"Parameters are expected to have been properly prepared by the caller, including string\r\tvalues which are to be null terminated strings. In other words, all strings should have\r\t(Character value: 0) as the last element in the string.\r\r\tParameters should be:\r\t\texecutableFile: a string with the name of a file to execute.\r\t\tstdIn: a fileID ByteArray (struct SQFile in C) to be used as standard input.\r\t\tstdOut: a fileID ByteArray to be used as standard output.\r\t\tstdErr: a fileID ByteArray to be used as standard error.\r\t\targVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.\r\t\targOffsets: an Array of offsets for fixing up the argVec addresses.\r\t\tenvVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.\r\t\tenvOffsets: an Array of offsets for fixing up the envVec addresses.\r\t\tworkingDir: a null terminated path name String, or nil.\r\tThe envVec parameter may be nil, in which case envOffsets is ignored. workingDir may be nil. The\r\tother parameters are required. Parameters with nil value indicate that current values for this process\r\tshould be used."\r\r\t^ self primForkExec: executableFile\r\t\t\tstdIn: inputFileHandle\r\t\t\tstdOut: outputFileHandle\r\t\t\tstdErr: errorFileHandle\r\t\t\targBuf: argVec\r\t\t\targOffsets: argOffsets\r\t\t\tenvBuf: envVec\r\t\t\tenvOffsets: envOffsets\r\t\t\tworkingDir: pathString\r',			#stamp : 'dtl 1/25/2004 21:43',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '944' ],		#self : OmReference [ '945' ],		#time : DateAndTime [ '2018-02-22T14:01:11.861475-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forkSqueak,			#protocol : #'fork and exec',			#sourceCode : 'forkSqueak\r\t"Clone this Squeak Smalltalk image in a child OSProcess. The child is the same as the\r\tparent, except for its new X session connection, and the return value of this method,\r\twhich is zero for the child process, and a positive integer equal to the pid of the child\r\tfor the parent process.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\tself safeToForkSqueak\r\t\tifTrue: [^self primForkSqueak].\r\t[self notify: \'forkSqueak requires XDisplayControlPlugin\']\r\t\tensure: [^nil]\r',			#stamp : 'dtl 4/27/2011 21:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '945' ],		#self : OmReference [ '946' ],		#time : DateAndTime [ '2018-02-22T14:01:11.862228-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigChld,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigChld\r\t"Set a signal handler for SIGCHLD. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigChld"\r\r\t^ self forwardSignal: self primSigChldNumber\r',			#stamp : 'dtl 11/4/2005 06:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '946' ],		#self : OmReference [ '947' ],		#time : DateAndTime [ '2018-02-22T14:01:11.862988-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigHup,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigHup\r\t"Set a signal handler for SIGHUP. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigHup"\r\r\t^ self forwardSignal: self primSigHupNumber\r',			#stamp : 'dtl 11/4/2005 06:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '947' ],		#self : OmReference [ '948' ],		#time : DateAndTime [ '2018-02-22T14:01:11.863744-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigInt,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigInt\r\t"Set a signal handler for SIGINT. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigInt"\r\r\t^ self forwardSignal: self primSigIntNumber\r',			#stamp : 'dtl 11/4/2005 06:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '948' ],		#self : OmReference [ '949' ],		#time : DateAndTime [ '2018-02-22T14:01:11.864548-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigKill,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigKill\r\t"Set a signal handler for SIGKILL. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigKill"\r\r\tself notify: \'SIGKILL and SIGSTOP signals cannot be caught, see man signal(2)\'.\r\t^ self forwardSignal: self primSigKillNumber\r',			#stamp : 'dtl 11/4/2005 06:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '949' ],		#self : OmReference [ '950' ],		#time : DateAndTime [ '2018-02-22T14:01:11.865298-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigPipe,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigPipe\r\t"Set a signal handler for SIGPIPE. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigPipe"\r\r\t^ self forwardSignal: self primSigPipeNumber\r',			#stamp : 'dtl 11/4/2005 06:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '950' ],		#self : OmReference [ '951' ],		#time : DateAndTime [ '2018-02-22T14:01:11.866176-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigQuit,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigQuit\r\t"Set a signal handler for SIGQUIT. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigQuit"\r\r\t^ self forwardSignal: self primSigQuitNumber\r',			#stamp : 'dtl 11/4/2005 06:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '951' ],		#self : OmReference [ '952' ],		#time : DateAndTime [ '2018-02-22T14:01:11.867562-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigTerm,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigTerm\r\t"Set a signal handler for SIGTERM. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigTerm"\r\r\t^ self forwardSignal: self primSigTermNumber\r',			#stamp : 'dtl 11/4/2005 06:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '952' ],		#self : OmReference [ '953' ],		#time : DateAndTime [ '2018-02-22T14:01:11.86832-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigUsr1,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigUsr1\r\t"Set a signal handler for SIGUSR1. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigUsr1"\r\r\t^ self forwardSignal: self primSigUsr1Number\r',			#stamp : 'dtl 11/4/2005 06:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '953' ],		#self : OmReference [ '954' ],		#time : DateAndTime [ '2018-02-22T14:01:11.869077-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #forwardSigUsr2,			#protocol : #'signal forwarding',			#sourceCode : 'forwardSigUsr2\r\t"Set a signal handler for SIGUSR2. Answer a new Semaphore, or nil if unable\r\tto set the handler (possibly because it has already been set)."\r\r\t"OSProcess accessor forwardSigUsr1"\r\r\t^ self forwardSignal: self primSigUsr2Number\r',			#stamp : 'dtl 11/4/2005 06:52',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '954' ],		#self : OmReference [ '955' ],		#time : DateAndTime [ '2018-02-22T14:01:11.869888-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'forwardSignal:',			#protocol : #'signal forwarding',			#sourceCode : 'forwardSignal: signalNumber \r\t"Set a signal handler in the VM which will signal a Smalltalk semaphore \r\tat semaphoreIndex whenever an external signal sigNum is received.\r\tAnswer a new Semaphore, or nil if unable to set the handler (possibly\r\tbecause it has already been set). A Smalltalk process can wait on the\r\tSemaphore, and take action when a signal is detected. See man(7) signal\r\tfor signal number definitions on your unix system."\r\r\t"OSProcess accessor forwardSignal: OSProcess accessor primSigIntNumber"\r\r\t| sema index |\r\tsema := Semaphore new.\r\tindex := Smalltalk registerExternalObject: sema.\r\t(self primForwardSignal: signalNumber toSemaphore: index)\r\t\tifNil:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t^ nil].\r\t^ sema',			#stamp : 'dtl 12/6/2002 18:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '955' ],		#self : OmReference [ '956' ],		#time : DateAndTime [ '2018-02-22T14:01:11.870662-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdErrHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdErrHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard error for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdErrHandle\r\t\tifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]',			#stamp : 'dtl 11/28/2010 12:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '956' ],		#self : OmReference [ '957' ],		#time : DateAndTime [ '2018-02-22T14:01:11.871411-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdInHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdInHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard input for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdInHandle\r\t\tifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]',			#stamp : 'dtl 11/28/2010 12:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '957' ],		#self : OmReference [ '958' ],		#time : DateAndTime [ '2018-02-22T14:01:11.872179-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdOutHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdOutHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard output for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdOutHandle\r\t\tifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]',			#stamp : 'dtl 11/28/2010 12:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '958' ],		#self : OmReference [ '959' ],		#time : DateAndTime [ '2018-02-22T14:01:11.873095-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getThreadID,			#protocol : #pthreads,			#sourceCode : 'getThreadID\r\t"Answer the ID of the pthread that is currently executing (the interpreter thread).\r\tA thread ID may be a 64 bit value on some platforms, so answer a byte array\r\tcontaining the value in machine-dependent byte order."\r\r\t"OSProcess accessor getThreadID"\r\r\t| osppVer |\r\t[osppVer := OSProcess accessor osppModuleVersionString asNumber]\r\t\ton: Error\r\t\tdo: [^ nil].\r\t(osppVer notNil and: [osppVer >= 4.2])\r\t\tifTrue: [^ self primGetThreadID]\r\t\tifFalse: [^ nil]\r',			#stamp : 'dtl 3/17/2007 23:14',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '959' ],		#self : OmReference [ '960' ],		#time : DateAndTime [ '2018-02-22T14:01:11.874599-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #grimReaperProcess,			#protocol : #'initialize - release',			#sourceCode : 'grimReaperProcess\r\t"This is a process which waits for the death of a child OSProcess, and \r\tinforms any dependents of the change. Use SIGCHLD events if possible,\r\totherwise a Delay to poll for exiting child processes."\r\r\t| eventWaiter processSynchronizationDelay |\r\t^ self canAccessSystem\r\t\tifTrue:\r\t\t\t[eventWaiter := (self canAccessSystem and: [self canForwardExternalSignals])\r\t\t\t\tifTrue: [self sigChldSemaphore "semaphore signaled by SIGCHLD" ]\r\t\t\t\tifFalse: [Delay forMilliseconds: 200 "simple polling loop" ].\r\t\t\tprocessSynchronizationDelay := Delay forMilliseconds: 20.\r\t\t\tgrimReaper ifNil:\r\t\t\t\t[grimReaper :=\r\t\t\t\t\t[[(eventWaiter respondsTo: #waitTimeoutMSecs: )\r\t\t\t\t\t\tifTrue: [eventWaiter waitTimeoutMSecs: 1000 "semaphore with timeout"]\r\t\t\t\t\t\tifFalse: [eventWaiter wait].\r\t\t\t\t\tprocessSynchronizationDelay wait. "Avoids lost signals in heavy process switching"\r\t\t\t\t\tself changed: #childProcessStatus] repeat] newProcess.\r\t\t\t\t\tgrimReaper resume.\r\t\t\t\t\t"name selected to look reasonable in the process browser"\r\t\t\t\t\tgrimReaper name: ((ReadStream on: grimReaper hash asString) next: 5)\r\t\t\t\t\t\t\t, \': the child OSProcess watcher\']]\r\t\tifFalse:\r\t\t\t[nil]\r',			#stamp : 'dtl 6/2/2015 20:54',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '960' ],		#self : OmReference [ '961' ],		#time : DateAndTime [ '2018-02-22T14:01:11.875363-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #handlesOsSignals,			#protocol : #testing,			#sourceCode : 'handlesOsSignals\r\t"True if OS signals can be handled and forwarded to the image"\r\r\t^ true',			#stamp : 'dtl 8/8/2002 15:13',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '961' ],		#self : OmReference [ '962' ],		#time : DateAndTime [ '2018-02-22T14:01:11.876179-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Call this method when an instance is first created, or to refresh after an image\r\trestart to clean up from the previous session. Notify dependents of my singleton\r\tinstance if the image has restarted in a different OS process (this is not the case\r\twhen #startUp is called after a simple image save)."\r\r\tself finalize.\r\tsuper initialize.\r\tThisProcessPid ~~ self primGetPid\r\t\tifTrue: \r\t\t\t["Image has been restarted and is now running in a different OS process"\r\t\t\tThisProcessPid := self primGetPid.\r\t\t\tself changed: #startUp].\r\tself changed.\r\tself restartChildWatcherProcess.\r\r',			#stamp : 'dtl 7/7/2010 07:46',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '962' ],		#self : OmReference [ '963' ],		#time : DateAndTime [ '2018-02-22T14:01:11.87695-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isExecutable:',			#protocol : #'file testing',			#sourceCode : 'isExecutable: aPathName\r\t"Answer true if file at aPathName has execute permission for this process."\r\r\t"OSProcess accessor isExecutable: \'/bin/sh\'"\r\t"OSProcess accessor isExecutable: \'/no/such/file\'"\r\r\t^ self isExecutable: aPathName forUser: self primGetUid inGroup: self primGetGid\r\r',			#stamp : 'dtl 10/6/2001 12:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '963' ],		#self : OmReference [ '964' ],		#time : DateAndTime [ '2018-02-22T14:01:11.877767-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isExecutable:forUser:inGroup:',			#protocol : #'file testing',			#sourceCode : 'isExecutable: aPathName forUser: uid inGroup: gid\r\t"Answer true if file at aPathName has execute permission for a user\r\tidentified by user uid and group gid."\r\r\t"OSProcess accessor\r\t\tisExecutable: \'/bin/sh\'\r\t\tforUser: OSProcess accessor primGetUid\r\t\tinGroup: OSProcess accessor primGetGid"\r\r\t| fStat suid sgid user group protectionMask |\r\tfStat := self fileStat: aPathName.\r\t(fStat isKindOf: String)\r\t\tifTrue: [self inform: aPathName, \': \', fStat. ^ nil].\r\tprotectionMask := fStat at: 3.\r\t((protectionMask at: 4) allMask: 1)\r\t\tifTrue: [^ true]. "Test executable by any user ID"\r\tsgid := (protectionMask at: 1) allMask: 2.\r\tsgid\r\t\tifTrue: [group := gid]\r\t\tifFalse: [group := fStat at: 2].\r\t((gid == group) and: [(protectionMask at: 3) allMask: 1])\r\t\tifTrue: [^ true]. "Test executable by my group ID"\r\tsuid := (protectionMask at: 1) allMask: 4.\r\tsuid\r\t\tifTrue: [user := uid]\r\t\tifFalse: [user := fStat at: 1].\r\t((uid == user) and: [(protectionMask at: 2) allMask: 1])\r\t\tifTrue: [^ true]. "Test executable by my user ID"\r\t^ false\r\r',			#stamp : 'dtl 5/1/2001 22:53',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '964' ],		#self : OmReference [ '965' ],		#time : DateAndTime [ '2018-02-22T14:01:11.878523-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isLockableFile:',			#protocol : #'file locking',			#sourceCode : 'isLockableFile: aFileStream\r\t"Check for ability to place an exclusive lock on the entire file represented by\r\taFileStream. An exclusive lock (write lock) permits only one OS process to hold\r\tthe lock. Answer true if the region is lockable."\r\r\t^ self isLockableFile: aFileStream exclusive: true\r',			#stamp : 'dtl 2/14/2004 15:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '965' ],		#self : OmReference [ '966' ],		#time : DateAndTime [ '2018-02-22T14:01:11.879346-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isLockableFile:exclusive:',			#protocol : #'file locking',			#sourceCode : 'isLockableFile: aFileStream exclusive: flag\r\t"Check for ability to place an exclusive lock on the entire file represented by\r\taFileStream. An exclusive lock (write lock) permits only one OS process to hold\r\tthe lock. Answer true if the region is lockable."\r\r\t| fileLock |\r\taFileStream ifNil: [^ false].\r\tfileLock := OSFileLock onFile: aFileStream exclusive: flag.\r\t^ self isLockableFileRegion: fileLock\r',			#stamp : 'jf 2/22/2004 17:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '966' ],		#self : OmReference [ '967' ],		#time : DateAndTime [ '2018-02-22T14:01:11.880245-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isLockableFile:from:to:',			#protocol : #'file locking',			#sourceCode : 'isLockableFile: aFileStream from: start to: end\r\t"Pass a struct SQFile on the stack, and check for ability to lock the specified region.\r\tIf the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold  a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock).\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tAnswer true if the region is lockable."\r\r\t^ self isLockableFile: aFileStream from: start to: end exclusive: true\r',			#stamp : 'dtl 2/14/2004 15:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '967' ],		#self : OmReference [ '968' ],		#time : DateAndTime [ '2018-02-22T14:01:11.881572-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isLockableFile:from:to:exclusive:',			#protocol : #'file locking',			#sourceCode : 'isLockableFile: aFileStream from: start to: end exclusive: flag\r\t"Pass a struct SQFile on the stack, and check for ability to lock the specified region.\r\tIf the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold  a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock).\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tAnswer true if the region is lockable."\r\r\t| fileRegion |\r\taFileStream ifNil: [^ false].\r\tfileRegion := OSFileRegionLock onFile: aFileStream from: start to: end exclusive: flag.\r\t^ self isLockableFileRegion: fileRegion\r',			#stamp : 'dtl 2/22/2004 15:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '968' ],		#self : OmReference [ '969' ],		#time : DateAndTime [ '2018-02-22T14:01:11.882376-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isLockableFileRegion:',			#protocol : #'file locking',			#sourceCode : 'isLockableFileRegion: aFileLock\r\t"Pass a struct SQFile on the stack, and check for ability to lock the specified region.\r\tIf the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold  a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock).\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tAnswer true if the region is lockable."\r\r\taFileLock ifNil: [^ false].\r\t(self canAcquireLock: aFileLock) ifFalse: [^ false].\r\t\r\t^ aFileLock test\r',			#stamp : 'jf 2/22/2004 18:42',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '969' ],		#self : OmReference [ '970' ],		#time : DateAndTime [ '2018-02-22T14:01:11.88314-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isReadable:',			#protocol : #'file testing',			#sourceCode : 'isReadable: aPathName\r\t"Answer true if file at aPathName has read permission for this process."\r\r\t"OSProcess accessor isWritable: \'/bin/sh\'"\r\r\t^ self isReadable: aPathName forUser: self primGetUid inGroup: self primGetGid\r\r',			#stamp : 'dtl 5/1/2001 23:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '970' ],		#self : OmReference [ '971' ],		#time : DateAndTime [ '2018-02-22T14:01:11.883988-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isReadable:forUser:inGroup:',			#protocol : #'file testing',			#sourceCode : 'isReadable: aPathName forUser: uid inGroup: gid\r\t"Answer true if file at aPathName has read permission for a user\r\tidentified by user uid and group gid."\r\r\t"OSProcess accessor\r\t\tisReadable: \'/bin/sh\'\r\t\tforUser: OSProcess accessor primGetUid\r\t\tinGroup: OSProcess accessor primGetGid"\r\r\t| fStat user group protectionMask |\r\tfStat := self fileStat: aPathName.\r\t(fStat isKindOf: String)\r\t\tifTrue: [self inform: aPathName, \': \', fStat. ^ nil].\r\tprotectionMask := fStat at: 3.\r\t((protectionMask at: 4) allMask: 4)\r\t\tifTrue: [^ true]. "Test readable by any user ID"\r\tgroup := fStat at: 2.\r\t((gid == group) and: [(protectionMask at: 3) allMask: 4])\r\t\tifTrue: [^ true]. "Test readable by my group ID"\r\tuser := fStat at: 1.\r\t((uid == user) and: [(protectionMask at: 2) allMask: 4])\r\t\tifTrue: [^ true]. "Test readable by my user ID"\r\t^ false\r\r',			#stamp : 'dtl 5/1/2001 23:00',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '971' ],		#self : OmReference [ '972' ],		#time : DateAndTime [ '2018-02-22T14:01:11.884744-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isWritable:',			#protocol : #'file testing',			#sourceCode : 'isWritable: aPathName\r\t"Answer true if file at aPathName has write permission for this process."\r\r\t"OSProcess accessor isWritable: \'/bin/sh\'"\r\r\t^ self isWritable: aPathName forUser: self primGetUid inGroup: self primGetGid\r\r',			#stamp : 'dtl 5/1/2001 23:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '972' ],		#self : OmReference [ '973' ],		#time : DateAndTime [ '2018-02-22T14:01:11.885544-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'isWritable:forUser:inGroup:',			#protocol : #'file testing',			#sourceCode : 'isWritable: aPathName forUser: uid inGroup: gid\r\t"Answer true if file at aPathName has read permission for a user\r\tidentified by user uid and group gid."\r\r\t"OSProcess accessor\r\t\tisWritable: \'/bin/sh\'\r\t\tforUser: OSProcess accessor primGetUid\r\t\tinGroup: OSProcess accessor primGetGid"\r\r\t| fStat user group protectionMask |\r\tfStat := self fileStat: aPathName.\r\t(fStat isKindOf: String)\r\t\tifTrue: [self inform: aPathName, \': \', fStat. ^ nil].\r\tprotectionMask := fStat at: 3.\r\t((protectionMask at: 4) allMask: 2)\r\t\tifTrue: [^ true]. "Test writable by any user ID"\r\tgroup := fStat at: 2.\r\t((gid == group) and: [(protectionMask at: 3) allMask: 2])\r\t\tifTrue: [^ true]. "Test writable by my group ID"\r\tuser := fStat at: 1.\r\t((uid == user) and: [(protectionMask at: 2) allMask: 2])\r\t\tifTrue: [^ true]. "Test writable by my user ID"\r\t^ false\r\r',			#stamp : 'dtl 5/1/2001 23:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '973' ],		#self : OmReference [ '974' ],		#time : DateAndTime [ '2018-02-22T14:01:11.886434-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'kill:withSignal:',			#protocol : #'VM atexit',			#sourceCode : 'kill: listOfPids withSignal: signumOrNil\r\t"On exit of the VM process, send signal to the external processes\r\tidentified by listOfPids. If signumOrNil is nil, the default SIGTERM\r\tsignal will be sent to listOfPids."\r\r\t^ self primKill: listOfPids withSignal: signumOrNil\r',			#stamp : 'dtl 3/17/2007 18:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '974' ],		#self : OmReference [ '975' ],		#time : DateAndTime [ '2018-02-22T14:01:11.887387-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'killOnVmExit:withSignal:',			#protocol : #'VM atexit',			#sourceCode : 'killOnVmExit: proxies withSignal: signumOrNil\r\t"When Squeak uses OSProcess to start a long running external process, it\r\tmay be useful to guarantee that one or more child processes is killed when\r\tthe Squeak VM exits, regardless of whether the normal Squeak shutdown\r\tprocessing has occurred. This method arranges for a collection of external\r\tprocess proxies to receive a signal when the Squeak VM exits. If signumOrNil\r\tis nil, the default SIGTERM will be used. Each invocation of this method will\r\toverride the effects of previous calls."\r\r\t"OSProcess accessor killOnVmExit: OSProcess thisOSProcess allMyChildren withSignal: nil"\r\r\t| pids |\r\tpids := (proxies select: [:p | p isRunning] thenCollect: [:e | e pid]) asArray.\r\t^ self kill: pids withSignal: signumOrNil\r',			#stamp : 'dtl 3/18/2007 10:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '975' ],		#self : OmReference [ '976' ],		#time : DateAndTime [ '2018-02-22T14:01:11.888227-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #listSigHandlerAddressesOnConsole,			#protocol : #debugging,			#sourceCode : 'listSigHandlerAddressesOnConsole\r\r\t"OSProcess accessor listSigHandlerAddressesOnConsole"\r\r\t(0 to: 67) do: [:sigNum | | prev |\r\t\t[prev := OSProcess accessor currentSigHandlerAddress: sigNum.\r\t\tOSProcess debugMessage: \'signal \', sigNum asString,\' hander is \', prev printString]\r\t\t\ton: Error\r\t\t\tdo: [:ex | OSProcess debugMessage: ex printString]]\r',			#stamp : 'dtl 11/19/2006 09:05',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '976' ],		#self : OmReference [ '977' ],		#time : DateAndTime [ '2018-02-22T14:01:11.889559-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #listSigHandlerAddressesOnTranscript,			#protocol : #debugging,			#sourceCode : 'listSigHandlerAddressesOnTranscript\r\r\t"OSProcess accessor listSigHandlerAddressesOnTranscript"\r\r\tTranscript cr.\r\t(0 to: 67) do: [:sigNum | | prev |\r\t\t[prev := OSProcess accessor currentSigHandlerAddress: sigNum.\r\t\tTranscript show: \'signal \', sigNum asString,\' hander is \', prev printString; cr]\r\t\t\ton: Error\r\t\t\tdo: [:ex | Transcript show: ex printString; cr]]\r',			#stamp : 'dtl 11/19/2006 09:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '977' ],		#self : OmReference [ '978' ],		#time : DateAndTime [ '2018-02-22T14:01:11.890324-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:',			#protocol : #'file locking',			#sourceCode : 'lockFile: aFileStream\r\t"Request an exclusive lock on the entire file represented by aFileStream. The\r\texclusive lock (write lock) permits only one OS process to hold the lock. Answer\r\ta descriptor for the locked file region, an Array of file handle and region interval;\r\tor answer nil on error.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self lockFile: aFileStream exclusive: true\r',			#stamp : 'dtl 2/14/2004 15:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '978' ],		#self : OmReference [ '979' ],		#time : DateAndTime [ '2018-02-22T14:01:11.891117-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:exclusive:',			#protocol : #'file locking',			#sourceCode : 'lockFile: aFileStream exclusive: flag\r\t"Request an exclusive lock on the entire file represented by aFileStream. The\r\texclusive lock (write lock) permits only one OS process to hold the lock. Answer\r\ta descriptor for the locked file region, an Array of file handle and region interval;\r\tor answer nil on error.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self lockFile: aFileStream exclusive: flag ifFail: nil\r',			#stamp : 'dtl 5/11/2006 23:40',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '979' ],		#self : OmReference [ '980' ],		#time : DateAndTime [ '2018-02-22T14:01:11.89191-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:exclusive:ifFail:',			#protocol : #'file locking',			#sourceCode : 'lockFile: aFileStream exclusive: flag ifFail: failBlock\r\t"Request an exclusive lock on the entire file represented by aFileStream. The\r\texclusive lock (write lock) permits only one OS process to hold the lock. Answer\r\ta descriptor for the locked file region, an Array of file handle and region interval;\r\tor answer nil on error.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t| fileLock |\r\taFileStream ifNil: [^ failBlock value].\r\tfileLock := OSFileLock onFile: aFileStream exclusive: flag.\r\t^ self lockFileRegion: fileLock ifFail: failBlock\r',			#stamp : 'dtl 5/11/2006 23:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '980' ],		#self : OmReference [ '981' ],		#time : DateAndTime [ '2018-02-22T14:01:11.89274-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:from:to:',			#protocol : #'file locking',			#sourceCode : 'lockFile: aFileStream from: start to: end\r\t"Pass a struct SQFile on the stack, and request a lock on the specified region.\r\tIf the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,\r\tan Array of file handle and region interval; or answer nil on error.\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self lockFile: aFileStream from: start to: end exclusive: true\r',			#stamp : 'dtl 2/14/2004 15:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '981' ],		#self : OmReference [ '982' ],		#time : DateAndTime [ '2018-02-22T14:01:11.893697-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:from:to:exclusive:',			#protocol : #'file locking',			#sourceCode : 'lockFile: aFileStream from: start to: end exclusive: flag\r\t"Pass a struct SQFile on the stack, and request a lock on the specified region.\r\tIf the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,\r\tan Array of file handle and region interval; or answer nil on error.\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t| fileRegion |\r\taFileStream ifNil: [^ nil].\r\tfileRegion := OSFileRegionLock onFile: aFileStream from: start to: end exclusive: flag.\r\t^ self lockFileRegion: fileRegion\r',			#stamp : 'dtl 2/22/2004 15:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '982' ],		#self : OmReference [ '983' ],		#time : DateAndTime [ '2018-02-22T14:01:11.894614-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:from:to:exclusive:ifFail:',			#protocol : #'file locking',			#sourceCode : 'lockFile: fileStream from: start to: end exclusive: writeLockFlag ifFail: failBlock\r\r\t| lock |\r\tlock := OSFileRegionLock onFile: fileStream from: start to: end exclusive: writeLockFlag.\r\t^ self lockFileRegion: lock ifFail: [failBlock value]',			#stamp : 'dtl 8/30/2009 14:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '983' ],		#self : OmReference [ '984' ],		#time : DateAndTime [ '2018-02-22T14:01:11.895363-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:from:to:ifFail:',			#protocol : #'file locking',			#sourceCode : 'lockFile: fileStream from: start to: end ifFail: failBlock\r\r\t^ self lockFile: fileStream from: start to: end exclusive: true ifFail: failBlock\r',			#stamp : 'dtl 11/28/2010 19:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '984' ],		#self : OmReference [ '985' ],		#time : DateAndTime [ '2018-02-22T14:01:11.896656-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFile:ifFail:',			#protocol : #'file locking',			#sourceCode : 'lockFile: aFileStream ifFail: failBlock\r\t"Request an exclusive lock on the entire file represented by aFileStream. The\r\texclusive lock (write lock) permits only one OS process to hold the lock. Answer\r\ta descriptor for the locked file region, an Array of file handle and region interval;\r\tor answer nil on error.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self lockFile: aFileStream exclusive: true ifFail: failBlock\r',			#stamp : 'dtl 5/11/2006 23:41',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '985' ],		#self : OmReference [ '986' ],		#time : DateAndTime [ '2018-02-22T14:01:11.897455-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFileRegion:',			#protocol : #'file locking',			#sourceCode : 'lockFileRegion: aFileLock\r\t"Pass a struct SQFile on the stack, and request a lock on the specified region.\r\tIf the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,\r\tan Array of file handle and region interval; or answer nil on error.\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self lockFileRegion: aFileLock ifFail: [nil]\r',			#stamp : 'dtl 5/8/2006 07:04',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '986' ],		#self : OmReference [ '987' ],		#time : DateAndTime [ '2018-02-22T14:01:11.898274-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'lockFileRegion:ifFail:',			#protocol : #'file locking',			#sourceCode : 'lockFileRegion: aFileLock ifFail: failBlock\r\t"Pass a struct SQFile on the stack, and request a lock on the specified region.\r\tIf the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock). Answer a descriptor for the locked file region,\r\tan Array of file handle and region interval; or answer nil on error.\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\taFileLock ifNil: [^ failBlock value].\r\t"Check region lock overlap for Win32 compatibility"\r\t(self canAcquireLock: aFileLock) ifFalse: [^ failBlock value].\r\t\r\taFileLock lock\r\t\tifFalse: [^ failBlock value]\r\t\tifTrue:\r\t\t\t[self register: aFileLock.\r\t\t\t^ aFileLock]\r',			#stamp : 'dtl 5/8/2006 07:03',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '987' ],		#self : OmReference [ '988' ],		#time : DateAndTime [ '2018-02-22T14:01:11.899051-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #makePipeHandles,			#protocol : #'pipe open',			#sourceCode : 'makePipeHandles\r\t"Create a pipe, and answer an array of two IO accessors for the pipe \r\treader and writer. Set a signal handler to cause SIGPIPE signals to be\r\tignored. This will register a Semaphore to receive the SIGPIPE events,\r\tbut we will simply ignore the semaphore, effectively ignoring the\r\texternal OS signals. This is done instead of explicitly telling the OS to\r\tignore the signals because it allows the use of a uniform signal\r\tforwarding mechanism in Squeak, even for signals that are ultimately\r\tignored."\r\r\tself forwardSigPipe.\r\t^ super makePipeHandles\r',			#stamp : 'dtl 1/31/2004 19:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '988' ],		#self : OmReference [ '989' ],		#time : DateAndTime [ '2018-02-22T14:01:11.899908-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'mkdtemp:',			#protocol : #'temp files and directories',			#sourceCode : 'mkdtemp: templateString\r\t"Call mkdtemp() to generate a uniquely named temporary directory from a template\r\tstring. The last six or more characters of template must be XXXXXX and these are\r\treplaced with characters that make the directory name unique. The directory is then\r\tcreated with permissions 0700. Answer the new directory name."\r\r\t"OSProcess accessor mkdtemp: \'foodir.XXXXXX\' "\r\r\t^self primMkdtemp: templateString\r',			#stamp : 'dtl 6/3/2013 22:05',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '989' ],		#self : OmReference [ '990' ],		#time : DateAndTime [ '2018-02-22T14:01:11.900878-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'mkstemp:',			#protocol : #'temp files and directories',			#sourceCode : 'mkstemp: templateString\r\r\t"Call mkstemp() to generate a unique temporary file from a template string.\r\tThe last six or more characters of template must be XXXXXX and these are\r\treplaced with a string that make the filename unique. Contents of the template\r\tstring are modified. The file is created with permissions 0600, that is, read plus\r\twrite for owner only. Answer an opened file stream on the newly created file."\r\r\t"OSProcess accessor mkstemp: \'foo.XXXXXX\' "\r\r\t" | s | { s := \'foo.XXXXXX\' . OSProcess accessor mkstemp: s } "\r\r\t| fileName sqFile |\r\tfileName := templateString copy.\r\tsqFile := self primMkstemp: fileName.\r\t^ AttachableFileStream\r\t\tname: fileName\r\t\tattachTo: sqFile\r\t\twritable: true\r',			#stamp : 'dtl 6/3/2013 22:36',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '990' ],		#self : OmReference [ '991' ],		#time : DateAndTime [ '2018-02-22T14:01:11.901649-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'mktemp:',			#protocol : #'temp files and directories',			#sourceCode : 'mktemp: templateString\r\t"Call mktemp() to generate a unique temporary filename from a template string.\r\tThe last six or more characters of template must be XXXXXX and these are replaced\r\twith a string that make the filename unique. The templateString must be a mutable\r\tstring, because the primitive will change its contents.\r\t\r\tUse primitiveMkstemp to avoid file creation race condition, see man 3 mktemp."\r\r\t"OSProcess accessor mktemp: \'foo.XXXXXX\' "\r\t"OSProcess accessor mktemp: \'/tmp/foo.XXXXXX\' "\r\r\t^ self primMktemp: templateString\r',			#stamp : 'dtl 6/3/2013 21:59',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '991' ],		#self : OmReference [ '992' ],		#time : DateAndTime [ '2018-02-22T14:01:11.902434-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'nice:',			#protocol : #'fork and exec',			#sourceCode : 'nice: inc\r\t"Change the scheduling priority of this OS process by the given nice increment.\r\tA positive increment decreases the priority. Only the superuser can specify\r\ta negative value to increase the priority. A typical use is to increase the\r\tnice value by 1 in order to make the Squeak VM run at lower priority. This\r\tmay be useful for a background Squeak doing an image save or other non-\r\tinteractive process."\r\r\t"OSProcess accessor nice: 1"\r\r\t^ self primNice: inc\r',			#stamp : 'dtl 10/8/2005 09:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '992' ],		#self : OmReference [ '993' ],		#time : DateAndTime [ '2018-02-22T14:01:11.903693-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'oldPrimCanConnectToXDisplay:',			#protocol : #'display handling - old plugin compatibility',			#sourceCode : 'oldPrimCanConnectToXDisplay: xDisplayName\r\r\t"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"\r\r\t"Open and close a connection to displayName. It the connection was successfully\r\topened, answer true; otherwise false. This is intended to check for the ability\r\tto open an X display prior to actually making the attempt."\r\r\t"OSProcess accessor primCanConnectToXDisplay: \':0.0\' "\r\t"OSProcess accessor primCanConnectToXDisplay: \':1\' "\r\r\t<primitive: \'primitiveCanConnectToXDisplay\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/3/2003 20:34',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '993' ],		#self : OmReference [ '994' ],		#time : DateAndTime [ '2018-02-22T14:01:11.904508-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #oldPrimGetXDisplayName,			#protocol : #'display handling - old plugin compatibility',			#sourceCode : 'oldPrimGetXDisplayName\r\r\t"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"\r\r\t"Answer a string containing the name for the X display, or nil if the display was opened\r\tusing the $DISPLAY environment variable. This answers the name of the X display as of\r\tthe time it was last opened, which may be different from the current setting of $DISPLAY."\r\r\t"OSProcess accessor primGetXDisplayName"\r\r\t<primitive: \'primitiveGetXDisplayName\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/3/2003 20:34',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '994' ],		#self : OmReference [ '995' ],		#time : DateAndTime [ '2018-02-22T14:01:11.905261-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #oldPrimIsConnectedToXServer,			#protocol : #'display handling - old plugin compatibility',			#sourceCode : 'oldPrimIsConnectedToXServer\r\r\t"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"\r\r\t"Answer true if VM is currently connected to an X server."\r\r\t"OSProcess accessor primIsConnectedToXServer inspect"\r\t"| x |\r\tOSProcess accessor primKillDisplay.\r\tx := OSProcess accessor primIsConnectedToXServer.\r\tOSProcess accessor primOpenXDisplay.\r\tx inspect"\r\r\t<primitive: \'primitiveIsConnectedToXServer\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/3/2003 20:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '995' ],		#self : OmReference [ '996' ],		#time : DateAndTime [ '2018-02-22T14:01:11.906043-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #oldPrimKillDisplay,			#protocol : #'display handling - old plugin compatibility',			#sourceCode : 'oldPrimKillDisplay\r\r\t"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"\r\r\t"Call an internal function which will disconnect the X display session."\r\r\t"OSProcess thisOSProcess processAccessor primKillDisplay"\r\r\t<primitive: \'primitiveKillDisplay\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/3/2003 20:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '996' ],		#self : OmReference [ '997' ],		#time : DateAndTime [ '2018-02-22T14:01:11.906941-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #oldPrimOpenXDisplay,			#protocol : #'display handling - old plugin compatibility',			#sourceCode : 'oldPrimOpenXDisplay\r\r\t"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"\r\r\t"Call an internal function which will open the X display session."\r\r\t"OSProcess thisOSProcess processAccessor primKillDisplay.\r\t(Delay forSeconds: 5) wait.\r\tOSProcess thisOSProcess processAccessor primOpenXDisplay"\r\r\t<primitive: \'primitiveOpenXDisplay\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/3/2003 20:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '997' ],		#self : OmReference [ '998' ],		#time : DateAndTime [ '2018-02-22T14:01:11.907827-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'oldPrimSetXDisplayName:',			#protocol : #'display handling - old plugin compatibility',			#sourceCode : 'oldPrimSetXDisplayName: aStringOrNil\r\r\t"Deprecated - install the XDisplayControlPlugin to eliminate the need to call this method"\r\r\t"Set the name for the X display for use in the next call to primitiveOpenXDisplay.\r\taStringOrNil must be either a String (such as \'myhost:0\') or nil, indicating that\r\tthe current value of $DISPLAY should be used."\r\r\t"OSProcess accessor primSetXDisplayName: \':0.0\' "\r\t"OSProcess accessor primSetXDisplayName: nil "\r\r\t<primitive: \'primitiveSetXDisplayName\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/3/2003 20:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '998' ],		#self : OmReference [ '999' ],		#time : DateAndTime [ '2018-02-22T14:01:11.90863-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #osppModuleName,			#protocol : #'plugin identification',			#sourceCode : 'osppModuleName\r\t"Answer a string containing the module name string for the OSPP plugin."\r\r\t"OSProcess accessor osppModuleName"\r\r\t^ self primOSProcessPluginModuleName\r',			#stamp : 'dtl 10/1/2005 11:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '999' ],		#self : OmReference [ '1000' ],		#time : DateAndTime [ '2018-02-22T14:01:11.909433-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #osppModuleVersionString,			#protocol : #'plugin identification',			#sourceCode : 'osppModuleVersionString\r\t"Answer a string containing the version string for the OSPP plugin."\r\r\t"OSProcess accessor osppModuleVersionString"\r\r\t^ self primOSProcessPluginModuleVersionString\r',			#stamp : 'dtl 10/1/2005 11:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1000' ],		#self : OmReference [ '1001' ],		#time : DateAndTime [ '2018-02-22T14:01:11.910185-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primAioPluginModuleName,			#protocol : #'private - primitive access',			#sourceCode : 'primAioPluginModuleName\r\t"Answer a string containing the module name string for the AIO plugin."\r\r\t"OSProcess accessor primAioPluginModuleName"\r\r\t<primitive: \'primitiveModuleName\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/1/2005 10:37',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1001' ],		#self : OmReference [ '1002' ],		#time : DateAndTime [ '2018-02-22T14:01:11.911526-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primAioPluginVersionString,			#protocol : #'private - primitive access',			#sourceCode : 'primAioPluginVersionString\r\t"Answer a string containing the version string for the AIO plugin."\r\r\t"OSProcess accessor primAioPluginVersionString"\r\r\t<primitive: \'primitiveVersionString\' module: \'AioPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/1/2005 10:38',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1002' ],		#self : OmReference [ '1003' ],		#time : DateAndTime [ '2018-02-22T14:01:11.912287-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primArgumentAt:',			#protocol : #'external process access',			#sourceCode : 'primArgumentAt: index\r\t"Answer the argument string in the argument OS process argument list at position index.\r\tIn Unix, the first element of the list is the program name, and any additional elements\r\tof the list are optional command line arguments passed to the program. This convention\r\tmay be simulated by the C runtime libraries on other operating systems, but argument\r\tlist handling should be assumed to be operating system dependent."\r\r\t<primitive: \'primitiveArgumentAt\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:19',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1003' ],		#self : OmReference [ '1004' ],		#time : DateAndTime [ '2018-02-22T14:01:11.913122-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCanConnectToXDisplay:',			#protocol : #'display handling',			#sourceCode : 'primCanConnectToXDisplay: xDisplayName\r\t"Open and close a connection to displayName. It the connection was successfully\r\topened, answer true; otherwise false. This is intended to check for the ability\r\tto open an X display prior to actually making the attempt."\r\r\t"OSProcess accessor primCanConnectToXDisplay: \':0.0\' "\r\t"OSProcess accessor primCanConnectToXDisplay: \':1\' "\r\r\t<primitive: \'primitiveCanConnectToDisplay\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimCanConnectToXDisplay: xDisplayName\r\r',			#stamp : 'dtl 8/3/2003 18:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1004' ],		#self : OmReference [ '1005' ],		#time : DateAndTime [ '2018-02-22T14:01:11.914032-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCanReceiveSignals:',			#protocol : #'OS signal sending',			#sourceCode : 'primCanReceiveSignals: anIntegerPid\r\t"Answer true if an external OS process can receive signals. In most\r\tcases, if the process identified by anIntegerPid cannot receive signals, it is\r\tbecause the process does not exist and anIntegerPid is a stale reference (possibly\r\tleft over from a previous Squeak session). Answer nil if the primitive does\r\tnot exist (possibly because the VM is using an older version of the plugin)."\r\r\t<primitive: \'primitiveCanReceiveSignals\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 2/24/2001 14:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1005' ],		#self : OmReference [ '1006' ],		#time : DateAndTime [ '2018-02-22T14:01:11.914912-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primChdir:',			#protocol : #'private - primitive access',			#sourceCode : 'primChdir: pathString\r\t"Change current working directory. Does not update the $PWD environment variable."\r\r\t<primitive: \'primitiveChdir\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/31/2001 11:18',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1006' ],		#self : OmReference [ '1007' ],		#time : DateAndTime [ '2018-02-22T14:01:11.915687-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primCreatePipe,			#protocol : #'private - primitive access',			#sourceCode : 'primCreatePipe\r\t"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)\r\tfor the pipe reader and writer."\r\r\t<primitive: \'primitiveCreatePipe\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 12:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1007' ],		#self : OmReference [ '1008' ],		#time : DateAndTime [ '2018-02-22T14:01:11.916454-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCreatePipeWithSessionIdentifier:',			#protocol : #'private - primitive access',			#sourceCode : 'primCreatePipeWithSessionIdentifier: aByteArray\r\t"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)\r\tfor the pipe reader and writer."\r\r\t<primitive: \'primitiveCreatePipeWithSessionIdentifier\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 12:32',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1008' ],		#self : OmReference [ '1009' ],		#time : DateAndTime [ '2018-02-22T14:01:11.917211-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primDisconnectDisplay,			#protocol : #'display handling',			#sourceCode : 'primDisconnectDisplay\r\t"Disconnect the X display session. The actual Squeak window on the X server is not\r\teffected, but this instance of Squeak will not have any further interaction with it."\r\r\t"OSProcess thisOSProcess processAccessor primDisconnectDisplay"\r\r\t<primitive: \'primitiveDisconnectDisplay\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimKillDisplay\r\r',			#stamp : 'dtl 8/6/2003 06:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1009' ],		#self : OmReference [ '1010' ],		#time : DateAndTime [ '2018-02-22T14:01:11.918484-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primDup:',			#protocol : #'private - primitive access',			#sourceCode : 'primDup: fileDescriptor\r\t"Call dup2 to duplicate a file descriptor to the next available descriptor. Answer\r\tthe new file descriptor or -1 on failure."\r\r\t<primitive: \'primitiveDup\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 9/10/2011 23:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1010' ],		#self : OmReference [ '1011' ],		#time : DateAndTime [ '2018-02-22T14:01:11.919316-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primDup:to:',			#protocol : #'private - primitive access',			#sourceCode : 'primDup: oldFileDescriptor to: newFileDescriptor\r\t"Call dup2() to duplicate a file descriptor. Answer the duplicated file descriptor\r\tor -1 on failure."\r\r\t<primitive: \'primitiveDupTo\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 5/17/2009 21:57',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1011' ],		#self : OmReference [ '1012' ],		#time : DateAndTime [ '2018-02-22T14:01:11.920187-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primEnvironmentAt:',			#protocol : #'external process access',			#sourceCode : 'primEnvironmentAt: index\r\t"Answer the environment string at index position in the OS process environment list.\r\tThis returns a \'KEY=value\' string, which the caller is expected to parse into #KEY\r\tand \'value\' to be stored an environment dictionary."\r\r\t<primitive: \'primitiveEnvironmentAt\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:20',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1012' ],		#self : OmReference [ '1013' ],		#time : DateAndTime [ '2018-02-22T14:01:11.921127-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primEnvironmentAtSymbol:',			#protocol : #'private - primitive access',			#sourceCode : 'primEnvironmentAtSymbol: aSymbol\r\t"Answer the value of an environment variable in the external OS process."\r\r\t<primitive: \'primitiveEnvironmentAtSymbol\' module: \'UnixOSProcessPlugin\'>\r\t^ nil ',			#stamp : 'dtl 7/22/2000 17:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1013' ],		#self : OmReference [ '1014' ],		#time : DateAndTime [ '2018-02-22T14:01:11.921901-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primErrorMessageAt:',			#protocol : #'external process access',			#sourceCode : 'primErrorMessageAt: anInteger\r\t"Answer an error message string from the sys:=errlist array, indexed by anInteger."\r\r\t"OSProcess accessor primErrorMessageAt: 0"\r\t"OSProcess accessor primErrorMessageAt: 100"\r\t"OSProcess accessor primErrorMessageAt: 1000"\r\t"OSProcess accessor primErrorMessageAt: -1"\r\r\t<primitive: \'primitiveErrorMessageAt\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/31/2001 11:03',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1014' ],		#self : OmReference [ '1015' ],		#time : DateAndTime [ '2018-02-22T14:01:11.9227-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primFileProtectionMask:',			#protocol : #'private - primitive access',			#sourceCode : 'primFileProtectionMask: aPathString\r\t"Call stat(2) to obtain the file protection mask for a file. Answer an Array of\r\tfour integers representing the protection mask, or answer errno on failure. The\r\tprotection mask is four Integers, each of which may be considered an octal digit\r\t(0-7), with bit values 4, 2, and 1. The first digit selects the set user ID (4) and set\r\tgroup ID (2) and save text image (1) attributes. The second digit selects permissions\r\tfor the user who owns the file: read (4), write (2), and execute (1); the third\r\tselects permissions for other users in the file\'s group, with the same values; and\r\tthe fourth for other users not in the file\'s group, with the same values."\r\r\t<primitive: \'primitiveFileProtectionMask\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 4/30/2001 05:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1015' ],		#self : OmReference [ '1016' ],		#time : DateAndTime [ '2018-02-22T14:01:11.923494-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primFileStat:',			#protocol : #'private - primitive access',			#sourceCode : 'primFileStat: aPathString\r\t"Call stat(2) to obtain the file protection mask for a file. Answer errno on failure,\r\tor on success answer an array with: UID with: GID with: protectionMask. The\t\r\tprotectionMask is an Array of four integers representing the protection mask, or\r\tanswer errno on failure. The protection mask is four Integers, each of which may\r\tbe considered an octal digit (0-7), with bit values 4, 2, and 1. The first digit selects\r\tthe set user ID (4) and set group ID (2) and save text image (1) attributes. The second\r\tdigit selects permissions for the user who owns the file: read (4), write (2), and\r\texecute (1); the third selects permissions for other users in the file\'s group, with\r\tthe same values; and the fourth for other users not in the file\'s group, with the\r\tsame values."\r\r\t<primitive: \'primitiveFileStat\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 4/30/2001 20:56',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1016' ],		#self : OmReference [ '1017' ],		#time : DateAndTime [ '2018-02-22T14:01:11.924255-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primFlushXDisplay,			#protocol : #'display handling',			#sourceCode : 'primFlushXDisplay\r\t"Call an internal function to synchronize output to the X display."\r\r\t"OSProcess thisOSProcess processAccessor primFlushXDisplay"\r\r\t<primitive: \'primitiveFlushDisplay\' module: \'XDisplayControlPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 8/24/2003 10:13',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1017' ],		#self : OmReference [ '1018' ],		#time : DateAndTime [ '2018-02-22T14:01:11.925071-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primForkExec:stdIn:stdOut:stdErr:argBuf:argOffsets:envBuf:envOffsets:workingDir:',			#protocol : #'fork and exec',			#sourceCode : 'primForkExec: executableFile\r\tstdIn: inputFileHandle\r\tstdOut: outputFileHandle\r\tstdErr: errorFileHandle\r\targBuf: argVec\r\targOffsets: argOffsets\r\tenvBuf: envVec\r\tenvOffsets: envOffsets\r\tworkingDir: pathString\r\r\t"Parameters are expected to have been properly prepared by the caller, including string\r\tvalues which are to be null terminated strings. In other words, all strings should have\r\t(Character value: 0) as the last element in the string.\r\r\tParameters should be:\r\t\texecutableFile: a string with the name of a file to execute.\r\t\tstdIn: a fileID ByteArray (struct SQFile in C) to be used as standard input.\r\t\tstdOut: a fileID ByteArray to be used as standard output.\r\t\tstdErr: a fileID ByteArray to be used as standard error.\r\t\targVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.\r\t\targOffsets: an Array of offsets for fixing up the argVec addresses.\r\t\tenvVec: a String arranged to look more or less like a char **, but with the addresses not yet fixed.\r\t\tenvOffsets: an Array of offsets for fixing up the envVec addresses.\r\t\tworkingDir: a null terminated path name String, or nil.\r\tThe envVec parameter may be nil, in which case envOffsets is ignored. workingDir may be nil. The\r\tother parameters are required. Parameters with nil value indicate that current values for this process\r\tshould be used."\r\r\t<primitive: \'primitiveForkExec\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 11/28/2010 12:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1018' ],		#self : OmReference [ '1019' ],		#time : DateAndTime [ '2018-02-22T14:01:11.926485-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primForkSqueak,			#protocol : #'fork and exec',			#sourceCode : 'primForkSqueak\r\t"Clone this Squeak Smalltalk image in a child OSProcess. The child is the same as the\r\tparent, except for its new X session connection, and the return value of this method,\r\twhich is zero for the child process, and a positive integer equal to the pid of the child\r\tfor the parent process.\r\r\tThe child should not depend on using existing connections to external resources. For\r\texample, the child may lose its connections to stdin, stdout, and stderr after its parent\r\texits."\r\r\t<primitive: \'primitiveForkSqueakWithoutSigHandler\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 12:37',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1019' ],		#self : OmReference [ '1020' ],		#time : DateAndTime [ '2018-02-22T14:01:11.927388-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primForwardSignal:toSemaphore:',			#protocol : #'private - signal forwarding',			#sourceCode : 'primForwardSignal: signalNumber toSemaphore: semaphoreIndex\r\t"Set a signal handler in the VM which will signal a Smalltalk semaphore at\r\tsemaphoreIndex whenever an external signal sigNum is received. Answer the\r\tprior value of the signal handler. If semaphoreIndex is zero, the handler is\r\tunregistered, and the VM returns to its default behavior for handling that\r\tsignal.\r\r\tThe Smalltalk semaphore is expected to be kept at the same index location\r\tindefinitely during the lifetime of a Squeak session. If that is not the case, the\r\thandler must be unregistered prior to unregistering the Smalltalk semaphore."\r\r\t<primitive: \'primitiveForwardSignalToSemaphore\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/3/2002 20:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1020' ],		#self : OmReference [ '1021' ],		#time : DateAndTime [ '2018-02-22T14:01:11.928249-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primGetChildExitStatus:',			#protocol : #'fork and exec',			#sourceCode : 'primGetChildExitStatus: childPid\r\t"Clean up after the death of a child process, and answer the exit status of the child process."\r\r\t<primitive: \'primitiveReapChildProcess\' module: \'UnixOSProcessPlugin\'>\r\t^ Array with: childPid with: nil',			#stamp : 'dtl 10/14/2001 11:15',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1021' ],		#self : OmReference [ '1022' ],		#time : DateAndTime [ '2018-02-22T14:01:11.929062-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetCurrentWorkingDirectory,			#protocol : #'external process access',			#sourceCode : 'primGetCurrentWorkingDirectory\r\t"Call getcwd() to get the current working directory."\r\r\t"OSProcess thisOSProcess processAccessor primGetCurrentWorkingDirectory"\r\r\t<primitive: \'primitiveGetCurrentWorkingDirectory\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 7/22/2000 17:20',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1022' ],		#self : OmReference [ '1023' ],		#time : DateAndTime [ '2018-02-22T14:01:11.929829-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetEGid,			#protocol : #'external process access',			#sourceCode : 'primGetEGid\r\t"Answer the effective group ID for the OS process in which I am currently executing."\r\r\t"OSProcess accessor primGetEGid"\r\r\t<primitive: \'primitiveGetEGid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 4/30/2001 21:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1023' ],		#self : OmReference [ '1024' ],		#time : DateAndTime [ '2018-02-22T14:01:11.930599-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetEUid,			#protocol : #'external process access',			#sourceCode : 'primGetEUid\r\t"Answer the effective user ID for the OS process in which I am currently executing."\r\r\t"OSProcess accessor primGetEUid"\r\r\t<primitive: \'primitiveGetEUid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 4/30/2001 21:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1024' ],		#self : OmReference [ '1025' ],		#time : DateAndTime [ '2018-02-22T14:01:11.931347-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetGid,			#protocol : #'external process access',			#sourceCode : 'primGetGid\r\t"Answer the group ID for the OS process in which I am currently executing."\r\r\t"OSProcess accessor primGetGid"\r\r\t<primitive: \'primitiveGetGid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 4/30/2001 21:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1025' ],		#self : OmReference [ '1026' ],		#time : DateAndTime [ '2018-02-22T14:01:11.932125-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primGetPGid:',			#protocol : #'external process access',			#sourceCode : 'primGetPGid: pid\r\t"Answer the process group ID of the process identified by pid"\r\r\t<primitive: \'primitiveGetPGid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/15/2007 19:43',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1026' ],		#self : OmReference [ '1027' ],		#time : DateAndTime [ '2018-02-22T14:01:11.933466-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetPGrp,			#protocol : #'external process access',			#sourceCode : 'primGetPGrp\r\t"Answer the process group ID of this OS process"\r\r\t<primitive: \'primitiveGetPGrp\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/15/2007 19:39',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1027' ],		#self : OmReference [ '1028' ],		#time : DateAndTime [ '2018-02-22T14:01:11.934391-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetPPid,			#protocol : #'external process access',			#sourceCode : 'primGetPPid\r\t"Answer the OS process ID for the parent process of the OS process in which I am\r\tcurrently executing."\r\r\t<primitive: \'primitiveGetPPid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:20',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1028' ],		#self : OmReference [ '1029' ],		#time : DateAndTime [ '2018-02-22T14:01:11.935196-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetPid,			#protocol : #'external process access',			#sourceCode : 'primGetPid\r\t"Answer the OS process ID for the OS process in which I am currently executing."\r\r\t<primitive: \'primitiveGetPid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:20',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1029' ],		#self : OmReference [ '1030' ],		#time : DateAndTime [ '2018-02-22T14:01:11.935953-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetSession,			#protocol : #'external process access',			#sourceCode : 'primGetSession\r\t"Answer the unique identifier for this session of Smalltalk running in this OS Process."\r\r\t"OSProcess accessor primGetSession"\r\r\t<primitive: \'primitiveGetSession\' module: \'UnixOSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/2/2002 08:15',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1030' ],		#self : OmReference [ '1031' ],		#time : DateAndTime [ '2018-02-22T14:01:11.936732-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetStdErrHandle,			#protocol : #'private - primitive access',			#sourceCode : 'primGetStdErrHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard error for the\r\tOS process in which I am currently executing."\r\r\t<primitive: \'primitiveGetStdErrHandle\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1031' ],		#self : OmReference [ '1032' ],		#time : DateAndTime [ '2018-02-22T14:01:11.937486-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetStdInHandle,			#protocol : #'private - primitive access',			#sourceCode : 'primGetStdInHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard input for\r\tthe OS process in which I am currently executing."\r\r\t<primitive: \'primitiveGetStdInHandle\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1032' ],		#self : OmReference [ '1033' ],		#time : DateAndTime [ '2018-02-22T14:01:11.938246-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetStdOutHandle,			#protocol : #'private - primitive access',			#sourceCode : 'primGetStdOutHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard output for the\r\tOS process in which I am currently executing."\r\r\t<primitive: \'primitiveGetStdOutHandle\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1033' ],		#self : OmReference [ '1034' ],		#time : DateAndTime [ '2018-02-22T14:01:11.939-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetThreadID,			#protocol : #pthreads,			#sourceCode : 'primGetThreadID\r\t"Answer the ID of the pthread that is currently executing (the interpreter thread).\r\tA thread ID may be a 64 bit value on some platforms, so answer a byte array\r\tcontaining the value in machine-dependent byte order."\r\r\t"OSProcess accessor primGetThreadID"\r\r\t<primitive: \'primitiveGetThreadID\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/5/2006 10:51',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1034' ],		#self : OmReference [ '1035' ],		#time : DateAndTime [ '2018-02-22T14:01:11.940365-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetUid,			#protocol : #'external process access',			#sourceCode : 'primGetUid\r\t"Answer the user ID for the OS process in which I am currently executing."\r\r\t"OSProcess accessor primGetUid"\r\r\t<primitive: \'primitiveGetUid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 4/30/2001 21:00',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1035' ],		#self : OmReference [ '1036' ],		#time : DateAndTime [ '2018-02-22T14:01:11.941304-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetXDisplayName,			#protocol : #'display handling',			#sourceCode : 'primGetXDisplayName\r\t"Answer a string containing the name for the X display, or nil if the display was opened\r\tusing the $DISPLAY environment variable. This answers the name of the X display as of\r\tthe time it was last opened, which may be different from the current setting of $DISPLAY."\r\r\t"OSProcess accessor primGetXDisplayName"\r\r\t<primitive: \'primitiveGetDisplayName\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimGetXDisplayName\r\r',			#stamp : 'dtl 8/3/2003 18:27',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1036' ],		#self : OmReference [ '1037' ],		#time : DateAndTime [ '2018-02-22T14:01:11.942114-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primIsConnectedToXServer,			#protocol : #'display handling',			#sourceCode : 'primIsConnectedToXServer\r\t"Answer true if VM is currently connected to an X server."\r\r\t"OSProcess accessor primIsConnectedToXServer inspect"\r\t"| x |\r\tOSProcess accessor primKillDisplay.\r\tx := OSProcess accessor primIsConnectedToXServer.\r\tOSProcess accessor primOpenXDisplay.\r\tx inspect"\r\r\t<primitive: \'primitiveIsConnectedToDisplay\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimIsConnectedToXServer\r\r',			#stamp : 'dtl 8/3/2003 18:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1037' ],		#self : OmReference [ '1038' ],		#time : DateAndTime [ '2018-02-22T14:01:11.942985-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primKill:withSignal:',			#protocol : #'private - primitive access',			#sourceCode : 'primKill: listOfPids withSignal: signumOrNil\r\t"Set a list of pids to kill with signum when VM exits. If the signum\r\tparameter is nil, the default value of SIGTERM will be used."\r\r\t<primitive: \'primitiveKillOnExit\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed',			#stamp : 'dtl 3/18/2007 10:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1038' ],		#self : OmReference [ '1039' ],		#time : DateAndTime [ '2018-02-22T14:01:11.94375-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primKillDisplay,			#protocol : #'display handling',			#sourceCode : 'primKillDisplay\r\t"Disconnect the X display session and destroy the Squeak window on the X display."\r\r\t"OSProcess thisOSProcess processAccessor primKillDisplay"\r\r\t<primitive: \'primitiveKillDisplay\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimKillDisplay\r\r',			#stamp : 'dtl 8/6/2003 06:22',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1039' ],		#self : OmReference [ '1040' ],		#time : DateAndTime [ '2018-02-22T14:01:11.944518-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primLockFileRegion:offset:length:exclusive:',			#protocol : #'private - primitive access',			#sourceCode : 'primLockFileRegion: aSQFileStruct offset: begin length: len exclusive: flag\r\t"Pass a struct SQFile on the stack, and request a lock on the specified region.\r\tIf the exclusive flag is true, then request an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, request a shared (F:=RDLCK) lock. Any number of Unix processes\r     may  hold  a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock). Answer the result of the call to fcntl()."\r\r\t<primitive: \'primitiveLockFileRegion\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 1/3/2004 19:59',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1040' ],		#self : OmReference [ '1041' ],		#time : DateAndTime [ '2018-02-22T14:01:11.9453-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primMkdtemp:',			#protocol : #'private - primitive access',			#sourceCode : 'primMkdtemp: templateString\r\t"Call mkdtemp() to generate a uniquely named temporary directory from a template\r\tstring. The last six characters of template must be XXXXXX and these are replaced\r\twith characters that make the directory name unique. The directory is then created\r\twith permissions 0700. Answer the new directory name."\r\r\t<primitive: \'primitiveMkdtemp\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 6/1/2013 17:14',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1041' ],		#self : OmReference [ '1042' ],		#time : DateAndTime [ '2018-02-22T14:01:11.946064-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primMkstemp:',			#protocol : #'private - primitive access',			#sourceCode : 'primMkstemp: templateString\r\t"Call mkstemp() to generate a unique temporary file from a template string.\r\tThe last six characters of template must be XXXXXX and these are replaced with\r\ta string that make the filename unique. Answer a SQFile descriptor for the file stream.\r\t\r\tContents of the template string are modified, and provide the name of the newly\r\tcreated file.\r\r\tThe  file  is  created  with permissions 0600, that is, read plus write for owner only.\r\r\tSender must convert the file descriptor to a FileStream before it can be used."\r\r\t<primitive: \'primitiveMkstemp\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 6/3/2013 22:33',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1042' ],		#self : OmReference [ '1043' ],		#time : DateAndTime [ '2018-02-22T14:01:11.946939-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primMktemp:',			#protocol : #'private - primitive access',			#sourceCode : 'primMktemp: templateString\r\t"Call mktemp() to generate a unique temporary filename from a template string.\r\tThe last six characters of template must be XXXXXX and these are replaced with\r\ta string that make the filename unique. The templateString must be a mutable\r\tstring, because the primitive will change its contents.\r\t\r\tUse primitiveMkstemp to avoid file creation race condition, see man 3 mktemp."\r\r\t<primitive: \'primitiveMktemp\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 6/1/2013 17:14',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1043' ],		#self : OmReference [ '1044' ],		#time : DateAndTime [ '2018-02-22T14:01:11.948465-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primNice:',			#protocol : #'fork and exec',			#sourceCode : 'primNice: inc\r\t"Change the scheduling priority of this OS process by the given nice increment."\r\r\t<primitive: \'primitiveNice\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/8/2005 09:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1044' ],		#self : OmReference [ '1045' ],		#time : DateAndTime [ '2018-02-22T14:01:11.949236-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primOSProcessPluginModuleName,			#protocol : #'private - primitive access',			#sourceCode : 'primOSProcessPluginModuleName\r\t"Answer a string containing the module name string for the OSPP plugin."\r\r\t"OSProcess accessor primOSProcessPluginModuleName"\r\r\t<primitive: \'primitiveModuleName\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/1/2005 11:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1045' ],		#self : OmReference [ '1046' ],		#time : DateAndTime [ '2018-02-22T14:01:11.950019-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primOSProcessPluginModuleVersionString,			#protocol : #'private - primitive access',			#sourceCode : 'primOSProcessPluginModuleVersionString\r\t"Answer a string containing the version string for the OSPP plugin."\r\r\t"OSProcess accessor primOSProcessPluginModuleVersionString"\r\r\t<primitive: \'primitiveVersionString\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/1/2005 11:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1046' ],		#self : OmReference [ '1047' ],		#time : DateAndTime [ '2018-02-22T14:01:11.950811-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primOpenXDisplay,			#protocol : #'display handling',			#sourceCode : 'primOpenXDisplay\r\t"Call an internal function which will open the X display session."\r\r\t"OSProcess thisOSProcess processAccessor primKillDisplay.\r\t(Delay forSeconds: 5) wait.\r\tOSProcess thisOSProcess processAccessor primOpenXDisplay"\r\r\t<primitive: \'primitiveOpenDisplay\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimOpenXDisplay\r\r',			#stamp : 'dtl 8/3/2003 18:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1047' ],		#self : OmReference [ '1048' ],		#time : DateAndTime [ '2018-02-22T14:01:11.951572-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primPrintAllStacksOnSignal:',			#protocol : #'private - signal forwarding',			#sourceCode : 'primPrintAllStacksOnSignal: signalNumber\r\t"Set a signal handler in the VM which will print all call stacks on the console\r\toutput whenever an external signal sigNum is received. Answer the\r\tprior value of the signal handler."\r\r\t"OSProcess accessor primPrintAllStacksOnSignal: OSProcess accessor primSigUsr1Number"\r\r\t"OSProcess accessor primForwardSignal: OSProcess accessor primSigUsr1Number toSemaphore: nil"\r\r\t<primitive: \'primitivePrintAllStacksOnSignal\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 7/19/2010 23:38',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1048' ],		#self : OmReference [ '1049' ],		#time : DateAndTime [ '2018-02-22T14:01:11.95234-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primPutEnv:',			#protocol : #'private - primitive access',			#sourceCode : 'primPutEnv: aString\r\t"Add or update an environment variable in the external OS process using a \'KEY=value\'\r\tstring."\r\r\t<primitive: \'primitivePutEnv\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/22/2000 17:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1049' ],		#self : OmReference [ '1050' ],		#time : DateAndTime [ '2018-02-22T14:01:11.953101-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primRealpath:',			#protocol : #'private - primitive access',			#sourceCode : 'primRealpath: pathString\r\t"Resolve pathString into a real path if possible, or answer nil."\r\r\t<primitive: \'primitiveRealpath\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/31/2001 15:44',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1050' ],		#self : OmReference [ '1051' ],		#time : DateAndTime [ '2018-02-22T14:01:11.953963-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSQFileFlush:',			#protocol : #'private - primitive access',			#sourceCode : 'primSQFileFlush: aSQFileStruct\r\t"Pass a struct SQFile on the stack, flush the external file stream."\r\r\t<primitive: \'primitiveSQFileFlush\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 7/22/2000 17:28',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1051' ],		#self : OmReference [ '1052' ],		#time : DateAndTime [ '2018-02-22T14:01:11.955396-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSQFileSetBlocking:',			#protocol : #'private - primitive access',			#sourceCode : 'primSQFileSetBlocking: aSQFileStruct\r\t"Pass a struct SQFile on the stack, and call fcntl() to set the file non-blocking."\r\r\t<primitive: \'primitiveSQFileSetBlocking\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 7/22/2000 17:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1052' ],		#self : OmReference [ '1053' ],		#time : DateAndTime [ '2018-02-22T14:01:11.956193-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSQFileSetNonBlocking:',			#protocol : #'private - primitive access',			#sourceCode : 'primSQFileSetNonBlocking: aSQFileStruct\r\t"Pass a struct SQFile on the stack, and call fcntl() to set the file non-blocking."\r\r\t<primitive: \'primitiveSQFileSetNonBlocking\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 7/22/2000 17:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1053' ],		#self : OmReference [ '1054' ],		#time : DateAndTime [ '2018-02-22T14:01:11.957011-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSQFileSetUnbuffered:',			#protocol : #'private - primitive access',			#sourceCode : 'primSQFileSetUnbuffered: aSQFileStruct\r\t"Pass a struct SQFile on the stack, set the file non-blocking."\r\r\t<primitive: \'primitiveSQFileSetUnbuffered\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 7/22/2000 17:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1054' ],		#self : OmReference [ '1055' ],		#time : DateAndTime [ '2018-02-22T14:01:11.957779-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSemaIndexFor:',			#protocol : #'private - signal forwarding',			#sourceCode : 'primSemaIndexFor: sigNum\r\t"Answer the registration index of the semaphore currently associated with the\r\tsignal handler for sigNum."\r\r\t<primitive: \'primitiveSemaIndexFor\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/4/2002 01:13',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1055' ],		#self : OmReference [ '1056' ],		#time : DateAndTime [ '2018-02-22T14:01:11.958556-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigabrtTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigabrtTo: anIntegerPid\r\t"Send SIGABRT (abort) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigabrtTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1056' ],		#self : OmReference [ '1057' ],		#time : DateAndTime [ '2018-02-22T14:01:11.959313-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigalrmTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigalrmTo: anIntegerPid\r\t"Send SIGALRM (alarm) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigalrmTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1057' ],		#self : OmReference [ '1058' ],		#time : DateAndTime [ '2018-02-22T14:01:11.960066-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigchldTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigchldTo: anIntegerPid\r\t"Send SIGCHLD (child status has changed, usually death of child) to the OS process\r\tidentified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigchldTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:24',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1058' ],		#self : OmReference [ '1059' ],		#time : DateAndTime [ '2018-02-22T14:01:11.960964-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigcontTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigcontTo: anIntegerPid\r\t"Send SIGCONT (continue) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigcontTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1059' ],		#self : OmReference [ '1060' ],		#time : DateAndTime [ '2018-02-22T14:01:11.961851-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSighupTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSighupTo: anIntegerPid\r\t"Send SIGHUP (hangup) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSighupTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1060' ],		#self : OmReference [ '1061' ],		#time : DateAndTime [ '2018-02-22T14:01:11.963159-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigintTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigintTo: anIntegerPid\r\t"Send SIGINT (interrupt) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigintTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1061' ],		#self : OmReference [ '1062' ],		#time : DateAndTime [ '2018-02-22T14:01:11.963936-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigkillTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigkillTo: anIntegerPid\r\t"Send SIGKILL (kill, unblockable) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigkillTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1062' ],		#self : OmReference [ '1063' ],		#time : DateAndTime [ '2018-02-22T14:01:11.964704-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigpipeTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigpipeTo: anIntegerPid\r\t"Send SIGPIPE (broken pipe) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigpipeTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1063' ],		#self : OmReference [ '1064' ],		#time : DateAndTime [ '2018-02-22T14:01:11.965483-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigquitTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigquitTo: anIntegerPid\r\t"Send SIGQUIT (quit) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigquitTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1064' ],		#self : OmReference [ '1065' ],		#time : DateAndTime [ '2018-02-22T14:01:11.96626-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigstopTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigstopTo: anIntegerPid\r\t"Send SIGSTOP (stop, unblockable) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigstopTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1065' ],		#self : OmReference [ '1066' ],		#time : DateAndTime [ '2018-02-22T14:01:11.967049-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigtermTo:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigtermTo: anIntegerPid\r\t"Send SIGTERM (termination) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigtermTo\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1066' ],		#self : OmReference [ '1067' ],		#time : DateAndTime [ '2018-02-22T14:01:11.96794-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigusr1To:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigusr1To: anIntegerPid\r\t"Send SIGUSR1 (User-defined signal 1) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigusr1To\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1067' ],		#self : OmReference [ '1068' ],		#time : DateAndTime [ '2018-02-22T14:01:11.968847-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSendSigusr2To:',			#protocol : #'OS signal sending',			#sourceCode : 'primSendSigusr2To: anIntegerPid\r\t"Send SIGUSR2 (User-defined signal 2) to the OS process identified by anIntegerPid.\r\tAnswer 0 on success, -1 on failure, and nil if the pluggable primitive is not present."\r\r\t<primitive: \'primitiveSendSigusr2To\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r\r',			#stamp : 'dtl 7/22/2000 17:26',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1068' ],		#self : OmReference [ '1069' ],		#time : DateAndTime [ '2018-02-22T14:01:11.970187-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSet:pGid:',			#protocol : #'external process access',			#sourceCode : 'primSet: pid pGid: processGroupId\r\t"Set the process group ID of the process identified by pid to a new process\r\tgroup ID."\r\r\t<primitive: \'primitiveSetPGid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/15/2007 19:47',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1069' ],		#self : OmReference [ '1070' ],		#time : DateAndTime [ '2018-02-22T14:01:11.970972-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSetPGrp,			#protocol : #'external process access',			#sourceCode : 'primSetPGrp\r\t"Set a new process group for this OS process. Newly created child processes\r\twill be members of the new process group."\r\r\t<primitive: \'primitiveSetPGrp\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/15/2007 19:40',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1070' ],		#self : OmReference [ '1071' ],		#time : DateAndTime [ '2018-02-22T14:01:11.971804-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSetSid,			#protocol : #'external process access',			#sourceCode : 'primSetSid\r\t"Quoted from Linux man pages:\r\tsetsid() creates a new session if the calling process is not a process group leader.\r\tThe calling process is the leader of the new session, the process  group  leader  of\r\tthe new process group, and has no controlling tty.  The process group ID and session\r\tID of the calling process are set to the PID of the calling  process.   The  calling\r\tprocess  will be the only process in this new process group and in this new session."\r\r\t<primitive: \'primitiveSetSid\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/18/2007 10:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1071' ],		#self : OmReference [ '1072' ],		#time : DateAndTime [ '2018-02-22T14:01:11.972587-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSetXDisplayName:',			#protocol : #'display handling',			#sourceCode : 'primSetXDisplayName: aStringOrNil\r\t"Set the name for the X display for use in the next call to primitiveOpenXDisplay.\r\taStringOrNil must be either a String (such as \'myhost:0\') or nil, indicating that\r\tthe current value of $DISPLAY should be used."\r\r\t"OSProcess accessor primSetXDisplayName: \':0.0\' "\r\t"OSProcess accessor primSetXDisplayName: nil "\r\r\t<primitive: \'primitiveSetDisplayName\' module: \'XDisplayControlPlugin\'>\r\t^ self oldPrimSetXDisplayName: aStringOrNil\r\r',			#stamp : 'dtl 8/3/2003 18:32',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1072' ],		#self : OmReference [ '1073' ],		#time : DateAndTime [ '2018-02-22T14:01:11.973342-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigChldNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigChldNumber\r\t"Integer value corresponding to SIGCHLD"\r\r\t<primitive: \'primitiveSigChldNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/3/2002 20:36',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1073' ],		#self : OmReference [ '1074' ],		#time : DateAndTime [ '2018-02-22T14:01:11.974198-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigHupNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigHupNumber\r\t"Integer value corresponding to SIGHUP"\r\r\t<primitive: \'primitiveSigHupNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 12/6/2002 18:04',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1074' ],		#self : OmReference [ '1075' ],		#time : DateAndTime [ '2018-02-22T14:01:11.975094-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigIntNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigIntNumber\r\t"Integer value corresponding to SIGINT"\r\r\t"OSProcess accessor primSigIntNumber"\r\r\t<primitive: \'primitiveSigIntNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/4/2002 00:19',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1075' ],		#self : OmReference [ '1076' ],		#time : DateAndTime [ '2018-02-22T14:01:11.975891-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigKillNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigKillNumber\r\t"Integer value corresponding to SIGKILL"\r\r\t"OSProcess accessor primSigKillNumber"\r\r\t<primitive: \'primitiveSigKillNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 12/6/2002 18:05',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1076' ],		#self : OmReference [ '1077' ],		#time : DateAndTime [ '2018-02-22T14:01:11.977205-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigPipeNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigPipeNumber\r\t"Integer value corresponding to SIGPIPE"\r\r\t<primitive: \'primitiveSigPipeNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/3/2002 20:35',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1077' ],		#self : OmReference [ '1078' ],		#time : DateAndTime [ '2018-02-22T14:01:11.977988-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigQuitNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigQuitNumber\r\t"Integer value corresponding to SIGQUIT"\r\r\t<primitive: \'primitiveSigQuitNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 12/6/2002 18:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1078' ],		#self : OmReference [ '1079' ],		#time : DateAndTime [ '2018-02-22T14:01:11.978765-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigTermNumber,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigTermNumber\r\t"Integer value corresponding to SIGTERM"\r\r\t<primitive: \'primitiveSigTermNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 12/6/2002 18:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1079' ],		#self : OmReference [ '1080' ],		#time : DateAndTime [ '2018-02-22T14:01:11.979536-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigUsr1Number,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigUsr1Number\r\t"Integer value corresponding to SIGUSR1"\r\r\t<primitive: \'primitiveSigUsr1Number\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 11/4/2005 06:41',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1080' ],		#self : OmReference [ '1081' ],		#time : DateAndTime [ '2018-02-22T14:01:11.980299-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSigUsr2Number,			#protocol : #'private - signal forwarding',			#sourceCode : 'primSigUsr2Number\r\t"Integer value corresponding to SIGUSR2"\r\r\t<primitive: \'primitiveSigUsr2Number\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 11/4/2005 06:42',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1081' ],		#self : OmReference [ '1082' ],		#time : DateAndTime [ '2018-02-22T14:01:11.981197-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSizeOfInt,			#protocol : #'private - primitive access',			#sourceCode : 'primSizeOfInt\r\t"Size of an integer for this C compiler on this machine."\r\r\t<primitive: \'primitiveSizeOfInt\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 8/7/2005 12:33',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1082' ],		#self : OmReference [ '1083' ],		#time : DateAndTime [ '2018-02-22T14:01:11.982134-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primSizeOfPointer,			#protocol : #'private - primitive access',			#sourceCode : 'primSizeOfPointer\r\t"Size of a void pointer for this C compiler on this machine."\r\r\t<primitive: \'primitiveSizeOfPointer\' module: \'UnixOSProcessPlugin\'>\r\t^ self primitiveFailed\r',			#stamp : 'dtl 8/7/2005 12:33',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1083' ],		#self : OmReference [ '1084' ],		#time : DateAndTime [ '2018-02-22T14:01:11.982909-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primTestEndOfFileFlag:',			#protocol : #'private - primitive access',			#sourceCode : 'primTestEndOfFileFlag: aSqFileStruct\r\t"Answer whether the file represented by aSqFileStruct is at end of file, as determined\r\tby a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers\r\ttrue if the file pointer is at the end of the file, but which does not call feof() to\r\tdetermine that an end of file condition has occurred. The difference is significant\r\tif aSqFileStruct represents a pipe or a device file, which may not be positionable\r\tin the sense of a conventional disk file."\r\r\t<primitive: \'primitiveTestEndOfFileFlag\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 14:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1084' ],		#self : OmReference [ '1085' ],		#time : DateAndTime [ '2018-02-22T14:01:11.983727-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primTestLockableFileRegion:offset:length:exclusive:',			#protocol : #'private - primitive access',			#sourceCode : 'primTestLockableFileRegion: aSQFileStruct offset: begin length: len exclusive: flag\r\t"Pass a struct SQFile on the stack, and check for ability to lock the specified region.\r\tIf the exclusive flag is true, then specify an exclusive (F:=WRLCK) lock on the\r     file. Otherwise, specify a shared (F:=RDLCK) lock. Any number of Unix processes\r     may hold  a read lock (shared lock) on a file region, but only one process may\r     hold a write lock (exclusive lock).\r\r\tIf length is zero, then the request is for the entire file to be locked, including\r\tregion extents that have not yet been allocated for the file.\r\r\tIf the fcntl() call fails, answer -1 (the result of the failed call). Otherwise,\r\tanswer an array with the following six fields:\r\t\tlockable (true or false)\r\t\tl:=pid (pid of the process preventing this lock request, or nil)\r\t\tl:=type (request type F:=WRLCK or F:=RDLOCK of the process preventing this lock request)\r\t\tl:=whence (the SEEK:=SET, SEEK:=CUR, or SEEK:=END value of the lock preventing this lock request).\r\t\tl:=start (offset of the region lock preventing this lock request)\r\t\tl:=len (length of the region lock preventing this lock request)"\r\r\t<primitive: \'primitiveTestLockableFileRegion\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 1/4/2004 15:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1085' ],		#self : OmReference [ '1086' ],		#time : DateAndTime [ '2018-02-22T14:01:11.986961-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primUnixFileClose:',			#protocol : #'private - primitive access',			#sourceCode : 'primUnixFileClose: integerFileNumber\r\t"Close a file handle at the close(2) level, using a handle returned by\r\t#primUnixFileNumber."\r\r\t<primitive: \'primitiveUnixFileClose\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 5/17/2009 21:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1086' ],		#self : OmReference [ '1087' ],		#time : DateAndTime [ '2018-02-22T14:01:11.988311-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primUnixFileNumber:',			#protocol : #'private - primitive access',			#sourceCode : 'primUnixFileNumber: aSQFileStruct\r\t"Pass a struct SQFile on the stack, and answer the corresponding Unix file number."\r\r\t<primitive: \'primitiveUnixFileNumber\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 2/11/2001 16:23',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1087' ],		#self : OmReference [ '1088' ],		#time : DateAndTime [ '2018-02-22T14:01:11.989265-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primUnlockFileRegion:offset:length:',			#protocol : #'private - primitive access',			#sourceCode : 'primUnlockFileRegion: aSQFileStruct offset: begin length: len\r\t"Pass a struct SQFile on tthe stack, and unlock the specified region.\r\tAnswer the result of the call to fcntl(). If the region is in the file lock cache,\r\tremove it, but otherwise ignore the cache. The cache supports Win32 semantics\r\twithin a single Squeak image, but not across separate images, therefore the\r\tunlock should be attempted regardless of whether this image thinks that the\r\tregion has previously been locked. Answer the result of the call to fcntl()."\r\r\t<primitive: \'primitiveUnlockFileRegion\' module: \'UnixOSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 1/3/2004 23:08',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1088' ],		#self : OmReference [ '1089' ],		#time : DateAndTime [ '2018-02-22T14:01:11.990041-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'primUnsetEnv:',			#protocol : #'private - primitive access',			#sourceCode : 'primUnsetEnv: aKeyString\r\t"Remove an environment variable from the external OS process environment."\r\r\t<primitive: \'primitiveUnsetEnv\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 10/7/2001 00:37',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1089' ],		#self : OmReference [ '1090' ],		#time : DateAndTime [ '2018-02-22T14:01:11.990813-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primXDisplayControlPluginModuleName,			#protocol : #'private - primitive access',			#sourceCode : 'primXDisplayControlPluginModuleName\r\t"Answer a string containing the module name string for the display control plugin."\r\r\t"OSProcess accessor primXDisplayControlPluginModuleName"\r\r\t<primitive: \'primitiveModuleName\' module: \'XDisplayControlPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/30/2003 18:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1090' ],		#self : OmReference [ '1091' ],		#time : DateAndTime [ '2018-02-22T14:01:11.991579-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #primXDisplayControlPluginModuleVersionString,			#protocol : #'private - primitive access',			#sourceCode : 'primXDisplayControlPluginModuleVersionString\r\t"Answer a string containing the version string for the display control plugin."\r\r\t"OSProcess accessor primXDisplayControlPluginModuleVersionString"\r\r\t<primitive: \'primitiveVersionString\' module: \'XDisplayControlPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 8/30/2003 18:32',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1091' ],		#self : OmReference [ '1092' ],		#time : DateAndTime [ '2018-02-22T14:01:11.992375-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\t"In English, say \'a Unix\' rather than \'an Unix\'. Therefore do not use super printOn, which\r\ttreats $U as a vowel."\r\r\taStream\r\t\tnextPutAll: \'a \';\r\t\tnextPutAll: self class name;\r\t\tnextPutAll: \' on pid \';\r\t\tnextPutAll: self primGetPid printString\r',			#stamp : 'dtl 9/10/2000 10:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1092' ],		#self : OmReference [ '1093' ],		#time : DateAndTime [ '2018-02-22T14:01:11.993152-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'putPath:',			#protocol : #'external process access',			#sourceCode : 'putPath: aString\r\t"Convenience method. Set the environment PATH variable to aString."\r\r\t| pathString |\r\tpathString := \'PATH=\', aString, ((Character value: 0) asString). \r\t^ self environmentPut: pathString\r\r\r\r\r',			#stamp : 'dtl 9/10/2000 11:59',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1093' ],		#self : OmReference [ '1094' ],		#time : DateAndTime [ '2018-02-22T14:01:11.994654-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'realpath:',			#protocol : #'external process access',			#sourceCode : 'realpath: pathString\r\t"Get the real path for pathString from the external OS process."\r\r\t"OSProcess accessor realpath: \'/tmp\'"\r\t"OSProcess accessor realpath: OSProcess defaultPathString"\r\t"OSProcess accessor realpath: \'/bogus/path/name\'"\r\r\t^ self primRealpath: pathString\r',			#stamp : 'dtl 1/25/2013 18:59',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1094' ],		#self : OmReference [ '1095' ],		#time : DateAndTime [ '2018-02-22T14:01:11.995619-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'register:',			#protocol : #'file lock registry',			#sourceCode : 'register: fileRegionLock\r\t"If an object equal to fileRegionLock exists in the registry, answer it. Otherwise, add\r\tfileRegionLock to the registry and answer fileRegionLock. Caching is enabled when\r\tEmulateWin32FileLocking is true."\r\r\t^ self emulateWin32FileLocking\r\t\tifTrue: [super register: fileRegionLock]\r\t\tifFalse: [fileRegionLock]\r',			#stamp : 'dtl 3/5/2005 13:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1095' ],		#self : OmReference [ '1096' ],		#time : DateAndTime [ '2018-02-22T14:01:11.996396-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restartChildWatcherProcess,			#protocol : #'initialize - release',			#sourceCode : 'restartChildWatcherProcess\r\t"OSProcess accessor restartChildWatcherProcess"\r\r\tself finalize.\r\t^ self grimReaperProcess\r',			#stamp : 'dtl 8/15/2010 15:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1096' ],		#self : OmReference [ '1097' ],		#time : DateAndTime [ '2018-02-22T14:01:11.997147-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigChld,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigChld\r\t"Unset a SIGCHLD signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigChld"\r\r\t^ self restoreSignal: self primSigChldNumber\r',			#stamp : 'dtl 11/4/2005 06:45',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1097' ],		#self : OmReference [ '1098' ],		#time : DateAndTime [ '2018-02-22T14:01:11.997925-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigHup,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigHup\r\t"Unset a SIGHUP signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigHup"\r\r\t^ self restoreSignal: self primSigHupNumber\r',			#stamp : 'dtl 11/4/2005 06:47',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1098' ],		#self : OmReference [ '1099' ],		#time : DateAndTime [ '2018-02-22T14:01:11.99869-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigInt,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigInt\r\t"Unset a SIGINT signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigInt"\r\r\t^ self restoreSignal: self primSigIntNumber\r',			#stamp : 'dtl 11/4/2005 06:46',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1099' ],		#self : OmReference [ '1100' ],		#time : DateAndTime [ '2018-02-22T14:01:11.999481-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigKill,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigKill\r\t"Unset a SIGKILL signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigKill"\r\r\tself notify: \'SIGKILL and SIGSTOP signals cannot be caught, see man signal(2)\'.\r\t^ self restoreSignal: self primSigIntNumber\r',			#stamp : 'dtl 11/4/2005 06:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1100' ],		#self : OmReference [ '1101' ],		#time : DateAndTime [ '2018-02-22T14:01:12.000243-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigPipe,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigPipe\r\t"Unset a SIGPIPE signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigPipe"\r\r\t^ self restoreSignal: self primSigPipeNumber\r',			#stamp : 'dtl 11/4/2005 06:48',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1101' ],		#self : OmReference [ '1102' ],		#time : DateAndTime [ '2018-02-22T14:01:12.001724-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigQuit,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigQuit\r\t"Unset a SIGQUIT signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigQuit"\r\r\t^ self restoreSignal: self primSigQuitNumber\r',			#stamp : 'dtl 11/4/2005 06:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1102' ],		#self : OmReference [ '1103' ],		#time : DateAndTime [ '2018-02-22T14:01:12.002593-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigTerm,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigTerm\r\t"Unset a SIGTERM signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigTerm"\r\r\t^ self restoreSignal: self primSigTermNumber\r',			#stamp : 'dtl 11/4/2005 06:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1103' ],		#self : OmReference [ '1104' ],		#time : DateAndTime [ '2018-02-22T14:01:12.003361-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigUsr1,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigUsr1\r\t"Unset a SIGUSR1 signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigUsr1"\r\r\t^ self restoreSignal: self primSigUsr1Number\r',			#stamp : 'dtl 11/4/2005 06:49',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1104' ],		#self : OmReference [ '1105' ],		#time : DateAndTime [ '2018-02-22T14:01:12.004177-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #restoreSigUsr2,			#protocol : #'signal forwarding',			#sourceCode : 'restoreSigUsr2\r\t"Unset a SIGUSR2 signal handler and unregister the Smalltalk semaphore.\r\tAnswer the unregistered Semaphore, or nil if unable to restore the signal\r\t(possibly because no handler had been set)."\r\r\t"OSProcess accessor restoreSigUsr2"\r\r\t^ self restoreSignal: self primSigUsr2Number\r',			#stamp : 'dtl 11/4/2005 06:50',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1105' ],		#self : OmReference [ '1106' ],		#time : DateAndTime [ '2018-02-22T14:01:12.004969-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'restoreSignal:',			#protocol : #'signal forwarding',			#sourceCode : 'restoreSignal: signalNumber \r\t"Unset a signal handler and unregister the Smalltalk semaphore. Answer\r\tthe unregistered Semaphore, or nil if unable to restore the signal (possibly\r\tbecause no handler had been set)."\r\r\t"OSProcess accessor restoreSignal: OSProcess accessor primSigIntNumber"\r\r\t| semaphoreIndex sema |\r\tsemaphoreIndex := self primSemaIndexFor: signalNumber.\r\tsemaphoreIndex ifNotNil:\r\t\t[sema := Smalltalk externalObjects at: semaphoreIndex ifAbsent: [].\r\t\tsema ifNotNil:\r\t\t\t[self primForwardSignal: signalNumber toSemaphore: nil.\r\t\t\tSmalltalk unregisterExternalObject: sema]].\r\t^ sema\r',			#stamp : 'dtl 12/28/2002 15:33',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1106' ],		#self : OmReference [ '1107' ],		#time : DateAndTime [ '2018-02-22T14:01:12.00573-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #safeToForkSqueak,			#protocol : #'fork and exec',			#sourceCode : 'safeToForkSqueak\r\t"The forkSqueak method is currently supported only for X11 displays with\r\tXDisplayControlPlugin available. If the plugin is not available, the child Squeak\r\tVM will continue interacting with the X display, which leads to errors in the\r\tparent Squeak, including VM crashes."\r\r\t^self canControlXDisplay\r\t\tor: [ ThisOSProcess isHeadless ]',			#stamp : 'dtl 8/18/2014 20:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1107' ],		#self : OmReference [ '1108' ],		#time : DateAndTime [ '2018-02-22T14:01:12.006512-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'setBlocking:',			#protocol : #'file control',			#sourceCode : 'setBlocking: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to set for blocking I/O."\r\r\t^ self primSQFileSetBlocking: (self handleFromAccessor: anIOHandle)\r',			#stamp : 'dtl 11/28/2010 12:15',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1108' ],		#self : OmReference [ '1109' ],		#time : DateAndTime [ '2018-02-22T14:01:12.007274-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'setNonBlocking:',			#protocol : #'file control',			#sourceCode : 'setNonBlocking: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to set it non-blocking."\r\r\t^ self primSQFileSetNonBlocking: (self handleFromAccessor: anIOHandle)',			#stamp : 'dtl 11/28/2010 12:16',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1109' ],		#self : OmReference [ '1110' ],		#time : DateAndTime [ '2018-02-22T14:01:12.008168-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #setPrintAllStacksOnSigUsr1,			#protocol : #'signal print stack trace',			#sourceCode : 'setPrintAllStacksOnSigUsr1\r\t"Set a signal handler in the VM that will print all call stacks on console output\r\twhenever a SIGUSR1 is received. Answer an identifier for the previously\r\tdefined signal handler or nil if this signal handler has already been set."\r\t\r\t"OSProcess accessor setPrintAllStacksOnSigUsr1"\r\t"OSProcess accessor clearPrintAllStacksOnSigUsr1"\r\r\t^self primPrintAllStacksOnSignal: self primSigUsr1Number\t\r',			#stamp : 'dtl 7/20/2010 00:07',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1110' ],		#self : OmReference [ '1111' ],		#time : DateAndTime [ '2018-02-22T14:01:12.009784-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'setUnbuffered:',			#protocol : #'file control',			#sourceCode : 'setUnbuffered: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to set unbuffered I/O."\r\r\t^ self primSQFileSetUnbuffered: (self handleFromAccessor: anIOHandle)',			#stamp : 'dtl 11/28/2010 12:17',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1111' ],		#self : OmReference [ '1112' ],		#time : DateAndTime [ '2018-02-22T14:01:12.010564-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #sigChldSemaphore,			#protocol : #accessing,			#sourceCode : 'sigChldSemaphore\r\t"Answer the value of sigChldSemaphore"\r\r\t^ sigChldSemaphore ifNil: [sigChldSemaphore := self forwardSigChld].\r',			#stamp : 'dtl 1/25/2004 21:31',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1112' ],		#self : OmReference [ '1113' ],		#time : DateAndTime [ '2018-02-22T14:01:12.01131-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'sigChldSemaphore:',			#protocol : #accessing,			#sourceCode : 'sigChldSemaphore: anObject\r\t"Set the value of sigChldSemaphore"\r\r\tsigChldSemaphore := anObject',			#stamp : 'dtl 1/25/2004 21:29',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1113' ],		#self : OmReference [ '1114' ],		#time : DateAndTime [ '2018-02-22T14:01:12.012073-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #sizeOfInt,			#protocol : #testing,			#sourceCode : 'sizeOfInt\r\t"Size of an integer on this machine with this C compiler."\r\r\t^ self primSizeOfInt',			#stamp : 'dtl 3/25/2001 15:34',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1114' ],		#self : OmReference [ '1115' ],		#time : DateAndTime [ '2018-02-22T14:01:12.012834-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #sizeOfPointer,			#protocol : #testing,			#sourceCode : 'sizeOfPointer\r\t"Size of a void pointer on this machine with this C compiler."\r\r\t^ self primSizeOfPointer',			#stamp : 'dtl 3/25/2001 20:55',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1115' ],		#self : OmReference [ '1116' ],		#time : DateAndTime [ '2018-02-22T14:01:12.013592-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unixFileNumber:',			#protocol : #'file control',			#sourceCode : 'unixFileNumber: anIOHandle\r\t"Answer the integer Unix file number corresponding to anIOHandle."\r\r\t^ anIOHandle ifNotNil: [self primUnixFileNumber: (self handleFromAccessor: anIOHandle)]\r',			#stamp : 'dtl 10/6/2001 07:27',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1116' ],		#self : OmReference [ '1117' ],		#time : DateAndTime [ '2018-02-22T14:01:12.014414-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockAllForFile:',			#protocol : #'file locking',			#sourceCode : 'unlockAllForFile: aFileStream\r\t"Unlock and uncache all locks associated with aFileStream.  This could be called\r\tbefore closing a stream, for example."\r\r\t(self registeredLocksForFile: aFileStream) do: [:ea | self unlockFileRegion: ea]\r',			#stamp : 'dtl 4/10/2005 15:17',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1117' ],		#self : OmReference [ '1118' ],		#time : DateAndTime [ '2018-02-22T14:01:12.015332-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: aFileStream\r\t"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked\r\tfile region, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self unlockFile: aFileStream exclusive: true\r',			#stamp : 'dtl 2/22/2004 15:02',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1118' ],		#self : OmReference [ '1119' ],		#time : DateAndTime [ '2018-02-22T14:01:12.016727-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:exclusive:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: aFileStream exclusive: flag\r\t"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked\r\tfile region, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t| fileLock |\r\taFileStream ifNil: [^ nil].\r\tfileLock := OSFileLock onFile: aFileStream exclusive: flag.\r\t^ self unlockFileRegion: fileLock\r',			#stamp : 'jf 2/22/2004 17:30',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1119' ],		#self : OmReference [ '1120' ],		#time : DateAndTime [ '2018-02-22T14:01:12.017543-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:exclusive:ifFail:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: aFileStream exclusive: flag ifFail: failBlock\r\t"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked\r\tfile region, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t| fileLock |\r\taFileStream ifNil: [^ failBlock value].\r\tfileLock := OSFileLock onFile: aFileStream exclusive: flag.\r\t^ self unlockFileRegion: fileLock ifFail: failBlock\r\r',			#stamp : 'dtl 5/12/2006 07:05',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1120' ],		#self : OmReference [ '1121' ],		#time : DateAndTime [ '2018-02-22T14:01:12.018348-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:from:to:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: aFileStream from: start to: end\r\t"Pass a struct SQFile on the stack, and unlock the specified region.\r\tAnswer the result of the call to fcntl(). If the region is in the file lock cache,\r\tremove it, but otherwise ignore the cache. The cache supports Win32 semantics\r\twithin a single Squeak image, but not across separate images, therefore the\r\tunlock should be attempted regardless of whether this image thinks that the\r\tregion has previously been locked. Answer a descriptor for the unlocked file\r\tregion, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self unlockFile: aFileStream from: start to: end exclusive: true\r',			#stamp : 'dtl 2/22/2004 15:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1121' ],		#self : OmReference [ '1122' ],		#time : DateAndTime [ '2018-02-22T14:01:12.019193-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:from:to:exclusive:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: aFileStream from: start to: end exclusive: flag\r\t"Pass a struct SQFile on the stack, and unlock the specified region.\r\tAnswer the result of the call to fcntl(). If the region is in the file lock cache,\r\tremove it, but otherwise ignore the cache. The cache supports Win32 semantics\r\twithin a single Squeak image, but not across separate images, therefore the\r\tunlock should be attempted regardless of whether this image thinks that the\r\tregion has previously been locked. Answer a descriptor for the unlocked file\r\tregion, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t| fileRegion |\r\taFileStream ifNil: [^ nil].\r\tfileRegion := OSFileRegionLock onFile: aFileStream from: start to: end exclusive: flag.\r\t^ self unlockFileRegion: fileRegion\r',			#stamp : 'dtl 2/22/2004 15:09',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1122' ],		#self : OmReference [ '1123' ],		#time : DateAndTime [ '2018-02-22T14:01:12.019962-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:from:to:exclusive:ifFail:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: fileStream from: start to: end exclusive: writeLockFlag ifFail: failBlock\r\r\t| lock |\r\tlock := OSFileRegionLock onFile: fileStream from: start to: end exclusive: writeLockFlag.\r\t^ self unlockFileRegion: lock ifFail: [failBlock value]',			#stamp : 'dtl 8/30/2009 14:54',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1123' ],		#self : OmReference [ '1124' ],		#time : DateAndTime [ '2018-02-22T14:01:12.020726-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:from:to:ifFail:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: fileStream from: start to: end ifFail: failBlock\r\r\t^ self unlockFile: fileStream from: start to: end exclusive: true ifFail: failBlock\r',			#stamp : 'dtl 8/30/2009 16:25',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1124' ],		#self : OmReference [ '1125' ],		#time : DateAndTime [ '2018-02-22T14:01:12.021592-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFile:ifFail:',			#protocol : #'file locking',			#sourceCode : 'unlockFile: aFileStream ifFail: failBlock\r\t"Unlock the file represented by aFileStream.  Answer a descriptor for the unlocked\r\tfile region, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self unlockFile: aFileStream exclusive: true ifFail: failBlock\r',			#stamp : 'dtl 5/12/2006 07:06',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1125' ],		#self : OmReference [ '1126' ],		#time : DateAndTime [ '2018-02-22T14:01:12.022564-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFileRegion:',			#protocol : #'file locking',			#sourceCode : 'unlockFileRegion: aFileLock\r\t"Pass a struct SQFile on the stack, and unlock the specified region.\r\tAnswer the result of the call to fcntl(). If the region is in the file lock cache,\r\tremove it, but otherwise ignore the cache. The cache supports Win32 semantics\r\twithin a single Squeak image, but not across separate images, therefore the\r\tunlock should be attempted regardless of whether this image thinks that the\r\tregion has previously been locked. Answer a descriptor for the unlocked file\r\tregion, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\t^ self unlockFileRegion: aFileLock ifFail: [nil]\r',			#stamp : 'dtl 5/8/2006 07:12',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1126' ],		#self : OmReference [ '1127' ],		#time : DateAndTime [ '2018-02-22T14:01:12.024014-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unlockFileRegion:ifFail:',			#protocol : #'file locking',			#sourceCode : 'unlockFileRegion: aFileLock ifFail: failBlock\r\t"Pass a struct SQFile on the stack, and unlock the specified region.\r\tAnswer the result of the call to fcntl(). If the region is in the file lock cache,\r\tremove it, but otherwise ignore the cache. The cache supports Win32 semantics\r\twithin a single Squeak image, but not across separate images, therefore the\r\tunlock should be attempted regardless of whether this image thinks that the\r\tregion has previously been locked. Answer a descriptor for the unlocked file\r\tregion, an Array of file handle and region interval; or answer nil on error\r\tor if the region did not appear in the cache.\r\r\tWarning: The registry permits compatibility with Win32 file locking semantics,\r\tbut only within a single Squeak image. Multiple cooperating images must not\r\trely on the overlap checking, because the registry is local to this image and\r\tcannot be shared across images in different OS process contexts."\r\r\taFileLock ifNil: [^ failBlock value].\r\t"Check region lock overlap for Win32 compatibility"\r\tself emulateWin32FileLocking\r\t\tifTrue: [ | unregisteredLock |\r\t\t\t\t(unregisteredLock := self unregister: aFileLock)\r\t\t\t\t\tifNil: [^ failBlock value]\r\t\t\t\t\tifNotNil: [unregisteredLock unlock\r\t\t\t\t\t\tifTrue: [^ unregisteredLock]\r\t\t\t\t\t\tifFalse: [^ failBlock value]]]\r\t\tifFalse: [aFileLock unlock\r\t\t\t\t\tifTrue: [^ aFileLock]\r\t\t\t\t\tifFalse: [^ failBlock value]]\r',			#stamp : 'dtl 5/20/2006 12:46',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1127' ],		#self : OmReference [ '1128' ],		#time : DateAndTime [ '2018-02-22T14:01:12.024856-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #'unregister:',			#protocol : #'file lock registry',			#sourceCode : 'unregister: fileRegionLock\r\t"If an object equal to fileRegionLock exists in the registry, remove it and\r\tanswer the object. Otherwise answer nil. Caching is enabled when\r\tEmulateWin32FileLocking is true."\r\r\t^ self emulateWin32FileLocking\r\t\tifTrue: [super unregister: fileRegionLock]\r\t\tifFalse: [nil]\r',			#stamp : 'dtl 3/5/2005 13:10',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1128' ],		#self : OmReference [ '1129' ],		#time : DateAndTime [ '2018-02-22T14:01:12.025625-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #xdcpModuleName,			#protocol : #'plugin identification',			#sourceCode : 'xdcpModuleName\r\t"Answer a string containing the module name string for the display control plugin."\r\r\t"OSProcess accessor xdcpModuleName"\r\r\t^ self primXDisplayControlPluginModuleName\r',			#stamp : 'dtl 10/1/2005 10:45',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1129' ],		#self : OmReference [ '1130' ],		#time : DateAndTime [ '2018-02-22T14:01:12.026399-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #xdcpVersionString,			#protocol : #'plugin identification',			#sourceCode : 'xdcpVersionString\r\t"Answer a string containing the version string for the display control plugin."\r\r\t"OSProcess accessor xdcpVersionString"\r\r\t^ self primXDisplayControlPluginModuleVersionString\r',			#stamp : 'dtl 10/1/2005 10:46',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1130' ],		#self : OmReference [ '1131' ],		#time : DateAndTime [ '2018-02-22T14:01:12.027083-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WindowsOSProcessAccessor class',				#isMetaSide : true			},			#name : #isResponsibleForThisPlatform,			#protocol : #'platform identification',			#sourceCode : 'isResponsibleForThisPlatform\r\t"Answer true if this class is responsible for representing the OS process for the\r\tSqueak VM running on the current platform."\r\r\t^ OSProcess isWindows\r',			#stamp : 'dtl 8/30/2003 17:50',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1131' ],		#self : OmReference [ '1132' ],		#time : DateAndTime [ '2018-02-22T14:01:12.027746-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #activeHandles,			#protocol : #'child process management',			#sourceCode : 'activeHandles\r\t"Answer an Array of handles for all children that are believed to be running."\r\r\t^ OSProcess thisOSProcess activeHandles\r',			#stamp : 'dtl 2/26/2002 16:11',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1132' ],		#self : OmReference [ '1133' ],		#time : DateAndTime [ '2018-02-22T14:01:12.028492-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'canAccessChildProcess:',			#protocol : #testing,			#sourceCode : 'canAccessChildProcess: anExternalProcess\r\t"Is the child process still there? Maybe not if we have restarted the image\r\tand anExternalProcess refers to a process which died while we were not\r\twatching."\r\r\t| handle |\r\t^ (handle := anExternalProcess handle) notNil\r\t\tifTrue: [self primCanAccessChildProcess: handle]\r\t\tifFalse: [false]\r',			#stamp : 'dtl 9/10/2002 09:24',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1133' ],		#self : OmReference [ '1134' ],		#time : DateAndTime [ '2018-02-22T14:01:12.0292-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #canAccessSystem,			#protocol : #testing,			#sourceCode : 'canAccessSystem\r\t"Answer true if it is possible to access the external process, else false. Failure\r\tto access the external process is probably due to lack of a UnixOSProcessPlugin\r\tmodule."\r\r\t^ self primGetPid notNil\r',			#stamp : 'dtl 2/22/2002 22:17',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1134' ],		#self : OmReference [ '1135' ],		#time : DateAndTime [ '2018-02-22T14:01:12.029866-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #childWatcherThread,			#protocol : #accessing,			#sourceCode : 'childWatcherThread\r\t"A thread which signals my sigChldSemaphore when any child process exits."\r\r\t^ childWatcherThread',			#stamp : 'dtl 2/27/2002 11:56',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1135' ],		#self : OmReference [ '1136' ],		#time : DateAndTime [ '2018-02-22T14:01:12.031159-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'childWatcherThread:',			#protocol : #accessing,			#sourceCode : 'childWatcherThread: aThreadObject\r\t"A thread which signals my sigChldSemaphore when any child process exits."\r\r\tchildWatcherThread := aThreadObject\r',			#stamp : 'dtl 2/27/2002 11:44',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1136' ],		#self : OmReference [ '1137' ],		#time : DateAndTime [ '2018-02-22T14:01:12.031797-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #finalize,			#protocol : #'initialize - release',			#sourceCode : 'finalize\r\t"Clean up grimReaper and associated semaphore."\r\r\tgrimReaper ifNotNil:\r\t\t\t[grimReaper terminate.\r\t\t\tgrimReaper := nil].\r\tsigChldSemaphore ifNotNil:\r\t\t\t[Smalltalk unregisterExternalObject: sigChldSemaphore.\r\t\t\tsigChldSemaphore := nil].\r\tsemaIndex := nil\r',			#stamp : 'dtl 2/26/2002 08:43',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1137' ],		#self : OmReference [ '1138' ],		#time : DateAndTime [ '2018-02-22T14:01:12.032439-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getMainThread,			#protocol : #'external process access',			#sourceCode : 'getMainThread\r\t"Answer the main thread of this OS process. The handle for this thread is a\r\tpseudo-handle, and cannot be used to terminate the thread."\r\r\t"OSProcess accessor getMainThread"\r\r\t^ WindowsThread threadID: self primGetPid handle: self primGetPidHandle running: true\r',			#stamp : 'dtl 2/27/2002 13:22',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1138' ],		#self : OmReference [ '1139' ],		#time : DateAndTime [ '2018-02-22T14:01:12.033052-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdErr,			#protocol : #'standard IO handles',			#sourceCode : 'getStdErr\r\t"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard\r\terror for the OS process in which I am currently executing, or nil if the IO handle\r\tcannot be obtained."\r\r\t"OSProcess accessor getStdErr"\r\r\t| error |\r\terror := self primGetStdErrorForSession: self sessionIdentifier.\r\t^ (error notNil and: [error last])\r\t\tifTrue: [self ioAccessorFromSQFile: error first]\r\t\tifFalse: [nil]\r',			#stamp : 'dtl 9/7/2002 20:09',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1139' ],		#self : OmReference [ '1140' ],		#time : DateAndTime [ '2018-02-22T14:01:12.033786-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdErrHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdErrHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard error for the\r\tOS process in which I am currently executing."\r\r\t^ self ioAccessorFromSQFile: self getStdErr\r',			#stamp : 'dtl 9/25/2005 16:11',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1140' ],		#self : OmReference [ '1141' ],		#time : DateAndTime [ '2018-02-22T14:01:12.034656-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdIn,			#protocol : #'standard IO handles',			#sourceCode : 'getStdIn\r\t"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard\r\tinput for the OS process in which I am currently executing, or nil if the IO handle\r\tcannot be obtained."\r\r\t"OSProcess accessor getStdIn"\r\r\t| input |\r\tinput := self primGetStdInputForSession: self sessionIdentifier.\r\t^ (input notNil and: [input last])\r\t\tifTrue: [self ioAccessorFromSQFile: input first]\r\t\tifFalse: [nil]\r',			#stamp : 'dtl 9/7/2002 20:11',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1141' ],		#self : OmReference [ '1142' ],		#time : DateAndTime [ '2018-02-22T14:01:12.035481-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdInHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdInHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard input for the\r\tOS process in which I am currently executing."\r\r\t^ self ioAccessorFromSQFile: self getStdIn\r',			#stamp : 'dtl 9/25/2005 16:10',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1142' ],		#self : OmReference [ '1143' ],		#time : DateAndTime [ '2018-02-22T14:01:12.036225-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdOut,			#protocol : #'standard IO handles',			#sourceCode : 'getStdOut\r\t"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard\r\toutput for the OS process in which I am currently executing, or nil if the IO handle\r\tcannot be obtained."\r\r\t"OSProcess accessor getStdOut"\r\r\t| output |\r\toutput := self primGetStdOutputForSession: self sessionIdentifier.\r\t^ (output notNil and: [output last])\r\t\tifTrue: [self ioAccessorFromSQFile: output first]\r\t\tifFalse: [nil]\r',			#stamp : 'dtl 9/7/2002 20:11',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1143' ],		#self : OmReference [ '1144' ],		#time : DateAndTime [ '2018-02-22T14:01:12.03751-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdOutHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdOutHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard output for the\r\tOS process in which I am currently executing."\r\r\t^ self ioAccessorFromSQFile: self getStdOut\r',			#stamp : 'dtl 9/25/2005 16:09',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1144' ],		#self : OmReference [ '1145' ],		#time : DateAndTime [ '2018-02-22T14:01:12.038229-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #grimReaperProcess,			#protocol : #'child process management',			#sourceCode : 'grimReaperProcess\r\t"This is a process which waits for the death of a child OSProcess, and \r\tinforms any dependents of the change."\r\r\tgrimReaper ifNil: [grimReaper := [\r\t\t\t\t[self sigChldSemaphoreSet wait.\r\t\t\t\tself changed: #childProcessStatus] repeat] newProcess.\r\t\t\t\tgrimReaper resume.\r\t\t\t\t"name selected to look reasonable in the process browser"\r\t\t\t\tgrimReaper name: ((ReadStream on: grimReaper hash asString) next: 5)\r\t\t\t\t\t\t, \': the child OSProcess watcher\'].\r\t^ grimReaper',			#stamp : 'dtl 9/3/2010 13:13',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1145' ],		#self : OmReference [ '1146' ],		#time : DateAndTime [ '2018-02-22T14:01:12.038886-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Create and register a semaphore to be used for signaling external process exits"\r\r\tsuper initialize.\r\tself sigChldSemaphoreSet.\r\tself grimReaperProcess\r',			#stamp : 'dtl 3/2/2002 08:33',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1146' ],		#self : OmReference [ '1147' ],		#time : DateAndTime [ '2018-02-22T14:01:12.039494-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'isExecutable:',			#protocol : #testing,			#sourceCode : 'isExecutable: aPathName\r\t"Answer true if file at aPathName has execute permission for this process."\r\r\t"FIXME: Default to true for Windows"\r\r\t^ true\r\r',			#stamp : 'dtl 9/26/2005 07:45',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1147' ],		#self : OmReference [ '1148' ],		#time : DateAndTime [ '2018-02-22T14:01:12.040119-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'lastReadFor:',			#protocol : #'nonblocking read',			#sourceCode : 'lastReadFor: aSemaphoreIndex\r\t"A character has been read into an external buffer corresponding to aSemaphoreIndex,\r\tand is now available. Answer integer value of the character, or nil if no character\r\twas read, or -1 if an error occurred on the read."\r\r\t| c readResult |\r\treadResult := Array new: 3.\r\tc := self primLastReadFor: aSemaphoreIndex storeIn: readResult.\r\t(c < 1) ifTrue: [self error: \'primLastReadFor: error, returned negative value\'].\r\t^ c\r',			#stamp : 'dtl 10/1/2005 09:26',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1148' ],		#self : OmReference [ '1149' ],		#time : DateAndTime [ '2018-02-22T14:01:12.040745-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'lastReadFor:storeIn:',			#protocol : #'nonblocking read',			#sourceCode : 'lastReadFor: aSemaphoreIndex storeIn: aThreeElementArray\r\t"A character has been read into an external buffer corresponding to aSemaphoreIndex,\r\tand is now available. Answer integer value of the character, or nil if no character\r\twas read, or -1 if an error occurred on the read. The results of the read call are\r\tstored in aThreeElementArray as a side effect."\r\r\t^ self primLastReadFor: aSemaphoreIndex storeIn: aThreeElementArray\r',			#stamp : 'dtl 10/1/2005 09:26',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1149' ],		#self : OmReference [ '1150' ],		#time : DateAndTime [ '2018-02-22T14:01:12.041406-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'nextFrom:signaling:',			#protocol : #'nonblocking read',			#sourceCode : 'nextFrom: aFileStream signaling: aSemaphoreIndex\r\t"Read the next character from aFileStream into a buffer in the VM. When the read completes,\r\tsignal the specified Semaphore to notify that the character is available."\r\r\t| sqFile |\r\tsqFile := UseIOHandle\r\t\t\t\tifTrue: [aFileStream ioHandle handle]\r\t\t\t\tifFalse: [aFileStream fileID].\r\t^ self primNextFrom: sqFile signaling: aSemaphoreIndex\r',			#stamp : 'dtl 4/1/2002 11:02',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1150' ],		#self : OmReference [ '1151' ],		#time : DateAndTime [ '2018-02-22T14:01:12.042044-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #openStdErr,			#protocol : #'standard IO handles',			#sourceCode : 'openStdErr\r\t"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard\r\terror for the OS process in which I am currently executing. Open a console if necessary\r\tto make standard error available."\r\r\t"OSProcess accessor openStdErr"\r\r\t| error |\r\terror := self primGetStdErrorForSession: self sessionIdentifier.\r\terror ifNil: [^ nil].\r\terror last\r\t\tifFalse:\r\t\t\t[self primAllocConsole.\r\t\t\terror := self primGetStdOutputForSession: self sessionIdentifier].\r\t^ self ioAccessorFromSQFile: error first\r',			#stamp : 'dtl 9/7/2002 20:03',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1151' ],		#self : OmReference [ '1152' ],		#time : DateAndTime [ '2018-02-22T14:01:12.042696-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #openStdIn,			#protocol : #'standard IO handles',			#sourceCode : 'openStdIn\r\t"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard\r\tinput for the OS process in which I am currently executing. Open a console if necessary\r\tto make standard input available."\r\r\t"OSProcess accessor openStdIn"\r\r\t| input |\r\tinput := self primGetStdInputForSession: self sessionIdentifier.\r\tinput ifNil: [^ nil].\r\tinput last\r\t\tifFalse:\r\t\t\t[self primAllocConsole.\r\t\t\tinput := self primGetStdOutputForSession: self sessionIdentifier].\r\t^ self ioAccessorFromSQFile: input first\r',			#stamp : 'dtl 9/7/2002 20:04',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1152' ],		#self : OmReference [ '1153' ],		#time : DateAndTime [ '2018-02-22T14:01:12.043969-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #openStdOut,			#protocol : #'standard IO handles',			#sourceCode : 'openStdOut\r\t"Answer an IO handle (representing a SQFile data structure in interp.c) for the standard\r\toutput for the OS process in which I am currently executing. Open a console if necessary\r\tto make standard input available."\r\r\t"OSProcess accessor openStdOut"\r\r\t| output |\r\toutput := self primGetStdOutputForSession: self sessionIdentifier.\r\toutput ifNil: [^ nil].\r\toutput last\r\t\tifFalse:\r\t\t\t[self primAllocConsole.\r\t\t\toutput := self primGetStdOutputForSession: self sessionIdentifier].\r\t^ self ioAccessorFromSQFile: output first\r',			#stamp : 'dtl 9/7/2002 20:05',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1153' ],		#self : OmReference [ '1154' ],		#time : DateAndTime [ '2018-02-22T14:01:12.044618-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #osppModuleName,			#protocol : #'plugin identification',			#sourceCode : 'osppModuleName\r\t"Answer a string containing the module name string for the OSPP plugin."\r\r\t"OSProcess accessor osppModuleName"\r\r\t^ self primOSProcessPluginModuleName\r',			#stamp : 'dtl 10/1/2005 11:46',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1154' ],		#self : OmReference [ '1155' ],		#time : DateAndTime [ '2018-02-22T14:01:12.045243-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #osppModuleVersionString,			#protocol : #'plugin identification',			#sourceCode : 'osppModuleVersionString\r\t"Answer a string containing the version string for the OSPP plugin."\r\r\t"OSProcess accessor osppModuleVersionString"\r\r\t^ self primOSProcessPluginModuleVersionString\r',			#stamp : 'dtl 10/1/2005 11:46',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1155' ],		#self : OmReference [ '1156' ],		#time : DateAndTime [ '2018-02-22T14:01:12.045859-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primAllocConsole,			#protocol : #console,			#sourceCode : 'primAllocConsole\r\t"Allocate a console if not already allocated."\r\r\t"OSProcess accessor primAllocConsole"\r\r\t<primitive: \'primitiveAllocConsole\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/25/2002 06:28',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1156' ],		#self : OmReference [ '1157' ],		#time : DateAndTime [ '2018-02-22T14:01:12.046609-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primBufferValuesAt:',			#protocol : #'private - primitive access',			#sourceCode : 'primBufferValuesAt: aSemaphoreIndex\r\t"For debugging only. Answer the current values of readCharBufferArray,\r\treadCharCountArray, and readCharStatusArray at index, an integer corresponding\r\tto a semaphore for one read handler thread. Answer an Array with the buffered\r\tcharacter, the character count, and the status value."\r\r\t"OSProcess accessor primBufferValuesAt: 1"\r\r\t<primitive: \'primitiveBufferValuesAt\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 8/17/2002 12:46',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1157' ],		#self : OmReference [ '1158' ],		#time : DateAndTime [ '2018-02-22T14:01:12.047234-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCanAccessChildProcess:',			#protocol : #'child process management',			#sourceCode : 'primCanAccessChildProcess: handleObject\r\t"Answer true if the OS process represented by a HANDLE can be accessed by this OS process."\r\r\t<primitive: \'primitiveCanAccessChildProcess\' module: \'Win32OSProcessPlugin\'>\r\r\t^ false',			#stamp : 'dtl 9/10/2002 09:19',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1158' ],		#self : OmReference [ '1159' ],		#time : DateAndTime [ '2018-02-22T14:01:12.04787-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCloseHandle:',			#protocol : #handles,			#sourceCode : 'primCloseHandle: handleObject\r\t"Close the specified handle, which may refer to a process, a thread, or\r\tsome other Win32 object."\r\r\t"| procInfo |\r\tprocInfo := OSProcess accessor primCommand: \'SOL\'.\r\tOSProcess accessor primCloseHandle: procInfo first"\r\r\t<primitive: \'primitiveCloseHandle\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 2/25/2002 07:37',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1159' ],		#self : OmReference [ '1160' ],		#time : DateAndTime [ '2018-02-22T14:01:12.048591-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCommand:',			#protocol : #deprecated,			#sourceCode : 'primCommand: commandString\r\t"Run a command in a new external process. Answer a result array with\r\thProcess, hThread, dwProcessId, dwThreadId.\r\r\tThis primitive has been replaced by #primCommand:stdIn:stdOut:stdErr:, and\r\twill be removed in future versions of OSProcess."\r\r\t"OSProcess accessor primCommand: \'C:\\WINDOWS\\SOL\'"\r\t"OSProcess accessor primCommand: \'SOL\'"\r\t"OSProcess accessor primCommand: \'NoSuchProgram\'"\r\r\t<primitive: \'primitiveCommand\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 9/9/2002 09:24',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1160' ],		#self : OmReference [ '1161' ],		#time : DateAndTime [ '2018-02-22T14:01:12.049346-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCommand:stdIn:stdOut:stdErr:',			#protocol : #'process creation',			#sourceCode : 'primCommand: commandString stdIn: inputFileIoHandle stdOut: outputFileIoHandle stdErr: errorFileIoHandle\r\r\t"Run a command in a new external process. The standard input, output and error\r\tstream handles are sqFile byte arrays (not Win32 HANDLE arrays), and may be nil.\r\tAnswer a result array with hProcess, hThread, dwProcessId, dwThreadId."\r\r\t"OSProcess accessor primCommand: \'C:\\WINDOWS\\SOL\' stdIn: nil stdOut: nil stdErr: nil"\r\t"OSProcess accessor primCommand: \'SOL\' stdIn: nil stdOut: nil stdErr: nil"\r\t"OSProcess accessor primCommand: \'NoSuchProgram\' stdIn: nil stdOut: nil stdErr: nil"\r\t"OSProcess accessor primCommand: \'SOL\' stdIn: (FileStream fileNamed: \'output.tmp\') fileID stdOut: nil stdErr: nil"\r\r\t<primitive: \'primitiveCommandWithInputOutputError\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 9/9/2002 09:19',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1161' ],		#self : OmReference [ '1162' ],		#time : DateAndTime [ '2018-02-22T14:01:12.050634-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primCreatePipe,			#protocol : #'pipe open',			#sourceCode : 'primCreatePipe\r\t"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)\r\tfor the pipe reader and writer."\r\r\t<primitive: \'primitiveCreatePipe\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 12:51',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1162' ],		#self : OmReference [ '1163' ],		#time : DateAndTime [ '2018-02-22T14:01:12.051248-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primCreatePipeWithSessionIdentifier:',			#protocol : #'pipe open',			#sourceCode : 'primCreatePipeWithSessionIdentifier: aByteArray\r\t"Create a pipe, and answer an array of two file handles (SQFile data structures in interp.c)\r\tfor the pipe reader and writer."\r\r\t<primitive: \'primitiveCreatePipeWithSessionIdentifier\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 12:52',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1163' ],		#self : OmReference [ '1164' ],		#time : DateAndTime [ '2018-02-22T14:01:12.051859-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primFreeConsole,			#protocol : #console,			#sourceCode : 'primFreeConsole\r\t"Deallocate the console if allocated."\r\r\t"OSProcess accessor primFreeConsole"\r\r\t<primitive: \'primitiveFreeConsole\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/25/2002 06:27',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1164' ],		#self : OmReference [ '1165' ],		#time : DateAndTime [ '2018-02-22T14:01:12.052522-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetCurrentWorkingDirectory,			#protocol : #'external process access',			#sourceCode : 'primGetCurrentWorkingDirectory\r\t"Call getcwd() to get the current working directory."\r\r\t"OSProcess accessor primGetCurrentWorkingDirectory"\r\r\t<primitive: \'primitiveGetCurrentWorkingDirectory\' module: \'Win32OSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 9/6/2002 14:58',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1165' ],		#self : OmReference [ '1166' ],		#time : DateAndTime [ '2018-02-22T14:01:12.053122-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetEnvironmentStrings,			#protocol : #'external process access',			#sourceCode : 'primGetEnvironmentStrings\r\t"Answer the environment block in the form of an Array of Strings. The\r\tcaller is expected to parse the strings into a dictionary of keys and values."\r\r\t<primitive: \'primitiveGetEnvironmentStrings\' module: \'Win32OSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 2/22/2002 18:23',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1166' ],		#self : OmReference [ '1167' ],		#time : DateAndTime [ '2018-02-22T14:01:12.053722-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primGetExitStatusForHandle:',			#protocol : #'child process management',			#sourceCode : 'primGetExitStatusForHandle: handleObject\r\t"Answer the exit status for the process represented by a HANDLE. Fail if\r\tthe process is still active, or if the GetExitCodeProcess call fails."\r\r\t"| procInfo |\r\tprocInfo := OSProcess accessor primCommand: \'SOL\'.\r\t(Delay forSeconds: 5) wait.\r\tOSProcess accessor primGetExitStatusForHandle: procInfo first"\r\r\t<primitive: \'primitiveGetExitStatusForHandle\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 2/25/2002 08:23',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1167' ],		#self : OmReference [ '1168' ],		#time : DateAndTime [ '2018-02-22T14:01:12.054348-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetMainThreadHandle,			#protocol : #'external process access',			#sourceCode : 'primGetMainThreadHandle\r\t"Answer a pseudo-handle for my main thread."\r\r\t"OSProcess accessor primGetMainThreadHandle"\r\r\t<primitive: \'primitiveGetMainThreadHandle\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 2/27/2002 13:20',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1168' ],		#self : OmReference [ '1169' ],		#time : DateAndTime [ '2018-02-22T14:01:12.055012-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetMainThreadID,			#protocol : #'external process access',			#sourceCode : 'primGetMainThreadID\r\t"Answer the ID of my main thread."\r\r\t"OSProcess accessor primGetMainThreadID"\r\r\t<primitive: \'primitiveGetMainThreadID\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 3/4/2006 17:57',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1169' ],		#self : OmReference [ '1170' ],		#time : DateAndTime [ '2018-02-22T14:01:12.05573-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetPid,			#protocol : #'external process access',			#sourceCode : 'primGetPid\r\t"Answer the OS process ID for the OS process in which I am currently executing."\r\r\t<primitive: \'primitiveGetPid\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 2/22/2002 16:06',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1170' ],		#self : OmReference [ '1171' ],		#time : DateAndTime [ '2018-02-22T14:01:12.057104-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetPidHandle,			#protocol : #'external process access',			#sourceCode : 'primGetPidHandle\r\t"Answer the pseudo-handle for my OS process"\r\r\t"OSProcess accessor primGetPidHandle"\r\r\t<primitive: \'primitiveGetPidHandle\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 2/27/2002 13:21',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1171' ],		#self : OmReference [ '1172' ],		#time : DateAndTime [ '2018-02-22T14:01:12.057792-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primGetSession,			#protocol : #'session identification',			#sourceCode : 'primGetSession\r\t"Answer the unique identifier for this session of Smalltalk running in this OS Process."\r\r\t"OSProcess accessor primGetSession"\r\r\t<primitive: \'primitiveGetSession\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/2/2002 08:15',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1172' ],		#self : OmReference [ '1173' ],		#time : DateAndTime [ '2018-02-22T14:01:12.058465-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primGetStdErrorForSession:',			#protocol : #'private - primitive access',			#sourceCode : 'primGetStdErrorForSession: sessionIdentifierByteArray\r\t"Answer a two element array containing the sqFile data structure representing\r\tstandard error stream for my OS process, and a flag (true or false) to indicate\r\twhether the sqFile data structure contains a valid HANDLE. If no standard error\r\tstream is available for this OS process, the sqFile data structure will contain an\r\tinvalid HANDLE value, which will result in failures on subsequent accesses."\r\r\t"OSProcess accessor primGetStdError"\r\r\t<primitive: \'primitiveGetStdError\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 9/7/2002 14:55',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1173' ],		#self : OmReference [ '1174' ],		#time : DateAndTime [ '2018-02-22T14:01:12.059061-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primGetStdInputForSession:',			#protocol : #'private - primitive access',			#sourceCode : 'primGetStdInputForSession: sessionIdentifierByteArray\r\t"Answer a two element array containing the sqFile data structure representing\r\tstandard input stream for my OS process, and a flag (true or false) to indicate\r\twhether the sqFile data structure contains a valid HANDLE. If no standard input\r\tstream is available for this OS process, the sqFile data structure will contain an\r\tinvalid HANDLE value, which will result in failures on subsequent accesses."\r\r\t"OSProcess accessor primGetStdInput"\r\r\t<primitive: \'primitiveGetStdInput\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 9/7/2002 14:55',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1174' ],		#self : OmReference [ '1175' ],		#time : DateAndTime [ '2018-02-22T14:01:12.059688-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primGetStdOutputForSession:',			#protocol : #'private - primitive access',			#sourceCode : 'primGetStdOutputForSession: sessionIdentifierByteArray\r\t"Answer a two element array containing the sqFile data structure representing\r\tstandard output stream for my OS process, and a flag (true or false) to indicate\r\twhether the sqFile data structure contains a valid HANDLE. If no standard output\r\tstream is available for this OS process, the sqFile data structure will contain an\r\tinvalid HANDLE value, which will result in failures on subsequent accesses."\r\r\t"OSProcess accessor primGetStdOutput"\r\r\t<primitive: \'primitiveGetStdOutput\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 9/7/2002 14:55',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1175' ],		#self : OmReference [ '1176' ],		#time : DateAndTime [ '2018-02-22T14:01:12.060285-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primLastReadFor:',			#protocol : #'private - primitive access',			#sourceCode : 'primLastReadFor: aSemaphoreIndex\r\t"A character has been read into an external buffer corresponding to aSemaphoreIndex,\r\tand is now available. Answer integer value of the character, or nil if no character\r\twas read, or -1 if an error occurred on the read."\r\r\t<primitive: \'primitiveLastReadFor\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 10/1/2005 09:26',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1176' ],		#self : OmReference [ '1177' ],		#time : DateAndTime [ '2018-02-22T14:01:12.060916-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primLastReadFor:storeIn:',			#protocol : #'private - primitive access',			#sourceCode : 'primLastReadFor: aSemaphoreIndex storeIn: aThreeElementArray\r\t"A character has been read into an external buffer corresponding to aSemaphoreIndex,\r\tand is now available. Answer integer value of the character, or nil if no character\r\twas read, or -1 if an error occurred on the read. Contents of the aThreeElementArray\r\twill be status of the read call, character read, and character count (which should\r\talways be 1)."\r\r\t<primitive: \'primitiveLastReadForStoreIn\' module: \'Win32OSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 10/1/2005 09:27',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1177' ],		#self : OmReference [ '1178' ],		#time : DateAndTime [ '2018-02-22T14:01:12.061533-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primNextFrom:signaling:',			#protocol : #'private - primitive access',			#sourceCode : 'primNextFrom: anIOHandle signaling: aSemaphoreIndex\r\t"Read the next character from anIOHandle (a SQFile struct) into a buffer in the VM. When\r\tthe read completes, signal the specified Semaphore to notify that the character is available."\r\r\t<primitive: \'primitiveNextFromSignaling\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil\r\r',			#stamp : 'dtl 4/1/2002 10:58',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1178' ],		#self : OmReference [ '1179' ],		#time : DateAndTime [ '2018-02-22T14:01:12.062242-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primOSProcessPluginModuleName,			#protocol : #'private - primitive access',			#sourceCode : 'primOSProcessPluginModuleName\r\t"Answer a string containing the module name string for the OSPP plugin."\r\r\t"OSProcess accessor primOSProcessPluginModuleName"\r\r\t<primitive: \'primitiveModuleName\' module: \'Win32OSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/1/2005 11:50',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1179' ],		#self : OmReference [ '1180' ],		#time : DateAndTime [ '2018-02-22T14:01:12.063586-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primOSProcessPluginModuleVersionString,			#protocol : #'private - primitive access',			#sourceCode : 'primOSProcessPluginModuleVersionString\r\t"Answer a string containing the version string for the OSPP plugin."\r\r\t"OSProcess accessor primOSProcessPluginModuleVersionString"\r\r\t<primitive: \'primitiveVersionString\' module: \'Win32OSProcessPlugin\'>\r\t^ nil\r',			#stamp : 'dtl 10/1/2005 11:51',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1180' ],		#self : OmReference [ '1181' ],		#time : DateAndTime [ '2018-02-22T14:01:12.064203-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #primOneShot,			#protocol : #testing,			#sourceCode : 'primOneShot\r\t"Answer true the first time this is called in a Squeak session, and false thereafter."\r\r\t"OSProcess accessor primOneShot"\r\r\t<primitive: \'primitiveOneShot\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 10/10/2012 08:05',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1181' ],		#self : OmReference [ '1182' ],		#time : DateAndTime [ '2018-02-22T14:01:12.064812-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSetStdErr:',			#protocol : #handles,			#sourceCode : 'primSetStdErr: anIOHandle\r\t"Set the standard error handle to that of anIOHandle, where anIOHandle is a\r\tByteArray representation of a SQFile structure."\r\r\t<primitive: \'primitiveSetStdErr\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/29/2002 17:47',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1182' ],		#self : OmReference [ '1183' ],		#time : DateAndTime [ '2018-02-22T14:01:12.065408-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSetStdIn:',			#protocol : #handles,			#sourceCode : 'primSetStdIn: anIOHandle\r\t"Set the standard input handle to that of anIOHandle, where anIOHandle is a\r\tByteArray representation of a SQFile structure."\r\r\t<primitive: \'primitiveSetStdIn\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/29/2002 17:48',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1183' ],		#self : OmReference [ '1184' ],		#time : DateAndTime [ '2018-02-22T14:01:12.066007-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSetStdOut:',			#protocol : #handles,			#sourceCode : 'primSetStdOut: anIOHandle\r\t"Set the standard output handle to that of anIOHandle, where anIOHandle is a\r\tByteArray representation of a SQFile structure."\r\r\t<primitive: \'primitiveSetStdOut\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 3/29/2002 17:48',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1184' ],		#self : OmReference [ '1185' ],		#time : DateAndTime [ '2018-02-22T14:01:12.066633-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primSetWaitForAnyProcessExit:thenSignalSemaphoreWithIndex:',			#protocol : #'child process management',			#sourceCode : 'primSetWaitForAnyProcessExit: arrayOfProcessHandleObjects thenSignalSemaphoreWithIndex: index\r\t"Set up a thread to wait for a process HANDLE to exit, then signal the Semaphore\r\tat index. This provides asychronous notification of an external process exit."\r\r\t<primitive: \'primitiveSetWaitForAnyProcessExitThenSignalSemaphoreWithIndex\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 2/26/2002 16:14',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1185' ],		#self : OmReference [ '1186' ],		#time : DateAndTime [ '2018-02-22T14:01:12.067239-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primTerminateThread:',			#protocol : #'child process management',			#sourceCode : 'primTerminateThread: aThreadHandle\r\t"Kill the thread. No cleanup is performed, so use with caution for a thread which\r\tis (for example) manipulating a mutex. Answer true for success, else false."\r\r\t<primitive: \'primitiveTerminateThread\' module: \'Win32OSProcessPlugin\'>\r\r\t^ nil',			#stamp : 'dtl 2/27/2002 11:34',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1186' ],		#self : OmReference [ '1187' ],		#time : DateAndTime [ '2018-02-22T14:01:12.067864-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'primTestEndOfFileFlag:',			#protocol : #'private - primitive access',			#sourceCode : 'primTestEndOfFileFlag: aSqFileStruct\r\t"Answer whether the file represented by aSqFileStruct is at end of file, as determined\r\tby a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers\r\ttrue if the file pointer is at the end of the file, but which does not call feof() to\r\tdetermine that an end of file condition has occurred. The difference is significant\r\tif aSqFileStruct represents a pipe or a device file, which may not be positionable\r\tin the sense of a conventional disk file."\r\r\t<primitive: \'primitiveTestEndOfFileFlag\' module: \'Win32OSProcessPlugin\'>\r\tself flag: \'FIXME\'. "not yet implemented in OSPP for Windows"\r\t^ self primitiveFailed\r',			#stamp : 'dtl 4/8/2007 10:54',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1187' ],		#self : OmReference [ '1188' ],		#time : DateAndTime [ '2018-02-22T14:01:12.069258-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #restartChildWatcherProcess,			#protocol : #'child process management',			#sourceCode : 'restartChildWatcherProcess\r\tgrimReaper notNil\r\t\tifTrue: [ grimReaper terminate.\r\t\t\tgrimReaper := nil ].\r\tself grimReaperProcess',			#stamp : 'ThierryGoubier 7/27/2017 22:39',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1188' ],		#self : OmReference [ '1189' ],		#time : DateAndTime [ '2018-02-22T14:01:12.070032-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'restartChildWatcherThread:',			#protocol : #'child process management',			#sourceCode : 'restartChildWatcherThread: arrayOfProcessHandleObjects\r\t"Start a new child watcher thread. If a thread is alread active, terminate\r\tit before starting a new one."\r\r\tself childWatcherThread ifNotNil: [childWatcherThread terminate].\r\tself childWatcherThread: (self setWaitForAnyProcessExit: arrayOfProcessHandleObjects).\r\t^ childWatcherThread\r',			#stamp : 'dtl 1/13/2007 09:48',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1189' ],		#self : OmReference [ '1190' ],		#time : DateAndTime [ '2018-02-22T14:01:12.070678-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #semaIndex,			#protocol : #accessing,			#sourceCode : 'semaIndex\r\t"Index of the registered Semaphore"\r\r\tsemaIndex ifNil: [self initialize].\r\t^ semaIndex',			#stamp : 'dtl 2/25/2002 21:17',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1190' ],		#self : OmReference [ '1191' ],		#time : DateAndTime [ '2018-02-22T14:01:12.071273-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'setBlocking:',			#protocol : #'file control',			#sourceCode : 'setBlocking: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to set for blocking I/O."\r\r\t"FIXME: need to implement this for Win32"\r\t"self notify: \'there is no general mechanism to set blocking IO on Win32\'"\r',			#stamp : 'dtl 9/26/2005 07:35',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1191' ],		#self : OmReference [ '1192' ],		#time : DateAndTime [ '2018-02-22T14:01:12.071924-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'setNonBlocking:',			#protocol : #'file control',			#sourceCode : 'setNonBlocking: anIOHandle\r\t"Convert anIOHandle to an SQFile data structure and call primitive to set it non-blocking."\r\r\t"FIXME: need to implement this for Win32"\r\t"self notify: \'there is no general mechanism to set nonblocking IO on Win32\'"\r\r',			#stamp : 'dtl 9/26/2005 07:36',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1192' ],		#self : OmReference [ '1193' ],		#time : DateAndTime [ '2018-02-22T14:01:12.072579-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'setStdErr:',			#protocol : #'standard IO handles',			#sourceCode : 'setStdErr: aFileStream\r\t"Set the standard error handle for this OSProcess to be that of aFileStream"\r\r\t"| fs |\r\tfs := FileStream fileNamed: \'stdError.tmp\'.\r\tOSProcess accessor setStdErr: fs"\r\r\t| sqFile |\r\taFileStream ifNil: [^ false].\r\tsqFile := UseIOHandle\r\t\t\t\tifTrue: [aFileStream ioHandle handle]\r\t\t\t\tifFalse: [aFileStream fileID].\r\t^ self primSetStdErr: sqFile\r',			#stamp : 'dtl 9/9/2002 07:22',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1193' ],		#self : OmReference [ '1194' ],		#time : DateAndTime [ '2018-02-22T14:01:12.073202-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'setStdIn:',			#protocol : #'standard IO handles',			#sourceCode : 'setStdIn: aFileStream\r\t"Set the standard input handle for this OSProcess to be that of aFileStream"\r\r\t"| fs |\r\tfs := FileStream fileNamed: \'stdInput.tmp\'.\r\tfs nextPutAll: \'this is a line of text\'; cr.\r\tfs position: 0.\r\tOSProcess accessor setStdIn: fs"\r\r\t| sqFile |\r\taFileStream ifNil: [^ false].\r\tsqFile := UseIOHandle\r\t\t\t\tifTrue: [aFileStream ioHandle handle]\r\t\t\t\tifFalse: [aFileStream fileID].\r\t^ self primSetStdIn: sqFile\r',			#stamp : 'dtl 9/9/2002 07:22',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1194' ],		#self : OmReference [ '1195' ],		#time : DateAndTime [ '2018-02-22T14:01:12.073859-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'setStdOut:',			#protocol : #'standard IO handles',			#sourceCode : 'setStdOut: aFileStream\r\t"Set the standard output handle for this OSProcess to be that of aFileStream"\r\r\t"| fs |\r\tfs := FileStream fileNamed: \'stdOutput.tmp\'.\r\tOSProcess accessor setStdOut: fs"\r\r\t| sqFile |\r\taFileStream ifNil: [^ false].\r\tsqFile := UseIOHandle\r\t\t\t\tifTrue: [aFileStream ioHandle handle]\r\t\t\t\tifFalse: [aFileStream fileID].\r\t^ self primSetStdOut: sqFile\r',			#stamp : 'dtl 9/9/2002 07:22',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1195' ],		#self : OmReference [ '1196' ],		#time : DateAndTime [ '2018-02-22T14:01:12.074587-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #'setWaitForAnyProcessExit:',			#protocol : #'child process management',			#sourceCode : 'setWaitForAnyProcessExit: arrayOfProcessHandleObjects\r\t"Set up a thread to wait for a process HANDLE to exit, then signal the Semaphore\r\tat index. This provides asychronous notification of an external process exit. The\r\tcaller should close the thread handle when it is no longer needed."\r\r\t"OSProcess command: \'SOL\'.\r\tOSProcess accessor setWaitForAnyProcessExit: OSProcess thisOSProcess activeHandles."\r\r\t| threadInfo |\r\tarrayOfProcessHandleObjects isEmpty ifTrue: [^ nil].\r\tthreadInfo := self\r\t\tprimSetWaitForAnyProcessExit: arrayOfProcessHandleObjects\r\t\tthenSignalSemaphoreWithIndex: self semaIndex.\r\t^ WindowsThread\r\t\tthreadID: threadInfo last\r\t\thandle: threadInfo first\r\t\trunning: true\r\r',			#stamp : 'dtl 2/26/2002 19:08',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1196' ],		#self : OmReference [ '1197' ],		#time : DateAndTime [ '2018-02-22T14:01:12.076042-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WindowsOSProcessAccessor,				#isMetaSide : false			},			#name : #sigChldSemaphoreSet,			#protocol : #'child process management',			#sourceCode : 'sigChldSemaphoreSet\r\r\tsigChldSemaphore ifNil:\r\t\t[sigChldSemaphore := Semaphore new.\r\t\tsemaIndex := Smalltalk registerExternalObject: sigChldSemaphore].\r\t^ sigChldSemaphore',			#stamp : 'dtl 2/25/2002 21:12',			#package : #OSProcess-Win32		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1197' ],		#self : OmReference [ '1198' ],		#time : DateAndTime [ '2018-02-22T14:01:12.076772-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PseudoAioEventHandler,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\t"When the FileStream or Socket handled by this aio handler is closed,\r\tit should send #close to this handler."\r\r\teventGenerator ifNotNil: [eventGenerator terminate]',			#stamp : 'dtl 11/25/2006 10:49',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1198' ],		#self : OmReference [ '1199' ],		#time : DateAndTime [ '2018-02-22T14:01:12.077355-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PseudoAioEventHandler,				#isMetaSide : false			},			#name : #eventGenerator,			#protocol : #accessing,			#sourceCode : 'eventGenerator\r\t"Answer the value of eventGenerator"\r\r\t^ eventGenerator ifNil: [eventGenerator := self eventGeneratorProcess]',			#stamp : 'dtl 11/25/2006 13:17',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1199' ],		#self : OmReference [ '1200' ],		#time : DateAndTime [ '2018-02-22T14:01:12.077986-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PseudoAioEventHandler,				#isMetaSide : false			},			#name : #eventGeneratorProcess,			#protocol : #initialize-release,			#sourceCode : 'eventGeneratorProcess\r\t"A process that generates periodic #changed events"\r\r\t| d p|\r\td := Delay forMilliseconds: 125.\r\tp := [[self changed.\r\td wait] repeat] newProcess.\r\t^p resume.',			#stamp : 'RB 9/3/2010 11:52',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1200' ],		#self : OmReference [ '1201' ],		#time : DateAndTime [ '2018-02-22T14:01:12.078614-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PseudoAioEventHandler,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\tself eventGenerator.\r\t^ super initialize',			#stamp : 'dtl 11/25/2006 13:15',			#package : #OSProcess-AIO		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#prior : OmReference [ '1201' ],		#self : OmReference [ '1202' ],		#time : DateAndTime [ '2018-02-22T14:01:12.136407-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdInHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdInHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard input for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdInHandle\r\t\tifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]',			#stamp : 'dtl 11/28/2010 12:07',			#package : #OSProcess-Unix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdInHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdInHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard input for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdInHandle\r\t\tifNotNil: [ :handle | self ioAccessorFromSQFile: handle ]',			#stamp : 'AutoDeprecationRefactoring 2/22/2018 14:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#prior : OmReference [ '1202' ],		#self : OmReference [ '1203' ],		#time : DateAndTime [ '2018-02-22T14:01:12.144494-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdOutHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdOutHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard output for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdOutHandle\r\t\tifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]',			#stamp : 'dtl 11/28/2010 12:08',			#package : #OSProcess-Unix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdOutHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdOutHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard output for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdOutHandle\r\t\tifNotNil: [ :handle | self ioAccessorFromSQFile: handle ]',			#stamp : 'AutoDeprecationRefactoring 2/22/2018 14:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'AutoDeprecationRefactoring',		#prior : OmReference [ '1203' ],		#self : OmReference [ '1204' ],		#time : DateAndTime [ '2018-02-22T14:01:12.147406-03:00' ],		#trigger : OmReference [ '195' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdErrHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdErrHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard error for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdErrHandle\r\t\tifNotNilDo: [:handle | self ioAccessorFromSQFile: handle]',			#stamp : 'dtl 11/28/2010 12:07',			#package : #OSProcess-Unix		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixOSProcessAccessor,				#isMetaSide : false			},			#name : #getStdErrHandle,			#protocol : #'standard IO handles',			#sourceCode : 'getStdErrHandle\r\t"Answer the handle (a SQFile data structure in interp.c) for the standard error for the\r\tOS process in which I am currently executing."\r\r\t^ self primGetStdErrHandle\r\t\tifNotNil: [ :handle | self ioAccessorFromSQFile: handle ]',			#stamp : 'AutoDeprecationRefactoring 2/22/2018 14:01',			#package : #OSProcess-Unix		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:12.416695-03:00' ],		#prior : OmReference [ '1204' ],		#self : OmReference [ '1205' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'CommandShell-Base-dtl.53'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1205' ],		#self : OmReference [ '1206' ],		#time : DateAndTime [ '2018-02-22T14:01:12.543256-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ShellSyntax\r\tinstanceVariableNames: \'cwdDictionary cwdIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ShellSyntax,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellSyntax,						#isMetaSide : false					},					#name : #cwdDictionary,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellSyntax,						#isMetaSide : false					},					#name : #cwdIndex,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellSyntax class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellSyntax class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellSyntax,					#isMetaSide : false				},				#parent : @7,				#content : 'My instances implement parsing of strings in a manner similar to a simple Unix command shell. I provide path name expansion in the context of an external file system, and support the syntax required for IO redirection. All file name globbing and PATH searching are implemented in Smalltalk rather than in C library functions or an external command shell.\r\rMost of my syntax is applicable for any operating system. Where needed, platform specific methods are in my "platform dependent" category. Currently, Unix and Windows are supported, and other platforms have not been tested. The primary difference between Unix and Windows support is that device names (such as \'C:\') are used in Windows path strings. Separate current working directory strings are maintained for all Windows device names. For Unix, a single current working directory path is used. On Windows, this permits the CommandShell \'cd\' command to support changing directories to another device without losing track of the current working directory for the previous device.\r\rCommand pipeline syntax is not supported here. See CommandShell for the implementation of command pipelines.\r',				#stamp : 'dtl 9/7/2009 12:36'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'My instances implement parsing of strings in a manner similar to a simple Unix command shell. I provide path name expansion in the context of an external file system, and support the syntax required for IO redirection. All file name globbing and PATH searching are implemented in Smalltalk rather than in C library functions or an external command shell.\r\rMost of my syntax is applicable for any operating system. Where needed, platform specific methods are in my "platform dependent" category. Currently, Unix and Windows are supported, and other platforms have not been tested. The primary difference between Unix and Windows support is that device names (such as \'C:\') are used in Windows path strings. Separate current working directory strings are maintained for all Windows device names. For Unix, a single current working directory path is used. On Windows, this permits the CommandShell \'cd\' command to support changing directories to another device without losing track of the current working directory for the previous device.\r\rCommand pipeline syntax is not supported here. See CommandShell for the implementation of command pipelines.\r',		#newStamp : 'dtl 9/7/2009 12:36'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1206' ],		#self : OmReference [ '1207' ],		#time : DateAndTime [ '2018-02-22T14:01:12.544524-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpCategoryAddition {		#classCategoryName : 'CommandShell-base-CommandShell-Base',		#affectedPackageName : #CommandShell-base	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1207' ],		#self : OmReference [ '1208' ],		#time : DateAndTime [ '2018-02-22T14:01:12.54474-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpCategoryAddition {		#classCategoryName : #CommandShell-Base,		#affectedPackageName : #CommandShell-base	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1208' ],		#self : OmReference [ '1209' ],		#time : DateAndTime [ '2018-02-22T14:01:12.570757-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ShellSyntax\r\tinstanceVariableNames: \'cwdDictionary cwdIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Base\''			},			#name : #ShellSyntax,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellSyntax,						#isMetaSide : false					},					#name : #cwdDictionary,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellSyntax,						#isMetaSide : false					},					#name : #cwdIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellSyntax class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellSyntax class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellSyntax,					#isMetaSide : false				},				#parent : @8,				#content : 'My instances implement parsing of strings in a manner similar to a simple Unix command shell. I provide path name expansion in the context of an external file system, and support the syntax required for IO redirection. All file name globbing and PATH searching are implemented in Smalltalk rather than in C library functions or an external command shell.\r\rMost of my syntax is applicable for any operating system. Where needed, platform specific methods are in my "platform dependent" category. Currently, Unix and Windows are supported, and other platforms have not been tested. The primary difference between Unix and Windows support is that device names (such as \'C:\') are used in Windows path strings. Separate current working directory strings are maintained for all Windows device names. For Unix, a single current working directory path is used. On Windows, this permits the CommandShell \'cd\' command to support changing directories to another device without losing track of the current working directory for the previous device.\r\rCommand pipeline syntax is not supported here. See CommandShell for the implementation of command pipelines.\r',				#stamp : 'dtl 9/7/2009 12:36'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Base,			#package : #CommandShell-base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1209' ],		#self : OmReference [ '1210' ],		#time : DateAndTime [ '2018-02-22T14:01:12.588051-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #CommandShell\r\tinstanceVariableNames: \'outputStream errorStream shellSyntax environment builtinCommands commandHistory historyIndex promptString promptStringTwo foregroundProxies backgroundProxies backgroundPipelines commandLineProcesses backgroundMessageQueue keyboardConnector activeController safeToExit readSyncSemaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CommandShell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #outputStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #errorStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #shellSyntax,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #environment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #builtinCommands,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #commandHistory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #historyIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #promptString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #promptStringTwo,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #foregroundProxies,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #backgroundProxies,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #backgroundPipelines,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #commandLineProcesses,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #backgroundMessageQueue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #keyboardConnector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #activeController,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #safeToExit,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #readSyncSemaphore,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CommandShell class\r\tinstanceVariableNames: \'\''				},				#name : #'CommandShell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CommandShell,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a command shell, similar to /bin/sh, with a simple command line user interface. I collaborate with process proxies to provide command execution, and I provide a limited set of built in commands similar to those in /bin/sh. My built in commands are implemented in Smalltalk, and any other commands are passed to process proxies to be executed either internally as Smalltalk "doIt" expressions, or externally as commands passed to the external operating system. I am similar to a TranscriptStream (some methods are copied directly from TranscriptStream), but I also know how to accept lines of command input, parse them, and hand them off to process proxies for execution.\r\rThree types of commands may be executed from a CommandShell: internal "builtin" commands implemented in Smalltalk; internal Smalltalk "doIt" commands; and external commands. Internal commands (builtin commands or doIt commands) may be freely mixed with external operating system commands in a command pipeline. See CommandShell class>>commandProcessing for more information.\r\rEach command line is first evaluated as a Smalltalk expression, and is subject to further parsing only if the Smalltalk evaluation fails. In practice, this permits complete Smalltalk expressions to be evaluated easily without conflicting with shell syntax, and allows Smalltalk and unix shell commands to be freely mixed.\r\rSimple command scripting is supported (method category \'command scripting\'). Any mix of internal and external commands may be included in a script. Conditional branching is supported based on command exit status.\r\rOpen a new shell window with "CommandShell open". Type \'help\' followed by <return> or <enter> for help on builtin commands.\r\rThings that work reasonably well:\r- Simple command execution for running command line programs or starting\r  X programs.\r- Command pipelines. Built in commands can be mixed with external\r  commands, as in "help sqsh | wc -l".\r- Command IO redirection with \'<\',  \'>\', \'>>\', \'2>\', and \'2>>\'.\r- Command history and command history recall.\r- Background command execution, as in "xterm&".\r- <ctl-C> to interrupt a running external command.\r- <ctl-D> to indicate end of file in terminal input.\r\rLimitations include:\r- Dumb tty only. Do not try to run vi.\r- Standard Unix shell syntax is not completely implemented.\r\rRace conditions are possible for certain command pipelines. See CommandShell class>>raceConditions for more information.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a command shell, similar to /bin/sh, with a simple command line user interface. I collaborate with process proxies to provide command execution, and I provide a limited set of built in commands similar to those in /bin/sh. My built in commands are implemented in Smalltalk, and any other commands are passed to process proxies to be executed either internally as Smalltalk "doIt" expressions, or externally as commands passed to the external operating system. I am similar to a TranscriptStream (some methods are copied directly from TranscriptStream), but I also know how to accept lines of command input, parse them, and hand them off to process proxies for execution.\r\rThree types of commands may be executed from a CommandShell: internal "builtin" commands implemented in Smalltalk; internal Smalltalk "doIt" commands; and external commands. Internal commands (builtin commands or doIt commands) may be freely mixed with external operating system commands in a command pipeline. See CommandShell class>>commandProcessing for more information.\r\rEach command line is first evaluated as a Smalltalk expression, and is subject to further parsing only if the Smalltalk evaluation fails. In practice, this permits complete Smalltalk expressions to be evaluated easily without conflicting with shell syntax, and allows Smalltalk and unix shell commands to be freely mixed.\r\rSimple command scripting is supported (method category \'command scripting\'). Any mix of internal and external commands may be included in a script. Conditional branching is supported based on command exit status.\r\rOpen a new shell window with "CommandShell open". Type \'help\' followed by <return> or <enter> for help on builtin commands.\r\rThings that work reasonably well:\r- Simple command execution for running command line programs or starting\r  X programs.\r- Command pipelines. Built in commands can be mixed with external\r  commands, as in "help sqsh | wc -l".\r- Command IO redirection with \'<\',  \'>\', \'>>\', \'2>\', and \'2>>\'.\r- Command history and command history recall.\r- Background command execution, as in "xterm&".\r- <ctl-C> to interrupt a running external command.\r- <ctl-D> to indicate end of file in terminal input.\r\rLimitations include:\r- Dumb tty only. Do not try to run vi.\r- Standard Unix shell syntax is not completely implemented.\r\rRace conditions are possible for certain command pipelines. See CommandShell class>>raceConditions for more information.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1210' ],		#self : OmReference [ '1211' ],		#time : DateAndTime [ '2018-02-22T14:01:12.590751-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #CommandShell\r\tinstanceVariableNames: \'outputStream errorStream shellSyntax environment builtinCommands commandHistory historyIndex promptString promptStringTwo foregroundProxies backgroundProxies backgroundPipelines commandLineProcesses backgroundMessageQueue keyboardConnector activeController safeToExit readSyncSemaphore\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Base\''			},			#name : #CommandShell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #outputStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #errorStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #shellSyntax,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #environment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #builtinCommands,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #commandHistory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #historyIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #promptString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #promptStringTwo,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #foregroundProxies,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #backgroundProxies,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #backgroundPipelines,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #commandLineProcesses,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #backgroundMessageQueue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #keyboardConnector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #activeController,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #safeToExit,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShell,						#isMetaSide : false					},					#name : #readSyncSemaphore,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CommandShell class\r\tinstanceVariableNames: \'\''				},				#name : #'CommandShell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CommandShell,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a command shell, similar to /bin/sh, with a simple command line user interface. I collaborate with process proxies to provide command execution, and I provide a limited set of built in commands similar to those in /bin/sh. My built in commands are implemented in Smalltalk, and any other commands are passed to process proxies to be executed either internally as Smalltalk "doIt" expressions, or externally as commands passed to the external operating system. I am similar to a TranscriptStream (some methods are copied directly from TranscriptStream), but I also know how to accept lines of command input, parse them, and hand them off to process proxies for execution.\r\rThree types of commands may be executed from a CommandShell: internal "builtin" commands implemented in Smalltalk; internal Smalltalk "doIt" commands; and external commands. Internal commands (builtin commands or doIt commands) may be freely mixed with external operating system commands in a command pipeline. See CommandShell class>>commandProcessing for more information.\r\rEach command line is first evaluated as a Smalltalk expression, and is subject to further parsing only if the Smalltalk evaluation fails. In practice, this permits complete Smalltalk expressions to be evaluated easily without conflicting with shell syntax, and allows Smalltalk and unix shell commands to be freely mixed.\r\rSimple command scripting is supported (method category \'command scripting\'). Any mix of internal and external commands may be included in a script. Conditional branching is supported based on command exit status.\r\rOpen a new shell window with "CommandShell open". Type \'help\' followed by <return> or <enter> for help on builtin commands.\r\rThings that work reasonably well:\r- Simple command execution for running command line programs or starting\r  X programs.\r- Command pipelines. Built in commands can be mixed with external\r  commands, as in "help sqsh | wc -l".\r- Command IO redirection with \'<\',  \'>\', \'>>\', \'2>\', and \'2>>\'.\r- Command history and command history recall.\r- Background command execution, as in "xterm&".\r- <ctl-C> to interrupt a running external command.\r- <ctl-D> to indicate end of file in terminal input.\r\rLimitations include:\r- Dumb tty only. Do not try to run vi.\r- Standard Unix shell syntax is not completely implemented.\r\rRace conditions are possible for certain command pipelines. See CommandShell class>>raceConditions for more information.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Base,			#package : #CommandShell-base,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1211' ],		#self : OmReference [ '1212' ],		#time : DateAndTime [ '2018-02-22T14:01:12.755507-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'appendPath:toPath:',			#protocol : #'path name expansion',			#sourceCode : 'appendPath: aPathString toPath: startingPathString \r\t"ShellSyntax new appendPath: \'hosts\' toPath: \'/etc\'"\r\t"ShellSyntax new appendPath: \'etc\' toPath: \'/\'"\r\t"ShellSyntax new appendPath: \'hosts\' toPath: \'/etc\'"\r\t"ShellSyntax new appendPath: \'WINDOWS\' toPath: \'C:\\\'"\r\t"ShellSyntax new appendPath: \'someFileName\' toPath: \'C:\\WINDOWS\'"\r\r\t| newPath |\r\t^ (aPathString findTokens: CommandShell pathSeparator)\r\t\tinject: startingPathString\r\t\tinto: [:dirPath :nextPart | \r\t\t\tnextPart = \'..\'\r\t\t\t\tifTrue: [newPath := self upOneDirectoryLevel: dirPath]\r\t\t\t\tifFalse: [nextPart = \'.\'\r\t\t\t\t\t\tifTrue: [newPath := dirPath]\r\t\t\t\t\t\tifFalse: [newPath := (self isAtFileSystemRoot: dirPath)\r\t\t\t\t\t\t\t\t\t\tifTrue: [dirPath , nextPart]\r\t\t\t\t\t\t\t\t\t\tifFalse: [dirPath , CommandShell pathSeparator , nextPart]]].\r\t\t\tnewPath]',			#stamp : 'dtl 1/25/2013 19:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1212' ],		#self : OmReference [ '1213' ],		#time : DateAndTime [ '2018-02-22T14:01:12.758229-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'argsFromCommand:',			#protocol : #'command string parsing',			#sourceCode : 'argsFromCommand: aString\r\t"Answer a collection of strings from a whitespace delimited string. Single quote characters\r\tprotect substrings from expansion to tokens. Single quote characters may be escaped by\r\tthe backslash character to prevent this interpretation."\r\r\t^ (self stringTokensFrom: aString) first\r',			#stamp : 'dtl 5/11/2002 20:15',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1213' ],		#self : OmReference [ '1214' ],		#time : DateAndTime [ '2018-02-22T14:01:12.759315-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #canAccessOSProcess,			#protocol : #private,			#sourceCode : 'canAccessOSProcess\r\t"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"\r\r\t"ShellSyntax new canAccessOSProcess"\r\r\t| osp |\r\t^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]\r',			#stamp : 'dtl 8/7/2002 13:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1214' ],		#self : OmReference [ '1215' ],		#time : DateAndTime [ '2018-02-22T14:01:12.760212-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'character:matches:',			#protocol : #globbing,			#sourceCode : 'character: aCharacter matches: aToken\r\t"Test if aCharacter is included in the characters of aToken, or if aToken is a #matchAny"\r\r\t(aToken == #matchAny) ifTrue: [^ true].\r\t^ aToken includes: aCharacter',			#stamp : 'dtl 3/10/2001 18:07',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1215' ],		#self : OmReference [ '1216' ],		#time : DateAndTime [ '2018-02-22T14:01:12.760923-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #commentChar,			#protocol : #defaults,			#sourceCode : 'commentChar\r\r\t^ $#',			#stamp : 'dtl 9/8/2001 10:15',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1216' ],		#self : OmReference [ '1217' ],		#time : DateAndTime [ '2018-02-22T14:01:12.761564-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'containsExpansionTokens:',			#protocol : #globbing,			#sourceCode : 'containsExpansionTokens: aString\r\t"Answer true if aString contains wildcard expansion characters, or if it contains\r\tanything that might be construed as a regular expression for globbing, or if it\r\tcontains path separator characters. If false, the sender may safely skip normal\r\tglob expansion on aString."\r\r\t^ aString includesAnyOf: {$? . $* . $[ . CommandShell pathNameDelimiter}\r',			#stamp : 'dtl 1/25/2013 19:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1217' ],		#self : OmReference [ '1218' ],		#time : DateAndTime [ '2018-02-22T14:01:12.763945-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #cwdDictionary,			#protocol : #accessing,			#sourceCode : 'cwdDictionary\r\t"Current working directory paths indexed by device or file system name"\r\r\t^ cwdDictionary ifNil: [cwdDictionary := Dictionary new]\r',			#stamp : 'dtl 12/16/2001 20:04',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1218' ],		#self : OmReference [ '1219' ],		#time : DateAndTime [ '2018-02-22T14:01:12.764661-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #cwdIndex,			#protocol : #accessing,			#sourceCode : 'cwdIndex\r\t"Key to current cwd path name in cwdDictionary"\r\r\t^ cwdIndex ifNil: [cwdIndex := self cwdIndexFor: CommandShell defaultPathString]\r',			#stamp : 'dtl 1/25/2013 19:08',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1219' ],		#self : OmReference [ '1220' ],		#time : DateAndTime [ '2018-02-22T14:01:12.76523-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'cwdIndex:',			#protocol : #'working directory',			#sourceCode : 'cwdIndex: aSymbol\r\t"Key to current cwd path name in cwdDictionary"\r\r\tcwdIndex := aSymbol\r',			#stamp : 'dtl 12/16/2001 20:06',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1220' ],		#self : OmReference [ '1221' ],		#time : DateAndTime [ '2018-02-22T14:01:12.765822-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'cwdIndexFor:',			#protocol : #'working directory',			#sourceCode : 'cwdIndexFor: aPathStringWithPrefix\r\t"Answer key to use for aPathStringWithPrefix"\r\r\t| prefix |\r\tprefix := (self splitLocationPrefixFromPath: aPathStringWithPrefix) first.\r\t^ prefix isEmpty\r\t\tifTrue: [#default]\r\t\tifFalse: [prefix]',			#stamp : 'dtl 12/17/2001 09:56',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1221' ],		#self : OmReference [ '1222' ],		#time : DateAndTime [ '2018-02-22T14:01:12.766381-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'defaultPathFor:',			#protocol : #'working directory',			#sourceCode : 'defaultPathFor: aPathStringWithPrefix\r\t"Answer a reasonable path string to use as a default"\r\r\t^ self pathRoot: aPathStringWithPrefix\r',			#stamp : 'dtl 1/3/2002 19:15',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1222' ],		#self : OmReference [ '1223' ],		#time : DateAndTime [ '2018-02-22T14:01:12.766967-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'doItStringFrom:',			#protocol : #'command string parsing',			#sourceCode : 'doItStringFrom: aCommandString\r\t"Answer a string which can be evaluated as Smalltalk doIt, or nil."\r\r\t| s |\r\ts := CommandShell withBlanksTrimmed: aCommandString.\r\ts last == $!\r\t\tifTrue: [^ aCommandString copyUpToLast: $!]\r\t\tifFalse: [^ nil]',			#stamp : 'dtl 1/29/2013 20:29',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1223' ],		#self : OmReference [ '1224' ],		#time : DateAndTime [ '2018-02-22T14:01:12.767602-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #escapeChar,			#protocol : #defaults,			#sourceCode : 'escapeChar\r\t"The character to use to escape the normal interpretation of the following character\r\tin a string."\r\r\t^ $\\',			#stamp : 'dtl 4/28/2002 16:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1224' ],		#self : OmReference [ '1225' ],		#time : DateAndTime [ '2018-02-22T14:01:12.768307-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'expandArgument:inDirectoryPath:',			#protocol : #'path name expansion',			#sourceCode : 'expandArgument: aString inDirectoryPath: aDefaultFileDirectoryPath\r\t"Perform globbing expansion of a command argument. If argument is not a\r\tpathname, use aDefaultFileDirectory as the context for globbing. Answer a\r\t(possibly empty) collection of all matching paths relative to the default\r\tdirectory path."\r\r\t"ShellSyntax new expandArgument: \'ho?ts\' inDirectoryPath: \'/etc\'"\r\t"ShellSyntax new expandArgument: \'/b?n/s?\' inDirectoryPath: \'/etc\'"\r\t"ShellSyntax new expandArgument: \'fs*\' inDirectoryPath: \'/etc\'"\r\t"ShellSyntax new expandArgument: \'NOSUCHFILE\' inDirectoryPath: \'/etc\'"\r\t"ShellSyntax new expandArgument: \'/us*/b?n/v?\' inDirectoryPath: \'/etc\'"\r\t"ShellSyntax new expandArgument: \'b?n/v?\' inDirectoryPath: \'/usr\'"\r\t"ShellSyntax new expandArgument: nil inDirectoryPath: \'/etc\'"\r\r\t| dirPath pathNames newArgs |\r\taString ifNil: [^ Array new: 0].\r\tdirPath := (aDefaultFileDirectoryPath\r\t\t\t\tifNil: [self workingDirectory])\r\t\t\t\t\tifNil: [CommandShell defaultPathString].\r\tpathNames := (self containsExpansionTokens: aString)\r\t\t\t\tifTrue: [self expandedPathsFrom: aString beginningAt: dirPath]\r\t\t\t\tifFalse: [OrderedCollection new].\r\tnewArgs := pathNames collect:\r\t\t\t\t[:p | (aDefaultFileDirectoryPath notNil and: [p beginsWith: aDefaultFileDirectoryPath, CommandShell pathSeparator])\r\t\t\t\t\tifTrue: [(ReadStream on: p) next: aDefaultFileDirectoryPath size + CommandShell pathSeparator size; upToEnd]\r\t\t\t\t\tifFalse: [p]].\r\tnewArgs isEmpty ifTrue: [newArgs add: aString].\r\t^ newArgs\r',			#stamp : 'dtl 1/25/2013 19:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1225' ],		#self : OmReference [ '1226' ],		#time : DateAndTime [ '2018-02-22T14:01:12.768915-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'expandArgumentsFrom:inDirectoryPath:',			#protocol : #'path name expansion',			#sourceCode : 'expandArgumentsFrom: argArray inDirectoryPath: aDefaultFileDirectoryPath\r\t"Perform globbing expansion of command arguments. For each argument which is not a\r\tpathname, use aDefaultFileDirectory as the context for globbing."\r\r\t"ShellSyntax new\r\t\texpandArgumentsFrom: #(\'-help\' \'/b?n/s?\' \'ho?ts\' \'fs*\' \'NOSUCHFILE\')\r\t\tinDirectoryPath: \'/etc\'"\r\t"ShellSyntax new\r\t\texpandArgumentsFrom: #(\'this\' \'is\' \'a\' \'test\' \'Sq*log\' \'/us*/b?n/v?\')\r\t\tinDirectoryPath: CommandShell defaultPathString"\r\t"ShellSyntax new\r\t\texpandArgumentsFrom: #(\'this\' \'is\' \'a\' \'test\' \'Sq*log\' \'/us*/b?n/v?\')\r\t\tinDirectoryPath: nil"\r\r\t| newArgs |\r\tnewArgs := OrderedCollection new.\r\targArray do:\r\t\t[:arg |\r\t\t(self isFlagParameter: arg)\r\t\t\tifTrue:\r\t\t\t\t[newArgs add: arg]\r\t\t\tifFalse:\r\t\t\t\t[newArgs addAll: (self\r\t\t\t\t\texpandArgument: arg\r\t\t\t\t\tinDirectoryPath: aDefaultFileDirectoryPath)]].\r\t^ newArgs',			#stamp : 'dtl 1/25/2013 19:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1226' ],		#self : OmReference [ '1227' ],		#time : DateAndTime [ '2018-02-22T14:01:12.771146-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'expandPathParts:beginningAt:',			#protocol : #'path name expansion',			#sourceCode : 'expandPathParts: pathParts beginningAt: root\r\t"Walk directory tree and answer a collection of matching path strings."\r\r\t| firstPart remainder dirPaths names dirNames basePath |\r\t(pathParts size == 0)\r\t\tifTrue:\r\t\t\t["Should never get here, but just in case"\r\t\t\t^ Array with: root].\r\tfirstPart := pathParts first.\r\tremainder := pathParts allButFirst.\r\t(firstPart = \'.\')\r\t\tifTrue: "Stay at the current directory level"\r\t\t\t[dirPaths := Array with: root]\r\t\tifFalse:\r\t\t\t[(firstPart = \'..\') "Move up a directory level if possible"\r\t\t\t\tifTrue:\r\t\t\t\t\t[dirPaths := Array with: (self upOneDirectoryLevel: root)]\r\t\t\t\tifFalse: "Normal case, a directory name"\r\t\t\t\t\t[remainder isEmpty\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t["This condition terminates recursion"\r\t\t\t\t\t\t\tnames := self glob: firstPart inDirectory: root.\r\t\t\t\t\t\t\t^ (root = CommandShell pathSeparator)\r\t\t\t\t\t\t\t\tifTrue: [^ names collect: [:n | root, n]]\r\t\t\t\t\t\t\t\tifFalse: [^ names collect: [:n | root, CommandShell pathSeparator, n]]]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t["Continue recursion until no more elements"\r\t\t\t\t\t\t\tCommandShell directoryNamesInPath: root.\r\t\t\t\t\t\t\tdirNames := self glob: firstPart\r\t\t\t\t\t\t\t\t\t\t\tnames: (CommandShell directoryNamesInPath: root).\r\t\t\t\t\t\t\t((\'*\', CommandShell pathSeparator) match: root)\r\t\t\t\t\t\t\t\tifTrue: [basePath := root]\r\t\t\t\t\t\t\t\tifFalse: [basePath := root, CommandShell pathSeparator].\r\t\t\t\t\t\t\tdirPaths := dirNames collect: [:d | basePath, d]]]].\r\t\t^ dirPaths\r\t\t\tinject: OrderedCollection new\r\t\t\tinto: [:result :dir |\r\t\t\t\tresult addAll: (self expandPathParts: remainder beginningAt: dir).\r\t\t\t\tresult]\r',			#stamp : 'dtl 1/26/2013 15:40',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1227' ],		#self : OmReference [ '1228' ],		#time : DateAndTime [ '2018-02-22T14:01:12.771864-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'expandedPathsFrom:beginningAt:',			#protocol : #'path name expansion',			#sourceCode : 'expandedPathsFrom: aPathString beginningAt: firstPartOfPath\r\t"Answer a collection of all paths which match aPathString. If aPathString is a relative path,\r\texpand the path relative to firstPartOfPath."\r\r\t "ShellSyntax new expandedPathsFrom: \'/e*c/h*s\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'e*c/h*s\' beginningAt: \'/\'"\r\t "ShellSyntax new expandedPathsFrom: \'/usr/bin/vi\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'bin/vi\' beginningAt: \'/usr\'"\r\t "ShellSyntax new expandedPathsFrom: \'/usr/*/vi\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'/usr/bin/../bin/./../bin/../../usr/bin/vi\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'/bin/../bin/./../bin/../../usr/bin/vi\' beginningAt: \'/usr\'"\r\t "ShellSyntax new expandedPathsFrom: \'/usr/bin/../bin/./../bin/../../../../../usr/bin/vi\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'../../../../../../usr/bin/vi\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'/\' beginningAt: \'/\'"\r\t "ShellSyntax new expandedPathsFrom: \'*.image\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'C:\\WINDOWS\\*.*\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'*.*\' beginningAt: \'C:\\WINDOWS\'"\r\t "ShellSyntax new expandedPathsFrom: \'C:\\*.*\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'C:\\CONFIG.*\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFrom: \'C:\\CONFIG.*\' beginningAt: \'\\\'"\r\r\t^ (self isAbsolutePath: aPathString)\r\t\tifTrue: [self expandedPathsFromAbsolutePath: aPathString]\r\t\tifFalse: [self expandedPathsFromRelativePath: aPathString beginningAt: firstPartOfPath]\r',			#stamp : 'dtl 12/28/2002 09:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1228' ],		#self : OmReference [ '1229' ],		#time : DateAndTime [ '2018-02-22T14:01:12.772501-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'expandedPathsFromAbsolutePath:',			#protocol : #'path name expansion',			#sourceCode : 'expandedPathsFromAbsolutePath: anAbsolutePathString\r\t"Answer a collection of all paths which match anAbsolutePathString."\r\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/e*c/h*s\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'e*c/h*s\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/usr/bin/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'bin/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/usr/*/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/usr/bin/../bin/./../bin/../../usr/bin/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/bin/../bin/./../bin/../../usr/bin/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/usr/bin/../bin/./../bin/../../../../../usr/bin/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'../../../../../../usr/bin/vi\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'/\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'*.image\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'C:\\WINDOWS\\*.*\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'*.*\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'C:\\*.*\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'C:\\CONFIG.*\'"\r\t "ShellSyntax new expandedPathsFromAbsolutePath: \'C:\\CONFIG.*\'"\r\r\t| result pathParts a prefix dirPathString root |\r\tresult := OrderedCollection new.\r\ta := self splitLocationPrefixFromPath: anAbsolutePathString.\r\tprefix := a at: 1.\r\tdirPathString := a at: 2.\r\tpathParts := dirPathString findTokens: CommandShell pathSeparator.\r\troot := prefix, CommandShell pathSeparator.\r\tresult addAll: (self expandPathParts: pathParts beginningAt: root).\r\t^ result\r\r',			#stamp : 'dtl 1/25/2013 19:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1229' ],		#self : OmReference [ '1230' ],		#time : DateAndTime [ '2018-02-22T14:01:12.773111-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'expandedPathsFromRelativePath:beginningAt:',			#protocol : #'path name expansion',			#sourceCode : 'expandedPathsFromRelativePath: aPathString beginningAt: firstPartOfPath\r\t"Answer a collection of all paths which match aPathString. Expand the path relative to firstPartOfPath."\r\r\t "ShellSyntax new expandedPathsFromRelativePath: \'e*c/h*s\' beginningAt: \'/\'"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'usr/b?n/vi\' beginningAt: \'/\'"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'bin/vi\' beginningAt: \'/usr\'"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'usr/*/vi\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'usr/bin/../bin/./../bin/../../usr/bin/vi\' beginningAt: \'/\'"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'bin/../bin/./../bin/../../usr/bin/vi\' beginningAt: \'/usr\'"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'../../../../../../usr/bin/vi\' beginningAt: \'/\'"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'*.image\' beginningAt: nil"\r\t "ShellSyntax new expandedPathsFromRelativePath: \'*.*\' beginningAt: \'C:\\WINDOWS\'"\r\r\t| result pathParts root |\r\tresult := OrderedCollection new.\r\tpathParts := aPathString findTokens: CommandShell pathSeparator.\r\troot := firstPartOfPath isNil\r\t\t\t\tifTrue: [CommandShell defaultPathString]\r\t\t\t\tifFalse: [firstPartOfPath].\r\tresult addAll: (self expandPathParts: pathParts beginningAt: root).\r\t^ result\r\r',			#stamp : 'dtl 1/25/2013 19:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1230' ],		#self : OmReference [ '1231' ],		#time : DateAndTime [ '2018-02-22T14:01:12.773882-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'findExecutablePathFor:inDirectoryPath:',			#protocol : #'path name expansion',			#sourceCode : 'findExecutablePathFor: aString inDirectoryPath: pathString\r\t"Look for the executable, following Unix conventions for searching the PATH.\r\tIf no likely candidate is found, answer nil."\r\r\t"ShellSyntax new findExecutablePathFor: \'bash\' inDirectoryPath: nil"\r\t"ShellSyntax new findExecutablePathFor: \'ReadMe.txt\' inDirectoryPath: nil"\r\t"ShellSyntax new findExecutablePathFor: \'SqueakDebug.log\' inDirectoryPath: nil"\r\t"ShellSyntax new findExecutablePathFor: \'noSuchFileName\' inDirectoryPath: nil"\r\t"ShellSyntax new findExecutablePathFor: \'a\' inDirectoryPath: nil"\r\t"ShellSyntax new findExecutablePathFor: \'sqcat\' inDirectoryPath: \'/home/lewis/bin\'"\r\r\t| delimiter path localNames fullName fileExists |\r\tself canAccessOSProcess ifFalse: [^ nil].\r\tdelimiter := CommandShell pathNameDelimiter.\r\tpath := (pathString\r\t\t\t\tifNil: [self workingDirectory])\r\t\t\t\t\tifNil: [CommandShell defaultPathString].\r\t"Unix compatibility note: If aString contains wildcard characters,\r\tit is expanded in the context of the current working directory. Expansion\r\tdoes not take place in the context of the PATH directories."\r\t(aString includes: delimiter)\r\t\tifTrue:\r\t\t\t["A fully or partially qualified path, do not search PATH"\r\t\t\t^ (self expandedPathsFrom: aString beginningAt: pathString)\r\t\t\t\tdetect: [:fileName |\r\t\t\t\t\t(CommandShell fileExists: fileName inPath: path) and: [self isExecutable: fileName]]\r\t\t\t\tifNone: [nil]]\r\t\tifFalse:\r\t\t\t["Look for the file in the PATH locations"\r\t\t\tlocalNames := self glob: aString inDirectory: path.\r\t\t\t(localNames size == 0)\r\t\t\t\tifTrue:\r\t\t\t\t\t["Name was not expanded, so use the unmodified value of aString"\r\t\t\t\t\tlocalNames := Array with: aString].\r\t\t\t(self pathEntriesInDirectoryPath: path)\r\t\t\t\tdo: [:pathName |\r\t\t\t\t\tlocalNames\r\t\t\t\t\t\tdo: [:fileName |\r\t\t\t\t\t\t\tfileExists := [ CommandShell useFileSystem\r\t\t\t\t\t\t\t\t\tifTrue: [ CommandShell fileExists: fileName inDirectory: (pathName perform: #asFileReference) ]\r\t\t\t\t\t\t\t\t\tifFalse: [ CommandShell fileExists: fileName inDirectory: ((Smalltalk at: #FileDirectory) on: pathName) ]\r\t\t\t\t\t\t\t\t] on: (Smalltalk at: #InvalidDirectoryError ifAbsent: [ Error ]) "Pharo does not have InvalidDirectoryError"\r\t\t\t\t\t\t\t\t\tdo: [:e | false].\r\t\t\t\t\t\t\tfileExists ifTrue:\r\t\t\t\t\t\t\t\t[fullName := pathName, CommandShell pathSeparator, fileName.\r\t\t\t\t\t\t\t\t(self isExecutable: fullName)\r\t\t\t\t\t\t\t\t\tifTrue: [^ fullName]]]].\r\t\t\t^ nil]',			#stamp : 'dtl 4/19/2015 09:34',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1231' ],		#self : OmReference [ '1232' ],		#time : DateAndTime [ '2018-02-22T14:01:12.774492-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'firstExpandedArgument:inDirectoryPath:',			#protocol : #'path name expansion',			#sourceCode : 'firstExpandedArgument: aString inDirectoryPath: aPath\r\t"Expand a single argument and answer a fully qualified path to the first matching\r\tname. If no match, answer the literal path and file name (which does not exist).\r\tIf aString is nil, answer an empty string. This method may be used to expand a single\r\targument, such as the target for a command output redirection, where the target is\r\texpected to resolve to a single file name."\r\r\t"ShellSyntax new firstExpandedArgument: \'b?*h\' inDirectoryPath: \'/usr/bin\'"\r\t"ShellSyntax new firstExpandedArgument: \'b?*h\' inDirectoryPath: \'/no/such/directory\'"\r\t"ShellSyntax new firstExpandedArgument: \'no*such*file???\' inDirectoryPath: \'/usr/bin\'"\r\t"ShellSyntax new firstExpandedArgument: \'/usr/bin/vi\' inDirectoryPath: \'/usr/bin\'"\r\t"ShellSyntax new firstExpandedArgument: \'../bin/vi\' inDirectoryPath: \'/usr/bin\'"\r\t"ShellSyntax new firstExpandedArgument: \'../b?n\' inDirectoryPath: \'/usr/bin\'"\r\t"ShellSyntax new firstExpandedArgument: nil inDirectoryPath: \'/usr/bin\'"\r\r\t| expanded path trimmedString |\r\taString ifNil: [^ \'\'].\r\ttrimmedString := CommandShell withBlanksTrimmed: aString.\r\texpanded := self expandArgument: trimmedString inDirectoryPath: aPath.\r\tpath := expanded isEmpty\r\t\t\tifTrue: [trimmedString]\r\t\t\tifFalse: [expanded first].\r\t^ self newPathFor: path fromDefault: aPath\r',			#stamp : 'dtl 1/29/2013 20:27',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1232' ],		#self : OmReference [ '1233' ],		#time : DateAndTime [ '2018-02-22T14:01:12.775087-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'getCwdForPath:',			#protocol : #'working directory',			#sourceCode : 'getCwdForPath: aPathString\r\r\t| prefix |\r\tprefix := (self splitLocationPrefixFromPath: aPathString) first.\r\t^ prefix isEmpty\r\t\tifTrue: [self workingDirectory]\r\t\tifFalse: [self cwdDictionary at: prefix ifAbsentPut: [self defaultPathFor: aPathString]]\r',			#stamp : 'dtl 12/17/2001 09:52',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1233' ],		#self : OmReference [ '1234' ],		#time : DateAndTime [ '2018-02-22T14:01:12.775656-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'glob:',			#protocol : #globbing,			#sourceCode : 'glob: aString\r\t"Apply Unix shell globbing rules to aString, and answer an array of matching\r\tfile names."\r\r\t"ShellSyntax new glob: \'ReadMe.txt\'"\r\t"ShellSyntax new glob: \'rEADmE.TXT\'"\r\t"ShellSyntax new glob: \'R*dM?.txt\'"\r\r\t^ self glob: aString inDirectory: self workingDirectory\r',			#stamp : 'dtl 10/13/2008 20:02',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1234' ],		#self : OmReference [ '1235' ],		#time : DateAndTime [ '2018-02-22T14:01:12.77769-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'glob:inDirectory:',			#protocol : #globbing,			#sourceCode : 'glob: aString inDirectory: directoryPath\r\t"Apply Unix shell globbing rules to aString, and answer an array of matching\r\tfile names."\r\r\t"ShellSyntax new glob: \'ReadMe.txt\' inDirectory: FileDirectory default pathName"\r\t"ShellSyntax new glob: \'SqueakDebug.log\' inDirectory: FileDirectory default pathName"\r\t"ShellSyntax new glob: \'?queak*.[0-9].log\' inDirectory: FileDirectory default pathName"\r\t"ShellSyntax new glob: \'*image*\' inDirectory: FileDirectory default pathName"\r\t"ShellSyntax new glob: \'noSuchFileName\' inDirectory: FileDirectory default pathName"\r\t"ShellSyntax new glob: \'b?n\' inDirectory: \'/usr\'"\r\r\t[^ self glob: aString names: (CommandShell directoryEntryNames: directoryPath)]\r\t\ton: Error\r\t\tdo: [:ex | ^ #()]\r\r',			#stamp : 'dtl 1/26/2013 14:03',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1235' ],		#self : OmReference [ '1236' ],		#time : DateAndTime [ '2018-02-22T14:01:12.778474-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'glob:names:',			#protocol : #globbing,			#sourceCode : 'glob: aString names: fileNameArray\r\t"Apply Unix shell globbing rules to aString with respect to the elements of fileNameArray,\r\tand answer an array of matching file names. The fileNameArray is expected to have been\r\tprovided by a FileDirectory query."\r\r\t| tokens |\r\ttokens := self globTokensFrom: aString.\r\t^ fileNameArray\r\t\tselect: [:n |\r\t\t\tself tokenStream: (ReadStream on: tokens)\r\t\t\t\tmatches: (ReadStream on: n)]\r\r',			#stamp : 'dtl 3/11/2001 17:37',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1236' ],		#self : OmReference [ '1237' ],		#time : DateAndTime [ '2018-02-22T14:01:12.779135-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'globRangeFrom:tokenStream:',			#protocol : #globbing,			#sourceCode : 'globRangeFrom: aString tokenStream: aTokenStream\r\t"Answer a string containing the characters specified by a range expression\r\tsuch as [a-z]. Sorry, this is just a simple implementation which assumes ASCII."\r\r\t| r w c t |\r\t(aString includes: $-) ifFalse: [^ aString]. "Simple case"\r\tr := ReadStream on: aString.\r\tw := WriteStream on: String new.\r\t(r peek == $!) ifTrue:\r\t\t[r next.\r\t\taTokenStream nextPut: #not].\r\t[r atEnd] whileFalse: [\r\t\tc := r next.\r\t\t(r peek == $-)\r\t\t\tifTrue: [r next.\r\t\t\t\t\tt := r next.\r\t\t\t\t\t(c asciiValue to: t asciiValue) do:\r\t\t\t\t\t\t[:e | w nextPut: (Character value: e)]]\r\t\t\tifFalse: [w nextPut: c]].\r\t^ w contents',			#stamp : 'dtl 2/24/2013 10:25',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1237' ],		#self : OmReference [ '1238' ],		#time : DateAndTime [ '2018-02-22T14:01:12.779758-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'globTokensFrom:',			#protocol : #globbing,			#sourceCode : 'globTokensFrom: aString\r\t"Answer a collection of tokens to be used for glob matching."\r\r\t"ShellSyntax new globTokensFrom: \'abc?def\\ghi\\?jkl*mno\\*pqr[hello]there[Xa-eY]Z[!A-Z]end\'"\r\r\t| lastToken r w t |\r\tlastToken := nil.\r\tr := ReadStream on: aString.\r\tw := WriteStream on: #().\r\t[r atEnd] whileFalse:\r\t\t[t := self nextGlobToken: r lastToken: lastToken tokenStream: w.\r\t\t(t ~~ #escape) ifTrue: [w nextPut: t].\r\t\tlastToken := t].\r\t^ w contents\r',			#stamp : 'dtl 12/17/2001 11:41',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1238' ],		#self : OmReference [ '1239' ],		#time : DateAndTime [ '2018-02-22T14:01:12.780353-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isAbsolutePath:',			#protocol : #'platform dependent',			#sourceCode : 'isAbsolutePath: aPathString\r\t"Answer true if aPathString is specified relative to the root of the file system."\r\r\t"ShellSyntax new isAbsolutePath: \'not/absolute/path\'"\r\t"ShellSyntax new isAbsolutePath: \'/absolute/path\'"\r\t"ShellSyntax new isAbsolutePath: \'/\'"\r\t"ShellSyntax new isAbsolutePath: \'C:\\\'"\r\t"ShellSyntax new isAbsolutePath: \'\\\'"\r\t"ShellSyntax new isAbsolutePath: \'C:\'"\r\t"ShellSyntax new isAbsolutePath: \'C:WINDOWS\'"\r\t"ShellSyntax new isAbsolutePath: \'C:\\WINDOWS\'"\r\r\t| prefixAndPath path |\r\t^ ((((CommandShell pathSeparator, \'*\') match: aPathString)\r\t\tor:\t[prefixAndPath := self splitLocationPrefixFromPath: aPathString.\r\t\t\t(CommandShell pathSeparator, \'*\') match: (path := prefixAndPath last)])\r\t\t\t\tor: [prefixAndPath first isEmpty not and: [path isEmpty]]) "One above the root of a Win32 file system tree"\r',			#stamp : 'dtl 1/25/2013 19:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1239' ],		#self : OmReference [ '1240' ],		#time : DateAndTime [ '2018-02-22T14:01:12.780963-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isAtFileSystemRoot:',			#protocol : #'platform dependent',			#sourceCode : 'isAtFileSystemRoot: aPathString\r\t"Answer true if aPathString is not a subdirectory."\r\r\t"ShellSyntax new isAtFileSystemRoot: \'D:\\\'"\r\t"ShellSyntax new isAtFileSystemRoot: \'D:\'"\r\t"ShellSyntax new isAtFileSystemRoot: \'D:\\Windows\'"\r\t"ShellSyntax new isAtFileSystemRoot: \'\\\'"\r\r\t^ (CommandShell pathSeparator = (self splitLocationPrefixFromPath: aPathString) last) or: [aPathString isEmpty]\r',			#stamp : 'dtl 1/25/2013 19:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1240' ],		#self : OmReference [ '1241' ],		#time : DateAndTime [ '2018-02-22T14:01:12.781558-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isComment:',			#protocol : #'command string parsing',			#sourceCode : 'isComment: aString\r\t"Answer true if aString is empty or if its first non-space character is commentChar"\r\r\t^ (aString size == 0)\r\t\tor:\r\t\t\t[aString do: [:e | (e isSeparator not)\r\t\t\t\t\t\t\tifTrue: [^ e == self commentChar]].\r\t\t\tfalse]',			#stamp : 'dtl 1/21/2007 14:07',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1241' ],		#self : OmReference [ '1242' ],		#time : DateAndTime [ '2018-02-22T14:01:12.782201-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isDirectoryPath:',			#protocol : #'platform dependent',			#sourceCode : 'isDirectoryPath: aPathString\r\r\t| fullPath localName entry |\r\t^ ((\'*\', CommandShell pathSeparator) match: aPathString) or:\r\t\t[fullPath := CommandShell fullNameFor: aPathString.\r\t\tlocalName := CommandShell localNameFor: fullPath.\r\t\t[entry := CommandShell useFileSystem\r\t\t\tifTrue: [entry := ((CommandShell dirPathFor: fullPath) perform: #asFileReference) entries\r\t\t\t\t\t\tdetect: [:e | e basename = localName] ifNone: [nil]]\r\t\t\tifFalse: [entry := ((Smalltalk at: #FileDirectory) on: (CommandShell dirPathFor: fullPath)) entries\r\t\t\t\t\t\tdetect: [:e | e name = localName] ifNone: [nil]]]\r\t\t\t\t\ton: Error\r\t\t\t\t\tdo: [: ex | ^false].\r\t\tentry notNil and: [entry isDirectory]]\r',			#stamp : 'dtl 1/28/2013 00:03',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1242' ],		#self : OmReference [ '1243' ],		#time : DateAndTime [ '2018-02-22T14:01:12.782809-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isDoItCommand:',			#protocol : #'command string parsing',			#sourceCode : 'isDoItCommand: aCommandString\r\t"Answer true if aCommandString should be evaluated as Smalltalk doIt."\r\r\t^ (CommandShell withBlanksTrimmed: aCommandString) last == $!',			#stamp : 'dtl 1/29/2013 20:29',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1243' ],		#self : OmReference [ '1244' ],		#time : DateAndTime [ '2018-02-22T14:01:12.786968-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isExecutable:',			#protocol : #'platform dependent',			#sourceCode : 'isExecutable: aPath \r\t"Answer true if aPath points to an executable file. This could be \r\tenhanced to support setting UID and GID for a CommandShell session. \r\tFor now, just take the default for the current Squeak process."\r\r\t^ aPath notNil\r\t\tand: [(Smalltalk\r\t\t\t\tat: #OSProcess\r\t\t\t\tifPresent: [:osp | osp accessor isExecutable: aPath])\r\t\t\t\tifNil: [false]]',			#stamp : 'dtl 8/7/2002 13:36',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1244' ],		#self : OmReference [ '1245' ],		#time : DateAndTime [ '2018-02-22T14:01:12.787941-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'isFlagParameter:',			#protocol : #'command string parsing',			#sourceCode : 'isFlagParameter: aString\r\t"Answer true if aString begins with $- (the convention for command flags for Unix)"\r\r\t^ (aString size > 0) and: [(aString at: 1) == $-]',			#stamp : 'dtl 1/21/2007 14:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1245' ],		#self : OmReference [ '1246' ],		#time : DateAndTime [ '2018-02-22T14:01:12.788639-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #isPharo3AndLater,			#protocol : #'platform dependent',			#sourceCode : 'isPharo3AndLater\r\t"True if this image is a pharo of major version 3 or greater"\r\r\tSmalltalk\r\t\tat: #SystemVersion\r\t\tifPresent: [:cls | ((cls canUnderstand: #type) and: [ cls canUnderstand: #major ])\r\t\t\tifTrue: [^ cls current type = \'Pharo\' and: [ cls current major >= 3 ]]].\r\t^false\r',			#stamp : 'dtl 9/4/2013 08:35',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1246' ],		#self : OmReference [ '1247' ],		#time : DateAndTime [ '2018-02-22T14:01:12.789273-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #isPharo5Update50558AndLater,			#protocol : #'platform dependent',			#sourceCode : 'isPharo5Update50558AndLater\r\t"True if this image is a pharo of major version 5 at upldate 50558 or greater"\r\t\r\t"ShellSyntax isPharo5Update50558AndLater"\r\r\tSmalltalk\r\t\tat: #SystemVersion\r\t\tifPresent: [:cls | ((cls canUnderstand: #type) and: [ cls canUnderstand: #major ])\r\t\t\tifTrue: [ ^ (cls current type = \'Pharo\' and: [ cls current major >= 5 ])\r\t\t\t\t\t\tand: [ cls current  highestUpdate >= 50558]]].\r\t^false\r',			#stamp : 'dtl 2/18/2016 21:16',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1247' ],		#self : OmReference [ '1248' ],		#time : DateAndTime [ '2018-02-22T14:01:12.789866-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'newDirPath:from:',			#protocol : #'path name expansion',			#sourceCode : 'newDirPath: aPath from: initialPath\r\t"Answer a path string for a change directory command. Change from initialPath\r\t(usually the current working directory) to the new path, where aPath may be\r\teither an absolute path name (fully specified from the root) or a relative path\r\tname (relative to initialPath)."\r\r\t"self new newDirPath: \'b?n\' from: \'/usr\'"\r\t"self new newDirPath: \'..\' from: \'/usr/bin\'"\r\t"self new newDirPath: \'.././bin\' from: \'/usr/bin\'"\r\t"self new newDirPath: \'../../../../..\' from: \'/usr/bin\'"\r\t"self new newDirPath: \'../../../../../usr\' from: \'/usr/bin\'"\r\r\t^ (self expandedPathsFrom: aPath beginningAt: initialPath)\r\t\tat: 1\r\t\tifAbsent: [nil]\r\r',			#stamp : 'dtl 4/20/2003 11:31',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1248' ],		#self : OmReference [ '1249' ],		#time : DateAndTime [ '2018-02-22T14:01:12.790484-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'newPathFor:fromDefault:',			#protocol : #'path name expansion',			#sourceCode : 'newPathFor: aPathString fromDefault: startingPathString\r\t"Answer a new path starting from startingPathString if aPathString is a,\r\trelative path, otherwise just answer aPathString unmodified."\r\r\t"ShellSyntax new newPathFor: \'hosts\' fromDefault: \'/etc\'"\r\t"ShellSyntax new newPathFor: \'three\' fromDefault: \'one/two\'"\r\t"ShellSyntax new newPathFor: \'one/two/three\' fromDefault: \'\'"\r\t"ShellSyntax new newPathFor: \'/hosts\' fromDefault: \'/etc\'"\r\t"ShellSyntax new newPathFor: \'WINDOWS\' fromDefault: \'C:\\\'"\r\t"ShellSyntax new newPathFor: \'D:\\WINDOWS\' fromDefault: \'C:\\\'"\r\t"ShellSyntax new newPathFor: \'D:WINDOWS\' fromDefault: \'C:\\\'"\r\r\t^ (self isAbsolutePath: aPathString)\r\t\tifTrue:\r\t\t\t[aPathString]\r\t\tifFalse:\r\t\t\t[self appendPath: (self splitLocationPrefixFromPath: aPathString) last\r\t\t\t\t\ttoPath: startingPathString]\r',			#stamp : 'dtl 1/2/2002 22:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1249' ],		#self : OmReference [ '1250' ],		#time : DateAndTime [ '2018-02-22T14:01:12.791101-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'nextGlobToken:lastToken:tokenStream:',			#protocol : #globbing,			#sourceCode : 'nextGlobToken: aStream lastToken: aToken tokenStream: aTokenStream\r\t"Escape character processing probably belongs elsewhere. Since it can conflict\r\twith Win32 file name conventions, I have commented it out here. The code\r\tis otherwise left alone here in case I change my mind later. -dtl"\r\r\t| c |\r\t(aToken == #escape)\r\t\tifTrue:\r\t\t\t[^ aStream next]\r\t\tifFalse:\r\t\t\t[c := aStream next.\r\t\t\t(c == $[)\r\t\t\t\tifTrue:\r\t\t\t\t\t["character range"\r\t\t\t\t\t^ self globRangeFrom: (aStream upTo: $]) tokenStream: aTokenStream]\r\t\t\t\tifFalse:\r\t\t\t\t\t[(c == $*) ifTrue: [^ #matchRun].\r\t\t\t\t\t(c == $?) ifTrue: [^ #matchAny].\r\t\t\t\t\t"(c == $\\) ifTrue: [^ #escape].\tEscape processing disabled here"\r\t\t\t\t\t^ c asString]]',			#stamp : 'dtl 12/15/2001 09:55',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1250' ],		#self : OmReference [ '1251' ],		#time : DateAndTime [ '2018-02-22T14:01:12.791666-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #noWaitToken,			#protocol : #defaults,			#sourceCode : 'noWaitToken\r\t"This character at the end of a command string means execute as detached process."\r\r\t^ \'&\'',			#stamp : 'dtl 1/20/2007 14:11',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1251' ],		#self : OmReference [ '1252' ],		#time : DateAndTime [ '2018-02-22T14:01:12.792227-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #nullDirectoryString,			#protocol : #'working directory',			#sourceCode : 'nullDirectoryString\r\t"String to display when the current directory is one level above the file system root."\r\r\t^ \'[]\'',			#stamp : 'dtl 4/20/2003 11:50',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1252' ],		#self : OmReference [ '1253' ],		#time : DateAndTime [ '2018-02-22T14:01:12.794862-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #pathAboveRoot,			#protocol : #'platform dependent',			#sourceCode : 'pathAboveRoot\r\t"Answer a path pointing to a location above the file system root. The\r\tpathStringAboveRoot string refers to this location."\r\r\t "ShellSyntax new pathAboveRoot"\r\r\t^ (self platformName = \'Win32\')\r\t\tifTrue: [\'\']\r\t\tifFalse: [CommandShell pathSeparator].\r',			#stamp : 'dtl 1/25/2013 19:13',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1253' ],		#self : OmReference [ '1254' ],		#time : DateAndTime [ '2018-02-22T14:01:12.795613-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'pathEntriesInDirectoryPath:',			#protocol : #'platform dependent',			#sourceCode : 'pathEntriesInDirectoryPath: basePath\r\t"Answer a possibly empty collection of path entries from a colon-delimited path\r\tstring provided by the operating system. Relative path names are interpreted relative\r\tto basePath"\r\r\t"ShellSyntax new pathEntriesInDirectoryPath: CommandShell defaultPathString"\r\r\t^ (Smalltalk at: #OSProcess ifPresent:\r\t\t[:osp |\r\t\t(osp thisOSProcess path findTokens: \':\')\r\t\t\tcollect:\r\t\t\t\t[:e | self newPathFor: e fromDefault: basePath]])\r\t\tifNil: [Array new].\r',			#stamp : 'dtl 1/25/2013 19:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1254' ],		#self : OmReference [ '1255' ],		#time : DateAndTime [ '2018-02-22T14:01:12.796195-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'pathRoot:',			#protocol : #'platform dependent',			#sourceCode : 'pathRoot: aPathString\r\t"For aPathString pointing to a file in a file system, answer the root of the\r\tfile system. This method works fine for Unix and Windows, but may require\r\tconditional code for other platforms."\r\r\t| prefix |\r\tprefix := (self splitLocationPrefixFromPath: aPathString) first.\r\t^ prefix, CommandShell pathSeparator\r',			#stamp : 'dtl 1/25/2013 19:13',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1255' ],		#self : OmReference [ '1256' ],		#time : DateAndTime [ '2018-02-22T14:01:12.796773-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #pathStringAboveRoot,			#protocol : #'path name expansion',			#sourceCode : 'pathStringAboveRoot\r\t"Magic string indicating location above the file system root. For Unix, this just\r\tpoints to the file system root. For Windows, it points to one level above the C: drive."\r\r\t^ \'[]\'',			#stamp : 'dtl 1/4/2002 21:19',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1256' ],		#self : OmReference [ '1257' ],		#time : DateAndTime [ '2018-02-22T14:01:12.797339-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #pipeCharToken,			#protocol : #defaults,			#sourceCode : 'pipeCharToken\r\t"The command pipeline character"\r\r\t^ \'|\'',			#stamp : 'dtl 9/8/2001 10:16',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1257' ],		#self : OmReference [ '1258' ],		#time : DateAndTime [ '2018-02-22T14:01:12.797972-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #platformName,			#protocol : #'platform dependent',			#sourceCode : 'platformName \r\t"After Squeak version 3.6, #platformName was moved to SmalltalkImage Some\r\tversions of Pharo move this to OSPlatform and issue deprecation warnings\r\tabout the other usages."\r\r\t"self new platformName"\r\r\tself isPharo3AndLater\r\t\tifTrue: [ ^ (Smalltalk perform: #os) name ].\r\t^ (((Smalltalk hasClassNamed: #OSPlatform)\r\t\t\tand: [(Smalltalk at: #OSPlatform)\r\t\t\t\t\trespondsTo: #platformName])\r\t\tifTrue: [Smalltalk at: #OSPlatform]\r\t\tifFalse: [((Smalltalk classNamed: \'SmalltalkImage\')\r\t\t\t\tifNil: [^ Smalltalk osVersion]) current]) platformName',			#stamp : 'dtl 9/4/2013 08:34',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1258' ],		#self : OmReference [ '1259' ],		#time : DateAndTime [ '2018-02-22T14:01:12.798738-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'programNameAndArgumentsFrom:inDirectoryPath:findExecutable:',			#protocol : #'path name expansion',			#sourceCode : 'programNameAndArgumentsFrom: aString inDirectoryPath: pathString findExecutable: expandExePath\r\t"Answer an array with the name of the program to run, and with the expanded\r\targuments list. If expandExePath is true, search the file system for an executable\r\tprogram to run, otherwise use the literal command name."\r\r\t"ShellSyntax new\r\t\tprogramNameAndArgumentsFrom: \'sleep 6\'\r\t\tinDirectoryPath: \'/etc\'\r\t\tfindExecutable: true"\r\t"ShellSyntax new\r\t\tprogramNameAndArgumentsFrom: \'sleep 6\'\r\t\tinDirectoryPath: \'/etc\'\r\t\tfindExecutable: false"\r\t"ShellSyntax new\r\t\tprogramNameAndArgumentsFrom: \'ls -l h?s*\'\r\t\tinDirectoryPath: \'/etc\'\r\t\tfindExecutable: true"\r\r\t| tokens tok args exe |\r\ttokens := self argsFromCommand: aString.\r\ttokens size == 0\r\t\tifTrue: [tok := \'\']\r\t\tifFalse: [tok := tokens at: 1].\r\targs := self\r\t\texpandArgumentsFrom: (tokens copyFrom: 2 to: tokens size)\r\t\tinDirectoryPath: pathString.\r\texe := expandExePath\r\t\tifTrue: [self findExecutablePathFor: tok inDirectoryPath: pathString]\r\t\tifFalse: [tok].\r\t^ exe ifNotNil: [Array with: exe with: args]\r',			#stamp : 'dtl 10/13/2008 06:26',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1259' ],		#self : OmReference [ '1260' ],		#time : DateAndTime [ '2018-02-22T14:01:12.799772-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #quoteChar,			#protocol : #defaults,			#sourceCode : 'quoteChar\r\t"In a Unix shell, this character is used to delimit chunks of text which should not\r\tbe expanded with wildcards or shell variables. In a Smalltalk compiler, this character\r\tdelimits a String. ShellSyntax interprets it as a delimiter for a  literal string which\r\tshould not be expanded or interpreted in any way."\r\r\t^ $\'',			#stamp : 'dtl 4/27/2002 18:57',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1260' ],		#self : OmReference [ '1261' ],		#time : DateAndTime [ '2018-02-22T14:01:12.800851-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'redirectIOFor:inDirectoryPath:',			#protocol : #'command string parsing',			#sourceCode : 'redirectIOFor: commandString inDirectoryPath: dirPathString\r\t"Handle IO redirection. Answer a four element array with the command string\r\t(with IO tokens removed); and stdin, stdout and stderr if specified for\r\tredirection."\r\r\t"ShellSyntax new\r\t\tredirectIOFor: \'ls /tmp /NOSUCHFILE > /tmp/sqTempOut.tmp 2> /tmp/sqTempErr.tmp\'\r\t\tinDirectoryPath: nil"\r\t"ShellSyntax new\r\t\tredirectIOFor: \'cat < /etc/hosts > /tmp/sqHosts.tmp\'\r\t\tinDirectoryPath: nil"\r\r\t| cmd tokenStream tok target input output error |\r\tcmd := nil.\r\tinput := output := error := nil.\r\t"Default to nil unless overridden by commandString."\r\ttokenStream := ReadStream on: (self tokenizeForRedirect: commandString).\r\t[tokenStream atEnd]\r\t\twhileFalse:\r\t\t\t[tok := tokenStream next.\r\t\t\ttok == #inputRedirect\r\t\t\t\tifTrue: ["Do input redirection"\r\t\t\t\t\ttarget := self firstExpandedArgument: tokenStream next\r\t\t\t\t\t\t\t\tinDirectoryPath: dirPathString.\r\t\t\t\t\t"Use StandardFileStream to prevent multi-byte interpretation."\r\t\t\t\t\tinput := StandardFileStream readOnlyFileNamed: target.\r\t\t\t\t\tinput\r\t\t\t\t\t\tifNil: [self inform: \'Cannot open \' , target , \', using default stdin\']]\r\t\t\t\tifFalse: [tok == #outputRedirect\r\t\t\t\t\t\tifTrue: ["Do output redirection"\r\t\t\t\t\t\t\ttarget := self firstExpandedArgument: tokenStream next\r\t\t\t\t\t\t\t\t\t\tinDirectoryPath: dirPathString.\r\t\t\t\t\t\t\toutput := self truncatedOutputFile: target.\r\t\t\t\t\t\t\toutput ifNil:\r\t\t\t\t\t\t\t\t\t[self inform: \'Cannot open \' , target , \', using default stdout\']]\r\t\t\t\t\t\tifFalse: [tok == #outputAppendRedirect\r\t\t\t\t\t\t\t\tifTrue: ["Do output redirection, appended to existing output file if any."\r\t\t\t\t\t\t\t\t\ttarget := self firstExpandedArgument: tokenStream next\r\t\t\t\t\t\t\t\t\t\t\t\tinDirectoryPath: dirPathString.\r\t\t\t\t\t\t\t\t\toutput := FileStream fileNamed: target.\r\t\t\t\t\t\t\t\t\toutput isNil\r\t\t\t\t\t\t\t\t\t\tifTrue: [self inform: \'Cannot open \' , target , \', using default stdout\']\r\t\t\t\t\t\t\t\t\t\tifFalse: [output setToEnd]]\r\t\t\t\t\t\t\t\tifFalse: [tok == #errorRedirect\r\t\t\t\t\t\t\t\t\t\tifTrue: ["Do error redirection"\r\t\t\t\t\t\t\t\t\t\t\ttarget := self firstExpandedArgument: tokenStream next\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tinDirectoryPath: dirPathString.\r\t\t\t\t\t\t\t\t\t\t\terror := self truncatedOutputFile: target.\r\t\t\t\t\t\t\t\t\t\t\terror ifNil:\r\t\t\t\t\t\t\t\t\t\t\t\t\t[self inform: \'Cannot open \' , target , \', using default stdout\']]\r\t\t\t\t\t\t\t\t\t\tifFalse: [tok == #errorAppendRedirect\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: ["Do error redirection, appended to existing error file if any. "\r\t\t\t\t\t\t\t\t\t\t\t\t\ttarget := self firstExpandedArgument: tokenStream next\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinDirectoryPath: dirPathString.\r\t\t\t\t\t\t\t\t\t\t\t\t\terror := FileStream fileNamed: target.\r\t\t\t\t\t\t\t\t\t\t\t\t\terror isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [self inform: \'Cannot open \' , target , \', using default stdout\']\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [error setToEnd]]\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [cmd isNil\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [cmd := tok]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [self inform: \'Ack! Pfft! IO redirection parsing error.\']]]]]]].\r\t^ Array\r\t\twith: cmd\r\t\twith: input\r\t\twith: output\r\t\twith: error',			#stamp : 'dtl 12/22/2007 10:17',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1261' ],		#self : OmReference [ '1262' ],		#time : DateAndTime [ '2018-02-22T14:01:12.803127-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'setCwdIndexFrom:',			#protocol : #'working directory',			#sourceCode : 'setCwdIndexFrom: aPathString\r\t"Set the current working directory index to a string (Win32 device name) or to #default."\r\r\t| prefix |\r\tprefix := (self splitLocationPrefixFromPath: aPathString) first.\r\tprefix isEmpty\r\t\tifTrue: [self cwdIndex: #default]\r\t\tifFalse: [self cwdIndex: prefix]\r',			#stamp : 'dtl 12/16/2001 21:26',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1262' ],		#self : OmReference [ '1263' ],		#time : DateAndTime [ '2018-02-22T14:01:12.803776-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'splitLocationPrefixFromPath:',			#protocol : #'platform dependent',			#sourceCode : 'splitLocationPrefixFromPath: aPathString\r\t"Split any leading prefix from a path string, such as the C: device name\r\tfor Win32. Answer an Array with prefix and path."\r\r\t "ShellSyntax new splitLocationPrefixFromPath: \'C:\\u\'"\r\t "ShellSyntax new splitLocationPrefixFromPath: \'C:\\\'"\r\t "ShellSyntax new splitLocationPrefixFromPath: \'C:\'"\r\t "ShellSyntax new splitLocationPrefixFromPath: \'C:u\'"\r\t "ShellSyntax new splitLocationPrefixFromPath: \'c:u\'"\r\t "ShellSyntax new splitLocationPrefixFromPath: \'\\u\'"\r\r\t| prefix path |\r\t(self platformName = \'Win32\')\r\t\tifTrue:\r\t\t\t[((aPathString at: 2 ifAbsent: []) == $:)\r\t\t\t\tifTrue:\r\t\t\t\t\t[prefix := (String new: 2).\r\t\t\t\t\tprefix at: 1 put: (aPathString at: 1) asUppercase.\r\t\t\t\t\tprefix at: 2 put: $:.\r\t\t\t\t\tpath := aPathString copyAfter: $:]\r\t\t\t\tifFalse:\r\t\t\t\t\t[prefix := \'\'.\r\t\t\t\t\tpath := aPathString]]\r\t\tifFalse:\r\t\t\t[prefix := \'\'.\r\t\t\tpath := aPathString].\r\t^ Array with: prefix with: path\r',			#stamp : 'dtl 10/30/2007 18:59',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1263' ],		#self : OmReference [ '1264' ],		#time : DateAndTime [ '2018-02-22T14:01:12.804362-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'splitPipelineCommands:',			#protocol : #'command string parsing',			#sourceCode : 'splitPipelineCommands: aCommand\r\t"Answer a list of the individual commands in a command pipeline string,\r\tdelimited by the pipe character."\r\r\t^ (aCommand findTokens: self pipeCharToken) collect: [:e | CommandShell withBlanksTrimmed: e]\r',			#stamp : 'dtl 1/29/2013 20:27',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1264' ],		#self : OmReference [ '1265' ],		#time : DateAndTime [ '2018-02-22T14:01:12.805071-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'stringTokensFrom:',			#protocol : #'command string parsing',			#sourceCode : 'stringTokensFrom: aString\r\t"Answer a two element array with a collection of strings from a whitespace\r\tdelimited string, and with an optional error message. Single quote characters\r\tprotect substrings from expansion to tokens. Single quote characters may be\r\tescaped by the backslash character to prevent this interpretation."\r\r\t| result r w errorMessage quoteEnabled t |\r\tresult := OrderedCollection new.\r\tr := ReadStream on: aString.\r\tw := WriteStream on: String new.\r\terrorMessage := nil.\r\t(quoteEnabled := r peek == self quoteChar) ifTrue: [r next].\r\t[r atEnd] whileFalse:\r\t\t[t := r next.\r\t\t(t == self quoteChar)\r\t\t\tifTrue:\r\t\t\t\t[quoteEnabled := quoteEnabled not]\r\t\t\tifFalse:\r\t\t\t\t[quoteEnabled\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t[w nextPut: t]\r\t\t\t\t\tifFalse:\r\t\t\t\t\t\t[(t == self escapeChar)\r\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t["An escaped character is treated as a literal character."\r\t\t\t\t\t\t\t\tt := r next.\r\t\t\t\t\t\t\t\tt isNil\r\t\t\t\t\t\t\t\t\tifTrue: ["FIXME: This would indicate an escaped end of line"]\r\t\t\t\t\t\t\t\t\tifFalse: [w nextPut: t]]\r\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t[t isSeparator\r\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t["Whitespace delimits tokens."\r\t\t\t\t\t\t\t\t\t\t(w isEmpty) ifFalse: [result add: w contents].\r\t\t\t\t\t\t\t\t\t\tw := WriteStream on: String new.\r\t\t\t\t\t\t\t\t\t\t[r peek notNil and: [r peek isSeparator]] whileTrue: [r next].]\r\t\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t\t[w nextPut: t]]]]].\r\tquoteEnabled ifTrue: [errorMessage := \'unbalanced quotes\'].\r\t(w isEmpty) ifFalse: [result add: w contents].\r\t^ Array with: result with: errorMessage\r',			#stamp : 'dtl 1/21/2007 15:11',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1265' ],		#self : OmReference [ '1266' ],		#time : DateAndTime [ '2018-02-22T14:01:12.805738-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'tokenStream:matches:',			#protocol : #globbing,			#sourceCode : 'tokenStream: aTokenStream matches: aCharacterStream \r\t"Iterate over both streams. If each character in aCharacterStream \r\tmatches its corresponding token in tokenStream, answer true."\r\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'a?c\')) matches: (ReadStream on: \'abc\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'ab*cde\')) matches: (ReadStream on: \'abcde\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'ab*cde\')) matches: (ReadStream on: \'abXXXcde\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'ab*cdX\')) matches: (ReadStream on: \'abXXXcde\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'abc*\')) matches: (ReadStream on: \'abcde\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'abc*\')) matches: (ReadStream on: \'abc\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'a?cde*jkl\')) matches: (ReadStream on: \'abcdefghijkl\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'abc[A-C]xyz\')) matches: (ReadStream on: \'abcBxyz\')"\r\t"ShellSyntax new tokenStream: (ReadStream on: (ShellSyntax new globTokensFrom: \'abc[!A-C]xyz\')) matches: (ReadStream on: \'abcZxyz\')"\r\r\t| c tok |\r\t[aCharacterStream atEnd]\r\t\twhileFalse: [aTokenStream atEnd\r\t\t\t\tifTrue: [^ false].\r\t\t\tc := aCharacterStream peek.\r\t\t\ttok := aTokenStream next.\r\t\t\ttok == #not\r\t\t\t\tifTrue: ["A negated character range follows"\r\t\t\t\t\ttok := aTokenStream next.\r\t\t\t\t\t(self character: c matches: tok)\r\t\t\t\t\t\tifTrue: [^ false].\r\t\t\t\t\taCharacterStream next]\r\t\t\t\tifFalse: ["The normal case"\r\t\t\t\t\ttok == #matchRun\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t["Skip characters until we resync the streams, or answer false"\r\t\t\t\t\t\t\t[self tokenStream: aTokenStream copy matches: aCharacterStream copy]\r\t\t\t\t\t\t\t\twhileFalse:\r\t\t\t\t\t\t\t\t\t[aCharacterStream atEnd ifTrue: [^ false].\r\t\t\t\t\t\t\t\t\taCharacterStream next]]\r\t\t\t\t\t\tifFalse: [(self character: c matches: tok)\r\t\t\t\t\t\t\t\tifFalse: [^ false].\r\t\t\t\t\t\t\taCharacterStream next]]].\r\t^ aTokenStream atEnd\r\t\tor: [aTokenStream next == #matchRun\r\t\t\t\tand: [aTokenStream atEnd]]\r',			#stamp : 'dtl 1/5/2002 09:52',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1266' ],		#self : OmReference [ '1267' ],		#time : DateAndTime [ '2018-02-22T14:01:12.806358-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'tokenizeForRedirect:',			#protocol : #'command string parsing',			#sourceCode : 'tokenizeForRedirect: aString\r\t"Answer a collection of tokens for IO redirection. Answers a collection of\r\ttokens, where each token is either a String, or a Symbol in:\r\t#(#inputRedirect #outputRedirect #outputAppendRedirect #errorRedirect #errorAppendRedirect)"\r\r\t"ShellSyntax new tokenizeForRedirect: \'one > two < three 2> four five six 2>> seven eight > nine ten >> eleven twelve 2 > thirteen\'"\r\r\t| oc rs ws c redirectToken tok |\r\toc := OrderedCollection new.\r\trs := ReadStream on: aString.\r\tws := WriteStream on: String new.\r\t[rs atEnd]\r\t\twhileFalse:\r\t\t\t[c := rs next.\r\t\t\t((c == $2) and: [rs peek == $>])\r\t\t\t\tifTrue:\r\t\t\t\t\t[rs next.\r\t\t\t\t\t(rs peek == $>)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[rs next.\r\t\t\t\t\t\t\tredirectToken := #errorAppendRedirect]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[redirectToken := #errorRedirect].\r\t\t\t\t\tc := ws contents.\r\t\t\t\t\t(c size > 0)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[oc add: c.\r\t\t\t\t\t\t\tws resetContents].\r\t\t\t\t\toc add: redirectToken]\r\t\t\t\tifFalse:\r\t\t\t\t\t[(c == $>)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[(rs peek == $>)\r\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t[rs next.\r\t\t\t\t\t\t\t\t\tredirectToken := #outputAppendRedirect]\r\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t[redirectToken := #outputRedirect].\r\t\t\t\t\t\t\tc := ws contents.\r\t\t\t\t\t\t\t(c size > 0)\r\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t[oc add: c.\r\t\t\t\t\t\t\t\t\tws resetContents].\r\t\t\t\t\t\t\toc add: redirectToken]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[(c == $<)\r\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t[c := ws contents.\r\t\t\t\t\t\t\t\t\t(c size > 0)\r\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t[oc add: c.\r\t\t\t\t\t\t\t\t\t\t\tws resetContents].\r\t\t\t\t\t\t\t\t\toc add: #inputRedirect]\r\t\t\t\t\t\t\t\tifFalse: [ws nextPut: c]]]].\r\ttok := ws contents.\r\t(tok size > 0) ifTrue: [oc add: tok].\r\t^ oc\r',			#stamp : 'dtl 2/24/2013 10:25',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1267' ],		#self : OmReference [ '1268' ],		#time : DateAndTime [ '2018-02-22T14:01:12.806943-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'truncatedOutputFile:',			#protocol : #'command string parsing',			#sourceCode : 'truncatedOutputFile: fileName\r\t"Attempt to do reasonable things to open a file of size zero. Better would be\r\tto implement a file truncation primitive."\r\r\t"ShellSyntax new truncatedOutputFile: \'/tmp/delete.me\'"\r\t"ShellSyntax new truncatedOutputFile: \'/dev/null\'"\r\r\t| strm |\r\t[strm := FileStream concreteStream forceNewFileNamed: fileName]\r\t\ton: Error\r\t\tdo: [:ex | ^ FileStream fileNamed: fileName].\r\t^ strm\r',			#stamp : 'dtl 12/17/2001 11:39',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1268' ],		#self : OmReference [ '1269' ],		#time : DateAndTime [ '2018-02-22T14:01:12.807593-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'upOneDirectoryLevel:',			#protocol : #'platform dependent',			#sourceCode : 'upOneDirectoryLevel: aPathName\r\t"Answer a path name for a directory one level up the directory tree"\r\r\t "ShellSyntax new upOneDirectoryLevel: \'C:\\Windows\\temp\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'C:\\Windows\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'C:\\\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'/usr/bin\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'/usr\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'/\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'usr\'"\r\t "ShellSyntax new upOneDirectoryLevel: \'\'"\r\r\t| prefixAndPath prefix path newPath |\r\tprefixAndPath := self splitLocationPrefixFromPath: aPathName.\r\tprefix := prefixAndPath at: 1.\r\tpath := prefixAndPath at: 2.\r\t(self isAtFileSystemRoot: aPathName)\r\t\tifTrue:\r\t\t\t[(self isAbsolutePath: aPathName)\r\t\t\t\tifTrue:\r\t\t\t\t\t[prefix isEmpty\r\t\t\t\t\t\tifTrue: "Normal case, unix. Do not go up a level."\r\t\t\t\t\t\t\t[^ aPathName]\r\t\t\t\t\t\tifFalse: "A Win32 device name, go up a level above the file systems"\r\t\t\t\t\t\t\t[^ \'\']]\r\t\t\t\tifFalse:\r\t\t\t\t\t["One level above whererever we are. Unfortunately we have\r\t\t\t\t\tno way to know where we are, so this probably should be treated\r\t\t\t\t\tas a sytax error."\r\t\t\t\t\t^ \'..\']]\r\t\tifFalse:\r\t\t\t[newPath := (path includes: CommandShell pathNameDelimiter)\r\t\t\t\tifTrue: [path copyUpToLast: CommandShell pathNameDelimiter]\r\t\t\t\tifFalse: [\'\'].\r\t\t\t^ newPath isEmpty\r\t\t\t\tifTrue:\r\t\t\t\t\t[(self isAbsolutePath: aPathName)\r\t\t\t\t\t\tifTrue: [prefix, CommandShell pathSeparator]\r\t\t\t\t\t\tifFalse: [prefix]]\r\t\t\t\tifFalse:\r\t\t\t\t\t[prefix, newPath]]\r',			#stamp : 'dtl 1/25/2013 19:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1269' ],		#self : OmReference [ '1270' ],		#time : DateAndTime [ '2018-02-22T14:01:12.809668-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #workingDirectory,			#protocol : #'working directory',			#sourceCode : 'workingDirectory\r\r\t^ self cwdDictionary at: self cwdIndex ifAbsentPut:\r\t\t[Smalltalk at: #OSProcess ifPresent: [:osp | osp thisOSProcess getCwd]]\r',			#stamp : 'dtl 8/7/2002 13:32',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1270' ],		#self : OmReference [ '1271' ],		#time : DateAndTime [ '2018-02-22T14:01:12.81035-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellSyntax,				#isMetaSide : false			},			#name : #'workingDirectory:',			#protocol : #'working directory',			#sourceCode : 'workingDirectory: aPathString\r\r\tself setCwdIndexFrom: aPathString.\r\tself cwdDictionary at: self cwdIndex put: aPathString',			#stamp : 'dtl 12/16/2001 21:32',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1271' ],		#self : OmReference [ '1272' ],		#time : DateAndTime [ '2018-02-22T14:01:12.811091-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'instance creation',			#sourceCode : 'command: aCommandString\r\t"Evaluate aCommandString in the context of a CommandShell, using a\r\tCommandShellTranscript to display the results."\r\r\t"CommandShell command: \'help\'"\r\t"CommandShell command: \'ls\'"\r\r\t| cs w |\r\tcs := self new.\r\tw := cs openLabel: self defaultWindowName.\r\tw scheduleToEvaluate: [w nextPutAll: aCommandString; cr].\r\tw processCommand: aCommandString.\r\t^ w\r',			#stamp : 'dtl 12/11/2007 21:22',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1272' ],		#self : OmReference [ '1273' ],		#time : DateAndTime [ '2018-02-22T14:01:12.811796-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #commandProcessing,			#protocol : #documentation,			#sourceCode : 'commandProcessing\r\t"Explanation of the command parsing and evaluation."\r\r\t"CommandShell new pipeline: \'CommandShell commandProcessing! | edit\'"\r\r\t^\r\'CommandShell behaves similarly to a Unix command shell. One or more Morphic or MVC views can be opened on an instance of CommandShell. Command lines are accepted in the view, passed to the CommandShell instance (the model), and the results are displayed in the view(s). The overall behavior can be thought of as a Transcript acting like an xterm window, and the CommandShell acting like a /bin/sh shell.\r\rA command line is first evaluated as a Smalltalk expression if possible. If this evaluation fails, either as a result of a sytax error or a runtime error, it is assumed to be a command string with syntax similar to that of a Unix command shell.\r\rThe command line is parsed by CommandShell to break command lines into elements of a command pipeline. All further parsing, such as file name expansion, is performed by an instance of ShellSyntax.\r\rThree types of commands may be executed from a CommandShell:\r1) Internal "builtin" commands are implemented in Smalltalk, and behave similarly to the shell builtin commands of a typical Unix command shell. See protocol category "shell builtins" for the implementation of these builtin shell commands.\r2) Internal "doIt" commands are simple Smalltalk expression strings, terminated by a $! character, which are evaluated as Smalltalk expressions, and which recognize the tokens "stdin", "stdout", and "stderr" as temporary variables in the doIt expression. An internal doIt command is evaluated such that it may be incorporated into a command pipeline with access to the stdin/stdout/stderr streams used in the command pipeline. In the current implementation, a doIt command may not include a $| character, which has meaning both for Smalltalk syntax and for Unix command line processor syntax.\r3) External commands. Any command expression not recognized as a shell builtin or as a doIt expression is passed to an external process proxy for execution by the external operating system, with stdin/stdout/stderr incorporated into the command pipeline.\r\rInternal and external commands can be freely mixed in a command pipeline, with results which should be familiar to users of Unix command shells. Pipes are implemented as instances of OSPipe or InternalPipe, and are capable of passing streams of characters from one process proxy to the next. All commands (internal or external) evaluate to strings, such that their results can either be passed through a pipe to the next command proxy in a pipeline, or displayed in the terminal window view if the proxy represents the last command in a command pipeline. Error messages (also strings) are written to an errorPipelineStream which is shared by all proxies in a command pipeline, such that any error messages are accumulated for the entire command pipeline.\'',			#stamp : 'dtl 12/29/2001 14:18',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1273' ],		#self : OmReference [ '1274' ],		#time : DateAndTime [ '2018-02-22T14:01:12.81239-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #defaultPathString,			#protocol : #'version dependent',			#sourceCode : 'defaultPathString\r\r\t^ self useFileSystem\r\t\tifTrue: [(((Smalltalk at: #Path) perform: #workingDirectory) perform: #asFileReference) pathString]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) default pathName]\r',			#stamp : 'dtl 1/26/2013 15:37',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1274' ],		#self : OmReference [ '1275' ],		#time : DateAndTime [ '2018-02-22T14:01:12.812942-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #defaultWindowName,			#protocol : #defaults,			#sourceCode : 'defaultWindowName\r\r\t^ \'Squeak Shell\'',			#stamp : 'dtl 4/2/2001 20:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1275' ],		#self : OmReference [ '1276' ],		#time : DateAndTime [ '2018-02-22T14:01:12.813513-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'deleteFileNamed:',			#protocol : #'version dependent',			#sourceCode : 'deleteFileNamed: fileName\r\t"Delete the file with the given name."\r\r\tself useFileSystem\r\t\tifTrue: [ | file |\r\t\t\tfile := fileName perform: #asFileReference.\r\t\t\t(file respondsTo: #ensureDeleted)\r\t\t\t\tifTrue: [ file perform: #ensureDeleted ]\r\t\t\t\tifFalse: [ file perform: #delete ] ]\r\t\tifFalse: [ (Smalltalk at: #FileDirectory) default\r\t\t\t\tdeleteFileNamed: fileName ]\r',			#stamp : 'SeanDeNigris 2/13/2013 09:51',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1276' ],		#self : OmReference [ '1277' ],		#time : DateAndTime [ '2018-02-22T14:01:12.814079-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'deleteFileNamed:inDirectory:',			#protocol : #'version dependent',			#sourceCode : 'deleteFileNamed: fileName inDirectory: directoryOrFileReference\r\t"Delete the file with the given name in the given directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [ | f |\r\t\t\t(f := directoryOrFileReference files\r\t\t\t\tdetect: [ :e | e basename = fileName ]\r\t\t\t\tifNone: [  ]) notNil\r\t\t\t\tifTrue: [ f delete ] ]\r\t\tifFalse: [ directoryOrFileReference deleteFileNamed: fileName ]',			#stamp : 'ThierryGoubier 7/27/2017 22:44',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1277' ],		#self : OmReference [ '1278' ],		#time : DateAndTime [ '2018-02-22T14:01:12.814671-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'dirPathFor:',			#protocol : #'version dependent',			#sourceCode : 'dirPathFor: path\r\t"Return the directory part the given name."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) parent fullName ]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) perform: #dirPathFor: with: path]\r',			#stamp : 'dtl 1/27/2013 17:59',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1278' ],		#self : OmReference [ '1279' ],		#time : DateAndTime [ '2018-02-22T14:01:12.816777-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'directoryEntryNames:',			#protocol : #'version dependent',			#sourceCode : 'directoryEntryNames: path\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) children collect: [:e | e perform: #basename] ]\r\t\tifFalse: [ ((Smalltalk at: #FileDirectory) on: path) entries collect: [:e | e name] ]\r',			#stamp : 'dtl 1/26/2013 15:38',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1279' ],		#self : OmReference [ '1280' ],		#time : DateAndTime [ '2018-02-22T14:01:12.817459-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'directoryExists:',			#protocol : #'version dependent',			#sourceCode : 'directoryExists: path\r\t"Answer true if a directory of the given name exists. The given name may\r\tbe either a full path name or a local directory within this directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) exists ]\r\t\tifFalse: [ (Smalltalk at: #FileDirectory) default directoryExists: path ]\r',			#stamp : 'dtl 1/27/2013 17:59',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1280' ],		#self : OmReference [ '1281' ],		#time : DateAndTime [ '2018-02-22T14:01:12.81806-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'directoryForPath:',			#protocol : #'version dependent',			#sourceCode : 'directoryForPath: path\r\r\t^ self useFileSystem\r\t\tifTrue: [path perform: #asFileReference]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) on: path]\r',			#stamp : 'dtl 1/27/2013 22:31',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1281' ],		#self : OmReference [ '1282' ],		#time : DateAndTime [ '2018-02-22T14:01:12.818675-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'directoryNamesInPath:',			#protocol : #'version dependent',			#sourceCode : 'directoryNamesInPath: path\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) children\t\r\t\t\t\t\tselect: [:e | e isDirectory ]\r\t\t\t\t\tthenCollect: [:e | e perform: #basename] ]\r\t\tifFalse: [ ((Smalltalk at: #FileDirectory) on: path) entries\r\t\t\t\t\tselect: [:e | e isDirectory ]\r\t\t\t\t\tthenCollect: [:e | e name] ]\r',			#stamp : 'dtl 1/26/2013 15:38',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1282' ],		#self : OmReference [ '1283' ],		#time : DateAndTime [ '2018-02-22T14:01:12.819228-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'entryName:',			#protocol : #'version dependent',			#sourceCode : 'entryName: directoryEntry\r\t"Answer the name of a directory entry."\r\r\t^ self useFileSystem\r\t\tifTrue: [ directoryEntry basename ]\r\t\tifFalse: [ directoryEntry name ]\r',			#stamp : 'dtl 1/28/2013 20:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1283' ],		#self : OmReference [ '1284' ],		#time : DateAndTime [ '2018-02-22T14:01:12.819802-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'fileExists:',			#protocol : #'version dependent',			#sourceCode : 'fileExists: path\r\t"Answer true if a file of the given name exists. The given name may be\r\teither a full path name or a local file within this directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) exists ]\r\t\tifFalse: [ (Smalltalk at: #FileDirectory) default fileExists: path ]\r',			#stamp : 'dtl 1/27/2013 17:57',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1284' ],		#self : OmReference [ '1285' ],		#time : DateAndTime [ '2018-02-22T14:01:12.820359-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'fileExists:inDirectory:',			#protocol : #'version dependent',			#sourceCode : 'fileExists: fileName inDirectory: directoryOrFileReference\r\t"Answer true if a file of the given name exists in this directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (directoryOrFileReference entries\r\t\t\t\t\tdetect: [:e | e basename = fileName] ifNone: []) notNil ]\r\t\tifFalse: [ directoryOrFileReference fileExists: fileName ]\r',			#stamp : 'dtl 1/27/2013 17:57',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1285' ],		#self : OmReference [ '1286' ],		#time : DateAndTime [ '2018-02-22T14:01:12.820951-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'fileExists:inPath:',			#protocol : #'version dependent',			#sourceCode : 'fileExists: fileName inPath: path\r\t"Answer true if a file of the given name exists in the directory named by path."\r\r\t^ self useFileSystem\r\t\tifTrue: [ self fileExists: fileName inDirectory: (path perform: #asFileReference) ]\r\t\tifFalse: [ self fileExists: fileName inDirectory: ((Smalltalk at: #FileDirectory) on: path) ]\r',			#stamp : 'dtl 1/27/2013 17:58',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1286' ],		#self : OmReference [ '1287' ],		#time : DateAndTime [ '2018-02-22T14:01:12.821521-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'fileNamed:inDirectory:',			#protocol : #'version dependent',			#sourceCode : 'fileNamed: fileName inDirectory: directoryOrFileReference\r\t"Open the file with the given name in this directory for writing."\r\r\t^ self useFileSystem\r\t\tifTrue: [ | f |\r\t\t\t(f := directoryOrFileReference files\r\t\t\t\tdetect: [ :e | e basename = fileName ]\r\t\t\t\tifNone: [  ]) notNil\r\t\t\t\tifTrue: [ f writeStream ] ]\r\t\tifFalse: [ directoryOrFileReference fileNamed: fileName ]',			#stamp : 'ThierryGoubier 7/27/2017 22:45',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1287' ],		#self : OmReference [ '1288' ],		#time : DateAndTime [ '2018-02-22T14:01:12.823796-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'fullNameFor:',			#protocol : #'version dependent',			#sourceCode : 'fullNameFor: fileName\r\t"Return a corrected, fully-qualified name for the given file name."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (fileName perform: #asFileReference) perform: #fullName ]\r\t\tifFalse: [ (Smalltalk at: #FileDirectory) default fullNameFor: fileName ]\r',			#stamp : 'dtl 1/27/2013 17:56',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1288' ],		#self : OmReference [ '1289' ],		#time : DateAndTime [ '2018-02-22T14:01:12.825018-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #htmlOverview,			#protocol : #documentation,			#sourceCode : 'htmlOverview\r\t"A general overview"\r\r\t^\r\'<html><head><title>Introduction to CommandShell</title></head>\r<body>\r<h3>CommandShell</h3>\r CommandShell is a Smalltalk implementation of a command processor shell and terminal\r window. It is intended to behave like to a simple terminal window (like xterm) running\r a Unix command shell (like /bin/sh). It lacks some elements of Unix shell syntax, and\r does not provide terminal emulation, but it adds some nice Smalltalk enhancements such\r as a text editor which works in a command pipeline, and the ability to evalute Smalltalk\r expressions in a command pipeline with Unix commands.\r\r<h3>How to use CommandShell</h3>\r  Evaluate "CommandShell open" or, if you have loaded the change set to put CommandShell\r  in your world menu, just select "Squeak Shell" from the "open..." menu entry.\r  To use the command shell window, enter commands on the command line (after\r  the "$ " command prompt, followed by cr to accept the command. The "help" command\r  gives some clues as to what can be done. In general, just try any command which\r  you might otherwise enter into a Unix shell or xterm window. Then try some of\r  the Smalltalk features such as mixing Smalltalk expressions with Unix commands, and\r  piping commands into Smalltalk editors.\r\r<h3>Basic Concepts</h3>\r<ul><li><h4>  Commands</h4>\r    Smalltalk uses objects and messages, with expressions arranged in a natural\r    Noun-Verb-Predicate sentence structure, similar to that of some spoken languages.\r    In contrast, many other computer systems use a style in which users issue\r    a command to the system, in which the "command" (a verb) is followed by various\r    (predicate) modifiers. In the case of a traditional command-line interface, such\r    as a Unix shell, the command is usualy the name of a program, and the modifiers\r    are parameters passed to the program to influence its behavior. CommandShell attempts\r    to provide a command line interface for executing commands within Squeak, in\r    a style and environment which is comforable for someone accustomed to the\r    Smalltalk style of expression.\r<p>\r<li><h4>  Process Proxies</h4>\r    A command line user interface, such as a Unix shell or a "DOS window" in\r    Windows, revolves around the notion of executing programs from user commands.\r    When Squeak is hosted in another operating system, it is useful to be able to\r    execute an external program from a command line expression. A process proxy\r    is an object which represents the evaluation of such an external command\r    in a command line environment.\r<p>\r    From the point of view of Squeak, a process proxy might just as well represent\r    the evaluation of a Smalltalk expression in the context of a command line\r    environment. Thus a process proxy can be an object which represents the execution\r    of an external program or an internal Smalltalk expression. It is created from a\r    command line expression, and provides a representation of certain aspects of the\r    external (or internal) process execution, such as process run state, exit status, and\r    the input, output and error streams for the process.\r<p>\r    External process proxies are used to evaluate programs in the external operating\r    system (this requires the OSProcess change set in addition to CommandShell). Internal\r    process proxies are used to evaluate "built in" commands for a command shell,\r    such as the "cd" command to change the working directory for the command shell.\r    Internal proxies are also used for evaluating "doIt" expressions within a command\r    pipeline. In this case, the variables "stdin", "stdout", and "stderr" are pre-defined\r    such that the doIt expression can directly access the input, output and error\r    pipes for the internal process proxy (in other words, the doIt expression\r    "stdout nextPutAll: \'\'Hello world\'\' !" will write \'\'Hello world\'\' on the output pipe\r    of the proxy).\r<p>\r<li><h4> Pipelines</h4>\r    Powerful computing systems may be built upon simple design metaphors. In\r    Smalltalk, the concept of objects communicating through messages is generalized\r    and extended to produce the Squeak system. In Unix systems, the metaphor of a\r    pipe with data flowing between two programs is generalized to produce a mechanism\r    for connecting small programs to produce complex systems. The command line shells\r    for Unix support this metaphor by providing syntax for connecting two or more\r    commands together into more complex command pipelines.\r<p>\r    CommandShell provides a framework for connecting several process proxies into a\r    command pipeline, using command syntax similar to that of a Unix shell. Since the\r    process proxies are implemented in Smalltalk, the "programs" in a command pipeline\r    may consist of process proxies representing external programs, or of proxies representing\r    the evaluation of internal Smalltalk expressions. The objects which flow through\r    the pipes in a command pipeline are assumed to be characters, such that the external\r    commands can operate on the streams of characters in the usual way, and the internal\r    Smalltalk commands read and write streams of characters.\r<p>\r    Just as programs (or internal expressions) are represented by process proxies, the\r    pipes which interconnect two process proxies are represented by pipe objects. The\r    pipe may be either an OSPipe (a proxy representing a Unix system FIFO pipe) or an\r    InternalPipe (a Smalltalk object which behaves similarly to an OSPipe). The combination\r    of process proxies and pipes is a command pipeline, which may be created and\r    evaluated from a command line expression using conventional Unix shell syntax.\r</ul>\r<h3>Command Line Syntax</h4>\r    A command or command pipeline may be created from a string expression, and\r    evaluated using Unix shell syntax. CommandShell accepts command line strings and\r    does some high level processing to set up process proxy execution. For most of the\r    command parsing, it relies on a ShellSyntax object to do the syntax evaluation.\r    In particular, a real Unix shell interprets command line parameters in the context of the\r    Unix file system, expanding "wildcard" characters and searching for files in the context\r    of a "current working directory" location in the file system tree. A CommandShell,\r    collaborating with an instance of ShellSyntax, implements this syntax parsing\r    and evaluation in Smalltalk.\r\r<h3>Command Execution</h4>\r    Beginning with a command line (which may represent a pipeline of several\r    commands), a CommandShell first attempts to treat the entire command line as\r    a Smalltalk expression. The command line string is used to create an instance of\r    PipeableEvaluator (a kind of process process). If the expression is successfully\r    compiled and evaluated in the PipeableEvaluator, the command line is executed\r    just as if it were an external Unix command, with the result of the evaluation\r    written as a string to the output stream of the process proxy.\r<p>\r    If the complete command line cannot be treated as a Smalltalk expression,\r    CommandShell assumes that it must be a Unix style command pipeline. If the\r    command line is a comment (starting with \'\'#\'\') it is discarded; otherwise it\r    is broken down into a series of process proxies connected by pipes, with\r    command line parameters and other aspects of the command line parsing handled\r    by a ShellSyntax object.\r<p>\r    The process proxies in the command pipeline may represent internal or external\r    commands. CommandShell parses the command line to create the proxies by breaking\r    the command pipeline into segments (separated by the "|" pipe character), with\r    different kinds of process proxy created according to the following priorities:\r<ul><li>\r      If the command segment is a simple Smalltalk expression terminated by "!", it\r      is treated as a "doIt" expression, evaluated in a PipeableEvaluator proxy. This\r      kind of simple doIt expression is limited to commands with characters which\r      are unambiguous in a shell command. For example, "|" has special meaning in\r      a command line, and cannot be used in a doIt expression (command line quoting\r      and escape characters have not yet been implemented in the CommandShell syntax).\r<li>\r      If the command segment is not a doIt expression, CommandShell checks to see\r      if it matches one of several "shell builtin" commands. These are special commands\r      implemented in class ShellBuiltin and evaluated in a PipeableEvaluator proxy.\r      They behave analogously to shell builtin commands in a conventional Unix shell.\r      A number of commands such as "cd" and "pwd" are implemented as internal builtin\r      commands, rather than relying on Unix external equivalents. In addition, other\r      builtin commands such as "edit" do things which are useful in Squeak and have\r      no real equivalent in Unix (the "edit" builtin opens an editor within Squeak, taking\r      its input from files or directly from the output of a command pipeline such as\r      "Smalltalk ! | edit" or "who | edit").\r<li>\r      If the command segment is not a shell builtin command, it is assumed to be an\r      external command. It this case, the command line segment is fully parsed, then\r      used to create an external OS process proxy to run the external command. The\r      external process proxy responds to a #value message by running the external\r      program, with output and error written to pipes connected to the command\r      pipeline.\r<li>\r      Finally, if no external program can be found to execute the command, an error\r      message is provided to the command window, and no command is evaluated.\r</ul>\r    Once the command proxy pipeline has been created, the individual process proxies\r    are evaluated in such a way that they appear to execute in parallel, with each\r    proxy reading its input from a pipe connected to its predecessor in the pipeline,\r    and writing its output to a pipe connected to its successor in the pipeline. An\r    additional error pipe is shared by all process proxies in the pipeline, such that\r    any error output is accumulated in the shared error pipe stream.\r<p>\r    A command shell can obtain the output and error of a complex command pipeline\r    simply by evaluating the last process proxy in the chain, and reading up to the\r    end of its output and error pipes. Since a process proxy knows its run state, and\r    a pipe is not "at end" until a process proxy closes one end of the pipe, the pipeline\r    can be constructed in such a way that the command shell is assured that all process\r    proxies have completed their evaluation when the output of the last proxy is read\r    up to the end of the pipe.\r<p>\r    As the last process proxy in a command pipeline is evaluated, CommandShell reads\r    its output and error pipes, and displays the text in the View or Morph which it uses\r    as its terminal window. When complete, it issues a new prompt string, and waits for\r    another command line to be entered by the user.\r<p>\r<h3>Exercise for the Reader:</h4>\rWhich one of the following five command lines will generate\ran error, and why?\r<ol><li>\r  $ stdout nextPutAll: \'\'hello world\'\'\r<li>\r  $ stdout nextPutAll: \'\'hello world\'\'; cr\r<li>\r  $ stdout nextPutAll: \'\'hello world\'\'!\r<li>\r  $ stdout nextPutAll: \'\'hello world\'\'; cr!\r<li>\r  $ stdout nextPutAll: \'\'hello world\'\'!; stdout cr!\r</ol>\r<h3>Answer:</h4>\rThe fourth command will generate an error.\r<ul><li>\r  Line one is evaluated as a complete Smalltalk expression, and succeeds.\r<li>\r  Line two is evaluated as a complete Smalltalk expression, and succeeds.\r<li>\r  Line three is evaluated as a pipeline after failing evaluation as a complete Smalltalk\r  expression. It succeeds as a pipeline with one internal doIt proxy, and produces\r  the same output as line one.\r<li>\r  Line four cannot be evaluated as a complete Smalltalk expression. The ";" token\r  causes the command line to be evaluated as two pipelines. The expression for the\r  first pipeline does not have a trailing "!" token, so it is assumed to be an external\r  command, and fails. The second pipeline is evaluated as a doIt on the string \'\'cr!\'\',\r  which fails as an invalid Smalltalk expression. The error messages for both failures\r  are accumulated on the shared error pipe, and are displayed in the terminal window.\r<li>\r  Line five is evaluated successfully as two pipelines, each consisting of one doIt\r  proxy. The output is the same as for line two.\r</ul></body></html>\r\'',			#stamp : 'dtl 8/30/2011 07:30',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1289' ],		#self : OmReference [ '1290' ],		#time : DateAndTime [ '2018-02-22T14:01:12.825736-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'class initialization',			#sourceCode : 'initialize\r\t"CommandShell initialize"\r\r\t| preferencesClass |\r\tShellSyntax new isPharo5Update50558AndLater\r\t\tifFalse: [ Smalltalk addToStartUpList: self ]\r\t\tifTrue:\r\t\t\t[ (Smalltalk at: #SessionManager) default\r\t\t\t\tperform: #registerToolClassNamed:\r\t\t\t\twith: ThisOSProcess name ].\r\t(Smalltalk hasClassNamed: #Preferences)\r\t\tifTrue:\r\t\t\t[ preferencesClass := Smalltalk at: #Preferences.\r\t\t\t(preferencesClass respondsTo: #setWindowColorFor:to:)\r\t\t\t\tifTrue:\r\t\t\t\t\t[ preferencesClass\r\t\t\t\t\t\tsetWindowColorFor: #CommandShell\r\t\t\t\t\t\tto: (Color colorFrom: self windowColorSpecification pastelColor) ]\r\t\t\t\tifFalse: [  ]\t"Squeak"\t"Pharo images use some other preferences protocol" ].\t"Pharo deprecates Preference in favor of pragma registration mechanism"\r\tSmalltalk\r\t\tat: #TheWorldMenu\r\t\tifPresent:\r\t\t\t[ :class | \r\t\t\tclass class methodDict\r\t\t\t\tat: #registerOpenCommand:\r\t\t\t\tifPresent:\r\t\t\t\t\t[ :method | \r\t\t\t\t\t(method hasLiteral: #deprecated:)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[  ]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[ class unregisterOpenCommand: \'Squeak shell\'.\t"if previously registered"\r\t\t\t\t\t\t\tclass\r\t\t\t\t\t\t\t\tregisterOpenCommand:\r\t\t\t\t\t\t\t\t\t{\'Squeak Shell\'.\r\t\t\t\t\t\t\t\t\t{CommandShell.\r\t\t\t\t\t\t\t\t\t#open}} ]\t"n.b.  use #hasLiteral: rather than #sendsSelector: for Squeak 3.8"\t"Pharo issues deprecation and tells you to do it their way. Ignore the warning." ] ]',			#stamp : 'dtl 2/18/2016 21:26',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1290' ],		#self : OmReference [ '1291' ],		#time : DateAndTime [ '2018-02-22T14:01:12.826325-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #isMorphic,			#protocol : #'version testing',			#sourceCode : 'isMorphic\r\t"Squeak traditionally used #isMorphic to distinguish between Morphic\r\tand MVC user interfaces. In newer Squeak images, the current project\r\tknows its active user interface, so requests are vectored through the\r\tcurrent project. Pharo images pretend to be unaware of the fact that\r\tthey are running Morphic, refusing to respond to #isMorphic. This \r\timplementation does reasonable things in any of the above scenarios."\r\r\t^(Smalltalk respondsTo: #isMorphic) not or: [Smalltalk isMorphic]',			#stamp : 'dtl 6/29/2010 21:06',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1291' ],		#self : OmReference [ '1292' ],		#time : DateAndTime [ '2018-02-22T14:01:12.826933-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'localNameFor:',			#protocol : #'version dependent',			#sourceCode : 'localNameFor: path\r\t"Return the local part the given name."\r\r\t^ self useFileSystem\r\t\tifTrue: [ (path perform: #asFileReference) perform: #basename ]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) perform: #localNameFor: with: path]\r',			#stamp : 'dtl 1/27/2013 17:55',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1292' ],		#self : OmReference [ '1293' ],		#time : DateAndTime [ '2018-02-22T14:01:12.827535-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'makeVmIn:',			#protocol : #'VM building',			#sourceCode : 'makeVmIn: buildDirectoryPathName\r\t"Rebuild the virtual machine and plugins in the buildDirectoryPathName\r\tdirectory. If the build is successful, save the image and restart using the\r\tnew VM. This assumes that the currently executing VM is either located in,\r\tor linked to, the buildDirectoryPathName directory."\r\r\t"CommandShell makeVmIn: CommandShell defaultPathString, CommandShell pathSeparator, \'build\'"\r\r\t| shell |\r\tshell := self new.\r\tshell open.\r\t^ shell makeVmIn: buildDirectoryPathName\r',			#stamp : 'dtl 1/25/2013 19:08',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1293' ],		#self : OmReference [ '1294' ],		#time : DateAndTime [ '2018-02-22T14:01:12.82808-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #open,			#protocol : #'instance creation',			#sourceCode : 'open\r\t"CommandShell open"\r\r\t^ self new open',			#stamp : 'dtl 12/27/2001 23:36',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1294' ],		#self : OmReference [ '1295' ],		#time : DateAndTime [ '2018-02-22T14:01:12.828697-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'openLabel:',			#protocol : #'instance creation',			#sourceCode : 'openLabel: aString\r\r\t"CommandShell openLabel: self defaultWindowName"\r\r\t^ self new openLabel: aString\r',			#stamp : 'dtl 3/17/2003 21:19',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1295' ],		#self : OmReference [ '1296' ],		#time : DateAndTime [ '2018-02-22T14:01:12.82929-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #openWithHelp,			#protocol : #'instance creation',			#sourceCode : 'openWithHelp\r\t"CommandShell openWithHelp"\r\r\tself open processCommand: \'help\'\r',			#stamp : 'dtl 6/27/2010 16:08',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1296' ],		#self : OmReference [ '1297' ],		#time : DateAndTime [ '2018-02-22T14:01:12.830115-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #overview,			#protocol : #documentation,			#sourceCode : 'overview\r\t"A general overview"\r\r\t"CommandShell new pipeline: \'CommandShell overview! | edit\'"\r\r\t| rs ws |\r\trs := ReadStream on: self htmlOverview.\r\tws := WriteStream on: String new.\r\t[rs atEnd]\r\t\twhileFalse:\r\t\t\t[ws nextPutAll: (rs upTo: $<).\r\t\t\trs upTo: $>].\r\t^ ws contents\r',			#stamp : 'dtl 12/1/2001 18:51',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1297' ],		#self : OmReference [ '1298' ],		#time : DateAndTime [ '2018-02-22T14:01:12.830706-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #pathNameDelimiter,			#protocol : #'version dependent',			#sourceCode : 'pathNameDelimiter\r\r\t^ self useFileSystem\r\t\tifTrue: [(Smalltalk at: #DiskStore) current perform: #delimiter]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) pathNameDelimiter]\r',			#stamp : 'SeanDeNigris 2/13/2013 09:46',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1298' ],		#self : OmReference [ '1299' ],		#time : DateAndTime [ '2018-02-22T14:01:12.831262-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'pathNameForDirectory:',			#protocol : #'version dependent',			#sourceCode : 'pathNameForDirectory: directoryOrFileReference\r\t"Return the full name of this directory."\r\r\t^ self useFileSystem\r\t\tifTrue: [directoryOrFileReference fullName]\r\t\tifFalse: [ directoryOrFileReference pathName ]\r',			#stamp : 'dtl 1/27/2013 18:17',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1299' ],		#self : OmReference [ '1300' ],		#time : DateAndTime [ '2018-02-22T14:01:12.831838-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #pathSeparator,			#protocol : #'version dependent',			#sourceCode : 'pathSeparator\r\r\t^ self useFileSystem\r\t\tifTrue: [((Smalltalk at: #DiskStore) current perform: #delimiter) asString]\r\t\tifFalse: [(Smalltalk at: #FileDirectory) slash]\r',			#stamp : 'SeanDeNigris 2/13/2013 09:46',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1300' ],		#self : OmReference [ '1301' ],		#time : DateAndTime [ '2018-02-22T14:01:12.832455-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'pipeableProxyFor:',			#protocol : #'proxy creation',			#sourceCode : 'pipeableProxyFor: commandString \r\t"Create a new proxy for a PipeJunction. The proxy may be any type\r\tof PipeJunction, such as a PipeableOSProcess or ExpressionEvaluator.\r\tSend #value to evaluate the newly created proxy."\r\r\t"(CommandShell pipeableProxyFor: \'ls -l\') value upToEndOfFile"\r\t"(CommandShell pipeableProxyFor: \'Array new: 4 !\') value upToEndOfFile"\r\t"(CommandShell pipeableProxyFor: \'help\') value upToEndOfFile"\r\r\t^ self new\r\t\tpipeableProxyFor: commandString\r\t\tinput: nil\r\t\toutput: nil\r\t\terror: nil\r\t\tpredecessorProxy: nil',			#stamp : 'dtl 12/31/2007 14:51',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1301' ],		#self : OmReference [ '1302' ],		#time : DateAndTime [ '2018-02-22T14:01:12.833032-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'pipeline:',			#protocol : #'proxy creation',			#sourceCode : 'pipeline: aCommand\r\t"Find the individual commands in a command pipeline string, and evaluate\r\tthem as a command pipeline. Answer a ProxyPipeline collection of processes\r\tin the pipeline."\r\r\t"(CommandShell pipeline: \'ps | grep ps | wc\') upToEndOfFile"\r\t"(CommandShell pipeline: \'ls NOSUCHFILE * | dd | cat\') errorUpToEndOfFile"\r\t"(CommandShell pipeline: \'ls NOSUCHFILE * | dd | cat\') upToEndOfFile"\r\r\t^ self new pipeline: aCommand\r',			#stamp : 'dtl 12/31/2007 14:55',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1302' ],		#self : OmReference [ '1303' ],		#time : DateAndTime [ '2018-02-22T14:01:12.833702-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #raceConditions,			#protocol : #documentation,			#sourceCode : 'raceConditions\r\r\t"CommandShell new pipeline: \'CommandShell raceConditions! | edit\'"\r\r\t^\r\'It may be possible to hang the Squeak VM in an IO race condition when doing certain command pipelines. These conditions have been largely eliminated for Unix platforms through the use of nonblocking pipes in conjunction with asynchronous IO or polling processes on the Smalltalk side of the pipes. However, these notes are provided to describe possible deadlock scenarios.\r\rNote that nonblocking OS pipes are not yet available on Windows. Command pipelines with external OS processes on Windows are not supported. Blocking on read or write to an OSPipe in Windows will definitely lock the VM.\r\rTwo kinds of deadlock are possible. In both cases, deadlock occurs when the single-threaded Squeak VM is blocked on a read or write to an OS pipe, and the blocked condition can only be cleared by another process running in the blocked VM.\r\r1) Block on write. The Squeak VM can block on a write to an OS pipe if the external process at the other end of the pipe does not keep up with reading it. One internal process proxy writes on an pipe to an external process proxy, and fills the pipe up to some capacity limit, after which the write blocks. The external proxy is writing its output to another internal process proxy in the command pipeline, which never executes because the VM is still blocked trying to write to the full pipe.\r\r2) Block on read. The Squeak VM can block on a read from an OS pipe if the external process writing to the pipe never closes the pipe. The internal proxy will post a read on the output pipe from the external command. If the external command has exited, the read will return with a (possibly empty) string. However, if the external command either does not exit, or exits without Squeak being notified, the read on the output pipe will block indefinitely.\r\r2a) In the case where the external command exits while the Squeak VM is blocked on a read, Squeak is unable to respond to the notification of the external process exiting. The process stays in a zombie state, the pipes therefore never get closed, and the VM stays in a blocked condition.\r\rHere are things to try if a deadlock occurs:\r\rSqueak will be blocked and will not respond to the mouse or keyboard. Open a command shell outside of Squeak (perhaps an xterm, or log in to another virtual terminal on Linux or FreeBSD). Using the "ps" command, find the Squeak VM process and its subprocesses. Kill the subprocess. In many cases this will free up the deadlock, and Squeak will come back to life. If this does not work, then you will probably find that one of the processes which you just killed is now in a "zombie" state, which means that the Squeak VM is deadlocked in such a way that it cannot recognize that its child process exited (and therefore cannot properly close the associated file handles). In this case, if your operating system supports a /proc file system, you may be able to break things free by emptying the pipes. On Linux, go to /proc/<pidOfTheSqueakVMProcess>/fd/ and do "cat" commands on all the pipe files in this directory. If none of this works, you are just plain stuck, and you will need to kill your Squeak session and recover anything valuable from the changes log.\'',			#stamp : 'dtl 12/15/2007 12:25',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1303' ],		#self : OmReference [ '1304' ],		#time : DateAndTime [ '2018-02-22T14:01:12.834265-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'startUp:',			#protocol : #'system startup',			#sourceCode : 'startUp: resuming\r\t"A CommandShell may be running external processes in background, and waiting\r\tfor those processes to complete. If the Squeak image is stopped and restarted, the\r\tbackground processes are no longer children of the Squeak process, and there is\r\tno way to receive notification when the processes exit. This would result in leftover\r\tSmalltalk processes associated with the CommandShell waiting forever for the\r\texternal processes to exit. The simplest way to prevent this is to terminate all\r\tthe Smalltalk processes unconditionally after an image restart."\r\r\tresuming ifTrue: [self allSubInstances do: [:e | e startUpInNewSession]]\r',			#stamp : 'dtl 7/12/2002 19:26',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1304' ],		#self : OmReference [ '1305' ],		#time : DateAndTime [ '2018-02-22T14:01:12.835046-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #unload,			#protocol : #'class initialization',			#sourceCode : 'unload\r\tSmalltalk at: #TheWorldMenu ifPresent: [ :class |\r\t\tclass class methodDict at: #unregisterOpenCommandWithReceiver: ifPresent: [ :method |\r\t\t\t(method hasLiteral: #deprecated:) "n.b.  use #hasLiteral: rather than #sendsSelector: for Squeak 3.8"\r\t\t\t\tifFalse: [ class unregisterOpenCommandWithReceiver: self ] ] ]',			#stamp : 'dtl 2/3/2012 22:06',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1305' ],		#self : OmReference [ '1306' ],		#time : DateAndTime [ '2018-02-22T14:01:12.835623-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #useFileSystem,			#protocol : #'version dependent',			#sourceCode : 'useFileSystem\r\t"If true use FileSystem, otherwise use traditional FileDirectory. See senders\r\tfor methods with file system dependencies."\r\r\t^ Smalltalk hasClassNamed: #FileReference',			#stamp : 'dtl 1/26/2013 15:38',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1306' ],		#self : OmReference [ '1307' ],		#time : DateAndTime [ '2018-02-22T14:01:12.83617-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #versionString,			#protocol : #'version testing',			#sourceCode : 'versionString\r\r\t"CommandShell versionString"\r\r\t^\'4.6.20\'',			#stamp : 'dtl 10/13/2017 21:32',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1307' ],		#self : OmReference [ '1308' ],		#time : DateAndTime [ '2018-02-22T14:01:12.83679-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #windowColorSpecification,			#protocol : #'window color',			#sourceCode : 'windowColorSpecification\r\t"Answer a WindowColorSpec object that declares my preference"\r\r\t| windowColorSpec |\r\twindowColorSpec := Smalltalk\r\t\t\t\tat: #WindowColorSpec\r\t\t\t\tifAbsent: [^ self error: \'this image does not support WindowColorSpec\'].\r\t^ windowColorSpec\r\t\tclassSymbol: self name\r\t\twording: \'Squeak Shell\'\r\t\tbrightColor: (Color lightGray lighter paler)\r\t\tpastelColor: (Color lightGray lighter lighter paler paler)\r\t\thelpMessage: \'CommandShell window for evaluating Smalltalk and OS commands\'',			#stamp : 'dtl 6/29/2010 00:07',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1308' ],		#self : OmReference [ '1309' ],		#time : DateAndTime [ '2018-02-22T14:01:12.837345-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShell class',				#isMetaSide : true			},			#name : #'withBlanksTrimmed:',			#protocol : #'version dependent',			#sourceCode : 'withBlanksTrimmed: aString\r\r\t^ (aString respondsTo: #withBlanksTrimmed)\r\t\tifFalse: [aString perform: #trimBoth "Pharo"]\r\t\tifTrue: [aString perform: #withBlanksTrimmed]\r',			#stamp : 'dtl 1/29/2013 20:40',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1309' ],		#self : OmReference [ '1310' ],		#time : DateAndTime [ '2018-02-22T14:01:12.837951-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #activeController,			#protocol : #accessing,			#sourceCode : 'activeController\r\t"In Morphic, alway nil. In MVC, the controller which most recently invoked\r\ta command."\r\r\t^ activeController',			#stamp : 'dtl 6/24/2001 19:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1310' ],		#self : OmReference [ '1311' ],		#time : DateAndTime [ '2018-02-22T14:01:12.838528-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'activeController:',			#protocol : #accessing,			#sourceCode : 'activeController: aController\r\t"In Morphic, alway nil. In MVC, the controller which most recently invoked\r\ta command."\r\r\tactiveController := aController',			#stamp : 'dtl 6/24/2001 19:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1311' ],		#self : OmReference [ '1312' ],		#time : DateAndTime [ '2018-02-22T14:01:12.839105-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #backgroundMessageQueue,			#protocol : #accessing,			#sourceCode : 'backgroundMessageQueue\r\t"When a background pipeline completes, it places a message in this queue.\r\tThe message will be displayed the next time the user accepts a line of\r\ttext (presses CR)."\r\r\t^ backgroundMessageQueue ifNil: [backgroundMessageQueue := OrderedCollection new]\r',			#stamp : 'dtl 6/19/2002 07:13',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1312' ],		#self : OmReference [ '1313' ],		#time : DateAndTime [ '2018-02-22T14:01:12.839673-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'backgroundMessageQueue:',			#protocol : #accessing,			#sourceCode : 'backgroundMessageQueue: anObject\r\t"Set the value of backgroundMessageQueue"\r\r\tbackgroundMessageQueue := anObject',			#stamp : 'dtl 8/19/2006 13:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1313' ],		#self : OmReference [ '1314' ],		#time : DateAndTime [ '2018-02-22T14:01:12.840556-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'backgroundPipelineComplete:commandIndex:',			#protocol : #'event handling',			#sourceCode : 'backgroundPipelineComplete: aPipeline commandIndex: index\r\t"This message is sent when aPipeline has completed evaluation.\r\tEnsure that the output and error event handlers have had a chance\r\tto completely empty the pipes prior to cleaning things up."\r\r\tself waitUntilPipesAreEmpty: aPipeline.\r\taPipeline closePipes; release.\r\tself backgroundMessageQueue addLast:\r\t\t((WriteStream on: String new)\r\t\t\tnextPutAll: \'[\', index asString, \']+ Done                     \';\r\t\t\tnextPutAll: aPipeline commandLine;\r\t\t\tcr;\r\t\t\tcontents).\r\tself backgroundProxies removeAll: aPipeline.\r\tself unRegisterBackgroundPipeline: aPipeline at: index.\r\tself notifyRestorePrompt\r',			#stamp : 'dtl 12/11/2007 21:33',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1314' ],		#self : OmReference [ '1315' ],		#time : DateAndTime [ '2018-02-22T14:01:12.841145-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #backgroundPipelines,			#protocol : #accessing,			#sourceCode : 'backgroundPipelines\r\t"The pipelines which are currently being evaluated in background. This\r\tcollection is used to keep track of the background command lines by giving\r\teach background pipeline an index number corresponding to its position in\r\tthis collection. New pipelines are inserted at the first available nil position\r\tin the collection, and the collection is expanded as needed."\r\r\t^ backgroundPipelines ifNil: [backgroundPipelines := OrderedCollection new]\r\r',			#stamp : 'dtl 12/15/2002 16:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1315' ],		#self : OmReference [ '1316' ],		#time : DateAndTime [ '2018-02-22T14:01:12.841718-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'backgroundPipelines:',			#protocol : #accessing,			#sourceCode : 'backgroundPipelines: anObject\r\t"Set the value of backgroundPipelines"\r\r\tbackgroundPipelines := anObject',			#stamp : 'dtl 8/19/2006 13:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1316' ],		#self : OmReference [ '1317' ],		#time : DateAndTime [ '2018-02-22T14:01:12.842285-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #backgroundProxies,			#protocol : #accessing,			#sourceCode : 'backgroundProxies\r\t"All of my process proxies that are being evaluated in the background."\r\r\tbackgroundProxies ifNil: [backgroundProxies := OrderedCollection new].\r\t^ backgroundProxies',			#stamp : 'dtl 12/9/2006 10:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1317' ],		#self : OmReference [ '1318' ],		#time : DateAndTime [ '2018-02-22T14:01:12.842855-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'backgroundProxies:',			#protocol : #accessing,			#sourceCode : 'backgroundProxies: aCollection\r\t"All of my process proxies that are being evaluated in the background."\r\r\tbackgroundProxies := aCollection\r',			#stamp : 'dtl 12/9/2006 10:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1318' ],		#self : OmReference [ '1319' ],		#time : DateAndTime [ '2018-02-22T14:01:12.843493-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'builtinCommandProxyFor:input:output:error:',			#protocol : #'process proxy creation',			#sourceCode : 'builtinCommandProxyFor: aCommandString input: in output: out error: err\r\t"Answer a PipeableEvaluator on a built in command, or nil."\r\r\t"CommandShell new initialize builtinCommandProxyFor: \'help\' input: nil output: nil error: nil"\r\r\t| args command commandAndArgs |\r\t^ (self isBuiltInCommand: aCommandString)\r\t\tifTrue:\r\t\t\t[commandAndArgs := self shellSyntax\r\t\t\t\t\t\t\t\t\tprogramNameAndArgumentsFrom: aCommandString\r\t\t\t\t\t\t\t\t\tinDirectoryPath: nil\r\t\t\t\t\t\t\t\t\tfindExecutable: false.\r\t\t\tcommand := self builtinCommands at: commandAndArgs first.\r\t\t\targs := commandAndArgs last.\r\t\t\t^ ShellBuiltinEvaluator\r\t\t\t\tcommand: command\r\t\t\t\twithArguments: args\r\t\t\t\tshell: self\r\t\t\t\tpipeFrom: in\r\t\t\t\tpipeTo: out\r\t\t\t\terrorPipelineStream: err]\r\t\tifFalse: [nil]\r',			#stamp : 'dtl 11/21/2006 09:20',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1319' ],		#self : OmReference [ '1320' ],		#time : DateAndTime [ '2018-02-22T14:01:12.844077-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #builtinCommands,			#protocol : #accessing,			#sourceCode : 'builtinCommands\r\r\t^ builtinCommands ifNil: [builtinCommands := Dictionary new]',			#stamp : 'dtl 12/27/2001 12:24',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1320' ],		#self : OmReference [ '1321' ],		#time : DateAndTime [ '2018-02-22T14:01:12.844663-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'builtinCommands:',			#protocol : #accessing,			#sourceCode : 'builtinCommands: aCommandDictionary\r\r\tbuiltinCommands := aCommandDictionary',			#stamp : 'dtl 7/14/2002 11:54',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1321' ],		#self : OmReference [ '1322' ],		#time : DateAndTime [ '2018-02-22T14:01:12.845343-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #canAccessOSProcess,			#protocol : #testing,			#sourceCode : 'canAccessOSProcess\r\t"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"\r\r\t"CommandShell new canAccessOSProcess"\r\r\t| osp |\r\t^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]\r',			#stamp : 'dtl 8/7/2002 11:45',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1322' ],		#self : OmReference [ '1323' ],		#time : DateAndTime [ '2018-02-22T14:01:12.846138-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #characterLimit,			#protocol : #accessing,			#sourceCode : 'characterLimit\r\t"Tell the views how much to retain on screen"\r\t^ 20000',			#stamp : 'dtl 3/16/2001 05:58',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1323' ],		#self : OmReference [ '1324' ],		#time : DateAndTime [ '2018-02-22T14:01:12.846755-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'checkSttyFor:',			#protocol : #'input character filtering',			#sourceCode : 'checkSttyFor: characterValue\r\t"Check for interrupt characters and such. Consume interrupt character and\r\tanswer nil, otherwise answer characterValue."\r\r\t(self isInterrupt: characterValue)\r\t\tifTrue:\r\t\t\t[self changed: #interruptCharacter.\r\t\t\t^ nil].\r\t(self isEndOfFile: characterValue)\r\t\tifTrue:\r\t\t\t[self doEndOfFile.\r\t\t\t^ nil].\r\t^ characterValue',			#stamp : 'dtl 2/18/2007 15:37',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1324' ],		#self : OmReference [ '1325' ],		#time : DateAndTime [ '2018-02-22T14:01:12.847341-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #clearSemaphore,			#protocol : #initialize-release,			#sourceCode : 'clearSemaphore\r\r\t[self readSyncSemaphore isEmpty] whileFalse: [readSyncSemaphore terminateProcess].\r\treadSyncSemaphore signal\r',			#stamp : 'dtl 12/2/2001 12:05',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1325' ],		#self : OmReference [ '1326' ],		#time : DateAndTime [ '2018-02-22T14:01:12.847937-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'command:',			#protocol : #evaluation,			#sourceCode : 'command: aCommandString\r\t"Evaluate aCommandString. Answer a collection of evaluated pipelines,\r\tor nil if nothing was done."\r\r\t"CommandShell new command: \'ls -l | cat\'"\r\t"CommandShell new open; command: \'ls -l | cat\'"\r\t"CommandShell new open; command: \'who\'"\r\t"CommandShell new open; command: \'who&\'"\r\t"CommandShell new open; command: \'sol\'"\r\t"CommandShell new command: \'sol\'"\r\r\t^self command: aCommandString echo: true\r',			#stamp : 'dtl 9/15/2012 18:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1326' ],		#self : OmReference [ '1327' ],		#time : DateAndTime [ '2018-02-22T14:01:12.848528-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'command:echo:',			#protocol : #evaluation,			#sourceCode : 'command: aCommandString echo: showCommand\r\t"Evaluate aCommandString. Answer a collection of evaluated pipelines,\r\tor nil if nothing was done. If showCommand is true, update dependent\r\tviews in order to display the command."\r\r\tshowCommand ifTrue: [self changed: aCommandString].\r\t^ self evaluatePipelines: (self evaluateOrMakePipelinesFrom: aCommandString)\r',			#stamp : 'dtl 9/15/2012 18:47',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1327' ],		#self : OmReference [ '1328' ],		#time : DateAndTime [ '2018-02-22T14:01:12.849179-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'command:onFailureDo:',			#protocol : #'command scripting',			#sourceCode : 'command: aCommandString onFailureDo: aBlockWithZeroOrOneParameter\r\t"Evaluate aCommandString. On failure, answer the result of evaluating\r\taBlockWithOneParameter with the collection of evaluated pipelines as\r\tits parameter. Otherwise, answer a collection of evaluated pipelines or\r\tnil if nothing was done."\r\r\t"CommandShell new open;\r\t\tcommand: \'who\'\r\t\tonFailureDo: [:p | \'the proxy pipeline collection which failed was \', p printString]"\r\t"CommandShell new open;\r\t\tcommand: \'ls NOSUCHFILE\'\r\t\tonFailureDo: [:p | \'the proxy pipeline collection that failed was \', p printString]"\r\t"CommandShell new open;\r\t\tcommand: \'ls NOSUCHFILE\'\r\t\tonFailureDo: [\'the command failed\']"\r\r\t| pipelines |\r\tpipelines := self command: aCommandString.\r\t(pipelines anySatisfy: [:p | p succeeded not])\r\t\tifTrue:\r\t\t\t[(aBlockWithZeroOrOneParameter numArgs == 0)\r\t\t\t\tifTrue: [^ aBlockWithZeroOrOneParameter value]\r\t\t\t\tifFalse: [^ aBlockWithZeroOrOneParameter value: pipelines]]\r\t\tifFalse: [^ pipelines]\r\r',			#stamp : 'dtl 3/18/2003 20:33',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1328' ],		#self : OmReference [ '1329' ],		#time : DateAndTime [ '2018-02-22T14:01:12.849803-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #commandHistory,			#protocol : #accessing,			#sourceCode : 'commandHistory\r\t"Automatically trim the history list, and answer the resulting list."\r\r\t| trimIncrement |\r\ttrimIncrement := 1.\t"Could be a larger number to copy the collection less often"\r\tcommandHistory isNil\r\t\tifTrue:\r\t\t\t[commandHistory := OrderedCollection new]\r\t\tifFalse:\r\t\t\t[(commandHistory size > (self historyDepth * 2 + (trimIncrement * 2) - 2))\r\t\t\t\tifTrue:\r\t\t\t\t\t[commandHistory := commandHistory\r\t\t\t\t\t\tcopyFrom: (trimIncrement * 2 + 1) to: commandHistory size]].\r\t^ commandHistory',			#stamp : 'dtl 4/7/2001 12:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1329' ],		#self : OmReference [ '1330' ],		#time : DateAndTime [ '2018-02-22T14:01:12.850393-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #commandLineProcesses,			#protocol : #accessing,			#sourceCode : 'commandLineProcesses\r\t"The Smalltalk processes associated with currently executing command lines. Keep\r\ttrack of them here so that they can be conveniently terminated if something gets\r\tout of whack and needs cleaning up."\r\r\tcommandLineProcesses ifNil: [commandLineProcesses := OrderedCollection new].\r\t^ commandLineProcesses\r',			#stamp : 'dtl 6/15/2002 09:21',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1330' ],		#self : OmReference [ '1331' ],		#time : DateAndTime [ '2018-02-22T14:01:12.850966-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'commandLineProcesses:',			#protocol : #accessing,			#sourceCode : 'commandLineProcesses: anObject\r\t"Set the value of commandLineProcesses"\r\r\tcommandLineProcesses := anObject',			#stamp : 'dtl 8/19/2006 13:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1331' ],		#self : OmReference [ '1332' ],		#time : DateAndTime [ '2018-02-22T14:01:12.851846-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'copyAllErrorFrom:',			#protocol : #'event handling',			#sourceCode : 'copyAllErrorFrom: aProxy\r\t"An event driven data source may send this message to cause its available\r\terror stream characters to be processed."\r\r\t| s |\r\tself readSyncSemaphore critical:\r\t\t[s := aProxy errorUpToEnd.\r\t\ts isEmpty ifFalse:\r\t\t\t[[self errorStream nextPutAll: s]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex | ex retryUsing:\r\t\t\t\t\t\t["If the error pipe overflows we get an unhandled error,\r\t\t\t\t\t\tso wait a while and retry the write."\r\t\t\t\t\t\t(Delay forMilliseconds: self pollingDelayTime) wait.\r\t\t\t\t\t\tself errorStream nextPutAll: s]]]]\r',			#stamp : 'dtl 1/13/2007 19:10',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1332' ],		#self : OmReference [ '1333' ],		#time : DateAndTime [ '2018-02-22T14:01:12.852487-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'copyAllOutputFrom:',			#protocol : #'event handling',			#sourceCode : 'copyAllOutputFrom: aProxy\r\t"An event driven data source may send this message to cause its available\r\tcharacters to be processed."\r\r\t| s |\r\tself readSyncSemaphore critical:\r\t\t[s := aProxy upToEnd.\r\t\ts isEmpty ifFalse:\r\t\t\t[[self outputStream nextPutAll: s]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex | ex retryUsing:\r\t\t\t\t\t\t["If the output pipe overflows we get an unhandled error,\r\t\t\t\t\t\tso wait a while and retry the write."\r\t\t\t\t\t\t(Delay forMilliseconds: self pollingDelayTime) wait.\r\t\t\t\t\t\tself outputStream nextPutAll: s]]]]\r',			#stamp : 'dtl 1/16/2007 07:05',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1333' ],		#self : OmReference [ '1334' ],		#time : DateAndTime [ '2018-02-22T14:01:12.853138-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'copyErrorToEofFrom:',			#protocol : #'event handling',			#sourceCode : 'copyErrorToEofFrom: aProxy\r\t"An event driven data source may send this message to cause its available\r\terror stream characters to be processed."\r\r\t| s |\r\tself readSyncSemaphore critical:\r\t\t[s := aProxy errorUpToEndOfFile.\r\t\ts isEmpty ifFalse:\r\t\t\t[[self errorStream nextPutAll: s]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex | ex retryUsing:\r\t\t\t\t\t\t["If the error pipe overflows we get an unhandled error,\r\t\t\t\t\t\tso wait a while and retry the write."\r\t\t\t\t\t\t(Delay forMilliseconds: self pollingDelayTime) wait.\r\t\t\t\t\t\tself errorStream nextPutAll: s]]]]\r',			#stamp : 'dtl 1/13/2007 19:10',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1334' ],		#self : OmReference [ '1335' ],		#time : DateAndTime [ '2018-02-22T14:01:12.853758-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'copyOutputToEofFrom:',			#protocol : #'event handling',			#sourceCode : 'copyOutputToEofFrom: aProxy\r\t"An event driven data source may send this message to cause its available\r\tcharacters to be processed."\r\r\t| s |\r\tself readSyncSemaphore critical:\r\t\t[s := aProxy upToEndOfFile.\r\t\ts isEmpty ifFalse:\r\t\t\t[[self outputStream nextPutAll: s]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex | ex retryUsing:\r\t\t\t\t\t\t["If the output pipe overflows we get an unhandled error,\r\t\t\t\t\t\tso wait a while and retry the write."\r\t\t\t\t\t\t(Delay forMilliseconds: self pollingDelayTime) wait.\r\t\t\t\t\t\tself outputStream nextPutAll: s]]]]\r',			#stamp : 'dtl 1/13/2007 19:11',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1335' ],		#self : OmReference [ '1336' ],		#time : DateAndTime [ '2018-02-22T14:01:12.854333-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #defaultBuiltinCommands,			#protocol : #defaults,			#sourceCode : 'defaultBuiltinCommands\r\r\t^ #(cd: clear: copyToError: copyToOutput: edit: snapshot: exit: fc: help: history: inspect: pwd: sls: sqsh: type:)\r',			#stamp : 'dtl 7/14/2002 12:42',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1336' ],		#self : OmReference [ '1337' ],		#time : DateAndTime [ '2018-02-22T14:01:12.854912-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #defaultPromptString,			#protocol : #defaults,			#sourceCode : 'defaultPromptString\r\r\t^ \'$ \'',			#stamp : 'dtl 6/17/2002 23:43',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1337' ],		#self : OmReference [ '1338' ],		#time : DateAndTime [ '2018-02-22T14:01:12.855484-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #defaultPromptStringTwo,			#protocol : #defaults,			#sourceCode : 'defaultPromptStringTwo\r\r\t^ \'> \'',			#stamp : 'dtl 6/17/2002 23:45',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1338' ],		#self : OmReference [ '1339' ],		#time : DateAndTime [ '2018-02-22T14:01:12.856077-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #doEndOfFile,			#protocol : #'input character filtering',			#sourceCode : 'doEndOfFile\r\t"EOF character detected, close stdin to pipeline."\r\r\t| pipelineInput |\r\t(pipelineInput := self keyboardConnector)\r\t\tifNotNil: [pipelineInput closeWriter]\r',			#stamp : 'dtl 9/3/2010 17:02',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1339' ],		#self : OmReference [ '1340' ],		#time : DateAndTime [ '2018-02-22T14:01:12.856771-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #doInterrupt,			#protocol : #'input character filtering',			#sourceCode : 'doInterrupt\r\t"Interrupt character detected, do interrupt stuff."\r\r\t| msgStrm children answer |\r\tchildren := self externalChildren collect: [:e | e processProxy].\r\t(children size > 0)\r\t\tifTrue:\r\t\t\t[msgStrm := WriteStream on: String new.\r\t\t\t(children size > 1)\r\t\t\t\tifTrue: [msgStrm nextPutAll: \'kill processes\']\r\t\t\t\tifFalse: [msgStrm nextPutAll: \'kill process\'].\r\t\t\tchildren do: [:e | msgStrm nextPutAll: \' \', e pid printString, \' (\', e programName, \')\'].\r\t\t\tmsgStrm nextPut: $?.\r\t\t\tself readSyncSemaphore critical:\r\t\t\t\t[self pauseStProcesses.\r\t\t\t\tanswer := self confirm: msgStrm contents.\r\t\t\t\tself unpauseStProcesses.\r\t\t\t\tanswer ifTrue:\r\t\t\t\t\t[children reverseDo: [:e | e sigkill].\r\t\t\t\t\tself terminateStProcesses]]]\r',			#stamp : 'dtl 3/9/2002 18:22',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1340' ],		#self : OmReference [ '1341' ],		#time : DateAndTime [ '2018-02-22T14:01:12.857635-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'doItProxyFor:input:output:error:',			#protocol : #'process proxy creation',			#sourceCode : 'doItProxyFor: aCommandString input: in output: out error: err\r\t"Answer a PipeableEvaluator on a doIt command, or nil."\r\r\t"CommandShell new doItProxyFor: \'#thisIsADoIt ! \' input: nil output: nil error: nil"\r\r\t^ (self shellSyntax isDoItCommand: aCommandString)\r\t\tifTrue: [self evaluationProxyFor: (self shellSyntax doItStringFrom: aCommandString)\r\t\t\t\t\tinput: in\r\t\t\t\t\toutput: out\r\t\t\t\t\terror: err]\r',			#stamp : 'dtl 1/20/2007 14:18',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1341' ],		#self : OmReference [ '1342' ],		#time : DateAndTime [ '2018-02-22T14:01:12.858233-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'editCommand:',			#protocol : #'command history',			#sourceCode : 'editCommand: aString\r\r\t^ UIManager default\r\t\trequest: \'edit command\'\r\t\tinitialAnswer: aString',			#stamp : 'dtl 1/28/2013 21:40',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1342' ],		#self : OmReference [ '1343' ],		#time : DateAndTime [ '2018-02-22T14:01:12.858824-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #endOfFileCharacterValue,			#protocol : #'input character filtering',			#sourceCode : 'endOfFileCharacterValue\r\t"<ctl>-D"\r\r\t^ 4',			#stamp : 'dtl 6/7/2001 23:17',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1343' ],		#self : OmReference [ '1344' ],		#time : DateAndTime [ '2018-02-22T14:01:12.859447-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #environment,			#protocol : #accessing,			#sourceCode : 'environment\r\r\t^ environment ifNil:\r\t\t[environment := (Smalltalk at: #OSProcess ifPresent:\r\t\t\t[:osp | osp thisOSProcess environment deepCopy]) ifNil: [Dictionary new]].\r',			#stamp : 'dtl 5/18/2008 11:36',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1344' ],		#self : OmReference [ '1345' ],		#time : DateAndTime [ '2018-02-22T14:01:12.860017-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'environment:',			#protocol : #accessing,			#sourceCode : 'environment: anObject\r\t"Set the value of environment"\r\r\tenvironment := anObject',			#stamp : 'dtl 8/19/2006 13:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1345' ],		#self : OmReference [ '1346' ],		#time : DateAndTime [ '2018-02-22T14:01:12.860614-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #errorStream,			#protocol : #accessing,			#sourceCode : 'errorStream\r\t"Answer the value of errorStream"\r\r\t^ errorStream ifNil: [errorStream := WriteStream on: String new]',			#stamp : 'dtl 2/24/2013 10:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1346' ],		#self : OmReference [ '1347' ],		#time : DateAndTime [ '2018-02-22T14:01:12.861204-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'errorStream:',			#protocol : #accessing,			#sourceCode : 'errorStream: anObject\r\t"Set the value of errorStream"\r\r\terrorStream := anObject',			#stamp : 'dtl 8/19/2006 13:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1347' ],		#self : OmReference [ '1348' ],		#time : DateAndTime [ '2018-02-22T14:01:12.861868-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'evaluateOrMakePipelinesFrom:',			#protocol : #'command line parsing',			#sourceCode : 'evaluateOrMakePipelinesFrom: aCommandString\r\t"Convert aCommandString into a structured collection of process proxies,\r\tpossibly after evaluating aCommandString as Smalltalk."\r\r\t"CommandShell new evaluateOrMakePipelinesFrom: \'who | cat | wc; ps -aef | cat& pwd | cat\'"\r\t"CommandShell new evaluateOrMakePipelinesFrom: \'Array new: 10\' "\r\r\t| process |\r\t"Ignore trivial case of a single word starting with $#"\r\t(self isOneWordCommentString: aCommandString)\r\t\tifTrue:\r\t\t\t[^ #()]\r\t\tifFalse:\r\t\t\t[process := self tryEvaluatingAsSmalltalk: aCommandString.\r\t\t\t(process exitStatus == #success)\r\t\t\t\tifTrue: "aCommandString was successfully evaluated as a Smalltalk expression"\r\t\t\t\t\t[self outputStream nextPutAll: process upToEnd.\r\t\t\t\t\tself errorStream nextPutAll: process errorUpToEnd.\r\t\t\t\t\tself saveInHistoryList: aCommandString.\r\t\t\t\t\t^ #()]\r\t\t\t\tifFalse: "Treat aCommandString as a command pipeline"\r\t\t\t\t\t[^ self pipelineCollectionFrom: aCommandString]]\r',			#stamp : 'dtl 1/22/2007 07:04',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1348' ],		#self : OmReference [ '1349' ],		#time : DateAndTime [ '2018-02-22T14:01:12.862606-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'evaluatePipeline:',			#protocol : #evaluation,			#sourceCode : 'evaluatePipeline: aPipeline\r\t"Evaluate aPipeline with event handlers to process output and error data."\r\r\t"CommandShell new evaluatePipeline: \r\t\t\t(CommandShell new\r\t\t\t\tpipelineCollectionFrom: \'ls NOSUCHFILE * | cat | dd | cat | wc; ps -aef | cat& pwd | cat\') first"\r\r\t| index |\r\tself registerOutputEventsFor: aPipeline.\r\tself registerErrorEventsFor: aPipeline.\r\taPipeline background\r\t\tifTrue:\r\t\t\t[index := self registerBackgroundPipeline: aPipeline.\r\t\t\tself registerBackgroundCompletionEventsFor: aPipeline\r\t\t\t\tcommandIndex: index.\r\t\t\tself backgroundProxies addAll: aPipeline.\r\t\t\taPipeline value.\r\t\t\t"Print the index of the background process."\r\t\t\tself errorStream nextPutAll: \'[\', index asString, \'] \'.\r\t\t\taPipeline last isExternalProcess ifTrue:\r\t\t\t\t[aPipeline last processProxy pid printOn: self errorStream].\r\t\t\tself errorStream cr; nextPut: Character lf]\r\t\tifFalse:\r\t\t\t[self keyboardConnector: aPipeline pipeToInput.\r\t\t\tself registerForegroundCompletionEventsFor: aPipeline.\r\t\t\tself foregroundProxies addAll: aPipeline.\r\t\t\taPipeline value].\r\t^ aPipeline\r',			#stamp : 'dtl 12/11/2007 18:39',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1349' ],		#self : OmReference [ '1350' ],		#time : DateAndTime [ '2018-02-22T14:01:12.863539-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'evaluatePipelines:',			#protocol : #evaluation,			#sourceCode : 'evaluatePipelines: aPipelineCollection\r\t"Evaluate the process proxies in aPipelineCollection, and process their output and error\r\tstreams. Answer aPipelineCollection."\r\r\t| lastForegroundPipeline completionSemaphore |\r\tlastForegroundPipeline := nil.\r\taPipelineCollection isEmpty ifFalse:\r\t\t[lastForegroundPipeline := aPipelineCollection reversed\r\t\t\tdetect: [:p | p background not]\r\t\t\tifNone: [].\r\t\tlastForegroundPipeline ifNotNil: [self registerPromptEventFor: lastForegroundPipeline].\r\t\taPipelineCollection do: [:pipeline |\r\t\t\tcompletionSemaphore := Semaphore new.\r\t\t\tpipeline background\r\t\t\t\tifTrue: [completionSemaphore signal "no wait"]\r\t\t\t\tifFalse: [pipeline when: #complete send: #signal to: completionSemaphore].\r\t\t\tself evaluatePipeline: pipeline.\r\t\t\tcompletionSemaphore wait]].\r\tlastForegroundPipeline ifNil: [self notifyPrompt].\r\tself resetSafeToExitFlag.\r\t^ aPipelineCollection\r',			#stamp : 'dtl 9/3/2010 17:04',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1350' ],		#self : OmReference [ '1351' ],		#time : DateAndTime [ '2018-02-22T14:01:12.864131-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'evaluationProxyFor:input:output:error:',			#protocol : #'process proxy creation',			#sourceCode : 'evaluationProxyFor: aCommandString input: in output: out error: err\r\t"Answer a PipeableEvaluator on a doIt command, or nil."\r\r\t"CommandShell new evaluationProxyFor: \'Smalltalk\' input: nil output: nil error: nil"\r\t"CommandShell new evaluationProxyFor: \'BOGUS\' input: nil output: nil error: nil"\r\r\t| proxy |\r\tproxy := ExpressionEvaluator\r\t\t\t\tcommand: aCommandString\r\t\t\t\tpipeFrom: in\r\t\t\t\tpipeTo: out\r\t\t\t\terrorPipelineStream: err.\r\t^ proxy\r',			#stamp : 'dtl 11/21/2006 09:21',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1351' ],		#self : OmReference [ '1352' ],		#time : DateAndTime [ '2018-02-22T14:01:12.864783-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'filterAndForward:',			#protocol : #'input character filtering',			#sourceCode : 'filterAndForward: aCharacter\r\t"Filter aCharacter, taking special action if needed. If a child process is active,\r\tforward aCharacter to the child and answer nil. Otherwise answer aCharacter."\r\r\t^ (self checkSttyFor: aCharacter asciiValue) ifNotNil:\r\t\t[keyboardConnector isNil\r\t\t\tifTrue:\r\t\t\t\t[aCharacter]\r\t\t\tifFalse:\r\t\t\t\t[keyboardConnector closed\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t[aCharacter]\r\t\t\t\t\tifFalse:\r\t\t\t\t\t\t[keyboardConnector nextPut: aCharacter; flush.\r\t\t\t\t\t\tnil]]]',			#stamp : 'dtl 6/9/2001 16:13',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1352' ],		#self : OmReference [ '1353' ],		#time : DateAndTime [ '2018-02-22T14:01:12.865389-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'filterAndForwardEvent:',			#protocol : #'input character filtering',			#sourceCode : 'filterAndForwardEvent: keyboardEvent \r\t"Filter keyboardEvent, taking special action if needed. If a child process\r\tis active, forward keyboardEvent to the child and answer nil. Otherwise\r\tanswer keyboardEvent."\r\r\t(keyboardConnector isNil or: [keyboardConnector closed])\r\t\tifTrue: [^ keyboardEvent]\r\t\tifFalse: [keyboardConnector\r\t\t\t\t\tnextPut: keyboardEvent keyValue asCharacter;\r\t\t\t\t\tflush.\r\t\t\t^ nil]',			#stamp : 'dtl 11/7/2007 07:01',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1353' ],		#self : OmReference [ '1354' ],		#time : DateAndTime [ '2018-02-22T14:01:12.866005-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'foregroundPipelineComplete:',			#protocol : #'event handling',			#sourceCode : 'foregroundPipelineComplete: aPipeline\r\t"This message is sent when aPipeline has completed evaluation.\r\tEnsure that the output and error event handlers have had a chance\r\tto completely empty the pipes prior to cleaning things up."\r\r\tself waitUntilPipesAreEmpty: aPipeline.\r\taPipeline closePipes; release.\r\tself keyboardConnector: nil.\r\t[self foregroundProxies removeAll: aPipeline]\r\t\ton: Error\r\t\tdo: ["exit command may cause the collection to be eliminated, hence an error"]\r',			#stamp : 'dtl 7/7/2006 09:19',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1354' ],		#self : OmReference [ '1355' ],		#time : DateAndTime [ '2018-02-22T14:01:12.866595-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #foregroundProxies,			#protocol : #accessing,			#sourceCode : 'foregroundProxies\r\t"All of my process proxies that are being evaluated in the foreground."\r\r\t^ foregroundProxies ifNil: [foregroundProxies := OrderedCollection new]\r',			#stamp : 'dtl 12/9/2006 10:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1355' ],		#self : OmReference [ '1356' ],		#time : DateAndTime [ '2018-02-22T14:01:12.867182-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'foregroundProxies:',			#protocol : #accessing,			#sourceCode : 'foregroundProxies: aCollection\r\t"All of my process proxies that are being evaluated in the foreground."\r\r\tforegroundProxies := aCollection\r',			#stamp : 'dtl 12/9/2006 10:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1356' ],		#self : OmReference [ '1357' ],		#time : DateAndTime [ '2018-02-22T14:01:12.86779-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'historyAt:',			#protocol : #'command history',			#sourceCode : 'historyAt: anInteger\r\r\t| bufferSize index |\r\tbufferSize := commandHistory size / 2.\r\t(anInteger > 0)\r\t\tifTrue:\r\t\t\t[index := bufferSize + 1 - historyIndex + anInteger * 2]\r\t\tifFalse:\r\t\t\t[index := bufferSize + anInteger * 2].\r\t((index > commandHistory size) | (index < 1))\r\t\tifTrue: [^ \'\']\r\t\tifFalse: [^ commandHistory at: index]\r',			#stamp : 'dtl 4/22/2001 10:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1357' ],		#self : OmReference [ '1358' ],		#time : DateAndTime [ '2018-02-22T14:01:12.868614-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #historyDepth,			#protocol : #defaults,			#sourceCode : 'historyDepth\r\t"Number of commands to retain in the command history list"\r\r\t^ 100',			#stamp : 'dtl 4/8/2001 15:26',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1358' ],		#self : OmReference [ '1359' ],		#time : DateAndTime [ '2018-02-22T14:01:12.869208-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #historyIndex,			#protocol : #accessing,			#sourceCode : 'historyIndex\r\r\thistoryIndex ifNil: [historyIndex := 1].\r\t^ historyIndex\r',			#stamp : 'dtl 4/3/2001 22:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1359' ],		#self : OmReference [ '1360' ],		#time : DateAndTime [ '2018-02-22T14:01:12.869798-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #home,			#protocol : #'working directory',			#sourceCode : 'home\r\t"Home directory. Use the environment variable, and set it in #initialize."\r\r\t^ self environment at: #HOME\r',			#stamp : 'dtl 12/29/2002 20:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1360' ],		#self : OmReference [ '1361' ],		#time : DateAndTime [ '2018-02-22T14:01:12.870446-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'if:then:else:',			#protocol : #'command scripting',			#sourceCode : 'if: aCommandStringOrScript then: successBlock else: failureBlock\r\t"Evaluate aCommandStringOrScript, then evaluate successBlock or failureBlock\r\tdepending on the exit status of the command or script. The blocks may use\r\teither zero or one argument. If a single argument is used, the collection of\r\tevaluated pipelines is passed to the block as an argument."\r\r\t"CommandShell new open;\r\t\tif: \'who\'\r\t\tthen: [\'the command succeeded\']\r\t\telse: [\'the command failed\']"\r\t"CommandShell new\r\t\tif: \'who\r\t\t\tls NOSUCHFILE\r\t\t\tpwd\'\r\t\tthen: [\'the script succeeded\']\r\t\telse: [\'the script failed\']"\r\t"CommandShell new\r\t\tif: \'who\r\t\t\tls NOSUCHFILE\r\t\t\tpwd\'\r\t\tthen: [:p | \'the script succeeded \', p printString]\r\t\telse: [:p | \'the script failed \', p printString]"\r\r\t| pipelines |\r\tpipelines := self script: aCommandStringOrScript\r\t\tonFailureDo: [:p | (failureBlock numArgs == 0)\r\t\t\t\t\t\tifTrue: [^ failureBlock value]\r\t\t\t\t\t\tifFalse: [^ failureBlock value: p]].\r\t(successBlock numArgs == 0)\r\t\tifTrue: [^ successBlock value]\r\t\tifFalse: [^ successBlock value: pipelines]\r',			#stamp : 'dtl 3/18/2003 23:12',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1361' ],		#self : OmReference [ '1362' ],		#time : DateAndTime [ '2018-02-22T14:01:12.871053-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\tself installCommands.\r\tself setHomeDirectory\r',			#stamp : 'dtl 12/29/2002 20:00',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1362' ],		#self : OmReference [ '1363' ],		#time : DateAndTime [ '2018-02-22T14:01:12.871645-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'installCommand:',			#protocol : #initialize-release,			#sourceCode : 'installCommand: aShellBuiltin\r\r\tself builtinCommands at: aShellBuiltin name put: aShellBuiltin',			#stamp : 'dtl 12/27/2001 12:24',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1363' ],		#self : OmReference [ '1364' ],		#time : DateAndTime [ '2018-02-22T14:01:12.872248-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #installCommands,			#protocol : #initialize-release,			#sourceCode : 'installCommands\r\r\tself installCommands: self defaultBuiltinCommands\r',			#stamp : 'dtl 7/14/2002 12:05',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1364' ],		#self : OmReference [ '1365' ],		#time : DateAndTime [ '2018-02-22T14:01:12.872863-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'installCommands:',			#protocol : #initialize-release,			#sourceCode : 'installCommands: aCommandArray\r\r\tself builtinCommands: (ShellBuiltin commandDictionaryFor: self commands: aCommandArray)\r',			#stamp : 'dtl 7/14/2002 12:05',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1365' ],		#self : OmReference [ '1366' ],		#time : DateAndTime [ '2018-02-22T14:01:12.873443-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #interruptCharacterValue,			#protocol : #'input character filtering',			#sourceCode : 'interruptCharacterValue\r\t"<ctl>-C"\r\r\t^ 3',			#stamp : 'dtl 6/7/2001 23:17',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1366' ],		#self : OmReference [ '1367' ],		#time : DateAndTime [ '2018-02-22T14:01:12.874315-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #invalidCommandMessage,			#protocol : #defaults,			#sourceCode : 'invalidCommandMessage\r\r\t^ \'invalid command\', Character cr asString',			#stamp : 'dtl 4/8/2001 15:11',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1367' ],		#self : OmReference [ '1368' ],		#time : DateAndTime [ '2018-02-22T14:01:12.874931-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'isBuiltInCommand:',			#protocol : #testing,			#sourceCode : 'isBuiltInCommand: aCommandString\r\t"Answer true if aCommandString can be evaluated as a built in command."\r\r\t"CommandShell new initialize isBuiltInCommand: \'help this should answer true\'"\r\t"CommandShell new initialize isBuiltInCommand: \'this should answer false\'"\r\r\t^ self builtinCommands includesKey: (aCommandString copyUpTo: Character space)',			#stamp : 'dtl 9/26/2009 13:15',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1368' ],		#self : OmReference [ '1369' ],		#time : DateAndTime [ '2018-02-22T14:01:12.875525-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'isEndOfFile:',			#protocol : #'input character filtering',			#sourceCode : 'isEndOfFile: anInteger\r\r\t^ anInteger == self endOfFileCharacterValue\r',			#stamp : 'dtl 6/7/2001 23:20',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1369' ],		#self : OmReference [ '1370' ],		#time : DateAndTime [ '2018-02-22T14:01:12.876118-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'isExcludedFromHistory:',			#protocol : #testing,			#sourceCode : 'isExcludedFromHistory: commandString\r\t"Answer true if commandString should not be remembered in the history list. The \'fc\'\r\tand \'history\' commands should be excluded."\r\r\t^ (\'fc*\' match: commandString)\r\t\tor: [\'history*\' match: commandString]',			#stamp : 'dtl 4/7/2001 13:04',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1370' ],		#self : OmReference [ '1371' ],		#time : DateAndTime [ '2018-02-22T14:01:12.876703-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #isExternalProcess,			#protocol : #testing,			#sourceCode : 'isExternalProcess\r\t"Answer true if the process which I represent is an external OSProcess. For protocol\r\tcompatibility with PipeJunction."\r\r\t^ false',			#stamp : 'dtl 4/19/2003 09:13',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1371' ],		#self : OmReference [ '1372' ],		#time : DateAndTime [ '2018-02-22T14:01:12.877291-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'isInterrupt:',			#protocol : #'input character filtering',			#sourceCode : 'isInterrupt: anInteger\r\r\t^ anInteger == self interruptCharacterValue\r',			#stamp : 'dtl 6/7/2001 23:21',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1372' ],		#self : OmReference [ '1373' ],		#time : DateAndTime [ '2018-02-22T14:01:12.877927-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'isOneWordCommentString:',			#protocol : #testing,			#sourceCode : 'isOneWordCommentString: aCommandString\r\t"Answer true if aCommandString is one word beginning with $#, or if it is an empty string."\r\r\t"CommandShell new isOneWordCommentString: \'#oneWordComment\'"\r\t"CommandShell new isOneWordCommentString: \' #oneWordComment\'"\r\t"CommandShell new isOneWordCommentString: \' #oneWordComment \'"\r\t"CommandShell new isOneWordCommentString: \'#three word comment\'"\r\t"CommandShell new isOneWordCommentString: \'not a comment\'"\r\t"CommandShell new isOneWordCommentString: \'notAComment\'"\r\t"CommandShell new isOneWordCommentString: \'\'"\r\r\t| s |\r\ts := CommandShell withBlanksTrimmed: aCommandString.\r\t^ s isEmpty\r\t\tor: [(s first == self shellSyntax commentChar)\r\t\t\tand: [(Scanner new scanTokens: s) size == 1]]\r',			#stamp : 'dtl 1/29/2013 20:24',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1373' ],		#self : OmReference [ '1374' ],		#time : DateAndTime [ '2018-02-22T14:01:12.878503-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #keyboardConnector,			#protocol : #accessing,			#sourceCode : 'keyboardConnector\r\t"If nil, then my views should behave normally. If a WriteStream, then my\r\tviews should attempt to forward all keyboard inputs to the WriteStream.\r\tThis is to permit the keyboard to be connected to an externally executing\r\tprocess, then reconnected to its normal functions when the external process\r\tis complete."\r\r\r\t^ keyboardConnector',			#stamp : 'dtl 4/22/2001 18:49',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1374' ],		#self : OmReference [ '1375' ],		#time : DateAndTime [ '2018-02-22T14:01:12.879108-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'keyboardConnector:',			#protocol : #accessing,			#sourceCode : 'keyboardConnector: aWriteStreamOrNil\r\t"If nil, then my views should behave normally. If a WriteStream, then my\r\tviews should attempt to forward all keyboard inputs to the WriteStream.\r\tThis is to permit the keyboard to be connected to an externally executing\r\tprocess, then reconnected to its normal functions when the external process\r\tis complete."\r\r\tkeyboardConnector := aWriteStreamOrNil\r',			#stamp : 'dtl 4/22/2001 18:56',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1375' ],		#self : OmReference [ '1376' ],		#time : DateAndTime [ '2018-02-22T14:01:12.88-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'makeVmIn:',			#protocol : #'VM building',			#sourceCode : 'makeVmIn: buildDirectoryPathName\r\t"Rebuild the virtual machine and plugins in the buildDirectoryPathName\r\tdirectory. If the build is successful, save the image and restart using the\r\tnew VM. This assumes that the currently executing VM is either located in,\r\tor linked to, the buildDirectoryPathName directory."\r\r\t"CommandShell makeVmIn: CommandShell defaultPathString, CommandShell pathSeparator, \'build\'"\r\r\tself canAccessOSProcess\r\t\tifFalse:\r\t\t\t[^ self notify: \'OSProcess not available or OSProcess plugin not functioning\'].\r\tself if: \'cd \', buildDirectoryPathName\r\t\tthen:\r\t\t\t[self if: \'make\'\r\t\t\t\tthen:\r\t\t\t\t\t[self script: \'echo make completed successfully, restarting VM; OSProcess quitAndRestart !\']\r\t\t\t\telse:\r\t\t\t\t\t[self script: \'echo make failed\']]\r\t\telse:\r\t\t\t[self script: \'echo cannot change directory to \', buildDirectoryPathName]\r',			#stamp : 'dtl 1/25/2013 19:06',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1376' ],		#self : OmReference [ '1377' ],		#time : DateAndTime [ '2018-02-22T14:01:12.880598-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #notifyAlternatePrompt,			#protocol : #'command prompt',			#sourceCode : 'notifyAlternatePrompt\r\t"Display $PS2"\r\r\tself changed: #alternatePrompt',			#stamp : 'dtl 1/20/2007 10:49',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1377' ],		#self : OmReference [ '1378' ],		#time : DateAndTime [ '2018-02-22T14:01:12.881201-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #notifyPrompt,			#protocol : #'command prompt',			#sourceCode : 'notifyPrompt\r\t"Display $PS1"\r\r\tself changed: #prompt',			#stamp : 'dtl 1/20/2007 10:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1378' ],		#self : OmReference [ '1379' ],		#time : DateAndTime [ '2018-02-22T14:01:12.881789-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #notifyRestorePrompt,			#protocol : #'command prompt',			#sourceCode : 'notifyRestorePrompt\r\t"Restore last prompt display"\r\r\tself changed: #restorePrompt',			#stamp : 'dtl 1/20/2007 10:49',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1379' ],		#self : OmReference [ '1380' ],		#time : DateAndTime [ '2018-02-22T14:01:12.882382-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #open,			#protocol : #initialize-release,			#sourceCode : 'open\r\r\t| tty |\r\ttty := CommandShellTranscript commandShell: self.\r\ttty open.\r\t^ tty\r\r',			#stamp : 'dtl 1/20/2007 09:26',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1380' ],		#self : OmReference [ '1381' ],		#time : DateAndTime [ '2018-02-22T14:01:12.882974-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'openLabel:',			#protocol : #initialize-release,			#sourceCode : 'openLabel: aString \r\r\t| tty |\r\ttty := CommandShellTranscript commandShell: self.\r\ttty openLabel: aString.\r\t^ tty\r\r',			#stamp : 'dtl 12/11/2007 18:46',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1381' ],		#self : OmReference [ '1382' ],		#time : DateAndTime [ '2018-02-22T14:01:12.883575-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #outputStream,			#protocol : #accessing,			#sourceCode : 'outputStream\r\t"Answer the value of outputStream"\r\r\t^ outputStream ifNil: [outputStream := WriteStream on: String new]',			#stamp : 'dtl 2/24/2013 10:23',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1382' ],		#self : OmReference [ '1383' ],		#time : DateAndTime [ '2018-02-22T14:01:12.884224-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'outputStream:',			#protocol : #accessing,			#sourceCode : 'outputStream: anObject\r\t"Set the value of outputStream"\r\r\toutputStream := anObject',			#stamp : 'dtl 8/19/2006 13:14',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1383' ],		#self : OmReference [ '1384' ],		#time : DateAndTime [ '2018-02-22T14:01:12.884927-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'pipeableProxyFor:input:output:error:predecessorProxy:',			#protocol : #'process proxy creation',			#sourceCode : 'pipeableProxyFor: aCommandString input: in output: out error: err predecessorProxy: lastProxy\r\t"Answer a proxy for an external OS process, or for an internal builtin command,\r\tor for an evaluation string. The proxy is suitable for use in a command pipeline,\r\tpossibly mixing internal and external commands."\r\r\t"(CommandShell new pipeableProxyFor: \'#\'\'this is a doIt\'\' ! \' input: nil output: nil error: nil predecessorProxy: nil) value upToEnd"\r\t"(CommandShell new pipeableProxyFor: \'help\' input: nil output: nil error: nil predecessorProxy: nil) value upToEnd"\r\t"(CommandShell new pipeableProxyFor: \'cat /etc/hosts\' input: nil output: nil error: nil predecessorProxy: nil) value upToEnd"\r\r\t| errorPipelineStream cmd |\r\terrorPipelineStream := lastProxy ifNotNil: [lastProxy errorPipeForNextProxy].\r\t^ (((self doItProxyFor: aCommandString\t\t\t\t\t\t"try entire line as a Smalltalk expression"\r\t\t\tinput: in\r\t\t\toutput: out\r\t\t\terror: (err ifNil: [errorPipelineStream]))\r\t\tifNil: [self builtinCommandProxyFor: aCommandString\t"is it a shell builtin?"\r\t\t\t\tinput: in\r\t\t\t\toutput: out\r\t\t\t\terror: (err ifNil: [errorPipelineStream])])\r\t\t\tifNil: [self processProxyFor: aCommandString\t\t\t"then it must be an external command"\r\t\t\t\t\tinput: in\r\t\t\t\t\toutput: out\r\t\t\t\t\terror: err\r\t\t\t\t\tpredecessorProxy: lastProxy])\r\t\t\t\tifNil: [cmd := (aCommandString findTokens: \' \') first.\t\t"otherwise create evaluator to print error message"\r\t\t\t\t\tself evaluationProxyFor: \'stderr nextPutAll: \'\'sqsh: \', cmd, \': command not found\'\'; cr. self fail\'\r\t\t\t\t\t\tinput: in\r\t\t\t\t\t\toutput: out\r\t\t\t\t\t\terror: err]\r',			#stamp : 'dtl 10/13/2008 21:22',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1384' ],		#self : OmReference [ '1385' ],		#time : DateAndTime [ '2018-02-22T14:01:12.885823-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'pipeline:',			#protocol : #evaluation,			#sourceCode : 'pipeline: aCommand\r\t"Find the individual commands in a command pipeline string, and execute them\r\tas a command pipeline. Answer a ProxyPipeline collection of processes in the pipeline."\r\r\t"(CommandShell new pipeline: \'ps | grep ps | wc\') last output"\r\t"CommandShell new pipeline: \'ls NOSUCHFILE * | dd | cat\'"\r\r\t| sema pipeline |\r\tsema := Semaphore new.\r\tpipeline := ProxyPipeline fromString: aCommand shell: self.\r\tpipeline when: #complete send: #signal to: sema.\r\tpipeline value.\r\tsema wait.\r\t^ pipeline\r',			#stamp : 'dtl 11/20/2006 08:10',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1385' ],		#self : OmReference [ '1386' ],		#time : DateAndTime [ '2018-02-22T14:01:12.886577-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'pipelineCollectionFrom:',			#protocol : #'command line parsing',			#sourceCode : 'pipelineCollectionFrom: aCommandString\r\t"Break aCommandString into individual pipeline command strings, and answer a\r\tcollection of process proxy pipelines."\r\r\t"CommandShell new pipelineCollectionFrom: \'who | cat | wc; ps -aef | cat& pwd | cat\'"\r\r\t| str pipelineCollection tokens strm cmd cmdWithTerm pipeline lastProxy |\r\tstr := CommandShell withBlanksTrimmed: aCommandString.\r\tpipelineCollection := OrderedCollection new.\r\t(self shellSyntax isComment: str)\r\t\tifFalse:\r\t\t\t[tokens := str findTokens: \';&\' keep: \';&\'.\r\t\t\tstrm := ReadStream on: tokens.\r\t\t\t[strm atEnd]\r\t\t\t\twhileFalse:\r\t\t\t\t\t[cmd := CommandShell withBlanksTrimmed: strm next.\r\t\t\t\t\t(self shellSyntax isComment: cmd)\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[strm atEnd\r\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t[((cmd size == 1) and: [((cmd at: 1) == $;) | ((cmd at: 1) == $&)])\r\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t["Special case, user has entered \';<cr>\' or \'&<cr>\'"\r\t\t\t\t\t\t\t\t\t\t\tcmd := cmdWithTerm := \'\']\r\t\t\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t\t\t[cmdWithTerm := cmd]]\r\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t[cmdWithTerm := cmd, strm peek].\r\t\t\t\t\t\t\tself saveInHistoryList: cmdWithTerm.\r\t\t\t\t\t\t\t(cmdWithTerm size > 0)\r\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t[pipeline := ProxyPipeline fromString: cmd shell: self.\r\t\t\t\t\t\t\t\t\tpipeline background:\r\t\t\t\t\t\t\t\t\t\t(strm next = self shellSyntax noWaitToken).\r\t\t\t\t\t\t\t\t\tlastProxy := pipeline last.\r\t\t\t\t\t\t\t\t\tlastProxy ifNil:\r\t\t\t\t\t\t\t\t\t\t[self inform: \'cannot access system\'.\r\t\t\t\t\t\t\t\t\t\t^ nil].\r\t\t\t\t\t\t\t\t\tlastProxy outputPipeForNextProxy\r\t\t\t\t\t\t\t\t\t\tifNotNil:\r\t\t\t\t\t\t\t\t\t\t\t[lastProxy setNonBlockingOutput].\r\t\t\t\t\t\t\t\t\tpipelineCollection add: pipeline]]]].\r\t^ pipelineCollection\r',			#stamp : 'dtl 1/29/2013 20:25',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1386' ],		#self : OmReference [ '1387' ],		#time : DateAndTime [ '2018-02-22T14:01:12.887165-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #pollingDelayTime,			#protocol : #defaults,			#sourceCode : 'pollingDelayTime\r\t"For various polling loops, number of milliseconds to delay"\r\r\t^ 50\r',			#stamp : 'dtl 6/4/2006 18:01',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1387' ],		#self : OmReference [ '1388' ],		#time : DateAndTime [ '2018-02-22T14:01:12.887766-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'processCommand:',			#protocol : #evaluation,			#sourceCode : 'processCommand: aCommandString\r\t"Evaluate aCommandString in a separate Smalltalk process. This permits the\r\tuser interface to remain responsive."\r\r\t^self processCommand: aCommandString echo: true\r',			#stamp : 'dtl 9/15/2012 18:59',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1388' ],		#self : OmReference [ '1389' ],		#time : DateAndTime [ '2018-02-22T14:01:12.88837-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'processCommand:echo:',			#protocol : #evaluation,			#sourceCode : 'processCommand: aCommandString echo: showCommand\r\t"Evaluate aCommandString in a separate Smalltalk process. This permits the\r\tuser interface to remain responsive. If showCommand is true, update dependent\r\tviews in order to display the command."\r\r\tself commandLineProcesses add:\r\t\t([self command: aCommandString echo: showCommand.\r\t\tself commandLineProcesses\r\t\t\t\tremove: Processor activeProcess\r\t\t\t\tifAbsent: []] forkAt: Processor userBackgroundPriority)\r',			#stamp : 'dtl 9/15/2012 18:55',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1389' ],		#self : OmReference [ '1390' ],		#time : DateAndTime [ '2018-02-22T14:01:12.889013-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #processProxies,			#protocol : #accessing,			#sourceCode : 'processProxies\r\t"All of my process proxies."\r\r\t^ self foregroundProxies, self backgroundProxies\r',			#stamp : 'dtl 11/23/2002 13:31',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1390' ],		#self : OmReference [ '1391' ],		#time : DateAndTime [ '2018-02-22T14:01:12.889791-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'processProxyFor:input:output:error:predecessorProxy:',			#protocol : #'process proxy creation',			#sourceCode : 'processProxyFor: aCommandString input: in output: out error: err predecessorProxy: lastProxy\r\t"Answer a proxy for an external OS command process. Note that the sender is\r\tresponsible for closing the input pipe. Under certain conditions, reading up to\r\tend on a proxy can deadlock the VM if the input pipe remains open."\r\r\t"CommandShell new processProxyFor: \'/bin/sh\' input: nil output: nil error: nil predecessorProxy: nil"\r\r\t| input newInputPipe errorPipelineStream p proxy |\r\tself canAccessOSProcess\r\t\tifFalse:\r\t\t\t["Answer a doIt proxy with an error message. Call it this way to make sure that\r\t\t\tthe error streams get wired up correctly"\r\t\t\tp := self pipeableProxyFor: \'String new: 0 ! \'\r\t\t\t\t\tinput: in\r\t\t\t\t\toutput: out\r\t\t\t\t\terror: err\r\t\t\t\t\tpredecessorProxy: lastProxy.\r\t\t\tp errorPipelineStream nextPutAll:\r\t\t\t\t\'cannot access system to run \'\'\', aCommandString, \'\'\'\', Character cr asString.\r\t\t\t^ p].\r\t((in isNil or: [lastProxy isNil]) or: [in isPipe not])\r\t\tifTrue:\r\t\t\t[input := in]\r\t\tifFalse:\r\t\t\t["Input from a command pipeline"\r\t\t\t(in isKindOf: InternalPipe)\r\t\t\t\tifTrue:\r\t\t\t\t\t["The input stream is not an external OS pipe. Need to create one,\r\t\t\t\t\tand move the contents of the in stream into the new OSPipe prior\r\t\t\t\t\tto starting the external OS process."\r\t\t\t\t\tnewInputPipe := PipeJunction externalPipeClass blockingPipe.\r\t\t\t\t\tlastProxy replaceOutputStreamWith: newInputPipe writer.\r\t\t\t\t\tinput := newInputPipe reader]\r\t\t\t\tifFalse:\r\t\t\t\t\t[input := in reader]].\r\terrorPipelineStream := lastProxy ifNotNil: [lastProxy errorPipeForNextProxy].\r\tproxy := PipeableOSProcess\r\t\tcommandNoEvaluate: aCommandString\r\t\tenvironment: self environment\r\t\tworkingDir: self workingDirectory\r\t\tinput: input\r\t\toutput: out\r\t\terror: err\r\t\terrorPipelineStream: errorPipelineStream\r\t\tshellSyntax: self shellSyntax.\r\t(proxy isNil and: [newInputPipe notNil])\r\t\tifTrue: [newInputPipe closeReader]. "replacement pipe will not be read, so close its output"\r\t^ proxy\r',			#stamp : 'dtl 10/14/2008 20:11',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1391' ],		#self : OmReference [ '1392' ],		#time : DateAndTime [ '2018-02-22T14:01:12.890382-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #promptString,			#protocol : #accessing,			#sourceCode : 'promptString\r\t"The primary command prompt string, equivalent to $PS1 in a Unix shell"\r\r\t^ promptString ifNil: [promptString := self defaultPromptString]\r',			#stamp : 'dtl 6/17/2002 23:45',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1392' ],		#self : OmReference [ '1393' ],		#time : DateAndTime [ '2018-02-22T14:01:12.89098-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'promptString:',			#protocol : #accessing,			#sourceCode : 'promptString: aString\r\t"The primary command prompt string, equivalent to $PS1 in a Unix shell"\r\r\tpromptString := aString\r',			#stamp : 'dtl 6/17/2002 23:47',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1393' ],		#self : OmReference [ '1394' ],		#time : DateAndTime [ '2018-02-22T14:01:12.891863-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #promptStringTwo,			#protocol : #accessing,			#sourceCode : 'promptStringTwo\r\t"The secondary command prompt string, equivalent to $PS2 in a Unix shell"\r\r\t^ promptStringTwo ifNil: [promptStringTwo := self defaultPromptStringTwo]\r',			#stamp : 'dtl 6/17/2002 23:46',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1394' ],		#self : OmReference [ '1395' ],		#time : DateAndTime [ '2018-02-22T14:01:12.892453-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'promptStringTwo:',			#protocol : #accessing,			#sourceCode : 'promptStringTwo: aString\r\t"The secondary command prompt string, equivalent to $PS2 in a Unix shell"\r\r\tpromptStringTwo := aString\r',			#stamp : 'dtl 6/17/2002 23:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1395' ],		#self : OmReference [ '1396' ],		#time : DateAndTime [ '2018-02-22T14:01:12.893049-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'promptWhenComplete:',			#protocol : #'event handling',			#sourceCode : 'promptWhenComplete: aPipeline\r\r\tself waitUntilPipesAreEmpty: aPipeline.\r\tself notifyPrompt',			#stamp : 'dtl 1/20/2007 13:41',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1396' ],		#self : OmReference [ '1397' ],		#time : DateAndTime [ '2018-02-22T14:01:12.893643-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #readSyncSemaphore,			#protocol : #accessing,			#sourceCode : 'readSyncSemaphore\r\t"Used in MVC to pause the screen output when presenting a dialogue to the user"\r\r\treadSyncSemaphore ifNil: [readSyncSemaphore := Semaphore forMutualExclusion].\r\t^ readSyncSemaphore',			#stamp : 'dtl 6/25/2001 23:07',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1397' ],		#self : OmReference [ '1398' ],		#time : DateAndTime [ '2018-02-22T14:01:12.894228-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'readSyncSemaphore:',			#protocol : #accessing,			#sourceCode : 'readSyncSemaphore: aSemaphore\r\t"Used in MVC to pause the screen output when presenting a dialogue to the user"\r\r\treadSyncSemaphore := aSemaphore',			#stamp : 'dtl 6/25/2001 20:34',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1398' ],		#self : OmReference [ '1399' ],		#time : DateAndTime [ '2018-02-22T14:01:12.894912-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'redirectedPipeableProxyFor:predecessorProxy:',			#protocol : #'process proxy creation',			#sourceCode : 'redirectedPipeableProxyFor: aCommandString predecessorProxy: lastProxy\r\t"Answer a proxy for an external OS process, or for an internal builtin command,\r\tor for an evaluation string. The proxy is suitable for use in a command pipeline,\r\tpossibly mixing internal and external commands."\r\r\t"(CommandShell new redirectedPipeableProxyFor: \'#\'\'this is a doIt\'\' ! \'\r\t\t\t\t\t\t\tpredecessorProxy: nil) value upToEnd"\r\t"(CommandShell new redirectedPipeableProxyFor: \'help\'\r\t\t\t\t\t\t\tpredecessorProxy: nil) value upToEnd"\r\t"(CommandShell new redirectedPipeableProxyFor: \'cat /etc/hosts\'\r\t\t\t\t\t\t\tpredecessorProxy: nil) value upToEnd"\r\r\t| redirectedCommand nextProxy input |\r\tredirectedCommand := self shellSyntax\r\t\t\t\t\t\t\t\tredirectIOFor: aCommandString\r\t\t\t\t\t\t\t\tinDirectoryPath: self workingDirectory.\r\tlastProxy isNil\r\t\tifTrue:\r\t\t\t[input := redirectedCommand at: 2]\r\t\tifFalse:\r\t\t\t[(redirectedCommand at: 2) isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[input := lastProxy outputPipeForNextProxy]\r\t\t\t\tifFalse:\r\t\t\t\t\t[lastProxy replaceOutputStreamWith: nil.\r\t\t\t\t\tinput := redirectedCommand at: 2]].\r\tnextProxy := self pipeableProxyFor: (redirectedCommand at: 1)\r\t\tinput: input\r\t\toutput: (redirectedCommand at: 3)\r\t\terror: (redirectedCommand at: 4)\r\t\tpredecessorProxy: lastProxy.\r\t^ nextProxy handleRedirectedOutputOf: lastProxy\r',			#stamp : 'dtl 4/8/2006 18:18',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1399' ],		#self : OmReference [ '1400' ],		#time : DateAndTime [ '2018-02-22T14:01:12.895516-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'registerBackgroundCompletionEventsFor:commandIndex:',			#protocol : #'event registration',			#sourceCode : 'registerBackgroundCompletionEventsFor: aPipeline commandIndex: index\r\t"When an event driven pipeline is complete, it will trigger #complete."\r\r\taPipeline when: #complete\r\t\tsend: #backgroundPipelineComplete:commandIndex:\r\t\tto: self\r\t\twithArguments: {aPipeline . index}\r\r',			#stamp : 'dtl 1/20/2007 13:46',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1400' ],		#self : OmReference [ '1401' ],		#time : DateAndTime [ '2018-02-22T14:01:12.896137-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'registerBackgroundPipeline:',			#protocol : #evaluation,			#sourceCode : 'registerBackgroundPipeline: aPipeline\r\t"Register aPipeline and answer an index number identifier."\r\r\t| index |\r\taPipeline background\r\t\tifTrue:\r\t\t\t["Find available slot in registry, expanding if needed"\r\t\t\tindex := self backgroundPipelines identityIndexOf: nil.\r\t\t\t(index > 0)\r\t\t\t\tifTrue:\r\t\t\t\t\t[self backgroundPipelines at: index put: aPipeline.\r\t\t\t\t\t^ index]\r\t\t\t\tifFalse:\r\t\t\t\t\t[self backgroundPipelines addLast: aPipeline.\r\t\t\t\t\t^ backgroundPipelines size]]\r\t\tifFalse:\r\t\t\t[self error: \'expected a background pipeline\']\r',			#stamp : 'dtl 12/15/2002 16:48',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1401' ],		#self : OmReference [ '1402' ],		#time : DateAndTime [ '2018-02-22T14:01:12.897006-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'registerErrorEventsFor:',			#protocol : #'event registration',			#sourceCode : 'registerErrorEventsFor: aPipeline\r\t"When an event driven PipeJunction has error data available, it will\r\ttrigger #errorDataReady."\r\r\taPipeline when: #errorDataReady\r\t\tsend: #copyAllErrorFrom:\r\t\tto: self\r\t\twith: aPipeline\r',			#stamp : 'dtl 1/13/2007 17:22',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1402' ],		#self : OmReference [ '1403' ],		#time : DateAndTime [ '2018-02-22T14:01:12.897615-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'registerForegroundCompletionEventsFor:',			#protocol : #'event registration',			#sourceCode : 'registerForegroundCompletionEventsFor: aPipeline\r\t"When an event driven pipeline is complete, it will trigger #complete."\r\r\taPipeline when: #complete\r\t\tsend: #foregroundPipelineComplete:\r\t\tto: self\r\t\twith: aPipeline\r',			#stamp : 'dtl 12/15/2002 13:29',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1403' ],		#self : OmReference [ '1404' ],		#time : DateAndTime [ '2018-02-22T14:01:12.8982-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'registerOutputEventsFor:',			#protocol : #'event registration',			#sourceCode : 'registerOutputEventsFor: aPipeline\r\t"When an event driven PipeJunction has new data available, it will\r\ttrigger #outputDataReady."\r\r\taPipeline when: #outputDataReady\r\t\tsend: #copyAllOutputFrom:\r\t\tto: self\r\t\twith: aPipeline\r',			#stamp : 'dtl 1/13/2007 17:22',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1404' ],		#self : OmReference [ '1405' ],		#time : DateAndTime [ '2018-02-22T14:01:12.898796-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'registerPromptEventFor:',			#protocol : #'event registration',			#sourceCode : 'registerPromptEventFor: aPipeline\r\r\taPipeline when: #complete\r\t\tsend: #promptWhenComplete:\r\t\tto: self\r\t\twith: aPipeline\r',			#stamp : 'dtl 1/20/2007 13:45',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1405' ],		#self : OmReference [ '1406' ],		#time : DateAndTime [ '2018-02-22T14:01:12.899408-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #release,			#protocol : #initialize-release,			#sourceCode : 'release\r\r\tself startUpInNewSession.\r\t^ super release',			#stamp : 'dtl 6/24/2002 07:02',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1406' ],		#self : OmReference [ '1407' ],		#time : DateAndTime [ '2018-02-22T14:01:12.90003-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #resetSafeToExitFlag,			#protocol : #evaluation,			#sourceCode : 'resetSafeToExitFlag\r\t"When all foreground and background proxies are complete, the safeToExit\r\tflag may be set to true. The flag is set false when a snaphot command is\r\tevaluated, and is checked by any command which would cause Squeak to\r\texit. This prevents Squeak from automatically exiting when restarting the\r\timage."\r\r\t[[self foregroundProxies isEmpty not or: [self backgroundProxies isEmpty not]]\r\t\twhileTrue: [(Delay forMilliseconds: self pollingDelayTime * 2) wait].\r\tself safeToExit: true] forkAt: Processor userBackgroundPriority\r',			#stamp : 'dtl 6/4/2006 17:44',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1407' ],		#self : OmReference [ '1408' ],		#time : DateAndTime [ '2018-02-22T14:01:12.900648-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #safeToExit,			#protocol : #accessing,			#sourceCode : 'safeToExit\r\t"This is a guard variable to prevent the user from running a command line containing both\r\ta snapshot command and an exit command. This prevents the user from entering a command\r\tsuch as \'snapshot; exit\' which would cause the image to immediately exit when next restarted."\r\r\t^ safeToExit ifNil: [safeToExit := true]\r',			#stamp : 'dtl 7/14/2002 15:56',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1408' ],		#self : OmReference [ '1409' ],		#time : DateAndTime [ '2018-02-22T14:01:12.901231-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'safeToExit:',			#protocol : #accessing,			#sourceCode : 'safeToExit: trueOrFalse\r\t"This is a guard variable to prevent the user from running a command line containing both\r\ta snapshot command and an exit command. This prevents the user from entering a command\r\tsuch as \'snapshot; exit\' which would cause the image to immediately exit when next restarted."\r\r\tsafeToExit := trueOrFalse\r',			#stamp : 'dtl 7/14/2002 15:56',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1409' ],		#self : OmReference [ '1410' ],		#time : DateAndTime [ '2018-02-22T14:01:12.901842-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'saveInHistoryList:',			#protocol : #'command history',			#sourceCode : 'saveInHistoryList: aCommandString\r\r\t((aCommandString size == 0) or: [self isExcludedFromHistory: aCommandString])\r\t\tifFalse:\r\t\t\t[self commandHistory add: self historyIndex printString; add: aCommandString.\r\t\t\thistoryIndex := historyIndex + 1]\r',			#stamp : 'dtl 4/7/2001 13:05',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1410' ],		#self : OmReference [ '1411' ],		#time : DateAndTime [ '2018-02-22T14:01:12.902803-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'scheduleToEvaluate:',			#protocol : #'command support',			#sourceCode : 'scheduleToEvaluate: aBlock\r\t"Evaluate aBlock, typically to create a new scheduled window. Make it work in\r\tboth Morphic and MVC. In Morphic, just evaluate aBlock, but in MVC, put it in\r\ta queue for evaluation within a control loop. This method may be sent from\r\ta process running independent of MVC controller scheduling.\r\t\r\tNewer Squeak images implement #addDeferredUIMessage in the current\r\tproject, eliminating the need for an #isMorphic test. This mechanism is not\r\tavailable for older images or for Pharo."\r\r\tCommandShell isMorphic\r\t\tifTrue: [WorldState addDeferredUIMessage: aBlock]\r\t\tifFalse: [(Smalltalk at: #ScheduledControllers) activeController addDeferredUIMessage: aBlock]',			#stamp : 'ThierryGoubier 9/20/2013 15:19',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1411' ],		#self : OmReference [ '1412' ],		#time : DateAndTime [ '2018-02-22T14:01:12.903402-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'script:',			#protocol : #'command scripting',			#sourceCode : 'script: aScriptString\r\t"A script is a String containing a list of commands separated by Character cr.\r\tEvaluate each command string in the array until a failure is encountered.\r\tAnswer the last collection of pipelines to have been evaluated."\r\r\t"CommandShell new open; \r\t\tscript: \'who\r\t\t\t\thelp\r\t\t\t\tls -l NOSUCHFILE\r\t\t\t\thelp\'"\r\r\t^ self script: aScriptString onFailureDo: [:p | p]\r\r',			#stamp : 'dtl 12/15/2002 18:50',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1412' ],		#self : OmReference [ '1413' ],		#time : DateAndTime [ '2018-02-22T14:01:12.904084-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'script:onFailureDo:',			#protocol : #'command scripting',			#sourceCode : 'script: aScriptString onFailureDo: aBlockWithZeroOrOneParameter\r\t"A script is a String containing a list of commands separated by Character cr.\r\tEvaluate each command in aScriptString until a failure is encountered.\r\tOn failure, answer the result of evaluating aBlockWithOneParameter with\r\tthe collection of evaluated pipelines as its parameter. Otherwise, answer the\r\tlast collection of pipelines to have been evaluated."\r\r\t"CommandShell new open; \r\t\tscript: \'who\r\t\t\t\thelp\r\t\t\t\tls -l NOSUCHFILE\r\t\t\t\thelp\'\r\t\tonFailureDo: [:p | \'the pipeline collection that failed was \', p printString]"\r\t"CommandShell new open; \r\t\tscript: \'who\r\t\t\t\thelp\r\t\t\t\tls\r\t\t\t\thelp\'\r\t\tonFailureDo: [:p | \'the pipeline collection that failed was \', p printString]"\r\t"CommandShell new open; \r\t\tscript: \'who\r\t\t\t\thelp\r\t\t\t\tls -l NOSUCHFILE\r\t\t\t\thelp\'\r\t\tonFailureDo: [\'the pipeline collection failed\']"\r\r\t| commandStream pipelines |\r\tcommandStream := ReadStream on:\r\t\t\t\t\t\t(aScriptString\r\t\t\t\t\t\t\tcopyReplaceAll: Character lf asString\r\t\t\t\t\t\t\twith: Character cr asString).\r\tpipelines := nil.\r\t[commandStream atEnd]\r\t\twhileFalse:\r\t\t\t[pipelines := self\r\t\t\t\tcommand: commandStream nextLine\r\t\t\t\tonFailureDo:\r\t\t\t\t\t[:p | (aBlockWithZeroOrOneParameter numArgs == 0)\r\t\t\t\t\t\tifTrue: [^ aBlockWithZeroOrOneParameter value]\r\t\t\t\t\t\tifFalse: [^ aBlockWithZeroOrOneParameter value: p]]].\r\t^ pipelines\r\r',			#stamp : 'dtl 1/21/2007 20:19',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1413' ],		#self : OmReference [ '1414' ],		#time : DateAndTime [ '2018-02-22T14:01:12.904765-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'scriptDoAll:',			#protocol : #'command scripting',			#sourceCode : 'scriptDoAll: aScriptString\r\t"A script is a String containing a list of commands separated by Character cr.\r\tEvaluate each command in aScriptString. Ignore failures and force evaluation of\r\tall commands in the script. Answer the last pipeline collection to have been\r\tevaluated."\r\r\t"CommandShell new open; \r\t\tscriptDoAll: \'who\r\t\t\t\thelp\r\t\t\t\tls -l NOSUCHFILE\r\t\t\t\thelp\'"\r\r\t| commandStream lastPipelineCollection |\r\tcommandStream := ReadStream on:\r\t\t\t\t\t\t(aScriptString\r\t\t\t\t\t\t\tcopyReplaceAll: Character lf asString\r\t\t\t\t\t\t\twith: Character cr asString).\r\t[commandStream atEnd]\r\t\twhileFalse:\r\t\t\t[lastPipelineCollection := self command: commandStream nextLine].\r\t^ lastPipelineCollection\r\r',			#stamp : 'dtl 12/15/2002 18:47',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1414' ],		#self : OmReference [ '1415' ],		#time : DateAndTime [ '2018-02-22T14:01:12.905359-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #setHomeDirectory,			#protocol : #initialize-release,			#sourceCode : 'setHomeDirectory\r\r\tself environment.\r\t^ environment at: #HOME put: CommandShell defaultPathString\r',			#stamp : 'dtl 1/25/2013 19:07',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1415' ],		#self : OmReference [ '1416' ],		#time : DateAndTime [ '2018-02-22T14:01:12.905986-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #shellSyntax,			#protocol : #accessing,			#sourceCode : 'shellSyntax\r\t"A pluggable instance of a command processing syntax"\r\r\t^ shellSyntax ifNil: [shellSyntax := ShellSyntax new]',			#stamp : 'dtl 12/17/2001 11:34',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1416' ],		#self : OmReference [ '1417' ],		#time : DateAndTime [ '2018-02-22T14:01:12.90658-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'shellSyntax:',			#protocol : #accessing,			#sourceCode : 'shellSyntax: aSyntax\r\t"A pluggable instance of a command processing syntax"\r\r\tshellSyntax := aSyntax',			#stamp : 'dtl 9/8/2001 11:10',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1417' ],		#self : OmReference [ '1418' ],		#time : DateAndTime [ '2018-02-22T14:01:12.907173-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'splitPipelineCommands:',			#protocol : #'command support',			#sourceCode : 'splitPipelineCommands: aCommand\r\t"Answer a list of the individual commands in a command pipeline string,\r\tdelimited by the pipe character."\r\r\t^ self shellSyntax splitPipelineCommands: aCommand\r',			#stamp : 'dtl 1/20/2007 14:09',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1418' ],		#self : OmReference [ '1419' ],		#time : DateAndTime [ '2018-02-22T14:01:12.907797-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #startUpInNewSession,			#protocol : #initialize-release,			#sourceCode : 'startUpInNewSession\r\t"Do this if the image has been restarted, in which case all external process\r\treferences are invalid."\r\r\tself clearSemaphore.\r\tself terminateCommandLineProcesses.\r\tforegroundProxies := backgroundProxies := backgroundPipelines := nil.\r\tself keyboardConnector: nil\r',			#stamp : 'dtl 12/31/2002 11:53',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1419' ],		#self : OmReference [ '1420' ],		#time : DateAndTime [ '2018-02-22T14:01:12.908707-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #terminateCommandLineProcesses,			#protocol : #initialize-release,			#sourceCode : 'terminateCommandLineProcesses\r\r\t(self commandLineProcesses reject: [:e | e == Processor activeProcess])\r\t\tdo: [:p | p terminate].\r\tcommandLineProcesses := nil\r',			#stamp : 'dtl 12/15/2002 17:33',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1420' ],		#self : OmReference [ '1421' ],		#time : DateAndTime [ '2018-02-22T14:01:12.90933-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'tryEvaluatingAsSmalltalk:',			#protocol : #'command line parsing',			#sourceCode : 'tryEvaluatingAsSmalltalk: aCommandString\r\t"Attempt to treat aCommandString as a Smalltalk expression running in an\r\tevaluation process. Evaluate the proxy and set exit status to reflect failure\r\ton either the expression compilation or the runtime evaluation. Answer the\r\tprocess proxy."\r\r\t"CommandShell new tryEvaluatingAsSmalltalk: \'this expression should fail in the compiler\'"\r\t"CommandShell new tryEvaluatingAsSmalltalk: \'#this expressionShouldFailInRuntimeEvaluation\'"\r\t"CommandShell new tryEvaluatingAsSmalltalk: \'#thisIsAValidSymbolExpression\'"\r\t"CommandShell new tryEvaluatingAsSmalltalk: \'Smalltalk\'"\r\t"CommandShell new tryEvaluatingAsSmalltalk: \'#oneWordCommentShouldFail\'"\r\r\t| process |\r\tprocess := self evaluationProxyFor: aCommandString input: nil output: nil error: nil.\r\tprocess value.\r\tprocess closeErrorPipeline. "Last process in pipeline, so it can be closed."\r\t^ process',			#stamp : 'dtl 4/20/2003 15:35',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1421' ],		#self : OmReference [ '1422' ],		#time : DateAndTime [ '2018-02-22T14:01:12.909944-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'unRegisterBackgroundPipeline:at:',			#protocol : #evaluation,			#sourceCode : 'unRegisterBackgroundPipeline: aPipeline at: index\r\r\t(self backgroundPipelines at: index) == aPipeline\r\t\tifTrue: [self backgroundPipelines at: index put: nil]\r\t\tifFalse: [self error: \'inconsistent registry\']\r',			#stamp : 'dtl 12/15/2002 16:34',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1422' ],		#self : OmReference [ '1423' ],		#time : DateAndTime [ '2018-02-22T14:01:12.910582-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'waitForCommand:',			#protocol : #evaluation,			#sourceCode : 'waitForCommand: aCommandString\r\t"Evaluate aCommandString in a separate Process, and signal completionSemaphore\r\twhen complete. Answer a collection of evaluated pipelines, or nil if nothing was done."\r\r\t| sema pipelines lastPipeline |\r\tself changed: aCommandString.\r\tpipelines := self evaluateOrMakePipelinesFrom: aCommandString.\r\tpipelines isEmpty ifFalse:\r\t\t[lastPipeline := pipelines last.\r\t\tlastPipeline isComplete ifFalse:\r\t\t\t[sema := Semaphore new.\r\t\t\tlastPipeline when: #complete\r\t\t\t\tsend: #signal\r\t\t\t\tto: sema.\r\t\t\t[self evaluatePipelines: pipelines] forkAt: Processor userBackgroundPriority.\r\t\t\tlastPipeline isComplete ifFalse: [sema wait].\r\t\t\tself waitUntilPipesAreEmpty: lastPipeline]].\r\t^ pipelines\r',			#stamp : 'dtl 9/15/2012 18:25',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1423' ],		#self : OmReference [ '1424' ],		#time : DateAndTime [ '2018-02-22T14:01:12.911197-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'waitUntilPipesAreEmpty:',			#protocol : #'event handling',			#sourceCode : 'waitUntilPipesAreEmpty: aPipeline\r\t"Some other Smalltalk process may be updating the pipes, or we may be\r\twaiting for data in an external OS pipe to be read into the image. Wait\r\tfor these to reach completion."\r\r\t[aPipeline pipesAreEmpty] whileFalse: [(Delay forMilliseconds: 100) wait]\r',			#stamp : 'dtl 10/3/2006 07:21',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1424' ],		#self : OmReference [ '1425' ],		#time : DateAndTime [ '2018-02-22T14:01:12.911832-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #workingDirectory,			#protocol : #'working directory',			#sourceCode : 'workingDirectory\r\r\t^ self shellSyntax workingDirectory\r\t\tifNil:\r\t\t\t[shellSyntax workingDirectory: CommandShell defaultPathString; workingDirectory]',			#stamp : 'dtl 1/25/2013 19:07',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1425' ],		#self : OmReference [ '1426' ],		#time : DateAndTime [ '2018-02-22T14:01:12.91245-03:00' ],		#trigger : OmReference [ '1205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShell,				#isMetaSide : false			},			#name : #'workingDirectory:',			#protocol : #'working directory',			#sourceCode : 'workingDirectory: aPathString\r\r\tself shellSyntax workingDirectory: aPathString\r',			#stamp : 'dtl 12/16/2001 20:15',			#package : #CommandShell-base		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:12.975838-03:00' ],		#prior : OmReference [ '1426' ],		#self : OmReference [ '1427' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'CommandShell-Morphic-dtl.2'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1427' ],		#self : OmReference [ '1428' ],		#time : DateAndTime [ '2018-02-22T14:01:13.073101-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PluggableTextMorph',				#traitCompositionSource : '{}',				#definitionSource : 'PluggableTextMorph subclass: #ShellWindowMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ShellWindowMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellWindowMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellWindowMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellWindowMorph,					#isMetaSide : false				},				#parent : @7,				#content : 'I am a simple teletype shell session morph, providing a view on an instance of CommandShell.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a simple teletype shell session morph, providing a view on an instance of CommandShell.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1428' ],		#self : OmReference [ '1429' ],		#time : DateAndTime [ '2018-02-22T14:01:13.074811-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpCategoryAddition {		#classCategoryName : #CommandShell-Morphic,		#affectedPackageName : #CommandShell-Morphic	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1429' ],		#self : OmReference [ '1430' ],		#time : DateAndTime [ '2018-02-22T14:01:13.11176-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PluggableTextMorph',				#traitCompositionSource : '{}',				#definitionSource : 'PluggableTextMorph subclass: #ShellWindowMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Morphic\''			},			#name : #ShellWindowMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellWindowMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellWindowMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellWindowMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a simple teletype shell session morph, providing a view on an instance of CommandShell.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Morphic,			#package : #CommandShell-Morphic,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1430' ],		#self : OmReference [ '1431' ],		#time : DateAndTime [ '2018-02-22T14:01:13.116762-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TextMorphForEditView',				#traitCompositionSource : '{}',				#definitionSource : 'TextMorphForEditView subclass: #TtyTextMorphForEditView\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TtyTextMorphForEditView,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TtyTextMorphForEditView class\r\tinstanceVariableNames: \'\''				},				#name : #'TtyTextMorphForEditView class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TtyTextMorphForEditView,					#isMetaSide : false				},				#parent : @8,				#content : 'I add a keyboard hook to a TextMorphForEditView to allow filtering of keystrokes for a simple tty terminal emulator.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I add a keyboard hook to a TextMorphForEditView to allow filtering of keystrokes for a simple tty terminal emulator.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1431' ],		#self : OmReference [ '1432' ],		#time : DateAndTime [ '2018-02-22T14:01:13.118977-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TextMorphForEditView',				#traitCompositionSource : '{}',				#definitionSource : 'TextMorphForEditView subclass: #TtyTextMorphForEditView\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Morphic\''			},			#name : #TtyTextMorphForEditView,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TtyTextMorphForEditView class\r\tinstanceVariableNames: \'\''				},				#name : #'TtyTextMorphForEditView class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TtyTextMorphForEditView,					#isMetaSide : false				},				#parent : @8,				#content : 'I add a keyboard hook to a TextMorphForEditView to allow filtering of keystrokes for a simple tty terminal emulator.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Morphic,			#package : #CommandShell-Morphic,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1432' ],		#self : OmReference [ '1433' ],		#time : DateAndTime [ '2018-02-22T14:01:13.152863-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellWindowMorph class',				#isMetaSide : true			},			#name : #open,			#protocol : #'instance creation',			#sourceCode : 'open\r\t"Open a new CommandShell, and answer the instance of ShellWindowMorph which it uses."\r\r\t"ShellWindowMorph open"\r\r\t^ CommandShell open dependents at: 2',			#stamp : 'dtl 1/21/2007 09:57',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1433' ],		#self : OmReference [ '1434' ],		#time : DateAndTime [ '2018-02-22T14:01:13.154875-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #accept,			#protocol : #'menu commands',			#sourceCode : 'accept\r\r\tself model cr; flush; processCommand: self commandLineInput asString echo: false\r',			#stamp : 'dtl 9/15/2012 18:59',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1434' ],		#self : OmReference [ '1435' ],		#time : DateAndTime [ '2018-02-22T14:01:13.156733-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #appendEntry,			#protocol : #updating,			#sourceCode : 'appendEntry\r\r\t| str |\r\t"Append the text in the model\'s writeStream to the editable text. "\r\ttextMorph asText size > model characterLimit ifTrue:\r\t\t["Knock off first half of text"\r\t\tself selectInvisiblyFrom: 1 to: textMorph asText size // 2.\r\t\tself replaceSelectionWith: Text new].\r\tself selectInvisiblyFrom: textMorph asText size + 1 to: textMorph asText size.\r\tstr := model contents.\r\t(str size > 0) ifTrue:\r\t\t[self replaceSelectionWith: (Text\r\t\t\tstring: str\r\t\t\tattribute: (TextFontChange fontNumber: self textStyle defaultFontIndex)).\r\t\tself selectInvisiblyFrom: textMorph asText size + 1 to: textMorph asText size.\r\t\tmodel reset]\r\r',			#stamp : 'dtl 1/21/2007 13:02',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1435' ],		#self : OmReference [ '1436' ],		#time : DateAndTime [ '2018-02-22T14:01:13.157889-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #commandLineInput,			#protocol : #'command input',			#sourceCode : 'commandLineInput\r\r\t^ (self text copyFrom: self positionAfterPromptString to: self text size) asString.\r\r',			#stamp : 'dtl 3/18/2001 18:17',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1436' ],		#self : OmReference [ '1437' ],		#time : DateAndTime [ '2018-02-22T14:01:13.15882-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #positionAfterPromptString,			#protocol : #'command input',			#sourceCode : 'positionAfterPromptString\r\t"Answer the index of the first character after the last prompt string in my text. If\r\tnot found, then assume that the contents of the text are all intended to be command\r\tinput."\r\r\t| t loc |\r\tt := self text.\r\t(1 to: (t size - model promptString size))\r\t\treverseDo: [:i |\r\t\t\t((loc := t findString: model promptString startingAt: i) ~= 0)\r\t\t\t\tifTrue: [^ loc + model promptString size]].\r\t^ 1\r',			#stamp : 'dtl 4/7/2001 12:21',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1437' ],		#self : OmReference [ '1438' ],		#time : DateAndTime [ '2018-02-22T14:01:13.160292-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #'setText:',			#protocol : #'model access',			#sourceCode : 'setText: aText\r\tscrollBar setValue: 0.0.\r\ttextMorph\r\t\tifNil: [textMorph := TtyTextMorphForEditView new\r\t\t\t\t\t\tcontents: aText wrappedTo: self innerBounds width-6.\r\t\t\t\ttextMorph setEditView: self.\r\t\t\t\ttextMorph setTextStyle: self textStyle.\r\t\t\t\tscroller addMorph: textMorph]\r\t\tifNotNil: [textMorph newContents: aText].\r\tself hasUnacceptedEdits: false.\r\tself setScrollDeltas.',			#stamp : 'dtl 1/21/2007 10:33',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1438' ],		#self : OmReference [ '1439' ],		#time : DateAndTime [ '2018-02-22T14:01:13.16137-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #textStyle,			#protocol : #'model access',			#sourceCode : 'textStyle\r\t"A fixed width font for the text morph"\r\r\t^ (TextStyle named: \'DefaultFixedTextStyle\')\r\t\tifNil: [TextStyle default]',			#stamp : 'dtl 11/18/2009 22:20',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1439' ],		#self : OmReference [ '1440' ],		#time : DateAndTime [ '2018-02-22T14:01:13.164583-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellWindowMorph,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: something\r\r\t(something == #doCommand)\r\t\tifTrue:\r\t\t\t[^ self accept].\r\t(something == #exit)\r\t\tifTrue:\r\t\t\t[^ self owner release; delete].\r\t^ super update: something\r',			#stamp : 'dtl 6/3/2001 19:02',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1440' ],		#self : OmReference [ '1441' ],		#time : DateAndTime [ '2018-02-22T14:01:13.1661-03:00' ],		#trigger : OmReference [ '1427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TtyTextMorphForEditView,				#isMetaSide : false			},			#name : #'keyStroke:',			#protocol : #editing,			#sourceCode : 'keyStroke: evt\r\r\t(self editView model filterAndForwardEvent: evt)\r\t\tifNotNil: [^ super keyStroke: evt]\r',			#stamp : 'dtl 11/2/2007 05:18',			#package : #CommandShell-Morphic		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:13.232106-03:00' ],		#prior : OmReference [ '1441' ],		#self : OmReference [ '1442' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'CommandShell-Piping-ThierryGoubier.20'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1442' ],		#self : OmReference [ '1443' ],		#time : DateAndTime [ '2018-02-22T14:01:13.375677-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OrderedCollection',				#traitCompositionSource : '{}',				#definitionSource : 'OrderedCollection subclass: #ProxyPipeline\r\tinstanceVariableNames: \'commandLine background completionSemaphore completionWatcher\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ProxyPipeline,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #commandLine,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #background,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #completionSemaphore,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #completionWatcher,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ProxyPipeline class\r\tinstanceVariableNames: \'\''				},				#name : #'ProxyPipeline class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ProxyPipeline,					#isMetaSide : false				},				#parent : @7,				#content : 'A collection of connected PipeJunctions, representing external OS processes or internal evaluators. This class exists primarily to make the functioning of a collection of command pipelines, some of which may be evaluated as asynchronous "background" processes, easier to understand.\r\rEvents triggered by my proxies are handled and forwarded in such a way that a client (such as a CommandShell) will receive events from a ProxyPipeline as if it were an individual PipeJunction.\r\rThe user of a ProxyPipeline is responsible for closing the external resources associated with the proxies by sending either #closePipes or #finalize.',				#stamp : 'dtl 12/13/2002 19:30'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A collection of connected PipeJunctions, representing external OS processes or internal evaluators. This class exists primarily to make the functioning of a collection of command pipelines, some of which may be evaluated as asynchronous "background" processes, easier to understand.\r\rEvents triggered by my proxies are handled and forwarded in such a way that a client (such as a CommandShell) will receive events from a ProxyPipeline as if it were an individual PipeJunction.\r\rThe user of a ProxyPipeline is responsible for closing the external resources associated with the proxies by sending either #closePipes or #finalize.',		#newStamp : 'dtl 12/13/2002 19:30'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1443' ],		#self : OmReference [ '1444' ],		#time : DateAndTime [ '2018-02-22T14:01:13.377253-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpCategoryAddition {		#classCategoryName : #CommandShell-Piping,		#affectedPackageName : #CommandShell-Piping	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1444' ],		#self : OmReference [ '1445' ],		#time : DateAndTime [ '2018-02-22T14:01:13.405198-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OrderedCollection',				#traitCompositionSource : '{}',				#definitionSource : 'OrderedCollection subclass: #ProxyPipeline\r\tinstanceVariableNames: \'commandLine background completionSemaphore completionWatcher\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #ProxyPipeline,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #commandLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #background,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #completionSemaphore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ProxyPipeline,						#isMetaSide : false					},					#name : #completionWatcher,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ProxyPipeline class\r\tinstanceVariableNames: \'\''				},				#name : #'ProxyPipeline class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ProxyPipeline,					#isMetaSide : false				},				#parent : @8,				#content : 'A collection of connected PipeJunctions, representing external OS processes or internal evaluators. This class exists primarily to make the functioning of a collection of command pipelines, some of which may be evaluated as asynchronous "background" processes, easier to understand.\r\rEvents triggered by my proxies are handled and forwarded in such a way that a client (such as a CommandShell) will receive events from a ProxyPipeline as if it were an individual PipeJunction.\r\rThe user of a ProxyPipeline is responsible for closing the external resources associated with the proxies by sending either #closePipes or #finalize.',				#stamp : 'dtl 12/13/2002 19:30'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1445' ],		#self : OmReference [ '1446' ],		#time : DateAndTime [ '2018-02-22T14:01:13.420541-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #InternalPipe\r\tinstanceVariableNames: \'queue writerClosed nonBlockingMode\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #InternalPipe,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #InternalPipe,						#isMetaSide : false					},					#name : #queue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #InternalPipe,						#isMetaSide : false					},					#name : #writerClosed,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #InternalPipe,						#isMetaSide : false					},					#name : #nonBlockingMode,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'InternalPipe class\r\tinstanceVariableNames: \'\''				},				#name : #'InternalPipe class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #InternalPipe,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a first-in, first-out queue with streaming behavior. I behave similarly to an OSPipe,\rbut am implemented in the Smalltalk image rather than with external OS pipes. I can\rbehave either as a blocking pipe or as a nonblocking pipe, similar to an OS pipe with\rits reader end set in blocking or nonblocking mode.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a first-in, first-out queue with streaming behavior. I behave similarly to an OSPipe,\rbut am implemented in the Smalltalk image rather than with external OS pipes. I can\rbehave either as a blocking pipe or as a nonblocking pipe, similar to an OS pipe with\rits reader end set in blocking or nonblocking mode.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1446' ],		#self : OmReference [ '1447' ],		#time : DateAndTime [ '2018-02-22T14:01:13.423278-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stream',				#traitCompositionSource : '{}',				#definitionSource : 'Stream subclass: #InternalPipe\r\tinstanceVariableNames: \'queue writerClosed nonBlockingMode\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #InternalPipe,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #InternalPipe,						#isMetaSide : false					},					#name : #queue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #InternalPipe,						#isMetaSide : false					},					#name : #writerClosed,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #InternalPipe,						#isMetaSide : false					},					#name : #nonBlockingMode,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'InternalPipe class\r\tinstanceVariableNames: \'\''				},				#name : #'InternalPipe class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #InternalPipe,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a first-in, first-out queue with streaming behavior. I behave similarly to an OSPipe,\rbut am implemented in the Smalltalk image rather than with external OS pipes. I can\rbehave either as a blocking pipe or as a nonblocking pipe, similar to an OS pipe with\rits reader end set in blocking or nonblocking mode.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1447' ],		#self : OmReference [ '1448' ],		#time : DateAndTime [ '2018-02-22T14:01:13.428165-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #RemoteTask\r\tinstanceVariableNames: \'task childProxy completionBlock aioHandler\'\r\tclassVariableNames: \'HeadlessChild Materializer Serializer SerializingStrategy\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #RemoteTask,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #task,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #childProxy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #completionBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #aioHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RemoteTask class\r\tinstanceVariableNames: \'\''				},				#name : #'RemoteTask class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RemoteTask,					#isMetaSide : false				},				#parent : @8,				#content : 'RemoteTask do: [2 + 2]\r\rA RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.\r\rThe block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.\r\rOn a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.\r\r',				#stamp : 'dtl 11/12/2011 23:26'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #HeadlessChild,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Materializer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Serializer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #SerializingStrategy,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RemoteTask do: [2 + 2]\r\rA RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.\r\rThe block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.\r\rOn a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.\r\r',		#newStamp : 'dtl 11/12/2011 23:26'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1448' ],		#self : OmReference [ '1449' ],		#time : DateAndTime [ '2018-02-22T14:01:13.43001-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #RemoteTask\r\tinstanceVariableNames: \'task childProxy completionBlock aioHandler\'\r\tclassVariableNames: \'HeadlessChild Materializer Serializer SerializingStrategy\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #RemoteTask,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #task,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #childProxy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #completionBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #aioHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RemoteTask class\r\tinstanceVariableNames: \'\''				},				#name : #'RemoteTask class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RemoteTask,					#isMetaSide : false				},				#parent : @8,				#content : 'RemoteTask do: [2 + 2]\r\rA RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.\r\rThe block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.\r\rOn a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.\r\r',				#stamp : 'dtl 11/12/2011 23:26'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #HeadlessChild,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Materializer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Serializer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #SerializingStrategy,					#parent : @8				}			],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1449' ],		#self : OmReference [ '1450' ],		#time : DateAndTime [ '2018-02-22T14:01:13.435923-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #PipeJunction\r\tinstanceVariableNames: \'pipeToInput pipeFromOutput errorPipelineStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PipeJunction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeJunction,						#isMetaSide : false					},					#name : #pipeToInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeJunction,						#isMetaSide : false					},					#name : #pipeFromOutput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeJunction,						#isMetaSide : false					},					#name : #errorPipelineStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PipeJunction class\r\tinstanceVariableNames: \'\''				},				#name : #'PipeJunction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PipeJunction,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a connector junction for input, output, and error pipelines. I obtain input from an input pipeline and, after possibly performing some kind of operation on the input objects, I send output to an output pipeline. I may also append objects onto an error pipeline.\r\rMy subclasses implement the operations on the objects which pass through a pipe junction.\r\rIn general, input pipes are connected to output pipes in a serial fashion, and error pipelines are shared by one or more instances of my subclasses.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a connector junction for input, output, and error pipelines. I obtain input from an input pipeline and, after possibly performing some kind of operation on the input objects, I send output to an output pipeline. I may also append objects onto an error pipeline.\r\rMy subclasses implement the operations on the objects which pass through a pipe junction.\r\rIn general, input pipes are connected to output pipes in a serial fashion, and error pipelines are shared by one or more instances of my subclasses.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1450' ],		#self : OmReference [ '1451' ],		#time : DateAndTime [ '2018-02-22T14:01:13.437771-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #PipeJunction\r\tinstanceVariableNames: \'pipeToInput pipeFromOutput errorPipelineStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #PipeJunction,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeJunction,						#isMetaSide : false					},					#name : #pipeToInput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeJunction,						#isMetaSide : false					},					#name : #pipeFromOutput,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeJunction,						#isMetaSide : false					},					#name : #errorPipelineStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PipeJunction class\r\tinstanceVariableNames: \'\''				},				#name : #'PipeJunction class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PipeJunction,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a connector junction for input, output, and error pipelines. I obtain input from an input pipeline and, after possibly performing some kind of operation on the input objects, I send output to an output pipeline. I may also append objects onto an error pipeline.\r\rMy subclasses implement the operations on the objects which pass through a pipe junction.\r\rIn general, input pipes are connected to output pipes in a serial fashion, and error pipelines are shared by one or more instances of my subclasses.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1451' ],		#self : OmReference [ '1452' ],		#time : DateAndTime [ '2018-02-22T14:01:13.442291-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeJunction',				#traitCompositionSource : '{}',				#definitionSource : 'PipeJunction subclass: #PipeableEvaluator\r\tinstanceVariableNames: \'argumentArray runState exitStatus outputHasBeenRedirected\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PipeableEvaluator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #argumentArray,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #runState,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #outputHasBeenRedirected,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PipeableEvaluator class\r\tinstanceVariableNames: \'\''				},				#name : #'PipeableEvaluator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PipeableEvaluator,					#isMetaSide : false				},				#parent : @8,				#content : 'I evaluate Smalltalk expressions, taking input from my pipeToInput, and print the results of the evaluation on my pipeFromOutput. I may append error messages to my errorPipelineStream. I provide a framework for pipelines of expressions, possibly combined in the same pipeline with ExternalOSProcess proxies executing external operating system commands.\r\rMy evaluationBlock may be supplied directly, or can be compiled from an expression string. If compiled from an expression string, the names \'stdin\', \'stdout\', \'stderr\', and \'args\' are used to refer to the input stream, output stream, error stream, and an array of arguments. If any of these names are used in the expression string, then the evaluation block will be compiled in such as way as to connect these names with their corresponding streams or argument array.\r',				#stamp : 'dtl 2/1/2003 16:56'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I evaluate Smalltalk expressions, taking input from my pipeToInput, and print the results of the evaluation on my pipeFromOutput. I may append error messages to my errorPipelineStream. I provide a framework for pipelines of expressions, possibly combined in the same pipeline with ExternalOSProcess proxies executing external operating system commands.\r\rMy evaluationBlock may be supplied directly, or can be compiled from an expression string. If compiled from an expression string, the names \'stdin\', \'stdout\', \'stderr\', and \'args\' are used to refer to the input stream, output stream, error stream, and an array of arguments. If any of these names are used in the expression string, then the evaluation block will be compiled in such as way as to connect these names with their corresponding streams or argument array.\r',		#newStamp : 'dtl 2/1/2003 16:56'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1452' ],		#self : OmReference [ '1453' ],		#time : DateAndTime [ '2018-02-22T14:01:13.444013-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeJunction',				#traitCompositionSource : '{}',				#definitionSource : 'PipeJunction subclass: #PipeableEvaluator\r\tinstanceVariableNames: \'argumentArray runState exitStatus outputHasBeenRedirected\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #PipeableEvaluator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #argumentArray,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #runState,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #exitStatus,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableEvaluator,						#isMetaSide : false					},					#name : #outputHasBeenRedirected,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PipeableEvaluator class\r\tinstanceVariableNames: \'\''				},				#name : #'PipeableEvaluator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PipeableEvaluator,					#isMetaSide : false				},				#parent : @8,				#content : 'I evaluate Smalltalk expressions, taking input from my pipeToInput, and print the results of the evaluation on my pipeFromOutput. I may append error messages to my errorPipelineStream. I provide a framework for pipelines of expressions, possibly combined in the same pipeline with ExternalOSProcess proxies executing external operating system commands.\r\rMy evaluationBlock may be supplied directly, or can be compiled from an expression string. If compiled from an expression string, the names \'stdin\', \'stdout\', \'stderr\', and \'args\' are used to refer to the input stream, output stream, error stream, and an array of arguments. If any of these names are used in the expression string, then the evaluation block will be compiled in such as way as to connect these names with their corresponding streams or argument array.\r',				#stamp : 'dtl 2/1/2003 16:56'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1453' ],		#self : OmReference [ '1454' ],		#time : DateAndTime [ '2018-02-22T14:01:13.448939-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeableEvaluator',				#traitCompositionSource : '{}',				#definitionSource : 'PipeableEvaluator subclass: #ExpressionEvaluator\r\tinstanceVariableNames: \'expression evaluationBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExpressionEvaluator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExpressionEvaluator,						#isMetaSide : false					},					#name : #expression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExpressionEvaluator,						#isMetaSide : false					},					#name : #evaluationBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExpressionEvaluator class\r\tinstanceVariableNames: \'\''				},				#name : #'ExpressionEvaluator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExpressionEvaluator,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide a context in which a Smalltalk expression can be evaluated as an element of a command pipeline.',				#stamp : 'dtl 2/1/2003 16:58'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide a context in which a Smalltalk expression can be evaluated as an element of a command pipeline.',		#newStamp : 'dtl 2/1/2003 16:58'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1454' ],		#self : OmReference [ '1455' ],		#time : DateAndTime [ '2018-02-22T14:01:13.450743-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeableEvaluator',				#traitCompositionSource : '{}',				#definitionSource : 'PipeableEvaluator subclass: #ExpressionEvaluator\r\tinstanceVariableNames: \'expression evaluationBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #ExpressionEvaluator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExpressionEvaluator,						#isMetaSide : false					},					#name : #expression,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExpressionEvaluator,						#isMetaSide : false					},					#name : #evaluationBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExpressionEvaluator class\r\tinstanceVariableNames: \'\''				},				#name : #'ExpressionEvaluator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExpressionEvaluator,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide a context in which a Smalltalk expression can be evaluated as an element of a command pipeline.',				#stamp : 'dtl 2/1/2003 16:58'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1455' ],		#self : OmReference [ '1456' ],		#time : DateAndTime [ '2018-02-22T14:01:13.454493-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeableEvaluator',				#traitCompositionSource : '{}',				#definitionSource : 'PipeableEvaluator subclass: #ShellBuiltinEvaluator\r\tinstanceVariableNames: \'shellBuiltin commandShell\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ShellBuiltinEvaluator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltinEvaluator,						#isMetaSide : false					},					#name : #shellBuiltin,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltinEvaluator,						#isMetaSide : false					},					#name : #commandShell,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellBuiltinEvaluator class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellBuiltinEvaluator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellBuiltinEvaluator,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide the context in which a ShellBuiltin is evaluated as an element of a command pipeline.',				#stamp : 'dtl 2/1/2003 17:47'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide the context in which a ShellBuiltin is evaluated as an element of a command pipeline.',		#newStamp : 'dtl 2/1/2003 17:47'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1456' ],		#self : OmReference [ '1457' ],		#time : DateAndTime [ '2018-02-22T14:01:13.457674-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeableEvaluator',				#traitCompositionSource : '{}',				#definitionSource : 'PipeableEvaluator subclass: #ShellBuiltinEvaluator\r\tinstanceVariableNames: \'shellBuiltin commandShell\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #ShellBuiltinEvaluator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltinEvaluator,						#isMetaSide : false					},					#name : #shellBuiltin,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltinEvaluator,						#isMetaSide : false					},					#name : #commandShell,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellBuiltinEvaluator class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellBuiltinEvaluator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellBuiltinEvaluator,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide the context in which a ShellBuiltin is evaluated as an element of a command pipeline.',				#stamp : 'dtl 2/1/2003 17:47'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1457' ],		#self : OmReference [ '1458' ],		#time : DateAndTime [ '2018-02-22T14:01:13.46201-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeJunction',				#traitCompositionSource : '{}',				#definitionSource : 'PipeJunction subclass: #PipeableOSProcess\r\tinstanceVariableNames: \'pipeFromError processProxy keepInitialStdOutOpen keepInitialStdErrOpen accessProtect\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PipeableOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #pipeFromError,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #processProxy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #keepInitialStdOutOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #keepInitialStdErrOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #accessProtect,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PipeableOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'PipeableOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PipeableOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a connector junction for input, output, and error pipelines. I collaborate with a process proxy to evaluate an internal or external process, and to move objects through the pipelines as the proxy is evaluated.\r\rFrom Smalltalk, you can write to my pipeToInput, and read from my pipeFromOutput and pipeFromError streams. I implement simple streaming protocol as a convenience for reading and writing these pipe streams. I support command pipelines with the #| message, with the pipeFromOutput of one instance connected to the pipeToInput of the next instance, and a shared errorPipelineStream collecting error output text for the command pipeline.\r\rAll reading and writing should be done with the streaming protocol, rather than by direct access to the pipe streams. This is because the output pipe streams may be silently replaced by simple ReadStreams following the exit of the child process.\r\rNormal exit for the external process may not happen when expected. If the process is writing to the output pipe, it may block on write until enough of its data is read from the pipeFromOutput pipe, after which it will exit normally.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a connector junction for input, output, and error pipelines. I collaborate with a process proxy to evaluate an internal or external process, and to move objects through the pipelines as the proxy is evaluated.\r\rFrom Smalltalk, you can write to my pipeToInput, and read from my pipeFromOutput and pipeFromError streams. I implement simple streaming protocol as a convenience for reading and writing these pipe streams. I support command pipelines with the #| message, with the pipeFromOutput of one instance connected to the pipeToInput of the next instance, and a shared errorPipelineStream collecting error output text for the command pipeline.\r\rAll reading and writing should be done with the streaming protocol, rather than by direct access to the pipe streams. This is because the output pipe streams may be silently replaced by simple ReadStreams following the exit of the child process.\r\rNormal exit for the external process may not happen when expected. If the process is writing to the output pipe, it may block on write until enough of its data is read from the pipeFromOutput pipe, after which it will exit normally.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1458' ],		#self : OmReference [ '1459' ],		#time : DateAndTime [ '2018-02-22T14:01:13.463741-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PipeJunction',				#traitCompositionSource : '{}',				#definitionSource : 'PipeJunction subclass: #PipeableOSProcess\r\tinstanceVariableNames: \'pipeFromError processProxy keepInitialStdOutOpen keepInitialStdErrOpen accessProtect\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #PipeableOSProcess,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #pipeFromError,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #processProxy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #keepInitialStdOutOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #keepInitialStdErrOpen,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PipeableOSProcess,						#isMetaSide : false					},					#name : #accessProtect,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PipeableOSProcess class\r\tinstanceVariableNames: \'\''				},				#name : #'PipeableOSProcess class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PipeableOSProcess,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a connector junction for input, output, and error pipelines. I collaborate with a process proxy to evaluate an internal or external process, and to move objects through the pipelines as the proxy is evaluated.\r\rFrom Smalltalk, you can write to my pipeToInput, and read from my pipeFromOutput and pipeFromError streams. I implement simple streaming protocol as a convenience for reading and writing these pipe streams. I support command pipelines with the #| message, with the pipeFromOutput of one instance connected to the pipeToInput of the next instance, and a shared errorPipelineStream collecting error output text for the command pipeline.\r\rAll reading and writing should be done with the streaming protocol, rather than by direct access to the pipe streams. This is because the output pipe streams may be silently replaced by simple ReadStreams following the exit of the child process.\r\rNormal exit for the external process may not happen when expected. If the process is writing to the output pipe, it may block on write until enough of its data is read from the pipeFromOutput pipe, after which it will exit normally.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1459' ],		#self : OmReference [ '1460' ],		#time : DateAndTime [ '2018-02-22T14:01:13.508081-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #RemoteTask\r\tinstanceVariableNames: \'task childProxy completionBlock aioHandler\'\r\tclassVariableNames: \'HeadlessChild Materializer Serializer SerializingStrategy\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #RemoteTask,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #task,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #childProxy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #completionBlock,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #aioHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RemoteTask class\r\tinstanceVariableNames: \'\''				},				#name : #'RemoteTask class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RemoteTask,					#isMetaSide : false				},				#parent : @8,				#content : 'RemoteTask do: [2 + 2]\r\rA RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.\r\rThe block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.\r\rOn a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.\r\r',				#stamp : 'dtl 11/12/2011 23:26'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #HeadlessChild,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Materializer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Serializer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #SerializingStrategy,					#parent : @8				}			],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #RemoteTask\r\tinstanceVariableNames: \'task childProxy completionBlock aioHandler\'\r\tclassVariableNames: \'HeadlessChild Materializer Serializer SerializingStrategy\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Piping\''			},			#name : #RemoteTask,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #task,					#parent : @38				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #childProxy,					#parent : @38				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #completionBlock,					#parent : @38				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #aioHandler,					#parent : @38				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RemoteTask class\r\tinstanceVariableNames: \'\''				},				#name : #'RemoteTask class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @38			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RemoteTask,					#isMetaSide : false				},				#parent : @38,				#content : 'RemoteTask do: [2 + 2]\r\rA RemoteTask represents a block to be evaluated in a headless Squeak child process. The results of evaluating the block are returned to the sender through a reference stream on an OS pipe. Asynchronous event notification may be used to signal completion of remote processing.\r\rThe block is evaluated in a remote headless image beginning with a clone of the sender image at the time of the message send. All side effects of evaluating the task block are localized to the remote image, and have no effect on the sending image. The result object may be an object of any complexity, such as a dictionary or array of result values.\r\rOn a unix system, the creation of child Squeak images is a relatively light weight operation, so tasks of varying degrees of complexity can be assigned to remote tasks with only moderate overhead.\r\r',				#stamp : 'dtl 11/12/2011 23:26'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #HeadlessChild,					#parent : @38				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Materializer,					#parent : @38				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #Serializer,					#parent : @38				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #RemoteTask,						#isMetaSide : false					},					#name : #SerializingStrategy,					#parent : @38				}			],			#category : #CommandShell-Piping,			#package : #CommandShell-Piping,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1460' ],		#self : OmReference [ '1461' ],		#time : DateAndTime [ '2018-02-22T14:01:13.742742-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ProxyPipeline class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'command processing',			#sourceCode : 'command: aCommandString\r\t"Evaluate a new instance created from aCommandString. Sender is responsible\r\tfor closing the pipes with #closePipes or #finalize."\r\r\t"ProxyPipeline command: \'ls | cat | wc\'"\r\t"ProxyPipeline command: \'ls NOSUCHFILE * | cat | wc\'"\r\t"ProxyPipeline command: \'ls | copyToOutput | wc\'"\r\t"ProxyPipeline command: \'\'"\r\r\tSmalltalk at: #CommandShell\r\t\tifPresent: [ :cls | ^ self command: aCommandString shell: cls new ].\r\tself notify: \'CommandShell not found\'\r',			#stamp : 'dtl 1/24/2013 08:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1461' ],		#self : OmReference [ '1462' ],		#time : DateAndTime [ '2018-02-22T14:01:13.744148-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ProxyPipeline class',				#isMetaSide : true			},			#name : #'command:shell:',			#protocol : #'command processing',			#sourceCode : 'command: aCommandString shell: aCommandShell\r\t"Evaluate a new instance created from aCommandString using aCommandShell.\r\tSender is responsible for closing the pipes #closePipes or #finalize."\r\r\t"ProxyPipeline command: \'ls | cat | wc\' shell: CommandShell new"\r\t"ProxyPipeline command: \'ls NOSUCHFILE * | cat | wc\' shell: CommandShell new"\r\t"ProxyPipeline command: \'ls | copyToOutput | wc\' shell: CommandShell new "\r\t"ProxyPipeline command: \'\' shell: CommandShell new"\r\r\t^ (self fromString: aCommandString shell: aCommandShell) value\r',			#stamp : 'dtl 4/27/2003 11:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1462' ],		#self : OmReference [ '1463' ],		#time : DateAndTime [ '2018-02-22T14:01:13.744981-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ProxyPipeline class',				#isMetaSide : true			},			#name : #'fromString:shell:',			#protocol : #'instance creation',			#sourceCode : 'fromString: aCommandString shell: aCommandShell\r\t"Answer a new instance created from aCommandString using aCommandShell."\r\r\t"ProxyPipeline fromString: \'ls | cat | wc\' shell: CommandShell new"\r\t"ProxyPipeline fromString: \'ls NOSUCHFILE * | cat | wc\' shell: CommandShell new"\r\t"ProxyPipeline fromString: \'ls | copyToOutput | wc\' shell: CommandShell new "\r\t"ProxyPipeline fromString: \'\' shell: CommandShell new"\r\r\t^ super new fromString: aCommandString shell: aCommandShell\r',			#stamp : 'dtl 6/8/2006 06:57',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1463' ],		#self : OmReference [ '1464' ],		#time : DateAndTime [ '2018-02-22T14:01:13.746612-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\r\t^ self last atEnd\r',			#stamp : 'dtl 3/29/2003 13:49',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1464' ],		#self : OmReference [ '1465' ],		#time : DateAndTime [ '2018-02-22T14:01:13.747262-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #background,			#protocol : #accessing,			#sourceCode : 'background\r\t"Answer true if this pipeline should be evaluated in the background."\r\r\t^ background ifNil: [background := false]',			#stamp : 'dtl 11/8/2007 20:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1465' ],		#self : OmReference [ '1466' ],		#time : DateAndTime [ '2018-02-22T14:01:13.747885-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'background:',			#protocol : #accessing,			#sourceCode : 'background: trueOrFalse\r\r\tbackground := trueOrFalse',			#stamp : 'dtl 11/8/2007 20:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1466' ],		#self : OmReference [ '1467' ],		#time : DateAndTime [ '2018-02-22T14:01:13.748472-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #close,			#protocol : #'initialize - release',			#sourceCode : 'close\r\t"Close input pipe to first proxy in the pipeline. The proxies are not\r\tfinalized, this simply closes the input stream to allow normal processing\r\tto proceed to completion."\r\r\tself isEmpty ifFalse: [self first close]\r',			#stamp : 'dtl 12/31/2002 10:57',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1467' ],		#self : OmReference [ '1468' ],		#time : DateAndTime [ '2018-02-22T14:01:13.749057-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #closePipes,			#protocol : #'initialize - release',			#sourceCode : 'closePipes\r\r\t| p |\r\tself do: [:e | e closePipes].\r\tself unregisterEvents.\r\t(p := self pipeFromOutput) ifNotNil: [p close]\r',			#stamp : 'dtl 9/3/2010 17:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1468' ],		#self : OmReference [ '1469' ],		#time : DateAndTime [ '2018-02-22T14:01:13.749634-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #commandLine,			#protocol : #accessing,			#sourceCode : 'commandLine\r\t"Command line string from which this pipeline was constructed"\r\r\t^ commandLine',			#stamp : 'dtl 11/20/2002 19:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1469' ],		#self : OmReference [ '1470' ],		#time : DateAndTime [ '2018-02-22T14:01:13.750185-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'commandLine:',			#protocol : #accessing,			#sourceCode : 'commandLine: aString\r\t"Command line string from which this pipeline was constructed"\r\r\tcommandLine := aString',			#stamp : 'dtl 11/8/2007 20:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1470' ],		#self : OmReference [ '1471' ],		#time : DateAndTime [ '2018-02-22T14:01:13.750759-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #completionSemaphore,			#protocol : #accessing,			#sourceCode : 'completionSemaphore\r\t"Answer the value of completionSemaphore. This semaphore is signaled\r\twhen the last proxy completes. Subsequent cleanup is preformed by a\r\tprocess waiting on the semaphore. Completion notification is often triggered\r\tby the grimReaperProcess, so the separate pipeline cleanup prevents\r\tthose activities from being processed in the context of the grimReaperProcess."\r\r\t^ completionSemaphore ifNil: [completionSemaphore := Semaphore new]',			#stamp : 'dtl 11/20/2006 13:28',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1471' ],		#self : OmReference [ '1472' ],		#time : DateAndTime [ '2018-02-22T14:01:13.751319-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #completionWatcher,			#protocol : #accessing,			#sourceCode : 'completionWatcher\r\t"A process that waits for notification that the last proxy has completed,\r\tand performs any necessary cleanup. Completion notification is often\r\ttriggered by the grimReaperProcess, so the separate pipeline cleanup\r\tprevents those activities from being processed in the context of the\r\tgrimReaperProcess."\r\r\t^ completionWatcher',			#stamp : 'dtl 11/20/2006 13:21',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1472' ],		#self : OmReference [ '1473' ],		#time : DateAndTime [ '2018-02-22T14:01:13.752082-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'completionWatcher:',			#protocol : #accessing,			#sourceCode : 'completionWatcher: anObject\r\t"Set the value of completionWatcher"\r\r\tcompletionWatcher := anObject',			#stamp : 'dtl 11/8/2007 20:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1473' ],		#self : OmReference [ '1474' ],		#time : DateAndTime [ '2018-02-22T14:01:13.752674-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #errorPipelineStream,			#protocol : #accessing,			#sourceCode : 'errorPipelineStream\r\t"Accumulates the error output of commands in a command pipeline."\r\r\tself isEmpty\r\t\tifTrue: [^ nil]\r\t\tifFalse: [^ self last errorPipelineStream]',			#stamp : 'dtl 4/28/2003 21:02',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1474' ],		#self : OmReference [ '1475' ],		#time : DateAndTime [ '2018-02-22T14:01:13.753233-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #errorUpToEnd,			#protocol : #streaming,			#sourceCode : 'errorUpToEnd\r\t"Answer all available characters from the error stream shared by my proxies."\r\r\t^ self last errorUpToEnd\r',			#stamp : 'dtl 11/21/2002 18:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1475' ],		#self : OmReference [ '1476' ],		#time : DateAndTime [ '2018-02-22T14:01:13.753806-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #errorUpToEndOfFile,			#protocol : #streaming,			#sourceCode : 'errorUpToEndOfFile\r\t"Answer all available characters from the error stream. Block and\r\tcontinue reading until end of file is detected."\r\r\t^ self last errorUpToEndOfFile\r',			#stamp : 'dtl 8/25/2006 12:22',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1476' ],		#self : OmReference [ '1477' ],		#time : DateAndTime [ '2018-02-22T14:01:13.754368-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\r\tself closePipes.\r\t^ super finalize\r',			#stamp : 'dtl 4/9/2006 09:43',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1477' ],		#self : OmReference [ '1478' ],		#time : DateAndTime [ '2018-02-22T14:01:13.754932-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #flush,			#protocol : #streaming,			#sourceCode : 'flush\r\t"Flush output to the standard input stream of my first proxy."\r\r\t^ self first flush',			#stamp : 'dtl 11/21/2002 18:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1478' ],		#self : OmReference [ '1479' ],		#time : DateAndTime [ '2018-02-22T14:01:13.755589-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'fromString:shell:',			#protocol : #'initialize - release',			#sourceCode : 'fromString: aCommandString shell: aCommandShell \r\t"Initialize a new instance created from aCommandString using aCommandShell. "\r\r\tself commandLine: aCommandString.\r\t(aCommandShell splitPipelineCommands: aCommandString)\r\t\tinject: nil\r\t\tinto: [:prevProxy :command | \r\t\t\t| nextProxy |\r\t\t\tnextProxy := aCommandShell\r\t\t\t\tredirectedPipeableProxyFor: command\r\t\t\t\tpredecessorProxy: prevProxy.\r\t\t\tprevProxy\r\t\t\t\tifNotNil: [prevProxy prepareOutputFor: nextProxy.\r\t\t\t\t\tprevProxy canProvideOutputPipe\r\t\t\t\t\t\tifFalse: [nextProxy closeWriter]].\r\t\t\tself add: nextProxy].\r\tself isEmpty\r\t\tifFalse: [self last prepareOutputFor: self; addDependent: self]',			#stamp : 'dtl 11/8/2007 20:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1479' ],		#self : OmReference [ '1480' ],		#time : DateAndTime [ '2018-02-22T14:01:13.75618-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'handleCompletionWhenSignaled:',			#protocol : #'event handling',			#sourceCode : 'handleCompletionWhenSignaled: aSemaphore\r\t"Answer a process that will complete processing the the last proxy has\r\tsignaled its completion."\r\r\t| lastProxy proc |\r\tproc := [aSemaphore wait.\r\t\tself waitForAllToComplete.\r\t\t(lastProxy := self last)\r\t\t\tifNotNil: [lastProxy closeErrorPipeline.\r\t\t\t\t\tself triggerEvent: #complete]] newProcess.\r\t^ proc resume',			#stamp : 'dtl 9/3/2010 17:51',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1480' ],		#self : OmReference [ '1481' ],		#time : DateAndTime [ '2018-02-22T14:01:13.756762-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #handleRunstateChange,			#protocol : #'event handling',			#sourceCode : 'handleRunstateChange\r\r\t| lastProxy |\r\t(lastProxy := self last)\r\t\tifNotNil: [lastProxy isComplete\r\t\t\t\t\tifTrue: [self completionSemaphore signal]]',			#stamp : 'dtl 9/3/2010 17:40',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1481' ],		#self : OmReference [ '1482' ],		#time : DateAndTime [ '2018-02-22T14:01:13.757638-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #isComplete,			#protocol : #testing,			#sourceCode : 'isComplete\r\t"True if all proxies are complete. The proxies may report their completion events\r\tout of sequence, so test all the proxies (not just the last one in the pipeline)."\r\r\t^ self noneSatisfy: [:proxy | proxy isComplete not]\r',			#stamp : 'dtl 9/12/2003 11:53',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1482' ],		#self : OmReference [ '1483' ],		#time : DateAndTime [ '2018-02-22T14:01:13.758198-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #isExternalProcess,			#protocol : #testing,			#sourceCode : 'isExternalProcess\r\t"Answer true if the process which I represent is an external OSProcess. For protocol\r\tcompatibility with PipeJunction."\r\r\t^ false',			#stamp : 'dtl 4/19/2003 09:16',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1483' ],		#self : OmReference [ '1484' ],		#time : DateAndTime [ '2018-02-22T14:01:13.758775-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #needsPrompt,			#protocol : #testing,			#sourceCode : 'needsPrompt\r\r\t^ self last needsPrompt',			#stamp : 'dtl 11/23/2002 13:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1484' ],		#self : OmReference [ '1485' ],		#time : DateAndTime [ '2018-02-22T14:01:13.759348-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #next,			#protocol : #streaming,			#sourceCode : 'next\r\r\t^ self last next\r',			#stamp : 'dtl 11/21/2002 18:08',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1485' ],		#self : OmReference [ '1486' ],		#time : DateAndTime [ '2018-02-22T14:01:13.759916-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'next:',			#protocol : #streaming,			#sourceCode : 'next: count\r\r\t^ self last next: count\r',			#stamp : 'dtl 11/21/2002 18:08',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1486' ],		#self : OmReference [ '1487' ],		#time : DateAndTime [ '2018-02-22T14:01:13.760498-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'nextFromError:',			#protocol : #streaming,			#sourceCode : 'nextFromError: count\r\t"Answer up to count characters from the error pipeline stream, or an empty string\r\tif no data is available. All characters are routed through the errorPipelineStream,\r\twhich is shared by all my proxies."\r\r\t^ self last next: count\r',			#stamp : 'dtl 11/21/2002 18:11',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1487' ],		#self : OmReference [ '1488' ],		#time : DateAndTime [ '2018-02-22T14:01:13.761054-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #streaming,			#sourceCode : 'nextPut: aCharacter\r\t"Write aCharacter to the standard input stream of my first proxy."\r\r\t^ self first nextPut: aCharacter',			#stamp : 'dtl 11/21/2002 18:09',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1488' ],		#self : OmReference [ '1489' ],		#time : DateAndTime [ '2018-02-22T14:01:13.761625-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #streaming,			#sourceCode : 'nextPutAll: characters\r\t"Write characters to the standard input stream of my first proxy."\r\r\t^ self first nextPutAll: characters',			#stamp : 'dtl 11/21/2002 18:09',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1489' ],		#self : OmReference [ '1490' ],		#time : DateAndTime [ '2018-02-22T14:01:13.762196-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #output,			#protocol : #streaming,			#sourceCode : 'output\r\r\t^ self last output',			#stamp : 'dtl 4/14/2006 10:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1490' ],		#self : OmReference [ '1491' ],		#time : DateAndTime [ '2018-02-22T14:01:13.762976-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #pipeFromOutput,			#protocol : #accessing,			#sourceCode : 'pipeFromOutput\r\t"The output from the last proxy in the pipeline, if any"\r\r\tself isEmpty\r\t\tifTrue: [^ nil]\r\t\tifFalse: [^ self last pipeFromOutput]',			#stamp : 'dtl 4/29/2003 05:04',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1491' ],		#self : OmReference [ '1492' ],		#time : DateAndTime [ '2018-02-22T14:01:13.763565-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #pipeToInput,			#protocol : #accessing,			#sourceCode : 'pipeToInput\r\t"The input to the first proxy in the pipeline, if any"\r\r\tself isEmpty\r\t\tifTrue: [^ nil]\r\t\tifFalse: [^ self first pipeToInput]',			#stamp : 'dtl 4/28/2003 20:58',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1492' ],		#self : OmReference [ '1493' ],		#time : DateAndTime [ '2018-02-22T14:01:13.76414-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #pipesAreEmpty,			#protocol : #testing,			#sourceCode : 'pipesAreEmpty\r\t"True after processing is complete and all available data has been read from\r\tthe output pipe and the errorPipelineStream pipe."\r\r\t^ self isComplete and: [self last pipesAreEmpty]\r',			#stamp : 'dtl 9/12/2003 11:49',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1493' ],		#self : OmReference [ '1494' ],		#time : DateAndTime [ '2018-02-22T14:01:13.764729-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tself background\r\t\tifTrue: [aStream nextPutAll: \'a background \']\r\t\tifFalse: [aStream nextPutAll: \'a foreground \'].\r\taStream nextPutAll: self class name, \' for "\', self commandLine asString, \'"\'',			#stamp : 'dtl 11/20/2002 19:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1494' ],		#self : OmReference [ '1495' ],		#time : DateAndTime [ '2018-02-22T14:01:13.765296-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #release,			#protocol : #'initialize - release',			#sourceCode : 'release\r\r\tself do: [:proxy | proxy release].\r\t^ super release',			#stamp : 'dtl 1/4/2003 15:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1495' ],		#self : OmReference [ '1496' ],		#time : DateAndTime [ '2018-02-22T14:01:13.765875-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #succeeded,			#protocol : #testing,			#sourceCode : 'succeeded\r\t"Answer true if all proxies succeeded, otherwise false"\r\r\tself detect: [:proxy | proxy succeeded not] ifNone: [^ true].\r\t^ false\r',			#stamp : 'dtl 7/5/2006 09:07',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1496' ],		#self : OmReference [ '1497' ],		#time : DateAndTime [ '2018-02-22T14:01:13.766449-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #unregisterEvents,			#protocol : #'initialize - release',			#sourceCode : 'unregisterEvents\r\r\tself isEmpty ifFalse: [self last removeDependent: self]\r',			#stamp : 'dtl 8/20/2006 19:05',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1497' ],		#self : OmReference [ '1498' ],		#time : DateAndTime [ '2018-02-22T14:01:13.76702-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #streaming,			#sourceCode : 'upToEnd\r\t"Answer all available characters from the output stream."\r\r\t^ self last upToEnd\r',			#stamp : 'dtl 8/25/2006 12:21',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1498' ],		#self : OmReference [ '1499' ],		#time : DateAndTime [ '2018-02-22T14:01:13.767591-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #streaming,			#sourceCode : 'upToEndOfFile\r\t"Answer all available characters from the output stream. Block and\r\tcontinue reading until end of file is detected."\r\r\t^ self last upToEndOfFile\r',			#stamp : 'dtl 8/25/2006 12:21',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1499' ],		#self : OmReference [ '1500' ],		#time : DateAndTime [ '2018-02-22T14:01:13.768399-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\r\taParameter == self pipeFromOutput\r\t\tifTrue: [^ self triggerEvent: #outputDataReady].\r\taParameter == self errorPipelineStream\r\t\tifTrue: [^ self triggerEvent: #errorDataReady].\r\taParameter == #runState\r\t\tifTrue: [^ self handleRunstateChange].\r\tself error: \'unexpected parameter\'\r\r',			#stamp : 'dtl 8/22/2006 06:28',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1500' ],		#self : OmReference [ '1501' ],		#time : DateAndTime [ '2018-02-22T14:01:13.768995-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluation,			#sourceCode : 'value\r\t"Initiate evaluation of each member of the pipeline, and answer the\r\tlast proxy in the pipeline. Evaluation may proceed asynchronously, and\r\tthe sender should wait for the last proxy to complete its evalation in order\r\tto obtain complete output and error contents from the pipeline."\r\r\t"(ProxyPipeline command: \'ls | cat | wc\' shell: CommandShell new) value"\r\r\tself completionWatcher: (self handleCompletionWhenSignaled: self completionSemaphore).\r\tself do: [:proxy |\r\t\tproxy value.\r\t\t"A proxy may have associated Smalltalk processes for stream handling.\r\t\tSchedule a short delay to permit these processes to be started prior to\r\t\tstarting the next proxy in the pipeline."\r\t\t(Delay forMilliseconds: 10) wait]\r',			#stamp : 'dtl 8/28/2012 07:44',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1501' ],		#self : OmReference [ '1502' ],		#time : DateAndTime [ '2018-02-22T14:01:13.769613-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProxyPipeline,				#isMetaSide : false			},			#name : #waitForAllToComplete,			#protocol : #'event handling',			#sourceCode : 'waitForAllToComplete\r\t"In some cases the last proxy in a pipeline may complete before some\r\tof the others. In particular, if one proxy has redirected its output to\r\ta file, the next proxy will see a nil input stream, and may quickly\r\tcomplete its processing before its predecessor proxies have finished\r\twriting to the file. Time out with an error if pipeline fails to complete\r\tafter 10 seconds."\r\r\t(1 to: 100) do: [:e |\r\t\tself isComplete ifTrue: [^ self].\r\t\t(Delay forMilliseconds: 100) wait].\r\tself error: \'pipeline did not complete evaluation\'\r\r',			#stamp : 'dtl 11/20/2006 12:43',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1502' ],		#self : OmReference [ '1503' ],		#time : DateAndTime [ '2018-02-22T14:01:13.772119-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'InternalPipe class',				#isMetaSide : true			},			#name : #blockingPipe,			#protocol : #'instance creation',			#sourceCode : 'blockingPipe\r\r\t"InternalPipe blockingPipe"\r\r\t^ super basicNew initialize setBlocking\r',			#stamp : 'dtl 12/2/2001 19:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1503' ],		#self : OmReference [ '1504' ],		#time : DateAndTime [ '2018-02-22T14:01:13.772899-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'InternalPipe class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\t"InternalPipe new"\r\r\t^ self blockingPipe',			#stamp : 'dtl 12/2/2001 19:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1504' ],		#self : OmReference [ '1505' ],		#time : DateAndTime [ '2018-02-22T14:01:13.773578-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'InternalPipe class',				#isMetaSide : true			},			#name : #nonBlockingPipe,			#protocol : #'instance creation',			#sourceCode : 'nonBlockingPipe\r\r\t"InternalPipe nonBlockingPipe"\r\r\t^ super basicNew initialize setNonBlocking\r',			#stamp : 'dtl 12/2/2001 19:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1505' ],		#self : OmReference [ '1506' ],		#time : DateAndTime [ '2018-02-22T14:01:13.774162-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'InternalPipe class',				#isMetaSide : true			},			#name : #testPipe,			#protocol : #examples,			#sourceCode : 'testPipe\r\r\t"InternalPipe testPipe inspect"\r\r\t| pipe result |\r\tpipe := self new.\r\tpipe nextPutAll: \'string to send through an InternalPipe\'.\r\tpipe closeWriter.\r\tresult := pipe upToEnd.\r\tpipe close.\r\t^ result\r',			#stamp : 'dtl 11/8/2007 20:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1506' ],		#self : OmReference [ '1507' ],		#time : DateAndTime [ '2018-02-22T14:01:13.774788-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #addDummyNilAsEndOfFileIndicatorForBlockingPipe,			#protocol : #finalization,			#sourceCode : 'addDummyNilAsEndOfFileIndicatorForBlockingPipe\r\t"And add a trailing nil to the pipe to mimic the behaviour of an external pipe\r\twhich blocks until the writer end is closed. Writing a trailing nil the the queue\r\thas the side effect of waking up any process which is blocked waiting on the\r\tqueue, which will receive the nil as an indication that the pipe has been closed.\r\tFIXME: This is almost certainly a Bad Idea, so it is encapsulated in its own method."\r\r\tself isBlocking ifTrue: [queue nextPut: nil]\r',			#stamp : 'dtl 4/20/2003 20:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1507' ],		#self : OmReference [ '1508' ],		#time : DateAndTime [ '2018-02-22T14:01:13.775368-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t"Answer whether the receiver can access any more objects. A nonblocking\r\tpipe with writer end closed which answers nil is considered to be at end.\r\tSee InternalPipe>>closeWriter. Yes, it is ugly to have a pipe which cannot\r\tpass a nil object, but this is intended to mimic the behavior of an external\r\tOS pipe in nonblocking mode."\r\r\t^ self writerClosed and:\r\t\t[self isBlocking\r\t\t\tifTrue:\r\t\t\t\t[(queue size == 0) or:\r\t\t\t\t\t[(queue size == 1) and:\r\t\t\t\t\t\t[(queue nextPut: queue next) isNil]]]\r\t\t\tifFalse:\r\t\t\t\t[queue size == 0]]\r',			#stamp : 'dtl 12/26/2002 19:09',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1508' ],		#self : OmReference [ '1509' ],		#time : DateAndTime [ '2018-02-22T14:01:13.776146-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #atEndOfFile,			#protocol : #testing,			#sourceCode : 'atEndOfFile\r\t"Answer whether the receiver is at its end based on the result of\r\tthe last read operation. For compatibility with ExternalPipe."\r\r\t^ self atEnd\r',			#stamp : 'dtl 6/4/2006 16:09',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1509' ],		#self : OmReference [ '1510' ],		#time : DateAndTime [ '2018-02-22T14:01:13.776707-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #basicNext,			#protocol : #accessing,			#sourceCode : 'basicNext\r\t"Answer the next object accessible by the receiver."\r\r\tself nonBlockingMode\r\t\tifFalse:\r\t\t\t[^ queue next]\r\t\tifTrue:\r\t\t\t[queue isEmpty ifTrue: [^ nil] ifFalse: [^ queue next]]\r',			#stamp : 'dtl 1/25/2003 18:58',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1510' ],		#self : OmReference [ '1511' ],		#time : DateAndTime [ '2018-02-22T14:01:13.777245-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #'basicNextPut:',			#protocol : #accessing,			#sourceCode : 'basicNextPut: anObject \r\t"Insert the argument, anObject, as the next object accessible by the \r\treceiver. Answer anObject."\r\r\t^ queue nextPut: anObject',			#stamp : 'dtl 1/7/2003 20:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1511' ],		#self : OmReference [ '1512' ],		#time : DateAndTime [ '2018-02-22T14:01:13.777796-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #close,			#protocol : #finalization,			#sourceCode : 'close\r\r\tself closeWriter; closeReader',			#stamp : 'dtl 1/1/2002 11:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1512' ],		#self : OmReference [ '1513' ],		#time : DateAndTime [ '2018-02-22T14:01:13.77832-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #closeReader,			#protocol : #finalization,			#sourceCode : 'closeReader\r\t"Protocol compatibility with OSPipe. No further reads are possible after\r\tclosing the reader, therefore any dependents and events may be released.\r\tNothing actually is done, except to release dependents and events."\r\r\tself release\r',			#stamp : 'dtl 1/4/2003 15:12',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1513' ],		#self : OmReference [ '1514' ],		#time : DateAndTime [ '2018-02-22T14:01:13.77886-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #closeWriter,			#protocol : #finalization,			#sourceCode : 'closeWriter\r\t"Set the writerClosed flag, and add a trailing nil to the pipe to mimic the\r\tbehaviour of an external pipe which blocks until the writer end is closed.\r\tWriting a trailing nil the the queue has the side effect of waking up any\r\tprocess which is blocked waiting on the queue, which will receive the nil\r\tas an indication that the pipe has been closed."\r\r\tself writerClosed ifFalse:\r\t\t[self writerClosed: true.\r\t\tself addDummyNilAsEndOfFileIndicatorForBlockingPipe.\r\t\tself notifyDataReady\t"in case someone is waiting on the pipe output"]\r\r',			#stamp : 'dtl 4/20/2003 20:46',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1514' ],		#self : OmReference [ '1515' ],		#time : DateAndTime [ '2018-02-22T14:01:13.779398-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #closed,			#protocol : #testing,			#sourceCode : 'closed\r\r\t^ self writerClosed',			#stamp : 'dtl 11/24/2001 15:03',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1515' ],		#self : OmReference [ '1516' ],		#time : DateAndTime [ '2018-02-22T14:01:13.779937-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"Answer contents of the pipe, and return the contents to the pipe so it can still be read."\r\r\t"InternalPipe new nextPutAll: \'hello\'; contents"\r\r\t| s |\r\ts := self next: queue size.\r\tself nextPutAll: s.\r\t^ s',			#stamp : 'dtl 11/8/2007 20:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1516' ],		#self : OmReference [ '1517' ],		#time : DateAndTime [ '2018-02-22T14:01:13.780478-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #cr,			#protocol : #'character writing',			#sourceCode : 'cr\r\t"Append a return character to the receiver."\r\r\tself queue nextPut: Character cr',			#stamp : 'dtl 9/23/2001 16:49',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1517' ],		#self : OmReference [ '1518' ],		#time : DateAndTime [ '2018-02-22T14:01:13.781236-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\tself queue\r',			#stamp : 'dtl 9/16/2001 22:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1518' ],		#self : OmReference [ '1519' ],		#time : DateAndTime [ '2018-02-22T14:01:13.781782-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #isBlocking,			#protocol : #testing,			#sourceCode : 'isBlocking\r\t"Answer true if reader end is set to blocking mode."\r\r\t^ self nonBlockingMode not',			#stamp : 'dtl 8/7/2002 14:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1519' ],		#self : OmReference [ '1520' ],		#time : DateAndTime [ '2018-02-22T14:01:13.782367-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #isPipe,			#protocol : #testing,			#sourceCode : 'isPipe\r\r\t^ true\r',			#stamp : 'dtl 3/26/2006 15:48',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1520' ],		#self : OmReference [ '1521' ],		#time : DateAndTime [ '2018-02-22T14:01:13.782901-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t"Answer the next object accessible by the receiver."\r\r\t^ self basicNext\r',			#stamp : 'dtl 3/26/2006 11:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1521' ],		#self : OmReference [ '1522' ],		#time : DateAndTime [ '2018-02-22T14:01:13.783471-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #'next:',			#protocol : #accessing,			#sourceCode : 'next: anInteger \r\t"Answer the next anInteger elements of my collection."\r\r\t| strm c |\r\tstrm := WriteStream on: String new.\r\t(1 to: anInteger) do: [:index |\r\t\tself atEnd\r\t\t\tifTrue: [^ strm contents]\r\t\t\tifFalse: [(c := self basicNext) ifNil: [^ strm contents].\r\t\t\t\t\tstrm nextPut: c]].\r\t^ strm contents\r',			#stamp : 'dtl 2/24/2013 10:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1522' ],		#self : OmReference [ '1523' ],		#time : DateAndTime [ '2018-02-22T14:01:13.784071-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #accessing,			#sourceCode : 'nextPut: anObject \r\t"Insert the argument, anObject, as the next object accessible by the \r\treceiver. Answer anObject."\r\r\t| result |\r\tresult := queue nextPut: anObject.\r\tself notifyDataReady.\r\tProcessor yield.\r\t^ result\r',			#stamp : 'dtl 11/8/2007 20:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1523' ],		#self : OmReference [ '1524' ],		#time : DateAndTime [ '2018-02-22T14:01:13.784674-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #accessing,			#sourceCode : 'nextPutAll: aCollection \r\t"Append the elements of aCollection to the sequence of objects accessible \r\tby the receiver. Answer aCollection."\r\r\t| result |\r\tresult := aCollection do: [:e | queue nextPut: e].\r\tself notifyDataReady.\r\tProcessor yield.\r\t^ result\r',			#stamp : 'dtl 11/8/2007 20:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1524' ],		#self : OmReference [ '1525' ],		#time : DateAndTime [ '2018-02-22T14:01:13.785266-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #nonBlockingMode,			#protocol : #accessing,			#sourceCode : 'nonBlockingMode\r\r\t^ nonBlockingMode ifNil: [nonBlockingMode := false]\r',			#stamp : 'dtl 11/8/2007 20:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1525' ],		#self : OmReference [ '1526' ],		#time : DateAndTime [ '2018-02-22T14:01:13.787224-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #'nonBlockingMode:',			#protocol : #accessing,			#sourceCode : 'nonBlockingMode: trueOrFalse\r\r\tnonBlockingMode := trueOrFalse\r',			#stamp : 'dtl 11/8/2007 20:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1526' ],		#self : OmReference [ '1527' ],		#time : DateAndTime [ '2018-02-22T14:01:13.789414-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #notifyDataReady,			#protocol : #'event driven reader',			#sourceCode : 'notifyDataReady\r\t"Whenever new data becomes available, notify any dependents. This method\r\texists only to document the event generation mechanism, which is intended\r\tto be compatible with events generated by an OSPipe."\r\r\tself changed\r',			#stamp : 'dtl 1/7/2003 20:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1527' ],		#self : OmReference [ '1528' ],		#time : DateAndTime [ '2018-02-22T14:01:13.790474-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #peek,			#protocol : #accessing,			#sourceCode : 'peek\r\r\t^ queue peek\r',			#stamp : 'dtl 9/16/2001 22:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1528' ],		#self : OmReference [ '1529' ],		#time : DateAndTime [ '2018-02-22T14:01:13.791369-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #queue,			#protocol : #accessing,			#sourceCode : 'queue\r\r\t^ queue ifNil: [queue := SharedQueue new]\r',			#stamp : 'dtl 11/8/2007 20:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1529' ],		#self : OmReference [ '1530' ],		#time : DateAndTime [ '2018-02-22T14:01:13.79226-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #setBlocking,			#protocol : #initialize-release,			#sourceCode : 'setBlocking\r\t"For compatibility with OSPipe"\r\r\tself nonBlockingMode: false',			#stamp : 'dtl 11/25/2001 14:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1530' ],		#self : OmReference [ '1531' ],		#time : DateAndTime [ '2018-02-22T14:01:13.793204-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #setBufferedReader,			#protocol : #'event driven reader',			#sourceCode : 'setBufferedReader\r\t"An InternalPipe behaves like an OSPipe with a buffered reader, and is\r\tcapable of generating events when data is available. Answer true to\r\tindicate that this is the case."\r\r\t^ true\r',			#stamp : 'dtl 1/7/2003 20:31',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1531' ],		#self : OmReference [ '1532' ],		#time : DateAndTime [ '2018-02-22T14:01:13.79411-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #setNonBlocking,			#protocol : #initialize-release,			#sourceCode : 'setNonBlocking\r\t"For compatibility with OSPipe"\r\r\tself nonBlockingMode: true',			#stamp : 'dtl 11/24/2001 15:56',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1532' ],		#self : OmReference [ '1533' ],		#time : DateAndTime [ '2018-02-22T14:01:13.795059-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t"An InternalPipe may contain a trailing nil if it has been closed. This should\r\tnot be counted as part of the pipe size, so use #contents to determine the size\r\tafter stripping any trailing nil."\r\r\t"InternalPipe new nextPutAll: \'hello\'; size"\r\r\t^ self closed\r\t\tifTrue: [self contents size]\r\t\tifFalse: [self queue size]\r',			#stamp : 'dtl 11/25/2001 19:15',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1533' ],		#self : OmReference [ '1534' ],		#time : DateAndTime [ '2018-02-22T14:01:13.795996-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #accessing,			#sourceCode : 'upToEnd\r\t"Answer the remaining elements in the pipe"\r\r\t| strm c |\r\tstrm := WriteStream on: String new.\r\t[self atEnd] whileFalse:\r\t\t[c := self next.\r\t\tc isNil\r\t\t\tifTrue: [^ strm contents]\r\t\t\tifFalse: [strm nextPut: c]].\r\t^ strm contents',			#stamp : 'dtl 2/24/2013 10:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1534' ],		#self : OmReference [ '1535' ],		#time : DateAndTime [ '2018-02-22T14:01:13.796929-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #accessing,			#sourceCode : 'upToEndOfFile\r\t"For compatibility with external pipes"\r\r\t^ self upToEnd\r',			#stamp : 'dtl 5/20/2006 18:45',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1535' ],		#self : OmReference [ '1536' ],		#time : DateAndTime [ '2018-02-22T14:01:13.798428-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #writerClosed,			#protocol : #accessing,			#sourceCode : 'writerClosed\r\r\t^ writerClosed ifNil: [writerClosed := false]\r',			#stamp : 'dtl 11/8/2007 20:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1536' ],		#self : OmReference [ '1537' ],		#time : DateAndTime [ '2018-02-22T14:01:13.799095-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InternalPipe,				#isMetaSide : false			},			#name : #'writerClosed:',			#protocol : #accessing,			#sourceCode : 'writerClosed: trueOrFalse\r\r\twriterClosed := trueOrFalse\r',			#stamp : 'dtl 11/8/2007 20:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1537' ],		#self : OmReference [ '1538' ],		#time : DateAndTime [ '2018-02-22T14:01:13.799828-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #'do:',			#protocol : #evaluating,			#sourceCode : 'do: aBlock\r\t"Start a remote task and read the result object. The image will be blocked\r\ton read until completion of the remote task."\r\r\t"RemoteTask do: [2 + 2]"\r\r\t^(self new task: aBlock) value',			#stamp : 'dtl 11/12/2011 23:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1538' ],		#self : OmReference [ '1539' ],		#time : DateAndTime [ '2018-02-22T14:01:13.800782-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #'do:whenComplete:',			#protocol : #evaluating,			#sourceCode : 'do: taskBlock whenComplete: aOneArgumentBlock\r\t"Evaluate taskBlock in an image running in a separate OS process.\r\tSet the completion block, a block that takes result object as its single argument.\r\tStart remote processing with an AIO event notifier. Completion of the remote task\r\twill result in a changed notification from the event notifier, which will activate the\r\tcompletion block. The completion block is expected to do something useful with\r\tthe result of the remote task."\r\r\t"n.b. Inspect the RemoteTask to prevent it being garbage collected and finalized\r\tbefore processing is complete"\r\r\t"(RemoteTask do: [2 + 2] whenComplete: [ :result | result inspect ]) inspect"\r\t"(RemoteTask do: [(Delay forSeconds: 3) wait. 2 + 2] whenComplete: [ :result | result inspect ]) inspect"\r\r\t^ self new task: taskBlock whenComplete: aOneArgumentBlock',			#stamp : 'dtl 11/12/2011 23:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1539' ],		#self : OmReference [ '1540' ],		#time : DateAndTime [ '2018-02-22T14:01:13.801713-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #'finalize:',			#protocol : #finalization,			#sourceCode : 'finalize: aRemoteTask\r\r\taRemoteTask finalize',			#stamp : 'dtl 11/12/2011 23:05',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1540' ],		#self : OmReference [ '1541' ],		#time : DateAndTime [ '2018-02-22T14:01:13.802502-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #'headlessChild:',			#protocol : #'class initialization',			#sourceCode : 'headlessChild: boolean\r\t"If true (default), the child process is headless. Set to false to allow debugging in\r\tthe child Squeak image"\r\r\t"RemoteTask headlessChild:true"\r\t"RemoteTask headlessChild:false" "for debugging the child image"\r\r\tHeadlessChild := boolean',			#stamp : 'dtl 2/19/2015 22:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1541' ],		#self : OmReference [ '1542' ],		#time : DateAndTime [ '2018-02-22T14:01:13.803064-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'class initialization',			#sourceCode : 'initialize\r\t"Initilialize the serialization strategy. Assume that if Magma is loaded in this image,\r\tthat the Magma serializer is preferred. If Fuel is present, use that. Otherwise use the\r\tsimple and effective default of a Squeak ReferenceStream."\r\r\t"RemoteTask initialize"\r\r\t"RemoteTask useReferenceStreamSerializer"\r\t"RemoteTask useFuelSerializer"\r\t"RemoteTask useMagmaSerializer"\r\r\tself headlessChild: true.\r\r\t(Smalltalk hasClassNamed: #MaObjectSerializer)\r\t\tifTrue: [^self useMagmaSerializer].\r\r\t(Smalltalk hasClassNamed: #FLSerializer)\r\t\tifTrue: [^ self useFuelSerializer].\r\r\tself useReferenceStreamSerializer.\r',			#stamp : 'dtl 2/19/2015 22:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1542' ],		#self : OmReference [ '1543' ],		#time : DateAndTime [ '2018-02-22T14:01:13.803786-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #parallelPerformance,			#protocol : #examples,			#sourceCode : 'parallelPerformance\r\t"Compare performance of three tasks run in parallel versus the equivalent serial\r\tprocessing. Results will vary depending on availability of CPU cores. On a quad core\r\tmachine, the parallel processing should complete in well under half the time of the\r\tequivalent serial job."\r\r\t"RemoteTask parallelPerformance"\r\r\t| parallelExecutionTime results sema task1 task2 task3 serialExecutionTime p1 p2 p3 |\r\tparallelExecutionTime := Time millisecondsToRun: [\r\t\tresults := Array new: 3.\r\t\tsema := Semaphore new.\r\t\ttask1 := [(100000000000000000000000000000 to: 100000000000000000000000019999)\r\t\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\t\ttask2 := [(100000000000000000000000020000 to: 100000000000000000000000039999)\r\t\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\t\ttask3 := [(100000000000000000000000040000 to: 100000000000000000000000059999)\r\t\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\t\t"n.b. assign to variables to prevent RemoteTask from being finalized"\r\t\tp1 := RemoteTask do: task1 whenComplete: [:result |  results at: 1 put: result. sema signal].\r\t\tp2 := RemoteTask do: task2 whenComplete: [:result | results at: 2 put: result. sema signal].\r\t\tp3 := RemoteTask do: task3 whenComplete: [:result |  results at: 3 put: result. sema signal].\r\t\tsema wait; wait; wait.\r\t\tresults].\r\r\tserialExecutionTime :=  Time millisecondsToRun: [\r\t\t(100000000000000000000000000000 to: 100000000000000000000000019999)\r\t\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString].\r\t\t(100000000000000000000000020000 to: 100000000000000000000000039999)\r\t\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString].\r\t\t(100000000000000000000000040000 to: 100000000000000000000000059999)\r\t\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\r\t^ { #parallelExecutionTime -> parallelExecutionTime . #serialExecutionTime -> serialExecutionTime }\r',			#stamp : 'dtl 11/13/2011 00:29',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1543' ],		#self : OmReference [ '1544' ],		#time : DateAndTime [ '2018-02-22T14:01:13.804366-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #threeParallelTasks,			#protocol : #examples,			#sourceCode : 'threeParallelTasks\r\t"Find all primes in a range of large integers. Divide the problem into\r\tthree tasks running the three child images, and return the results to\r\tthe supervisory image. Answer a tasks array and a results array, where\r\tthe results array will be populated on completion of the tasks."\r\r\t"RemoteTask threeParallelTasks"\r\r\t| p1 p2 p3 results task1 task2 task3 |\r\tresults := Array new: 3.\r\ttask1 := [(100000000000000000000000000000\r\t\t\t\t\tto: 100000000000000000000000019999)\r\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\ttask2 := [(100000000000000000000000020000\r\t\t\t\t\tto: 100000000000000000000000039999)\r\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\ttask3 := [(100000000000000000000000040000\r\t\t\t\t\tto: 100000000000000000000000059999)\r\t\t\t\tselect: [:f | f isPrime] thenCollect: [:s | s asString]].\r\t"n.b. Assign task to a variable to prevent RemoteTask from being finalized"\r\tp1 := RemoteTask do: task1 whenComplete: [:result | results at: 1 put: result].\r\tp2 := RemoteTask do: task2 whenComplete: [:result | results at: 2 put: result].\r\tp3 := RemoteTask do: task3 whenComplete: [:result | results at: 3 put: result].\r\t^ { #tasks -> { p1 . p2 . p3 } . #results -> results }',			#stamp : 'dtl 11/13/2011 00:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1544' ],		#self : OmReference [ '1545' ],		#time : DateAndTime [ '2018-02-22T14:01:13.805223-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #useFuelSerializer,			#protocol : #'class initialization',			#sourceCode : 'useFuelSerializer\r\t"RemoteTask useFuelSerializer"\r\r\tSerializer := (Smalltalk at: #FLSerializer ifAbsent: [self error: \'Fuel not installed\']) newDefault.\r\tMaterializer := (Smalltalk at: #FLMaterializer) newDefault..\r\t^SerializingStrategy := #fuel',			#stamp : 'dtl 2/16/2015 19:01',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1545' ],		#self : OmReference [ '1546' ],		#time : DateAndTime [ '2018-02-22T14:01:13.805788-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #useMagmaSerializer,			#protocol : #'class initialization',			#sourceCode : 'useMagmaSerializer\r\t"RemoteTask useMagmaSerializer"\r\r\tSerializer := (Smalltalk at: #MaObjectSerializer ifAbsent: [self error: \'Magma serializer not installed\']) new.\r\tMaterializer := Serializer.\r\t^SerializingStrategy := #magma',			#stamp : 'dtl 2/16/2015 19:00',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1546' ],		#self : OmReference [ '1547' ],		#time : DateAndTime [ '2018-02-22T14:01:13.806329-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'RemoteTask class',				#isMetaSide : true			},			#name : #useReferenceStreamSerializer,			#protocol : #'class initialization',			#sourceCode : 'useReferenceStreamSerializer\r\t"RemoteTask useReferenceStreamSerializer"\r\r\tSerializer := (Smalltalk at: #ReferenceStream).\r\tMaterializer := Serializer.\r\t^SerializingStrategy := #referenceStream',			#stamp : 'dtl 2/16/2015 19:01',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1547' ],		#self : OmReference [ '1548' ],		#time : DateAndTime [ '2018-02-22T14:01:13.806892-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #finalize,			#protocol : #finalization,			#sourceCode : 'finalize\r\t"If garbage collected before remote processing is complete, the AIO\r\thandler process should be terminated and the external process should\r\tbe stopped. When evaluating a #do:whenComplete: a reference should\r\tbe maintained to the RemoteTask in order to avoid this finalization."\r\r\taioHandler notNil\r\t\tifTrue: [ aioHandler close ].\r\tchildProxy notNil\r\t\tifTrue: [ childProxy terminate ]',			#stamp : 'ThierryGoubier 7/27/2017 22:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1548' ],		#self : OmReference [ '1549' ],		#time : DateAndTime [ '2018-02-22T14:01:13.807511-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #getResult,			#protocol : #serializing,			#sourceCode : 'getResult\r\t"Materialize the result, reading serialized data from standard input"\r\r\tSerializingStrategy = #referenceStream\r\t\tifTrue: [^(Materializer on: childProxy pipeFromOutput reader) next].\r\r\tSerializingStrategy = #fuel\r\t\tifTrue: [^(Materializer materializeFrom: childProxy pipeFromOutput reader binary) root].\r\r\tSerializingStrategy = #magma\r\t\tifTrue: [^Materializer objectFromStream: childProxy pipeFromOutput reader].\r\r\tself error: \'undefined strategy \', SerializingStrategy asString\r',			#stamp : 'dtl 2/16/2015 19:13',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1549' ],		#self : OmReference [ '1550' ],		#time : DateAndTime [ '2018-02-22T14:01:13.808083-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #'put:',			#protocol : #serializing,			#sourceCode : 'put: result\r\t"Serialize the result and write to standard output"\r\r\tSerializingStrategy = #referenceStream\r\t\tifTrue: [ ^ (Serializer on: OSProcess thisOSProcess stdOut) nextPut: result].\r\r\tSerializingStrategy = #fuel\r\t\tifTrue: [ ^ Serializer serialize: result on: OSProcess thisOSProcess stdOut binary].\r\r\tSerializingStrategy = #magma\r\t\tifTrue: [ ^Serializer object: result toStream: OSProcess thisOSProcess stdOut].\r\r\tself error: \'undefined strategy \', SerializingStrategy asString\r',			#stamp : 'dtl 2/16/2015 19:14',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1550' ],		#self : OmReference [ '1551' ],		#time : DateAndTime [ '2018-02-22T14:01:13.808625-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #registerForFinalization,			#protocol : #finalization,			#sourceCode : 'registerForFinalization\r\t\r\tself toFinalizeSend: #finalize:\r\t\tto: self class\r\t\twith: self copy\r',			#stamp : 'dtl 11/12/2011 23:07',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1551' ],		#self : OmReference [ '1552' ],		#time : DateAndTime [ '2018-02-22T14:01:13.809153-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #result,			#protocol : #evaluating,			#sourceCode : 'result\r\t"Answer the result of a previously started task. The child Squeak sends one\r\tresult object back to its parent Squeak before exiting."\r\r\t^self getResult\r',			#stamp : 'dtl 11/27/2011 12:26',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1552' ],		#self : OmReference [ '1553' ],		#time : DateAndTime [ '2018-02-22T14:01:13.810077-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #start,			#protocol : #evaluating,			#sourceCode : 'start\r\t"Fork a headless child Squeak to evaluate my task."\r\r\t| childBlock result |\r\r\tself registerForFinalization.\r\r\t"Create block to be evaluated in a Squeak child process."\r\tchildBlock := ["First set standard input to blocking. This avoids a delay to wait for\r\t\tdata to be available, but note that it is dangerous to do this unless you\r\t\tare certain that you know in advance that the correct number of characters\r\t\twill be available on the input. If this is not the case, then the VM will block\r\t\ton the read and lock up the child squeak process."\r\t\tresult := [self task value]\r\t\t\t\t\ton: Exception\r\t\t\t\t\tdo: [:e |\r\t\t\t\t\t\tHeadlessChild ifFalse: [ e halt; resume ].\r\t\t\t\t\t\tresult := \'remote task execution failed: \', e printString].\r\t\tOSProcess thisOSProcess stdIn setBlocking.\r\t\tself put: result.\r\t\tOSProcess thisOSProcess stdOut flush; close].\r\t"Fork a child Squeak that will evaluate the childBlock then exit"\r\tchildProxy := PipeableOSProcess\r\t\t\t\t\tforkSqueakAndDoThenQuit: childBlock\r\t\t\t\t\terrorPipelineStream: InternalPipe nonBlockingPipe\r\t\t\t\t\theadless: HeadlessChild\r\t\t\t\t\tbufferedOutput: false\r\t\t\t\t\toutputNotifier: aioHandler\r',			#stamp : 'dtl 2/19/2015 22:52',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1553' ],		#self : OmReference [ '1554' ],		#time : DateAndTime [ '2018-02-22T14:01:13.81061-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #task,			#protocol : #accessing,			#sourceCode : 'task\r\t"Answer the value of task"\r\r\t^ task',			#stamp : 'dtl 1/25/2010 19:03',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1554' ],		#self : OmReference [ '1555' ],		#time : DateAndTime [ '2018-02-22T14:01:13.811136-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #'task:',			#protocol : #accessing,			#sourceCode : 'task: anObject\r\t"Set the value of task"\r\r\ttask := anObject',			#stamp : 'dtl 1/25/2010 19:03',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1555' ],		#self : OmReference [ '1556' ],		#time : DateAndTime [ '2018-02-22T14:01:13.811735-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #'task:whenComplete:',			#protocol : #evaluating,			#sourceCode : 'task: taskBlock whenComplete: aOneArgumentBlock\r\t"Evaluate taskBlock in an image running in a separate OS process.\r\tSet the completion block, a block that takes result object as its single argument.\r\tStart remote processing with an AIO event notifier. Completion of the remote task\r\twill result in a changed notification from the event notifier, which will activate the\r\tcompletion block. The completion block is expected to do something useful with\r\tthe result of the remote task."\r\r\t"n.b. Inspect the RemoteTask to prevent it being garbage collected and finalized\r\tbefore processing is complete"\r\r\t"(RemoteTask new task: [2 + 2] whenComplete: [ :result | result inspect]) inspect"\r\t"(RemoteTask new task: [(Delay forSeconds: 3) wait. 2 + 2] whenComplete: [ :result | result inspect]) inspect"\r\r\ttask := taskBlock.\r\tcompletionBlock := aOneArgumentBlock.\r\taioHandler ifNotNil: [aioHandler close].\r\taioHandler := AioEventHandler new.\r\taioHandler addDependent: self.\r\tself start\r',			#stamp : 'dtl 11/12/2011 23:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1556' ],		#self : OmReference [ '1557' ],		#time : DateAndTime [ '2018-02-22T14:01:13.812294-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: anObject\r\t"An event handler has indicated availability of data on the pipe from\r\tthe remote process. Begin reading data until the entire result object\r\tis received. The remote process will exit when complete, but possibly\r\tnot until data has been read from the pipe, as it may block on write\r\tuntil the pipe has been serviced."\r\r\t(anObject isKindOf: AioEventHandler)\r\t\tifTrue: [[completionBlock\r\t\t\t\t\t\tifNotNil: [completionBlock value: self result]]\r\t\t\t\t\tensure: [anObject close]]',			#stamp : 'dtl 11/11/2011 10:47',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1557' ],		#self : OmReference [ '1558' ],		#time : DateAndTime [ '2018-02-22T14:01:13.812824-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RemoteTask,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Start a remote task and read the result object. The child Squeak sends one\r\tresult object back to its parent Squeak before exiting."\r\r\t"(RemoteTask new task: [2 + 2]) value"\r\r\tself start.\r\t^self result\r',			#stamp : 'dtl 11/27/2011 11:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1558' ],		#self : OmReference [ '1559' ],		#time : DateAndTime [ '2018-02-22T14:01:13.813371-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeJunction class',				#isMetaSide : true			},			#name : #externalPipeClass,			#protocol : #defaults,			#sourceCode : 'externalPipeClass\r\t"If external pipes are not supported, use an internal pipe instead"\r\r\t"self externalPipeClass"\r\r\t^ Smalltalk\r\t\tat: #ExternalPipe\r\t\tifAbsent: [Smalltalk\r\t\t\tat: #OSPipe "Older versions of OSProcess"\r\t\t\tifAbsent: [InternalPipe]]\r',			#stamp : 'dtl 4/2/2006 13:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1559' ],		#self : OmReference [ '1560' ],		#time : DateAndTime [ '2018-02-22T14:01:13.813973-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t"True after processing is complete and all available data has been read from\r\tthe output pipe."\r\r\t^ pipeFromOutput atEnd and: [self isComplete]\r',			#stamp : 'dtl 3/29/2003 11:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1560' ],		#self : OmReference [ '1561' ],		#time : DateAndTime [ '2018-02-22T14:01:13.81456-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #atEndOfFile,			#protocol : #testing,			#sourceCode : 'atEndOfFile\r\t"True after processing is complete and all available data has been read\r\tfrom the output pipe. Uses feof() to test for the end of file flag, which\r\twill have been set by a previous read operation."\r\r\t^ pipeFromOutput isNil\r\t\tor: [pipeFromOutput atEndOfFile\r\t\t\t\tand: [self isComplete]]',			#stamp : 'dtl 6/4/2006 18:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1561' ],		#self : OmReference [ '1562' ],		#time : DateAndTime [ '2018-02-22T14:01:13.815368-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #canProvideOutputPipe,			#protocol : #testing,			#sourceCode : 'canProvideOutputPipe\r\t"If a subclass is not able to provide pipe output, it may answer false.\r\tThis may happen if output has been redirected to a file."\r\r\t^ self pipeFromOutput notNil',			#stamp : 'dtl 11/15/2002 09:09',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1562' ],		#self : OmReference [ '1563' ],		#time : DateAndTime [ '2018-02-22T14:01:13.815941-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #close,			#protocol : #'initialize - release',			#sourceCode : 'close\r\t"Close pipe to proxy input."\r\r\tpipeToInput ifNotNil: [pipeToInput close]\r',			#stamp : 'dtl 3/11/2007 11:00',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1563' ],		#self : OmReference [ '1564' ],		#time : DateAndTime [ '2018-02-22T14:01:13.81651-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #closeErrorPipeline,			#protocol : #'initialize - release',			#sourceCode : 'closeErrorPipeline\r\r\tself errorPipelineStream ifNotNil: [[errorPipelineStream close]\r\t\ton: Error\r\t\tdo: ["may be called from multiple processes, so tolerate primitive failure"]]\r',			#stamp : 'dtl 8/24/2012 08:31',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1564' ],		#self : OmReference [ '1565' ],		#time : DateAndTime [ '2018-02-22T14:01:13.817067-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #closeOutput,			#protocol : #'initialize - release',			#sourceCode : 'closeOutput\r\r\tself pipeFromOutput ifNotNil: [pipeFromOutput close]\r',			#stamp : 'dtl 9/3/2010 17:15',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1565' ],		#self : OmReference [ '1566' ],		#time : DateAndTime [ '2018-02-22T14:01:13.817649-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #closePipeInputs,			#protocol : #'initialize - release',			#sourceCode : 'closePipeInputs\r\t"Close all pipe endpoints not used after process termination."\r\r\tpipeToInput\r\t\tifNotNil: [pipeToInput close].\r\tpipeFromOutput ifNotNil:\r\t\t[pipeFromOutput isPipe\r\t\t\tifTrue: [pipeFromOutput closeWriter]\r\t\t\tifFalse: [pipeFromOutput close]]\r',			#stamp : 'dtl 11/24/2006 12:59',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1566' ],		#self : OmReference [ '1567' ],		#time : DateAndTime [ '2018-02-22T14:01:13.818212-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #closePipes,			#protocol : #'initialize - release',			#sourceCode : 'closePipes\r\r\tself closeOutput.\r\tpipeToInput ifNotNil: [pipeToInput close].\r\tself errorHasBeenRedirected ifTrue: [errorPipelineStream close]\r',			#stamp : 'dtl 8/20/2006 18:54',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1567' ],		#self : OmReference [ '1568' ],		#time : DateAndTime [ '2018-02-22T14:01:13.81877-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #closeWriter,			#protocol : #'initialize - release',			#sourceCode : 'closeWriter\r\t"No further input expected"\r\r\t(self pipeToInput notNil and: [pipeToInput isPipe])\r\t\tifTrue: [pipeToInput closeWriter]\r',			#stamp : 'dtl 8/26/2006 13:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1568' ],		#self : OmReference [ '1569' ],		#time : DateAndTime [ '2018-02-22T14:01:13.819318-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #complete,			#protocol : #'event handling',			#sourceCode : 'complete\r\t"Evaluation has been completed. Perform any necessary cleanup."\r\r\t^ self closePipeInputs\r',			#stamp : 'dtl 8/26/2006 12:11',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1569' ],		#self : OmReference [ '1570' ],		#time : DateAndTime [ '2018-02-22T14:01:13.819882-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #enableErrorStreamTriggers,			#protocol : #'event handling',			#sourceCode : 'enableErrorStreamTriggers\r\t"Set the error stream to be event driven if possible, and answer true\r\tif event driven output is supported, otherwise false."\r\r\t^ false',			#stamp : 'dtl 11/14/2002 06:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1570' ],		#self : OmReference [ '1571' ],		#time : DateAndTime [ '2018-02-22T14:01:13.820759-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #enableEventTriggers,			#protocol : #'event handling',			#sourceCode : 'enableEventTriggers\r\t"Set the output stream to be event driven if possible, and answer true if\r\tevent driven output is supported, otherwise false. See #update: for event\r\ttriggering logic."\r\r\t^ self enableOutputStreamTriggers\r',			#stamp : 'dtl 1/6/2003 20:31',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1571' ],		#self : OmReference [ '1572' ],		#time : DateAndTime [ '2018-02-22T14:01:13.821316-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #enableOutputStreamTriggers,			#protocol : #'event handling',			#sourceCode : 'enableOutputStreamTriggers\r\t"Set the output stream to be event driven if possible, and answer true\r\tif event driven output is supported, otherwise false."\r\r\t(pipeFromOutput notNil and: [pipeFromOutput isPipe])\r\t\tifTrue: [^ pipeFromOutput setBufferedReader]\r\t\tifFalse: [^ false]\r\r',			#stamp : 'dtl 6/5/2006 07:19',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1572' ],		#self : OmReference [ '1573' ],		#time : DateAndTime [ '2018-02-22T14:01:13.821974-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #ensurePipeFromOutput,			#protocol : #'initialize - release',			#sourceCode : 'ensurePipeFromOutput\r\t"Make sure that an output pipe is provided."\r\r\t^ self pipeFromOutput ifNil: [self pipeFromOutput: InternalPipe new]\r',			#stamp : 'dtl 1/25/2003 13:07',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1573' ],		#self : OmReference [ '1574' ],		#time : DateAndTime [ '2018-02-22T14:01:13.822532-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #errorHasBeenRedirected,			#protocol : #testing,			#sourceCode : 'errorHasBeenRedirected\r\t"Answer true if the error output has been redirected to an external file\r\tand is not available to be read as error output of a pipeline."\r\r\t^ self errorPipelineStream isPipe not\r',			#stamp : 'dtl 11/21/2006 14:56',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1574' ],		#self : OmReference [ '1575' ],		#time : DateAndTime [ '2018-02-22T14:01:13.823084-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #errorPipeForNextProxy,			#protocol : #'command pipelines',			#sourceCode : 'errorPipeForNextProxy\r\r\t^ self errorHasBeenRedirected\r\t\tifTrue: [nil]\r\t\tifFalse: [self errorPipelineStream]\r',			#stamp : 'dtl 3/22/2003 14:48',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1575' ],		#self : OmReference [ '1576' ],		#time : DateAndTime [ '2018-02-22T14:01:13.823663-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #errorPipelineStream,			#protocol : #accessing,			#sourceCode : 'errorPipelineStream\r\t"Accumulates the error output of commands in a command pipeline."\r\r\terrorPipelineStream isNil ifTrue: [errorPipelineStream := InternalPipe nonBlockingPipe].\r\t^ errorPipelineStream\r',			#stamp : 'dtl 11/8/2007 20:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1576' ],		#self : OmReference [ '1577' ],		#time : DateAndTime [ '2018-02-22T14:01:13.824208-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'errorPipelineStream:',			#protocol : #accessing,			#sourceCode : 'errorPipelineStream: aStream\r\t"Accumulates the error output of commands in a command pipeline."\r\r\terrorPipelineStream := aStream\r',			#stamp : 'dtl 11/8/2007 20:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1577' ],		#self : OmReference [ '1578' ],		#time : DateAndTime [ '2018-02-22T14:01:13.824811-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #errorUpToEnd,			#protocol : #streaming,			#sourceCode : 'errorUpToEnd\r\t"Answer all available characters from my error stream."\r\r\t^ (errorPipelineStream isNil or: [self errorHasBeenRedirected])\r\t\tifTrue: [\'\']\r\t\tifFalse: [errorPipelineStream upToEnd]\r',			#stamp : 'dtl 6/3/2006 10:40',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1578' ],		#self : OmReference [ '1579' ],		#time : DateAndTime [ '2018-02-22T14:01:13.825429-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #errorUpToEndOfFile,			#protocol : #streaming,			#sourceCode : 'errorUpToEndOfFile\r\t"Answer all available characters from the error stream. Block and\r\tcontinue reading until end of file is detected."\r\r\t^ (errorPipelineStream isNil or: [self errorHasBeenRedirected])\r\t\tifTrue: [\'\']\r\t\tifFalse: [errorPipelineStream upToEndOfFile]\r',			#stamp : 'dtl 7/17/2006 05:48',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1579' ],		#self : OmReference [ '1580' ],		#time : DateAndTime [ '2018-02-22T14:01:13.826295-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #flush,			#protocol : #streaming,			#sourceCode : 'flush\r\t"Flush output to the standard input stream of my external process. If no\r\texternal process is involved, do nothing."\r',			#stamp : 'dtl 9/19/2002 09:30',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1580' ],		#self : OmReference [ '1581' ],		#time : DateAndTime [ '2018-02-22T14:01:13.826936-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'handleRedirectedOutputOf:',			#protocol : #'event handling',			#sourceCode : 'handleRedirectedOutputOf: predecessorProxy\r\t"If the output of predecessorProxy (in a pipeline) has been redirected,\r\tthis pipe junction will not know when predecessorProxy has completed\r\tunless it requests notification. The pipe to input of this pipe junction should\r\tnot be closed until predecessorProxy is complete, so close the pipe when the\r\tcompletion event occurs."\r\r\tpredecessorProxy ifNotNil:\r\t\t[(predecessorProxy canProvideOutputPipe not\r\t\t\tand: [self inputHasBeenRedirected not]) ifTrue:\r\t\t\t\t[self pipeToInput\r\t\t\t\t\tifNotNil:\r\t\t\t\t\t\t[predecessorProxy\r\t\t\t\t\t\t\twhen: #complete\r\t\t\t\t\t\t\tsend: #close\r\t\t\t\t\t\t\tto: pipeToInput writer]]]\r',			#stamp : 'dtl 9/3/2010 17:17',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1581' ],		#self : OmReference [ '1582' ],		#time : DateAndTime [ '2018-02-22T14:01:13.827559-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\r\t(self requiresNonBlockingInput and: [pipeToInput isKindOf: OSPipe])\r\t\tifTrue:[pipeToInput setNonBlocking]\r\t\t\t\r',			#stamp : 'dtl 9/10/2002 00:15',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1582' ],		#self : OmReference [ '1583' ],		#time : DateAndTime [ '2018-02-22T14:01:13.82813-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #inputHasBeenRedirected,			#protocol : #testing,			#sourceCode : 'inputHasBeenRedirected\r\t"Answer true if the input stream has been redirected to an external file."\r\r\t^ self pipeToInput notNil and: [pipeToInput isPipe not]\r',			#stamp : 'dtl 11/21/2006 16:21',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1583' ],		#self : OmReference [ '1584' ],		#time : DateAndTime [ '2018-02-22T14:01:13.82873-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #isComplete,			#protocol : #testing,			#sourceCode : 'isComplete\r\r\t^ self subclassResponsibility\r',			#stamp : 'dtl 4/14/2006 11:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1584' ],		#self : OmReference [ '1585' ],		#time : DateAndTime [ '2018-02-22T14:01:13.829269-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #isExternalProcess,			#protocol : #testing,			#sourceCode : 'isExternalProcess\r\t"Answer true if the process which I represent is an external OSProcess."\r\r\t^ false',			#stamp : 'dtl 3/9/2002 18:16',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1585' ],		#self : OmReference [ '1586' ],		#time : DateAndTime [ '2018-02-22T14:01:13.829876-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #next,			#protocol : #streaming,			#sourceCode : 'next\r\r\t^ pipeFromOutput next\r',			#stamp : 'dtl 9/19/2002 09:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1586' ],		#self : OmReference [ '1587' ],		#time : DateAndTime [ '2018-02-22T14:01:13.830468-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'next:',			#protocol : #streaming,			#sourceCode : 'next: count\r\r\t^ pipeFromOutput next: count\r',			#stamp : 'dtl 9/19/2002 09:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1587' ],		#self : OmReference [ '1588' ],		#time : DateAndTime [ '2018-02-22T14:01:13.831058-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'nextFromError:',			#protocol : #streaming,			#sourceCode : 'nextFromError: count\r\t"Answer up to count characters from the error pipeline stream, or an empty string\r\tif no data is available. All characters are routed through the errorPipelineStream,\r\tso that they are concatenated with any preceeding error message text (possibly from\r\ta preceeding process in a command pipeline)."\r\r\t^ errorPipelineStream next: count\r',			#stamp : 'dtl 9/19/2002 09:28',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1588' ],		#self : OmReference [ '1589' ],		#time : DateAndTime [ '2018-02-22T14:01:13.831926-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #streaming,			#sourceCode : 'nextPut: aCharacter\r\t"Write aCharacter to the standard input stream of my external process."\r\r\t^ pipeToInput nextPut: aCharacter',			#stamp : 'dtl 9/19/2002 09:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1589' ],		#self : OmReference [ '1590' ],		#time : DateAndTime [ '2018-02-22T14:01:13.832485-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #streaming,			#sourceCode : 'nextPutAll: characters\r\t"Write characters to the standard input stream of my external process."\r\r\t^ pipeToInput nextPutAll: characters',			#stamp : 'dtl 9/19/2002 09:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1590' ],		#self : OmReference [ '1591' ],		#time : DateAndTime [ '2018-02-22T14:01:13.833072-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #output,			#protocol : #'command pipelines',			#sourceCode : 'output\r\t"Wait for process completion, and answer all available output."\r\r\t"((PipeableOSProcess command: \'ps\') | \'grep squeak\' | \'cut -c16-100\') output"\r\r\t^ (self isNotYetRunning not and: [self canProvideOutputPipe])\r\t\tifTrue: [(self outputOn: (WriteStream on: String new)) contents]\r\t\tifFalse: [\'\']\r',			#stamp : 'dtl 2/24/2013 10:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1591' ],		#self : OmReference [ '1592' ],		#time : DateAndTime [ '2018-02-22T14:01:13.833699-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #outputAndError,			#protocol : #'command pipelines',			#sourceCode : 'outputAndError\r\t"Answer an array with output and error contents. If standard error has been\r\tredirected to a file, answer a null string as the error message."\r\r\t"((PipeableOSProcess command: \'ps\') | \'NoSuchCommand; grep squeak\' | \'cut -c16-100\') outputAndError"\r\r\t| out err |\r\tout := self output.\r\t(self errorHasBeenRedirected)\r\t\tifTrue: [err := \'\']\r\t\tifFalse: [err := errorPipelineStream contents].\r\t^ Array with: out with: err',			#stamp : 'dtl 11/8/2007 20:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1592' ],		#self : OmReference [ '1593' ],		#time : DateAndTime [ '2018-02-22T14:01:13.834276-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'outputOn:',			#protocol : #'command pipelines',			#sourceCode : 'outputOn: aStream\r\t"Wait for process completion, writing all available output on aStream"\r\r\t| d |\r\td := nil.\r\t[self isComplete] whileFalse:\r\t\t[(d ifNil: [d := Delay forMilliseconds: 50]) wait.\r\t\taStream nextPutAll: self upToEnd].\r\taStream nextPutAll: self upToEndOfFile.\r\t^ aStream\r',			#stamp : 'dtl 11/8/2007 20:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1593' ],		#self : OmReference [ '1594' ],		#time : DateAndTime [ '2018-02-22T14:01:13.834833-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #outputPipeForNextProxy,			#protocol : #'command pipelines',			#sourceCode : 'outputPipeForNextProxy\r\r\t^ self canProvideOutputPipe\r\t\tifTrue: [pipeFromOutput]\r\t\tifFalse: [nil]\r',			#stamp : 'dtl 4/14/2006 11:31',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1594' ],		#self : OmReference [ '1595' ],		#time : DateAndTime [ '2018-02-22T14:01:13.835384-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #pipeFromOutput,			#protocol : #accessing,			#sourceCode : 'pipeFromOutput\r\r\t^ pipeFromOutput',			#stamp : 'dtl 3/4/2002 21:46',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1595' ],		#self : OmReference [ '1596' ],		#time : DateAndTime [ '2018-02-22T14:01:13.835988-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'pipeFromOutput:',			#protocol : #accessing,			#sourceCode : 'pipeFromOutput: aPipeStream\r\r\t(pipeFromOutput := aPipeStream)\r\t\tifNotNil: [pipeFromOutput addDependent: self]\r',			#stamp : 'dtl 9/3/2010 17:18',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1596' ],		#self : OmReference [ '1597' ],		#time : DateAndTime [ '2018-02-22T14:01:13.836542-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #pipeToInput,			#protocol : #accessing,			#sourceCode : 'pipeToInput\r\r\t^ pipeToInput',			#stamp : 'dtl 3/4/2002 21:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1597' ],		#self : OmReference [ '1598' ],		#time : DateAndTime [ '2018-02-22T14:01:13.837402-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'pipeToInput:',			#protocol : #accessing,			#sourceCode : 'pipeToInput: aPipeStream\r\r\tpipeToInput := aPipeStream',			#stamp : 'dtl 11/8/2007 20:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1598' ],		#self : OmReference [ '1599' ],		#time : DateAndTime [ '2018-02-22T14:01:13.837984-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #pipesAreEmpty,			#protocol : #testing,			#sourceCode : 'pipesAreEmpty\r\t"True after processing is complete and all available data has been read \r\tfrom the output pipe and the errorPipelineStream pipe."\r\r\t^ self atEndOfFile\r\t\tand: [self errorHasBeenRedirected\r\t\t\t\tor: [errorPipelineStream atEnd]]',			#stamp : 'dtl 6/4/2006 17:26',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1599' ],		#self : OmReference [ '1600' ],		#time : DateAndTime [ '2018-02-22T14:01:13.838561-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'prepareOutputFor:',			#protocol : #'initialize - release',			#sourceCode : 'prepareOutputFor: aPipeJunction\r\t"External process proxies are independent of the Smalltalk image and do\r\tnot require event driven input. Internal proxies will prefer to request\r\tevent notification."\r\r\taPipeJunction isExternalProcess\r\t\tifTrue: [self prepareOutputForPipe]\r\t\tifFalse: [self prepareOutputForInternalReader]\r',			#stamp : 'dtl 1/2/2003 21:18',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1600' ],		#self : OmReference [ '1601' ],		#time : DateAndTime [ '2018-02-22T14:01:13.839132-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #prepareOutputForInternalReader,			#protocol : #'command pipelines - private',			#sourceCode : 'prepareOutputForInternalReader\r\t"Output stream will be used directly by a Smalltalk process. Set output \r\tstream characteristics accordingly."\r\r\tself canProvideOutputPipe\r\t\tifTrue: [pipeFromOutput setNonBlocking].\r\tself enableEventTriggers',			#stamp : 'dtl 11/25/2006 11:03',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1601' ],		#self : OmReference [ '1602' ],		#time : DateAndTime [ '2018-02-22T14:01:13.839729-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #prepareOutputForPipe,			#protocol : #'command pipelines - private',			#sourceCode : 'prepareOutputForPipe\r\t"Output stream will be used by another process proxy as input. Set output stream\r\tcharacteristics accordingly. The output stream will be owned by the next process\r\tin a pipeline, but the error stream is shared by all processes in the pipeline, and\r\tcan be event driven."\r\r\tSmalltalk\r\t\tat: #AioEventHandler\r\t\tifPresent: [:aio | aio aioPluginPresent\r\t\t\t\tifTrue: [self enableErrorStreamTriggers]]',			#stamp : 'dtl 12/3/2006 12:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1602' ],		#self : OmReference [ '1603' ],		#time : DateAndTime [ '2018-02-22T14:01:13.840285-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #release,			#protocol : #'initialize - release',			#sourceCode : 'release\r\t"The input pipe may be released, but the output and error pipes may\r\tstill be in use."\r\r\tself pipeToInput release.\r\t^ super release',			#stamp : 'dtl 1/4/2003 15:44',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1603' ],		#self : OmReference [ '1604' ],		#time : DateAndTime [ '2018-02-22T14:01:13.84087-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'replaceOutputStreamWith:',			#protocol : #'command pipelines',			#sourceCode : 'replaceOutputStreamWith: anotherStream\r\t"Sender is not happy with the kind of output stream we are using. Replace\r\tpipeFromOutput with anotherStream, and copy the current contents of pipeFromOutput\r\tto the new stream."\r\r\t| oldOutputStream |\r\toldOutputStream := self pipeFromOutput.\r\toldOutputStream removeDependent: self. "Break old dependency"\r\tself pipeFromOutput: anotherStream. "Restores the dependency automatically"\r\toldOutputStream ifNotNil:\r\t\t[anotherStream ifNotNil:\r\t\t\t[anotherStream nextPutAll: oldOutputStream contents].\r\t\toldOutputStream close]\r',			#stamp : 'dtl 11/8/2007 20:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1604' ],		#self : OmReference [ '1605' ],		#time : DateAndTime [ '2018-02-22T14:01:13.841439-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #requiresNonBlockingInput,			#protocol : #testing,			#sourceCode : 'requiresNonBlockingInput\r\t"A PipeJunction managed by Squeak may be subject to deadlocks associated with\r\treading or writing an OSPipe. Answer true if the input pipe must function in\r\tnonBlocking mode in order to prevent deadlocks. This method exists simply to\r\tmake the requirement explicit."\r\r\t^ true',			#stamp : 'dtl 9/9/2002 13:50',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1605' ],		#self : OmReference [ '1606' ],		#time : DateAndTime [ '2018-02-22T14:01:13.842058-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #resetStdioStreams,			#protocol : #'initialize - release',			#sourceCode : 'resetStdioStreams\r\t"After an image restart, call this method to reset to the correct input, output\r\tand error streams if they are attached to standard input, output or error."\r\r\tSmalltalk at: #OSProcess ifPresent:\r\t\t[:osp |\r\t\t((self pipeToInput respondsTo: #isStdIn) and: [pipeToInput isStdIn])\r\t\t\tifTrue: [self pipeToInput: osp thisOSProcess stdIn].\r\t\t((self pipeToInput respondsTo: #isStdOut) and: [pipeToInput isStdOut])\r\t\t\tifTrue: [self pipeToInput: osp thisOSProcess stdOut].\r\t\t((self pipeToInput respondsTo: #isStdErr) and: [pipeToInput isStdErr])\r\t\t\tifTrue: [self pipeToInput: osp thisOSProcess stdErr]]\r',			#stamp : 'dtl 7/14/2002 23:51',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1606' ],		#self : OmReference [ '1607' ],		#time : DateAndTime [ '2018-02-22T14:01:13.842938-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #setNonBlockingOutput,			#protocol : #'initialize - release',			#sourceCode : 'setNonBlockingOutput\r\t"Check first to make sure process is not complete because pipeFromOutput will not respond\r\tto #setNonBlocking after the process has exited."\r\r\tself isComplete ifFalse: [pipeFromOutput setNonBlocking]',			#stamp : 'dtl 9/28/2002 20:54',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1607' ],		#self : OmReference [ '1608' ],		#time : DateAndTime [ '2018-02-22T14:01:13.843507-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #triggerComplete,			#protocol : #'event handling',			#sourceCode : 'triggerComplete\r\r\tself triggerEvent: #complete\r',			#stamp : 'dtl 7/7/2006 00:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1608' ],		#self : OmReference [ '1609' ],		#time : DateAndTime [ '2018-02-22T14:01:13.844097-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #triggerErrorDataReady,			#protocol : #'event handling',			#sourceCode : 'triggerErrorDataReady\r\r\tself triggerEvent: #errorDataReady.\r\tProcessor yield\r',			#stamp : 'dtl 7/7/2006 09:11',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1609' ],		#self : OmReference [ '1610' ],		#time : DateAndTime [ '2018-02-22T14:01:13.844663-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #triggerOutputDataReady,			#protocol : #'event handling',			#sourceCode : 'triggerOutputDataReady\r\r\tself triggerEvent: #outputDataReady.\r\tProcessor yield\r',			#stamp : 'dtl 7/7/2006 09:11',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1610' ],		#self : OmReference [ '1611' ],		#time : DateAndTime [ '2018-02-22T14:01:13.845226-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #streaming,			#sourceCode : 'upToEnd\r\t"Answer all available characters from the output stream."\r\r\t^ (self pipeFromOutput notNil and: [self canProvideOutputPipe])\r\t\tifTrue: [pipeFromOutput upToEnd]\r\t\tifFalse: [\'\']\r',			#stamp : 'dtl 6/3/2006 10:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1611' ],		#self : OmReference [ '1612' ],		#time : DateAndTime [ '2018-02-22T14:01:13.845803-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #streaming,			#sourceCode : 'upToEndOfFile\r\t"Answer all available characters from the output stream. Block and\r\tcontinue reading until end of file is detected."\r\r\t^ (self pipeFromOutput notNil and: [self canProvideOutputPipe])\r\t\tifTrue: [pipeFromOutput upToEndOfFile]\r\t\tifFalse: [\'\']\r',			#stamp : 'dtl 6/3/2006 10:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1612' ],		#self : OmReference [ '1613' ],		#time : DateAndTime [ '2018-02-22T14:01:13.84635-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\r\t^ self changed: aParameter\r',			#stamp : 'dtl 8/19/2006 11:43',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1613' ],		#self : OmReference [ '1614' ],		#time : DateAndTime [ '2018-02-22T14:01:13.846903-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeJunction,				#isMetaSide : false			},			#name : #updateErrorPipelineStream,			#protocol : #'event handling',			#sourceCode : 'updateErrorPipelineStream\r\t"Ensure that all available error output is placed into errorPipelineStream."\r',			#stamp : 'dtl 11/21/2002 18:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1614' ],		#self : OmReference [ '1615' ],		#time : DateAndTime [ '2018-02-22T14:01:13.847592-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExpressionEvaluator class',				#isMetaSide : true			},			#name : #'block:',			#protocol : #'instance creation',			#sourceCode : 'block: aBlock\r\r\t"(self block: [#\'This block answers a symbol as String\']) value upToEnd"\r\r\t^ self basicNew block: aBlock\r',			#stamp : 'dtl 3/26/2006 12:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1615' ],		#self : OmReference [ '1616' ],		#time : DateAndTime [ '2018-02-22T14:01:13.848547-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExpressionEvaluator class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'instance creation',			#sourceCode : 'command: aString\r\r\t"(self command: \'\'\'Hello world!\'\'\') value upToEnd"\r\r\t^ self basicNew command: aString\r',			#stamp : 'dtl 3/26/2006 12:09',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1616' ],		#self : OmReference [ '1617' ],		#time : DateAndTime [ '2018-02-22T14:01:13.84911-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExpressionEvaluator class',				#isMetaSide : true			},			#name : #'command:pipeFrom:errorPipelineStream:',			#protocol : #'instance creation',			#sourceCode : 'command: aString pipeFrom: inputStream errorPipelineStream: errorStream\r\r\t"(self command: \'stdout nextPutAll: stdin upToEnd\'\r\t\tpipeFrom: (ReadStream on: \'Here is some input text\')\r\t\terrorPipelineStream: InternalPipe nonBlockingPipe)\r\t\t\tvalue upToEnd"\r\r\t^ self command: aString pipeFrom: inputStream pipeTo: nil errorPipelineStream: errorStream',			#stamp : 'dtl 12/13/2007 21:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1617' ],		#self : OmReference [ '1618' ],		#time : DateAndTime [ '2018-02-22T14:01:13.849672-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExpressionEvaluator class',				#isMetaSide : true			},			#name : #'command:pipeFrom:pipeTo:errorPipelineStream:',			#protocol : #'instance creation',			#sourceCode : 'command: aString pipeFrom: inputStream pipeTo: outputStream errorPipelineStream: errorStream\r\r\t"(self command: \'stdout nextPutAll: stdin contents\'\r\t\tpipeFrom: (ReadStream on: \'Here is some input text\')\r\t\tpipeTo: nil\r\t\terrorPipelineStream: InternalPipe nonBlockingPipe)\r\t\t\tvalue upToEnd"\r\r\t^ super new\r\t\texpression: aString;\r\t\tpipeToInput: inputStream;\r\t\tpipeFromOutput: outputStream;\r\t\terrorPipelineStream: errorStream;\r\t\tnotYetRunning;\r\t\tinitialize',			#stamp : 'dtl 12/13/2007 21:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1618' ],		#self : OmReference [ '1619' ],		#time : DateAndTime [ '2018-02-22T14:01:13.850248-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #'addTreeLeaves:to:',			#protocol : #evaluating,			#sourceCode : 'addTreeLeaves: treeOfSymbols to: aCollection\r\t"Flatten a tree of Symbols built by a Scanner."\r\r\ttreeOfSymbols do: [:e |\r\t\t(e isKindOf: Array)\r\t\t\tifTrue: [self addTreeLeaves: e to: aCollection]\r\t\t\tifFalse: [aCollection add: e]].\r\t^ aCollection',			#stamp : 'dtl 2/1/2003 16:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1619' ],		#self : OmReference [ '1620' ],		#time : DateAndTime [ '2018-02-22T14:01:13.850804-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #'block:',			#protocol : #'initialize - release',			#sourceCode : 'block: aBlock\r\r\tself evaluationBlock: aBlock.\r\tself initialize.\r\tself prepareOutputForInternalReader\r',			#stamp : 'dtl 4/19/2003 16:29',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1620' ],		#self : OmReference [ '1621' ],		#time : DateAndTime [ '2018-02-22T14:01:13.851438-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #blockString,			#protocol : #evaluating,			#sourceCode : 'blockString\r\t"Answer source code for a block to execute my expression. Attempt to give it the correct\r\tnumber of parameters based on scanning expression for use of #args, #stderr, #stdout,\r\tand #stdin tokens."\r\r\t"PipeableEvaluator new expression: \'stdout nextPutAll: (args at: 4)\'; blockString"\r\t"PipeableEvaluator new expression: \'stderr nextPutAll: stdin contents\'; blockString"\r\t"PipeableEvaluator new expression: \'stdout nextPutAll: stdin contents\'; blockString"\r\t"PipeableEvaluator new expression: \'stdin contents\'; blockString"\r\t"PipeableEvaluator new expression: \'#HelloWorld\'; blockString"\r\r\t| tokens prefix |\r\tself expression isNil\r\t\tifTrue:\r\t\t\t[^ \'[]\']\r\t\tifFalse:\r\t\t\t[tokens := self addTreeLeaves: (Scanner new scanTokens: expression) to: OrderedCollection new.\r\t\t\t(tokens includes: #args)\r\t\t\t\tifTrue:\r\t\t\t\t\t[prefix := \'[:stdin :stdout :stderr :args | \']\r\t\t\t\tifFalse:\r\t\t\t\t\t[(tokens includes: #stderr)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[prefix := \'[:stdin :stdout :stderr | \']\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[(tokens includes: #stdout)\r\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t[prefix := \'[:stdin :stdout | \']\r\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t[(tokens includes: #stdin)\r\t\t\t\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t\t\t\t[prefix := \'[:stdin | \']\r\t\t\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t\t\t[prefix := \'[\']]]].\r\t\t\t^ prefix, self expression, \']\']\r',			#stamp : 'dtl 11/8/2007 20:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1621' ],		#self : OmReference [ '1622' ],		#time : DateAndTime [ '2018-02-22T14:01:13.852462-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #blockValue,			#protocol : #evaluating,			#sourceCode : 'blockValue\r\t"Evaluate my evaluationBlock. For a smart block, answer self. For a dumb\r\tblock, answer the result of evaluating it. Heuristic: If the block receives\r\ttwo or more arguments, then assume that it was smart enough to write\r\toutput to stdout. Otherwise, assume that it was a dumb block."\r\r\t| nArgs |\r\tself evaluationBlock ifNil: [^ nil].\r\tnArgs := evaluationBlock numArgs.\r\t(nArgs == 0)\r\t\tifTrue: "dumb block"\r\t\t\t[^ evaluationBlock value]\r\t\tifFalse:\r\t\t\t[(nArgs == 4)\r\t\t\t\tifTrue: "smart block"\r\t\t\t\t\t[evaluationBlock\r\t\t\t\t\t\tvalue: self pipeToInput\r\t\t\t\t\t\tvalue: self pipeFromOutput\r\t\t\t\t\t\tvalue: self errorPipelineStream\r\t\t\t\t\t\tvalue: self argumentArray]\r\t\t\t\tifFalse:\r\t\t\t\t\t[(nArgs == 3)\r\t\t\t\t\t\tifTrue: "smart block"\r\t\t\t\t\t\t\t[evaluationBlock\r\t\t\t\t\t\t\t\tvalue: self pipeToInput\r\t\t\t\t\t\t\t\tvalue: self pipeFromOutput\r\t\t\t\t\t\t\t\tvalue: self errorPipelineStream]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[(nArgs == 2)\r\t\t\t\t\t\t\t\tifTrue: "smart block"\r\t\t\t\t\t\t\t\t\t[evaluationBlock\r\t\t\t\t\t\t\t\t\t\tvalue: self pipeToInput\r\t\t\t\t\t\t\t\t\t\tvalue: self pipeFromOutput]\t\r\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t[(nArgs == 1)\r\t\t\t\t\t\t\t\t\t\tifTrue: "dumb block"\r\t\t\t\t\t\t\t\t\t\t\t[^ evaluationBlock value: self pipeToInput]\r\t\t\t\t\t\t\t\t\t\tifFalse: "really stupid block"\r\t\t\t\t\t\t\t\t\t\t\t[self error: \'expected block with 4 or fewer arguments\'.\r\t\t\t\t\t\t\t\t\t\t\t^ nil]]]]]\r',			#stamp : 'dtl 11/8/2007 20:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1622' ],		#self : OmReference [ '1623' ],		#time : DateAndTime [ '2018-02-22T14:01:13.853273-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #'command:',			#protocol : #'initialize - release',			#sourceCode : 'command: aString\r\r\tself expression: aString.\r\tself initialize.\r\tself prepareOutputForInternalReader\r',			#stamp : 'dtl 4/19/2003 16:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1623' ],		#self : OmReference [ '1624' ],		#time : DateAndTime [ '2018-02-22T14:01:13.854375-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #compile,			#protocol : #evaluating,			#sourceCode : 'compile\r\t"Compile my expression into a block with zero to four parameters. The parameters,\r\tif present, correspond to my pipeToInput, pipeFromOutput, errorPipelineStream, and\r\tan array of extra parameters (in that order). By convention, these are named \'stdin\',\r\t\'stdout\', \'stderr\', and \'args\' within my expression string.\r\r\tIf the compilation fails due to a syntax error (compile time failure, not run time\r\tfailure), put an error message on the standard error stream and answer a block\r\twhich evaluates to a null string."\r\r\tevaluationBlock ifNil:\r\t\t[evaluationBlock :=\r\t\t\t[Compiler evaluate: self blockString\r\t\t\t\t\tfor: self\r\t\t\t\t\tnotifying: self\r\t\t\t\t\tlogged: false]\r\t\t\t\ton: Exception\r\t\t\t\tdo: [:e |\r\t\t\t\t\tself errorPipelineStream\r\t\t\t\t\t\tnextPutAll: \'Compiler: invalid Smalltalk expression \', self blockString;\r\t\t\t\t\t\tnextPut: Character lf.\r\t\t\t\t\tself fail.\r\t\t\t\t\tnil]]\r',			#stamp : 'dtl 11/29/2010 23:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1624' ],		#self : OmReference [ '1625' ],		#time : DateAndTime [ '2018-02-22T14:01:13.854936-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #evaluationBlock,			#protocol : #accessing,			#sourceCode : 'evaluationBlock\r\t"Answer the block to be evaluated, possibly compiling it from the expression string."\r\r\tevaluationBlock ifNil: [self compile].\r\t^ evaluationBlock',			#stamp : 'dtl 2/1/2003 16:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1625' ],		#self : OmReference [ '1626' ],		#time : DateAndTime [ '2018-02-22T14:01:13.855476-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #'evaluationBlock:',			#protocol : #accessing,			#sourceCode : 'evaluationBlock: aBlock\r\t"The block to be evaluated, possibly compiled from the expression string."\r\r\tevaluationBlock := aBlock',			#stamp : 'dtl 11/8/2007 20:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1626' ],		#self : OmReference [ '1627' ],		#time : DateAndTime [ '2018-02-22T14:01:13.856017-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #expression,			#protocol : #accessing,			#sourceCode : 'expression\r\r\t^ expression',			#stamp : 'dtl 2/1/2003 16:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1627' ],		#self : OmReference [ '1628' ],		#time : DateAndTime [ '2018-02-22T14:01:13.856559-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #'expression:',			#protocol : #accessing,			#sourceCode : 'expression: aString\r\r\texpression := aString',			#stamp : 'dtl 11/8/2007 20:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1628' ],		#self : OmReference [ '1629' ],		#time : DateAndTime [ '2018-02-22T14:01:13.857113-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\tself expression isNil\r\t\tifTrue:\r\t\t\t[self evaluationBlock isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[aStream nextPutAll: \' for \'.\r\t\t\t\t\tself evaluationBlock printOn: aStream]\r\t\t\t\tifFalse:\r\t\t\t\t\t[aStream nextPutAll: \' for a \'.\r\t\t\t\t\tself evaluationBlock class printOn: aStream]]\r\t\tifFalse:\r\t\t\t[aStream nextPutAll: \' for \'.\r\t\t\tself expression printOn: aStream]\r',			#stamp : 'dtl 3/24/2003 07:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1629' ],		#self : OmReference [ '1630' ],		#time : DateAndTime [ '2018-02-22T14:01:13.8578-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExpressionEvaluator,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Evaluate my evaluationBlock. If the block evaluates to anything other\r\tthan self, then print the result on pipeFromOutput as output. Otherwise,\r\tassume that the block was smart enough to have written its own output.\r\tFor a block which does not write its own output, add a trailing line\r\tterminator after the evaluation if needed. Answer self as the result of\r\tthe evaluation."\r\r\t| result resultString |\r\tself success. "Hope for the best, send #fail if something goes wrong"\r\tself isNotYetRunning ifTrue:\r\t\t[self ensurePipeFromOutput.\r\t\tself running.\r\t\tself evaluationBlock notNil\r\t\t\tifTrue:\r\t\t\t\t[result := [self blockValue]\r\t\t\t\t\ton: Error\r\t\t\t\t\tdo: [:e |\r\t\t\t\t\t\tself errorPipelineStream nextPutAll: e description; nextPut: Character lf.\r\t\t\t\t\t\tself fail].\r\t\t\t\t(result == self)\r\t\t\t\t\tifFalse:\r\t\t\t\t\t\t[resultString := result asString.\r\t\t\t\t\t\tpipeFromOutput nextPutAll: resultString.\r\t\t\t\t\t\t(resultString isEmpty not and:\r\t\t\t\t\t\t\t[(resultString last ~= Character cr) and:\r\t\t\t\t\t\t\t\t[resultString last ~= Character lf]])\r\t\t\t\t\t\t\tifTrue: [pipeFromOutput nextPut: Character lf]]]\r\t\t\tifFalse:\r\t\t\t\t[self fail].\r\t\tself complete]\r',			#stamp : 'dtl 11/8/2007 20:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1630' ],		#self : OmReference [ '1631' ],		#time : DateAndTime [ '2018-02-22T14:01:13.858427-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #argumentArray,			#protocol : #accessing,			#sourceCode : 'argumentArray\r\r\t^ argumentArray\r',			#stamp : 'dtl 2/1/2003 16:45',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1631' ],		#self : OmReference [ '1632' ],		#time : DateAndTime [ '2018-02-22T14:01:13.859012-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'argumentArray:',			#protocol : #accessing,			#sourceCode : 'argumentArray: anArrayOfStrings\r\r\targumentArray := anArrayOfStrings\r',			#stamp : 'dtl 11/8/2007 20:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1632' ],		#self : OmReference [ '1633' ],		#time : DateAndTime [ '2018-02-22T14:01:13.859926-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t"True after processing is complete and all available data has been read from\r\tthe output pipe."\r\r\t^ self isComplete\r\t\tand: [self outputHasBeenRedirected\r\t\t\t\tor: [self outputIsExternalStream\r\t\t\t\t\tor: [pipeFromOutput atEnd]]]\r',			#stamp : 'dtl 6/8/2003 22:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1633' ],		#self : OmReference [ '1634' ],		#time : DateAndTime [ '2018-02-22T14:01:13.860482-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #canProvideOutputPipe,			#protocol : #testing,			#sourceCode : 'canProvideOutputPipe\r\t"Answer false if output has been redirected to a file and cannot be accessed by\r\tthe next process proxy in a command pipeline."\r\r\t^ super canProvideOutputPipe and: [self outputHasBeenRedirected not]\r',			#stamp : 'dtl 11/15/2002 09:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1634' ],		#self : OmReference [ '1635' ],		#time : DateAndTime [ '2018-02-22T14:01:13.861039-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #complete,			#protocol : #'setting run state',			#sourceCode : 'complete\r\t"Evaluation has been completed. Perform some cleanup and notify\r\tinterested parties."\r\r\tself closePipeInputs.\r\tself runState: #complete.\r\tself errorHasBeenRedirected\r\t\tifTrue: [self closeErrorPipeline]',			#stamp : 'dtl 11/24/2006 13:01',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1635' ],		#self : OmReference [ '1636' ],		#time : DateAndTime [ '2018-02-22T14:01:13.861585-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #errorPipelineStream,			#protocol : #accessing,			#sourceCode : 'errorPipelineStream\r\t"Accumulates the error output of commands in a command pipeline."\r\r\terrorPipelineStream isNil\r\t\tifTrue:\r\t\t\t[errorPipelineStream := InternalPipe nonBlockingPipe.\r\t\t\terrorPipelineStream addDependent: self].\r\t^ errorPipelineStream\r',			#stamp : 'dtl 11/8/2007 20:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1636' ],		#self : OmReference [ '1637' ],		#time : DateAndTime [ '2018-02-22T14:01:13.862136-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'errorPipelineStream:',			#protocol : #accessing,			#sourceCode : 'errorPipelineStream: aStream\r\t"Accumulates the error output of commands in a command pipeline."\r\r\terrorPipelineStream ifNotNil: [errorPipelineStream removeDependent: self].\r\terrorPipelineStream := aStream.\r\terrorPipelineStream ifNotNil: [errorPipelineStream addDependent: self]\r',			#stamp : 'dtl 11/8/2007 20:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1637' ],		#self : OmReference [ '1638' ],		#time : DateAndTime [ '2018-02-22T14:01:13.862681-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #exitStatus,			#protocol : #accessing,			#sourceCode : 'exitStatus\r\r\t^ exitStatus',			#stamp : 'dtl 4/19/2003 09:56',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1638' ],		#self : OmReference [ '1639' ],		#time : DateAndTime [ '2018-02-22T14:01:13.863209-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'exitStatus:',			#protocol : #accessing,			#sourceCode : 'exitStatus: aSymbol\r\r\texitStatus := aSymbol',			#stamp : 'dtl 11/8/2007 20:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1639' ],		#self : OmReference [ '1640' ],		#time : DateAndTime [ '2018-02-22T14:01:13.863757-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #fail,			#protocol : #evaluating,			#sourceCode : 'fail\r\r\tself exitStatus: #fail',			#stamp : 'dtl 11/25/2001 22:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1640' ],		#self : OmReference [ '1641' ],		#time : DateAndTime [ '2018-02-22T14:01:13.864306-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"If pipeFromOutput has been set, then the output stream is being redirected.\r\tSet a flag to indicate this, otherwise open new a pipe stream to use for output."\r\r\tpipeFromOutput isNil\r\t\tifTrue: [self ensurePipeFromOutput]\r\t\tifFalse: [self outputHasBeenRedirected: true].\r\t^ super initialize\r',			#stamp : 'dtl 9/9/2002 13:51',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1641' ],		#self : OmReference [ '1642' ],		#time : DateAndTime [ '2018-02-22T14:01:13.865169-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #isComplete,			#protocol : #testing,			#sourceCode : 'isComplete\r\r\t^ self runState == #complete',			#stamp : 'dtl 3/4/2002 06:58',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1642' ],		#self : OmReference [ '1643' ],		#time : DateAndTime [ '2018-02-22T14:01:13.865722-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #isNotYetRunning,			#protocol : #testing,			#sourceCode : 'isNotYetRunning\r\r\t^ self runState == #notYetRunning',			#stamp : 'dtl 3/4/2002 06:59',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1643' ],		#self : OmReference [ '1644' ],		#time : DateAndTime [ '2018-02-22T14:01:13.866273-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #streaming,			#sourceCode : 'nextPut: aCharacter\r\t"Write aCharacter to the standard input stream of my process."\r\r\t| readPosition |\r\treadPosition := pipeToInput position.\r\tpipeToInput setToEnd nextPut: aCharacter.\r\tpipeToInput position: readPosition.\r\t^ pipeToInput\r',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1644' ],		#self : OmReference [ '1645' ],		#time : DateAndTime [ '2018-02-22T14:01:13.866826-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #streaming,			#sourceCode : 'nextPutAll: aCollection\r\t"Write aCollection to the standard input stream of my process."\r\r\t| readPosition |\r\treadPosition := pipeToInput position.\r\tpipeToInput setToEnd nextPutAll: aCollection.\r\tpipeToInput position: readPosition.\r\t^ pipeToInput\r',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1645' ],		#self : OmReference [ '1646' ],		#time : DateAndTime [ '2018-02-22T14:01:13.867368-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #notYetRunning,			#protocol : #'setting run state',			#sourceCode : 'notYetRunning\r\t"Process has not yet entered running state."\r\r\tself runState: #notYetRunning\r',			#stamp : 'dtl 3/4/2002 22:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1646' ],		#self : OmReference [ '1647' ],		#time : DateAndTime [ '2018-02-22T14:01:13.867948-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'notify:at:in:',			#protocol : #'error handling',			#sourceCode : 'notify: aString at: aPosition in: aStream\r\r\t| s |\r\ts := aStream contents.\r\tself errorPipelineStream\r\t\tnextPutAll: (s copyFrom: 1 to: (aPosition - 1));\r\t\tnextPutAll: aString;\r\t\tnextPutAll: (s copyFrom: aPosition to: s size);\r\t\tcr\r\r',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1647' ],		#self : OmReference [ '1648' ],		#time : DateAndTime [ '2018-02-22T14:01:13.868491-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #outputHasBeenRedirected,			#protocol : #accessing,			#sourceCode : 'outputHasBeenRedirected\r\t"True if pipeFromOutput has been redirected to a FileStream"\r\r\t^ outputHasBeenRedirected ifNil: [outputHasBeenRedirected := false]',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1648' ],		#self : OmReference [ '1649' ],		#time : DateAndTime [ '2018-02-22T14:01:13.869032-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'outputHasBeenRedirected:',			#protocol : #accessing,			#sourceCode : 'outputHasBeenRedirected: trueOrFalse\r\t"True if pipeFromOutput has been redirected to a FileStream"\r\r\toutputHasBeenRedirected := trueOrFalse',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1649' ],		#self : OmReference [ '1650' ],		#time : DateAndTime [ '2018-02-22T14:01:13.869576-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #outputIsExternalStream,			#protocol : #testing,			#sourceCode : 'outputIsExternalStream\r\t"True if output is being piped to an external proxy, or if output has been\r\tredirected to a file."\r\r\t^ self pipeFromOutput isKindOf: FileStream\r',			#stamp : 'dtl 6/8/2003 22:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1650' ],		#self : OmReference [ '1651' ],		#time : DateAndTime [ '2018-02-22T14:01:13.870493-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #pipeFromError,			#protocol : #accessing,			#sourceCode : 'pipeFromError\r\t"Internal evaluators use the errorPipelineStream directly"\r\r\t^ self errorPipelineStream',			#stamp : 'dtl 11/29/2006 06:29',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1651' ],		#self : OmReference [ '1652' ],		#time : DateAndTime [ '2018-02-22T14:01:13.871062-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\taStream nextPutAll: \' (\'; nextPutAll: self runState; nextPut: $)\r',			#stamp : 'dtl 1/12/2003 00:45',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1652' ],		#self : OmReference [ '1653' ],		#time : DateAndTime [ '2018-02-22T14:01:13.871626-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #runState,			#protocol : #accessing,			#sourceCode : 'runState\r\r\t^ runState ifNil: [runState := #notYetRunning]\r',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1653' ],		#self : OmReference [ '1654' ],		#time : DateAndTime [ '2018-02-22T14:01:13.872177-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'runState:',			#protocol : #accessing,			#sourceCode : 'runState: aSymbol\r\r\trunState := aSymbol.\r\tself changed: #runState\r',			#stamp : 'dtl 11/8/2007 20:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1654' ],		#self : OmReference [ '1655' ],		#time : DateAndTime [ '2018-02-22T14:01:13.872718-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #running,			#protocol : #'setting run state',			#sourceCode : 'running\r\t"Process is actively running."\r\r\tself runState: #running\r',			#stamp : 'dtl 3/4/2002 22:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1655' ],		#self : OmReference [ '1656' ],		#time : DateAndTime [ '2018-02-22T14:01:13.873262-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'selectFrom:to:',			#protocol : #'error handling',			#sourceCode : 'selectFrom: start to: end\r\r\t^ self blockString copyFrom: start to: end',			#stamp : 'dtl 4/7/2001 21:27',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1656' ],		#self : OmReference [ '1657' ],		#time : DateAndTime [ '2018-02-22T14:01:13.873829-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #selectionInterval,			#protocol : #'error handling',			#sourceCode : 'selectionInterval\r\t"The compiler wants this for some reason."\r\r\t^ 1 to: 1',			#stamp : 'dtl 4/7/2001 19:50',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1657' ],		#self : OmReference [ '1658' ],		#time : DateAndTime [ '2018-02-22T14:01:13.874412-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #succeeded,			#protocol : #testing,			#sourceCode : 'succeeded\r\t"Answer true if my evaluation completed successfully."\r\r\t^ self exitStatus == #success',			#stamp : 'dtl 12/22/2001 18:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1658' ],		#self : OmReference [ '1659' ],		#time : DateAndTime [ '2018-02-22T14:01:13.874953-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #success,			#protocol : #evaluating,			#sourceCode : 'success\r\r\tself exitStatus: #success',			#stamp : 'dtl 11/25/2001 22:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1659' ],		#self : OmReference [ '1660' ],		#time : DateAndTime [ '2018-02-22T14:01:13.875888-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #text,			#protocol : #'error handling',			#sourceCode : 'text\r\t"The compiler needs this to generate error messages."\r\r\t^ Text fromString: self expression',			#stamp : 'dtl 12/8/2001 18:13',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1660' ],		#self : OmReference [ '1661' ],		#time : DateAndTime [ '2018-02-22T14:01:13.876445-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #unknownRunState,			#protocol : #'setting run state',			#sourceCode : 'unknownRunState\r\t"Unable to determine the current run state of the process."\r\r\tself runState: #unknownRunState\r',			#stamp : 'dtl 3/4/2002 22:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1661' ],		#self : OmReference [ '1662' ],		#time : DateAndTime [ '2018-02-22T14:01:13.877528-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableEvaluator,				#isMetaSide : false			},			#name : #'|',			#protocol : #'command pipelines',			#sourceCode : '| anotherCommandString\r\t"Pipe my output to another evaluator, where the other evaluator evaluates\r\tanotherCommandString."\r\r\t"((ExpressionEvaluator command: \'Smalltalk\')\r\t\t| \'stdout nextPutAll: stdin upToEnd\'\r\t\t| \'stdout nextPutAll: stdin upToEnd\') upToEnd"\r\r\t"(ExpressionEvaluator command: \'BOGUS\')\r\t\t| \'stdout nextPutAll: stdin upToEnd\'\r\t\t| \'stdout nextPutAll: stdin upToEnd\'"\r\r\t"((ExpressionEvaluator command: \'(true == false) not\')\r\t\t| \'stdout nextPutAll: stdin upToEnd\'\r\t\t| \'stdout nextPutAll: stdin upToEnd\') upToEnd"\r\r\t| new |\r\tnew := self species\r\t\t\tcommand: anotherCommandString\r\t\t\tpipeFrom: self pipeFromOutput\r\t\t\terrorPipelineStream: self errorPipelineStream.\r\tself value.\r\t^ new\r',			#stamp : 'dtl 11/8/2007 20:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1662' ],		#self : OmReference [ '1663' ],		#time : DateAndTime [ '2018-02-22T14:01:13.878146-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltinEvaluator class',				#isMetaSide : true			},			#name : #'command:withArguments:shell:pipeFrom:pipeTo:errorPipelineStream:',			#protocol : #'instance creation',			#sourceCode : 'command: aShellBuiltin withArguments: argumentArray shell: commandShell pipeFrom: inputStream pipeTo: outputStream errorPipelineStream: errorStream\r\r\t^ super new\r\t\tshellBuiltin: aShellBuiltin;\r\t\targumentArray: argumentArray;\r\t\tcommandShell: commandShell;\r\t\tpipeToInput: inputStream;\r\t\tpipeFromOutput: outputStream;\r\t\terrorPipelineStream: errorStream;\r\t\tinitialize',			#stamp : 'dtl 2/1/2003 16:01',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1663' ],		#self : OmReference [ '1664' ],		#time : DateAndTime [ '2018-02-22T14:01:13.878848-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #commandShell,			#protocol : #accessing,			#sourceCode : 'commandShell\r\r\t^ commandShell\r',			#stamp : 'dtl 2/1/2003 15:13',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1664' ],		#self : OmReference [ '1665' ],		#time : DateAndTime [ '2018-02-22T14:01:13.879443-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #'commandShell:',			#protocol : #accessing,			#sourceCode : 'commandShell: aCommandShell\r\r\tcommandShell := aCommandShell\r',			#stamp : 'dtl 2/1/2003 15:12',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1665' ],		#self : OmReference [ '1666' ],		#time : DateAndTime [ '2018-02-22T14:01:13.879999-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #needsPrompt,			#protocol : #testing,			#sourceCode : 'needsPrompt\r\t"Answer true if a shell will want to issue a prompt after evaluating me."\r\r\t^ self shellBuiltin needsPrompt\r',			#stamp : 'dtl 2/1/2003 16:08',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1666' ],		#self : OmReference [ '1667' ],		#time : DateAndTime [ '2018-02-22T14:01:13.880544-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\taStream nextPutAll: \' on \'.\r\tself shellBuiltin printOn: aStream',			#stamp : 'dtl 3/22/2003 13:58',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1667' ],		#self : OmReference [ '1668' ],		#time : DateAndTime [ '2018-02-22T14:01:13.881078-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #shellBuiltin,			#protocol : #accessing,			#sourceCode : 'shellBuiltin\r\r\t^ shellBuiltin',			#stamp : 'dtl 2/1/2003 15:12',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1668' ],		#self : OmReference [ '1669' ],		#time : DateAndTime [ '2018-02-22T14:01:13.881992-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #'shellBuiltin:',			#protocol : #accessing,			#sourceCode : 'shellBuiltin: aShellBuiltin\r\r\tshellBuiltin := aShellBuiltin',			#stamp : 'dtl 2/1/2003 15:12',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1669' ],		#self : OmReference [ '1670' ],		#time : DateAndTime [ '2018-02-22T14:01:13.882571-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltinEvaluator,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\r\tself isNotYetRunning ifTrue:\r\t\t[self success. "Hope for the best, send #fail if something goes wrong"\r\t\tself running.\r\t\tself ensurePipeFromOutput.\r\t\tself shellBuiltin\r\t\t\t\tperformWith: self argumentArray\r\t\t\t\tevaluator: self\r\t\t\t\tshell: self commandShell\r\t\t\t\tinput: self pipeToInput\r\t\t\t\toutput: self pipeFromOutput\r\t\t\t\terror: self errorPipelineStream]\r',			#stamp : 'dtl 12/21/2007 12:50',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1670' ],		#self : OmReference [ '1671' ],		#time : DateAndTime [ '2018-02-22T14:01:13.8833-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #addTwoPlusTwoInChildSqueak,			#protocol : #examples,			#sourceCode : 'addTwoPlusTwoInChildSqueak\r\t"Fork a headless child Squeak. Send three objects to the child, and read one object\r\treturned from the child. The child Squeak uses the three objects to compute a result,\r\twhich it sends back to its parent Squeak before exiting."\r\r\t"PipeableOSProcess addTwoPlusTwoInChildSqueak"\r\r\t| serializerClass childBlock in out rcv op param result childProxy writer sum s inputStream |\r\t(serializerClass := Smalltalk at: #ReferenceStream ifPresent: [:cls | cls ])\r\t\tifNil: [^ self notify: \'ReferenceStream not found\'].\r\t"Create block to be evaluated in a Squeak child process."\r\tchildBlock := ["First set standard input to blocking. This avoids a delay to wait for\r\t\tdata to be available, but note that it is dangerous to do this unless you\r\t\tare certain that you know in advance that the correct number of characters\r\t\twill be available on the input. If this is not the case, then the VM will block\r\t\ton the read and lock up the child squeak process."\r\t\tOSProcess thisOSProcess stdIn setBlocking.\r\t\tin := serializerClass on: OSProcess thisOSProcess stdIn.\r\t\tout := serializerClass on: OSProcess thisOSProcess stdOut.\r\t\t"read three objects"\r\t\trcv := in next.\r\t\top := in next.\r\t\tparam := in next.\r\t\t"add two plus two"\r\t\tresult := rcv perform: op with: param.\r\t\t"answer the result"\r\t\tout nextPut: result].\r\t"Fork a child Squeak that will evaluate the childBlock then exit"\r\tchildProxy := PipeableOSProcess forkHeadlessSqueakAndDoThenQuit: childBlock.\r\t"Write three objects to the child Squeak process"\r\twriter := serializerClass on: childProxy pipeToInput writer.\r\twriter nextPut: 2.\r\twriter nextPut: #+.\r\twriter nextPut: 2.\r\t"Read the result object from the child Squeak process"\r\ts := RWBinaryOrTextStream with: childProxy pipeFromOutput upToEndOfFile.\r\ts reset.\r\tinputStream := serializerClass on: s.\r\tsum := inputStream next.\r\t"show result of 2 + 2 evaluated in the child Squeak"\r\tself inform: \'2 + 2 equals \', sum asString.\r\t^ sum\r',			#stamp : 'dtl 1/24/2013 19:12',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1671' ],		#self : OmReference [ '1672' ],		#time : DateAndTime [ '2018-02-22T14:01:13.883913-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #bash,			#protocol : #utility,			#sourceCode : 'bash\r\t"Start a Gnu bash command interpreter (enhanced Unix shell)"\r\r\t"self bash"\r\t"self bash exec: \'ls\'; exec: \'who\'; close; upToEnd"\r\r\t| proxyClass |\r\t(proxyClass := self externalProxyClass) ifNotNil:\r\t\t[^ self command: proxyClass bashShellPath].\r\t^ self notify: \'OSProcess not available\'\r',			#stamp : 'dtl 9/3/2010 17:26',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1672' ],		#self : OmReference [ '1673' ],		#time : DateAndTime [ '2018-02-22T14:01:13.88448-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #canAccessOSProcess,			#protocol : #utility,			#sourceCode : 'canAccessOSProcess\r\t"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"\r\r\t"self canAccessOSProcess"\r\r\t| osp |\r\t^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]\r',			#stamp : 'dtl 11/8/2007 20:40',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1673' ],		#self : OmReference [ '1674' ],		#time : DateAndTime [ '2018-02-22T14:01:13.885021-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'command:',			#protocol : #'external command processing',			#sourceCode : 'command: aString\r\r\t"(PipeableOSProcess command: \'/bin/echo this is a test\') output"\r\t"(PipeableOSProcess command: \'echo this is a test\') output"\r\t"(PipeableOSProcess command: \'/bin/noSuchCommand this is a test\') output"\r\t"(PipeableOSProcess command: \'ls -l Sq*log\') output"\r\t"(PipeableOSProcess command: \'ls -l ?q*log\') output"\r\t"(PipeableOSProcess command: \'/bogusDirectory/ls -l Sq*log\') output"\r\r\t^ self command: aString\r\t\tenvironment: nil\r\t\tworkingDir: nil\r\t\tinput: nil\r\t\toutput: nil\r\t\terror: nil\r\t\terrorPipelineStream: nil',			#stamp : 'dtl 3/4/2002 07:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1674' ],		#self : OmReference [ '1675' ],		#time : DateAndTime [ '2018-02-22T14:01:13.885587-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'command:environment:',			#protocol : #'external command processing',			#sourceCode : 'command: aString environment: anEnvironmentDictionary\r\r\t"| env path |\r\tenv := OSProcess thisOSProcess environment copy.\r\tpath := (env at: #PATH), \':/opt/local/bin/\'.\r\tenv at: #PATH put: path.\r\t(PipeableOSProcess command: \'echo $PATH\' environment: env) output"\r\r\t^ self command: aString\r\t\tenvironment: anEnvironmentDictionary\r\t\tworkingDir: nil\r\t\tinput: nil\r\t\toutput: nil\r\t\terror: nil\r\t\terrorPipelineStream: nil\r',			#stamp : 'dtl 11/8/2011 19:44',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1675' ],		#self : OmReference [ '1676' ],		#time : DateAndTime [ '2018-02-22T14:01:13.886146-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'command:environment:workingDir:input:output:error:errorPipelineStream:',			#protocol : #'external command processing',			#sourceCode : 'command: aString environment: anEnvironmentDictionary workingDir: pathString input: inputStream output: outputStream error: errorStream errorPipelineStream: anErrorWriteStream\r\r\t"(PipeableOSProcess command: \'ls -l hosts NOSUCHFILE\' environment: nil workingDir: \'/etc\' input: nil output: nil error: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: \'this is the error stream \'; yourself)) output"\r\r\t^ self command: aString\r\t\tenvironment: anEnvironmentDictionary\r\t\tworkingDir: pathString\r\t\tinput: inputStream\r\t\toutput: outputStream\r\t\terror: errorStream\r\t\terrorPipelineStream: anErrorWriteStream\r\t\tshellSyntax: nil\r',			#stamp : 'dtl 12/13/2007 21:46',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1676' ],		#self : OmReference [ '1677' ],		#time : DateAndTime [ '2018-02-22T14:01:13.886744-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'command:environment:workingDir:input:output:error:errorPipelineStream:shellSyntax:',			#protocol : #'external command processing',			#sourceCode : 'command: aString environment: anEnvironmentDictionary workingDir: pathString input: inputStream output: outputStream error: errorStream errorPipelineStream: anErrorWriteStream shellSyntax: aSyntaxProcessor\r\r\t"(PipeableOSProcess command: \'ls -l hosts NOSUCHFILE\' environment: nil workingDir: \'/etc\' input: nil output: nil error: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: \'this is the error stream \'; yourself) shellSyntax: nil) output"\r\r\t| p |\r\tp := self\r\t\tcommandNoEvaluate: aString\r\t\tenvironment: anEnvironmentDictionary\r\t\tworkingDir: pathString\r\t\tinput: inputStream\r\t\toutput: outputStream\r\t\terror: errorStream\r\t\terrorPipelineStream: anErrorWriteStream\r\t\tshellSyntax: aSyntaxProcessor.\r\tp pipeFromOutput setBufferedReader.\r\t(Delay forMilliseconds: 1) wait. "context switch to enable buffered reader"\r\tp value.\r\t^p\r',			#stamp : 'dtl 9/27/2014 11:28',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1677' ],		#self : OmReference [ '1678' ],		#time : DateAndTime [ '2018-02-22T14:01:13.887673-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'command:pipeFrom:errorPipelineStream:',			#protocol : #'external command processing',			#sourceCode : 'command: aCommandString pipeFrom: aPipeStream errorPipelineStream: anErrorStream\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library,\r\texcept that aCommandString runs asynchronously in a child process."\r\r\t^ self\r\t\tcommand: aCommandString\r\t\tenvironment: nil\r\t\tworkingDir: nil\r\t\tinput: aPipeStream\r\t\toutput: nil\r\t\terror: nil\r\t\terrorPipelineStream: anErrorStream',			#stamp : 'dtl 4/28/2001 12:04',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1678' ],		#self : OmReference [ '1679' ],		#time : DateAndTime [ '2018-02-22T14:01:13.888307-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'commandNoEvaluate:environment:workingDir:input:output:error:errorPipelineStream:shellSyntax:',			#protocol : #'external command processing',			#sourceCode : 'commandNoEvaluate: aString environment: anEnvironmentDictionary workingDir: pathString input: inputStream output: outputStream error: errorStream errorPipelineStream: anErrorWriteStream shellSyntax: aSyntaxProcessor\r\t"Set up the command but do not actually fork the child process."\r\r\t"PipeableOSProcess commandNoEvaluate: \'ls -l hosts NOSUCHFILE\' environment: nil workingDir: \'/etc\' input: nil output: nil error: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: \'this is the error stream \'; yourself) shellSyntax: nil"\r\r\t| nameAndArgs proxyClass |\r\tnameAndArgs := aSyntaxProcessor isNil\r\t\tifTrue:\r\t\t\t[(proxyClass := self externalProxyClass) isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[Array with: aString with: Array new]\r\t\t\t\tifFalse:\r\t\t\t\t\t[Array\r\t\t\t\t\t\twith: proxyClass defaultShellPath\r\t\t\t\t\t\twith: (Array with: \'-c\' with: aString)]]\r\t\tifFalse:\r\t\t\t[aSyntaxProcessor\r\t\t\t\tprogramNameAndArgumentsFrom: aString\r\t\t\t\tinDirectoryPath: pathString\r\t\t\t\tfindExecutable: true].\r\t^ nameAndArgs ifNotNil:\r\t\t[self new: (nameAndArgs at: 1)\r\t\t\targuments: (nameAndArgs at: 2)\r\t\t\tenvironment: anEnvironmentDictionary\r\t\t\tdescriptors: (Array with: inputStream with: outputStream with: errorStream)\r\t\t\tworkingDir: pathString\r\t\t\terrorPipelineStream: anErrorWriteStream]\r\r',			#stamp : 'dtl 10/13/2008 06:31',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1679' ],		#self : OmReference [ '1680' ],		#time : DateAndTime [ '2018-02-22T14:01:13.888884-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #externalProxyClass,			#protocol : #'process proxy classes',			#sourceCode : 'externalProxyClass\r\r\t"self externalProxyClass"\r\r\t^ Smalltalk at: #ExternalOSProcess ifPresent: [:eosp | eosp concreteClass]\r',			#stamp : 'dtl 8/7/2002 13:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1680' ],		#self : OmReference [ '1681' ],		#time : DateAndTime [ '2018-02-22T14:01:13.889458-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'forkAndExec:arguments:environment:descriptors:workingDir:errorPipelineStream:',			#protocol : #'instance creation',			#sourceCode : 'forkAndExec: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams workingDir: pathString errorPipelineStream: anErrorStream\r\t"Run a program in an external OS process, and answer an instance of myself\r\twhich represents the external process."\r\r\t"PipeableOSProcess forkAndExec: \'/bin/ls\' arguments: #(\'-ls\' \'hosts\' \'NOSUCHFILE\') environment: nil descriptors: nil workingDir: \'/etc\' errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: \'this is the error stream \'; yourself)"\r\r\t^ self canAccessOSProcess\r\t\tifTrue:\r\t\t\t[(self new: executableFile\r\t\t\targuments: arrayOfStrings\r\t\t\tenvironment: stringDictionary\r\t\t\tdescriptors: arrayOf3Streams\r\t\t\tworkingDir: pathString\r\t\t\terrorPipelineStream: anErrorStream) value; yourself]\r\t\tifFalse:\r\t\t\t[self notify: \'OSProcess not available or OSProcess plugin not functioning\']\r',			#stamp : 'dtl 12/13/2007 21:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1681' ],		#self : OmReference [ '1682' ],		#time : DateAndTime [ '2018-02-22T14:01:13.890045-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'forkHeadlessSqueakAndDoThenQuit:',			#protocol : #'instance creation',			#sourceCode : 'forkHeadlessSqueakAndDoThenQuit: aBlock\r\t"Start a new headless Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock."\r\r\t"| child |\r\tchild := PipeableOSProcess forkHeadlessSqueakAndDoThenQuit:\r\t\t[OSProcess thisOSProcess stdOut\r\t\t\tnextPutAll: \'hello from headless Squeak child \',\r\t\t\t\tOSProcess thisOSProcess pid asString].\r\tchild upToEndOfFile"\r\t\r\t^ self forkSqueakAndDoThenQuit: aBlock\r\t\terrorPipelineStream: InternalPipe nonBlockingPipe\r\t\theadless: true\r',			#stamp : 'dtl 5/19/2009 23:28',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1682' ],		#self : OmReference [ '1683' ],		#time : DateAndTime [ '2018-02-22T14:01:13.890607-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'forkSqueakAndDoThenQuit:',			#protocol : #'instance creation',			#sourceCode : 'forkSqueakAndDoThenQuit: aBlock\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock."\r\r\t"PipeableOSProcess forkSqueakAndDoThenQuit:\r\t\t[Object inform: \'Hi, I am the child Squeak process. Click OK to exit the child Squeak.\']"\r\t\r\t^ self\r\t\tforkSqueakAndDoThenQuit: aBlock\r\t\terrorPipelineStream: InternalPipe nonBlockingPipe\r\t\theadless: false\r',			#stamp : 'dtl 11/11/2011 10:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1683' ],		#self : OmReference [ '1684' ],		#time : DateAndTime [ '2018-02-22T14:01:13.891168-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'forkSqueakAndDoThenQuit:errorPipelineStream:headless:',			#protocol : #'instance creation',			#sourceCode : 'forkSqueakAndDoThenQuit: aBlock errorPipelineStream: anErrorStream headless: headless\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock."\r\r\t^ self\r\t\tforkSqueakAndDoThenQuit: aBlock\r\t\terrorPipelineStream: anErrorStream\r\t\theadless: headless\r\t\tbufferedOutput: true',			#stamp : 'dtl 11/10/2011 20:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1684' ],		#self : OmReference [ '1685' ],		#time : DateAndTime [ '2018-02-22T14:01:13.891724-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'forkSqueakAndDoThenQuit:errorPipelineStream:headless:bufferedOutput:',			#protocol : #'instance creation',			#sourceCode : 'forkSqueakAndDoThenQuit: aBlock errorPipelineStream: anErrorStream headless: headless bufferedOutput: buffered\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock."\r\r\t^ self\r\t\tforkSqueakAndDoThenQuit: aBlock\r\t\terrorPipelineStream: anErrorStream\r\t\theadless: headless\r\t\tbufferedOutput: buffered\r\t\toutputNotifier: nil',			#stamp : 'dtl 11/11/2011 11:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1685' ],		#self : OmReference [ '1686' ],		#time : DateAndTime [ '2018-02-22T14:01:13.892433-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'forkSqueakAndDoThenQuit:errorPipelineStream:headless:bufferedOutput:outputNotifier:',			#protocol : #'instance creation',			#sourceCode : 'forkSqueakAndDoThenQuit: aBlock errorPipelineStream: anErrorStream headless: headless bufferedOutput: buffered outputNotifier: aioEventHandler\r\t"Start a new instance of Squeak running in a child OS process. The new instance is a\r\tclone of this image except for the return value of this method. It does not reload the\r\timage file from disk. The child image evaluates aBlock."\r\r\t| pp proc parentVmProcess blockWithRedirection |\r\tpp := super new.\r\tpp createPipes.\r\tbuffered ifTrue: [pp pipeFromOutput setBufferedReader].\r\taioEventHandler ifNotNil: [ buffered\r\t\tifTrue: [self error: \'buffered reader already has AIO handler\']\r\t\tifFalse: [aioEventHandler forFileStream: pp pipeFromOutput reader]].\r\tblockWithRedirection := [\r\t\tpp pipeToInput reader setNonBlocking.\r\t\tOSProcess thisOSProcess redirectStdInTo: pp pipeToInput reader.\r\t\tOSProcess thisOSProcess redirectStdOutTo: pp pipeFromOutput writer.\r\t\tOSProcess thisOSProcess redirectStdErrTo: pp pipeFromError writer.\r\t\tpp pipeToInput writer close.\r\t\tpp pipeFromOutput reader close.\r\t\tpp pipeFromError reader close.\r\t\taBlock value].\t\r\tparentVmProcess := OSProcess thisOSProcess.\r\tproc := headless\r\t\t\t\tifTrue: [parentVmProcess forkHeadlessSqueakAndDoThenQuit: blockWithRedirection]\r\t\t\t\tifFalse: [parentVmProcess forkSqueakAndDoThenQuit: blockWithRedirection].\r\tproc pid = parentVmProcess pid\r\t\tifTrue: ["child Squeak - this branch is never reached"]\r\t\tifFalse: ["parent Squeak - set the child Squeak as the process proxy"\r\t\t\tpp errorPipelineStream: anErrorStream.\r\t\t\tpp pipeToInput reader close.\r\t\t\tpp pipeFromOutput writer close.\r\t\t\tpp pipeFromError writer close.\r\t\t\t^ pp processProxy: proc]\r',			#stamp : 'dtl 6/7/2015 12:05',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1686' ],		#self : OmReference [ '1687' ],		#time : DateAndTime [ '2018-02-22T14:01:13.893449-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'new:arguments:environment:descriptors:workingDir:errorPipelineStream:',			#protocol : #'instance creation',			#sourceCode : 'new: executableFile arguments: arrayOfStrings environment: stringDictionary descriptors: arrayOf3Streams workingDir: pathString errorPipelineStream: anErrorStream\r\t"Prepare to run a program in an external OS process, and answer an instance of\r\tmyself which will represent the external process."\r\r\t"PipeableOSProcess new: \'/bin/ls\' arguments: #(\'-ls\' \'hosts\' \'NOSUCHFILE\') environment: nil descriptors: nil workingDir: \'/etc\' errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: \'this is the error stream \'; yourself)"\r\r\t"PipeableOSProcess new: \'sol\' arguments: nil environment: nil descriptors: nil workingDir: nil errorPipelineStream: (InternalPipe nonBlockingPipe nextPutAll: \'this is the error stream \'; yourself)"\r\r\t| pp proc proxyClass s |\r\tpp := super new.\r\t(proxyClass := self externalProxyClass) ifNotNil:\r\t\t[proc := proxyClass\r\t\t\tprogramName: executableFile\r\t\t\targuments: arrayOfStrings\r\t\t\tinitialEnvironment: stringDictionary].\r\tproc ifNil: [^ self notify: \'OSProcess not available\'].\r\tarrayOf3Streams isNil\r\t\tifTrue:\r\t\t\t[pp createPipes.\r\t\t\tproc initialStdIn: pp pipeToInput reader.\r\t\t\tproc initialStdOut: pp pipeFromOutput writer.\r\t\t\tproc initialStdErr: pp pipeFromError writer]\r\t\tifFalse:\r\t\t\t[(s := (arrayOf3Streams at: 1)) isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[pp createInputPipe.\r\t\t\t\t\tproc initialStdIn: pp pipeToInput reader]\r\t\t\t\tifFalse:\r\t\t\t\t\t[proc initialStdIn: s].\r\t\t\t(s := (arrayOf3Streams at: 2)) isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[pp createOutputPipe.\r\t\t\t\t\tproc initialStdOut: pp pipeFromOutput writer]\r\t\t\t\tifFalse:\r\t\t\t\t\t[proc initialStdOut: s].\r\t\t\t(s := (arrayOf3Streams at: 3)) isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[pp createErrorPipe.\r\t\t\t\t\tproc initialStdErr: pp pipeFromError writer]\r\t\t\t\tifFalse:\r\t\t\t\t\t[proc initialStdErr: s]].\r\tpathString ifNotNil: [proc pwd: pathString].\r\tpp errorPipelineStream: anErrorStream.\r\tpp initialize.\r\tproc initialize.\r\t^ pp processProxy: proc\r',			#stamp : 'dtl 9/3/2010 17:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1687' ],		#self : OmReference [ '1688' ],		#time : DateAndTime [ '2018-02-22T14:01:13.894035-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'remoteShell:',			#protocol : #utility,			#sourceCode : 'remoteShell: remoteSystemName \r\t"Start a remote Unix shell on another computer"\r\r\t"self remoteShell: \'localhost\'"\r\r\t| proxyClass |\r\t(proxyClass := self externalProxyClass) ifNotNil:\r\t\t[^ self\r\t\t\tforkAndExec: proxyClass remoteShellPath\r\t\t\targuments: (Array with: remoteSystemName with: \'sh\')\r\t\t\tenvironment: nil\r\t\t\tdescriptors: nil\r\t\t\tworkingDir: nil\r\t\t\terrorPipelineStream: nil].\r\t^ self notify: \'OSProcess not available\'\r\r\r',			#stamp : 'dtl 9/3/2010 17:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1688' ],		#self : OmReference [ '1689' ],		#time : DateAndTime [ '2018-02-22T14:01:13.894619-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'remoteShellExample:',			#protocol : #examples,			#sourceCode : 'remoteShellExample: remoteUnixHostName\r\t"Start a shell on another computer using rsh, and answer the the output\r\tof some commands on the remote host. You must have security access to\r\tthe remote system in order for this to work."\r\r\t"PipeableOSProcess remoteShellExample: \'minnow.cc.gatech.edu\'"\r\t"PipeableOSProcess remoteShellExample: \'micron\'"\r\t"PipeableOSProcess remoteShellExample: \'localhost\'"\r\r\t| rsh output |\r\trsh :=  self remoteShell: remoteUnixHostName.\r\trsh exec: \'echo remote host name is \'.\r\trsh exec: \'hostname\'.\r\trsh exec: \'exit\'.\r\toutput := rsh output.\r\trsh close.\r\trsh succeeded\r\t\tifTrue: [self notify: output]\r\t\tifFalse: [self notify: \'remote shell failed with error message: \', rsh errorUpToEnd].\r\t^ rsh\r',			#stamp : 'dtl 11/8/2007 20:41',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1689' ],		#self : OmReference [ '1690' ],		#time : DateAndTime [ '2018-02-22T14:01:13.895182-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #shell,			#protocol : #utility,			#sourceCode : 'shell\r\t"Start a Unix shell"\r\r\t"self shell"\r\t"self shell exec: \'ls\'; exec: \'who\'; close; upToEnd"\r\r\t| proxyClass |\r\t(proxyClass := self externalProxyClass) ifNotNil:\r\t\t[^ self command: proxyClass defaultShellPath].\r\t^ self notify: \'OSProcess not available\'\r',			#stamp : 'dtl 9/3/2010 17:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1690' ],		#self : OmReference [ '1691' ],		#time : DateAndTime [ '2018-02-22T14:01:13.89575-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #tkExample,			#protocol : #examples,			#sourceCode : 'tkExample\r\t"Start an interactive Tk shell and send it some commands to display a user interface."\r\r\t"PipeableOSProcess tkExample"\r\r\t| wish |\r\twish :=  self wish.\r\t[wish\r\t\texec: \'button .b1 -text "This is button b1"\';\r\t\texec: \'button .b2 -text "This is button b2"\';\r\t\texec: \'button .exit -text Exit -command exit\';\r\t\texec: \'pack .b1 .b2 .exit\'] fork.\r\t^ wish\r',			#stamp : 'dtl 11/8/2007 20:41',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1691' ],		#self : OmReference [ '1692' ],		#time : DateAndTime [ '2018-02-22T14:01:13.896296-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #unixCommandPipeLine,			#protocol : #examples,			#sourceCode : 'unixCommandPipeLine\r\t"Run a pipeline of commands in a manner similar to Unix command shell\r\tusage, and answer the result as a string."\r\r\t"PipeableOSProcess unixCommandPipeLine"\r\r\t^ ((PipeableOSProcess command: \'ps\') | \'grep squeak\' | \'cut -c16-100\') output',			#stamp : 'dtl 3/4/2002 07:21',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1692' ],		#self : OmReference [ '1693' ],		#time : DateAndTime [ '2018-02-22T14:01:13.896903-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'waitForCommand:',			#protocol : #utility,			#sourceCode : 'waitForCommand: aCommandString\r\t"Run a command in a shell process. Similar to the system(3) call in the standard C library.\r\tThe active Smalltalk process waits for completion of the external command process. This just\r\tuses a simple polling loop, which is not very elegant but works well enough for most purposes."\r\r\t"self waitForCommand: \'echo sleeping...; sleep 3; echo I just slept for three seconds\'"\r\r\t| proc d |\r\td := Delay forMilliseconds: 50.\r\tproc := self command: aCommandString.\r\tproc ifNil: [self class noAccessorAvailable].\r\t[proc isComplete] whileFalse: [d wait].\r\t^ proc\r',			#stamp : 'dtl 11/8/2007 20:40',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1693' ],		#self : OmReference [ '1694' ],		#time : DateAndTime [ '2018-02-22T14:01:13.897462-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #wish,			#protocol : #utility,			#sourceCode : 'wish\r\t"Start a Tk/Tcl command interpreter"\r\r\t"self wish"\r\r\t| proxyClass |\r\t(proxyClass := self externalProxyClass) ifNotNil:\r\t\t[^ self command: proxyClass tkShellPath].\r\t^ self notify: \'OSProcess not available\'\r',			#stamp : 'dtl 9/3/2010 17:36',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1694' ],		#self : OmReference [ '1695' ],		#time : DateAndTime [ '2018-02-22T14:01:13.898461-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'xon:command:',			#protocol : #utility,			#sourceCode : 'xon: remoteSystem command: aCommandString\r\t"Convenience method for running an X program on a remote system and displaying its window\r\ton the local display."\r\r\t"self xon: \'someRemoteHost\' command: \'xeyes\'"\r\r\t^ self command: \'xon \', remoteSystem, \' \', aCommandString\r',			#stamp : 'dtl 12/15/2007 11:49',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1695' ],		#self : OmReference [ '1696' ],		#time : DateAndTime [ '2018-02-22T14:01:13.89901-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #'xterm:',			#protocol : #utility,			#sourceCode : 'xterm: aCommandString\r\t"Convenience method for running a command in an external xterm window"\r\r\t"self xterm: \'top -d 2\'"\r\r\t^ self command: \'xterm -T \'\'\', aCommandString, \'\'\' -e \', aCommandString',			#stamp : 'dtl 4/19/2003 16:41',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1696' ],		#self : OmReference [ '1697' ],		#time : DateAndTime [ '2018-02-22T14:01:13.899569-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PipeableOSProcess class',				#isMetaSide : true			},			#name : #xtermExample,			#protocol : #examples,			#sourceCode : 'xtermExample\r\t"Open an external xterm window running a \'top\' command. Works on unix\r\tX window platforms."\r\r\t"self xtermExample"\r\r\t^ self xterm: \'top -d 2\'',			#stamp : 'dtl 12/15/2007 11:52',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1697' ],		#self : OmReference [ '1698' ],		#time : DateAndTime [ '2018-02-22T14:01:13.90017-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'addToErrorPipeline:',			#protocol : #'command pipelines - private',			#sourceCode : 'addToErrorPipeline: aString\r\r\t(aString isNil or: [aString isEmpty])\r\t\tifFalse: [self errorPipelineStream nextPutAll: aString]',			#stamp : 'dtl 7/7/2006 09:11',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1698' ],		#self : OmReference [ '1699' ],		#time : DateAndTime [ '2018-02-22T14:01:13.90076-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t"True after processing is complete and all available data has been read \r\tfrom the output pipe."\r\r\t^ pipeFromOutput isNil or: [pipeFromOutput atEnd]\r',			#stamp : 'dtl 6/4/2006 15:55',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1699' ],		#self : OmReference [ '1700' ],		#time : DateAndTime [ '2018-02-22T14:01:13.901308-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #close,			#protocol : #'initialize - release',			#sourceCode : 'close\r\t"Close pipe to proxy input. The pipes from output and error are not\r\tclosed. This will result in the external process seeing end of file on its\r\tinput stream, which typically causes the external process to flush any\r\tremaining data to its output and error streams, then exit. It is the\r\tresponsibility of the user to wait for that data to become available,\r\tread any data of interest, then close the output and error pipes to\r\tfree remaining external pipe references (see closePipes)."\r\r\t^super close\r',			#stamp : 'dtl 11/27/2010 12:56',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1700' ],		#self : OmReference [ '1701' ],		#time : DateAndTime [ '2018-02-22T14:01:13.901878-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #closeOutput,			#protocol : #'initialize - release',			#sourceCode : 'closeOutput\r\r\t| p |\r\t(p := self pipeFromOutput)\r\t\tifNotNil: [p removeDependent: self; close]\r',			#stamp : 'dtl 9/3/2010 17:19',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1701' ],		#self : OmReference [ '1702' ],		#time : DateAndTime [ '2018-02-22T14:01:13.902458-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #closePipeInputs,			#protocol : #'initialize - release',			#sourceCode : 'closePipeInputs\r\t"Close all pipe endpoints not used after process termination."\r\r\tsuper closePipeInputs.\r\tpipeFromError ifNotNil: [pipeFromError closeWriter]\r',			#stamp : 'dtl 8/26/2006 12:10',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1702' ],		#self : OmReference [ '1703' ],		#time : DateAndTime [ '2018-02-22T14:01:13.903079-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #closePipes,			#protocol : #'initialize - release',			#sourceCode : 'closePipes\r\t"Replace the output and error pipe streams with internal pipes, and close\r\tall input and output pipes."\r\r\t| output out err p |\r\tself keepInitialStdOutOpen\r\t\tifTrue:\r\t\t\t["The pipe stream will be closed by the next process in the command pipeline"\r\t\t\t(p := pipeFromOutput) ifNotNil: [p triggerDataReady]]\r\t\tifFalse:\r\t\t\t[(output := self pipeFromOutput)\r\t\t\t\tifNotNil:\r\t\t\t\t\t[accessProtect critical:\r\t\t\t\t\t\t[self pipeFromOutput: InternalPipe new.\r\t\t\t\t\t\tout := output upToEnd.\r\t\t\t\t\t\tout isEmpty ifFalse:\r\t\t\t\t\t\t\t[self pipeFromOutput nextPutAll: out.\r\t\t\t\t\t\t\tself triggerOutputDataReady].\r\t\t\t\t\t\tself pipeFromOutput closeWriter.\r\t\t\t\t\t\toutput removeDependent: self; close]]].\r\t(pipeFromError) ifNotNil:\r\t\t[accessProtect critical:\r\t\t\t[err := pipeFromError upToEnd.\r\t\t\terr isEmpty ifFalse:\r\t\t\t\t[self addToErrorPipeline: err.\r\t\t\t\tself triggerEvent: #errorDataReady].\r\t\t\tpipeFromError removeDependent: self; close]].\r\tself keepInitialStdErrOpen ifTrue: [self processProxy initialStdErr close].\r\tself pipeToInput ifNotNil: [pipeToInput close]\r',			#stamp : 'dtl 9/3/2010 17:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1703' ],		#self : OmReference [ '1704' ],		#time : DateAndTime [ '2018-02-22T14:01:13.904051-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #complete,			#protocol : #updating,			#sourceCode : 'complete\r\r\tsuper complete.\r\tself updateErrorPipelineStreamToEndOfFile',			#stamp : 'dtl 11/21/2006 14:34',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1704' ],		#self : OmReference [ '1705' ],		#time : DateAndTime [ '2018-02-22T14:01:13.904632-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #createErrorPipe,			#protocol : #'initialize - release',			#sourceCode : 'createErrorPipe\r\t"Create a pipe for the error stream from the child process."\r\r\tself pipeFromError: PipeJunction externalPipeClass nonBlockingPipe\r',			#stamp : 'dtl 3/26/2006 14:06',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1705' ],		#self : OmReference [ '1706' ],		#time : DateAndTime [ '2018-02-22T14:01:13.90519-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #createInputPipe,			#protocol : #'initialize - release',			#sourceCode : 'createInputPipe\r\t"Create a pipe for input to the child process."\r\r\tself pipeToInput: PipeJunction externalPipeClass blockingPipe\r',			#stamp : 'dtl 3/26/2006 14:06',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1706' ],		#self : OmReference [ '1707' ],		#time : DateAndTime [ '2018-02-22T14:01:13.905767-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #createOutputPipe,			#protocol : #'initialize - release',			#sourceCode : 'createOutputPipe\r\t"Create a pipe for output from the child process. The pipe should later be set\r\tto nonBlocking mode only if necessary to provent Squeak VM deadlocks."\r\r\tself pipeFromOutput: PipeJunction externalPipeClass blockingPipe\r',			#stamp : 'dtl 3/26/2006 14:06',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1707' ],		#self : OmReference [ '1708' ],		#time : DateAndTime [ '2018-02-22T14:01:13.906322-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #createPipes,			#protocol : #'initialize - release',			#sourceCode : 'createPipes\r\r\tpipeToInput ifNil: [self createInputPipe].\r\tpipeFromOutput ifNil: [self createOutputPipe].\r\tpipeFromError ifNil: [self createErrorPipe]\r',			#stamp : 'dtl 2/26/2002 19:03',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1708' ],		#self : OmReference [ '1709' ],		#time : DateAndTime [ '2018-02-22T14:01:13.906879-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #enableErrorStreamTriggers,			#protocol : #'event handling',			#sourceCode : 'enableErrorStreamTriggers\r\t"Set the error stream to be event driven if possible, and answer true\r\tif event driven output is supported, otherwise false."\r\r\t| err |\r\t(err := pipeFromError)\r\t\tifNotNil: [^ err setBufferedReader].\r\t^ false',			#stamp : 'dtl 9/3/2010 17:20',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1709' ],		#self : OmReference [ '1710' ],		#time : DateAndTime [ '2018-02-22T14:01:13.907461-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #enableEventTriggers,			#protocol : #'event handling',			#sourceCode : 'enableEventTriggers\r\t"Set the output and error streams to be event driven if possible, and \r\tanswer true if event driven output is supported, otherwise false."\r\r\t^ self enableOutputStreamTriggers and: [self enableErrorStreamTriggers]\r',			#stamp : 'dtl 11/11/2002 22:51',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1710' ],		#self : OmReference [ '1711' ],		#time : DateAndTime [ '2018-02-22T14:01:13.908014-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'errorPipelineStream:',			#protocol : #accessing,			#sourceCode : 'errorPipelineStream: aStream\r\t"Accumulates the error output of commands in a command pipeline. Overridden\r\tto eliminate setting self as a dependent of the error pipeline stream."\r\r\terrorPipelineStream := aStream\r',			#stamp : 'dtl 11/8/2007 20:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1711' ],		#self : OmReference [ '1712' ],		#time : DateAndTime [ '2018-02-22T14:01:13.908568-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #errorUpToEnd,			#protocol : #streaming,			#sourceCode : 'errorUpToEnd\r\t"Answer all available characters from the error stream of my external process."\r\r\t^ accessProtect critical: [super errorUpToEnd]\r',			#stamp : 'dtl 6/3/2006 10:41',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1712' ],		#self : OmReference [ '1713' ],		#time : DateAndTime [ '2018-02-22T14:01:13.909547-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #errorUpToEndOfFile,			#protocol : #streaming,			#sourceCode : 'errorUpToEndOfFile\r\t"Answer all available characters from the error stream. Block and\r\tcontinue reading until end of file is detected."\r\r\tself updateErrorPipelineStreamToEndOfFile.\r\t^ errorPipelineStream upToEnd\r',			#stamp : 'dtl 11/21/2006 14:21',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1713' ],		#self : OmReference [ '1714' ],		#time : DateAndTime [ '2018-02-22T14:01:13.910135-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'exec:',			#protocol : #evaluating,			#sourceCode : 'exec: aString\r\t"Pass aString to the child for execution. Presumably the child is running a\r\tcommand processor of some kind, such as a Unix shell."\r\r\tprocessProxy isRunning\r\t\tifTrue:\r\t\t\t[self nextPutAll: aString;\r\t\t\tnextPut: Character lf;\r\t\t\tflush]\r\t\tifFalse: [self notify: \'child process not running\']\r\r\r',			#stamp : 'dtl 2/27/2002 14:46',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1714' ],		#self : OmReference [ '1715' ],		#time : DateAndTime [ '2018-02-22T14:01:13.910707-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #flush,			#protocol : #streaming,			#sourceCode : 'flush\r\t"Flush output to the standard input stream of my external process."\r\r\t| p |\r\t(p := pipeToInput) ifNotNil: [p flush]',			#stamp : 'dtl 9/3/2010 17:42',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1715' ],		#self : OmReference [ '1716' ],		#time : DateAndTime [ '2018-02-22T14:01:13.911323-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #handlePrecedingError,			#protocol : #'initialize - release',			#sourceCode : 'handlePrecedingError\r\t"The stderr stream has been redirected. If there are any characters in the\r\terrorPipelineStream, write them to the stderr stream before proceeding. Fork\r\ta process to keep reading any additional error messages from preceding\r\tprocesses, and write them to the redirected error. When done, close the redirected\r\terror stream (this does not affect the actual external process, which has its own\r\tfile handle on the error stream). A background process is used to copy the\r\terrorPipelineStream because it is not straightforward to attach all predecessor\r\tproxies in a command pipeline to the redirected error output. This design is\r\tkludgy, but it works."\r\r\t| d |\r\td := Delay forMilliseconds: 200.\r\tself setKeepInitialStdErrOpen.\r\tProcessor yield.\t"A chance to clean up predecessor proxies in command pipeline"\r\terrorPipelineStream ifNotNil:\r\t\t\t[processProxy initialStdErr nextPutAll: errorPipelineStream upToEnd.\r\t\t\t[[self isRunning or: [self isNotYetRunning]]\r\t\t\t\twhileTrue:\r\t\t\t\t\t[processProxy initialStdErr nextPutAll: errorPipelineStream upToEnd.\r\t\t\t\t\td wait].\r\t\t\t\tself keepInitialStdErrOpen ifFalse: [processProxy initialStdErr close]] fork]\r',			#stamp : 'dtl 11/8/2007 20:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1716' ],		#self : OmReference [ '1717' ],		#time : DateAndTime [ '2018-02-22T14:01:13.911912-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\t"Semaphore to protect against finalizing the output and error streams\r\twhile they are being read."\r\r\taccessProtect := Semaphore forMutualExclusion.\r\t^ super initialize\r',			#stamp : 'dtl 11/8/2007 20:38',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1717' ],		#self : OmReference [ '1718' ],		#time : DateAndTime [ '2018-02-22T14:01:13.912505-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #isComplete,			#protocol : #testing,			#sourceCode : 'isComplete\r\r\t^ processProxy isComplete',			#stamp : 'dtl 2/27/2002 15:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1718' ],		#self : OmReference [ '1719' ],		#time : DateAndTime [ '2018-02-22T14:01:13.91305-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #isExternalProcess,			#protocol : #testing,			#sourceCode : 'isExternalProcess\r\t"Answer true if the process which I represent is an external OSProcess."\r\r\t^ true',			#stamp : 'dtl 3/9/2002 18:17',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1719' ],		#self : OmReference [ '1720' ],		#time : DateAndTime [ '2018-02-22T14:01:13.913601-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #isNotYetRunning,			#protocol : #testing,			#sourceCode : 'isNotYetRunning\r\r\t^ processProxy isNotYetRunning',			#stamp : 'dtl 2/27/2002 22:50',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1720' ],		#self : OmReference [ '1721' ],		#time : DateAndTime [ '2018-02-22T14:01:13.914153-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #isRunning,			#protocol : #testing,			#sourceCode : 'isRunning\r\r\t^ processProxy isRunning',			#stamp : 'dtl 2/27/2002 22:50',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1721' ],		#self : OmReference [ '1722' ],		#time : DateAndTime [ '2018-02-22T14:01:13.915113-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #keepInitialStdErrOpen,			#protocol : #accessing,			#sourceCode : 'keepInitialStdErrOpen\r\t"True if stderr has been redirected and the handle must be kept open in case\r\ta predecessor in a command pipeline might have more error messages to write\r\tto the redirected error stream."\r\r\t^ keepInitialStdErrOpen ifNil: [keepInitialStdErrOpen := false]',			#stamp : 'dtl 11/8/2007 20:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1722' ],		#self : OmReference [ '1723' ],		#time : DateAndTime [ '2018-02-22T14:01:13.915732-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'keepInitialStdErrOpen:',			#protocol : #accessing,			#sourceCode : 'keepInitialStdErrOpen: trueOrFalse\r\t"True if stderr has been redirected and the handle must be kept open in case\r\ta predecessor in a command pipeline might have more error messages to write\r\tto the redirected error stream."\r\r\tkeepInitialStdErrOpen := trueOrFalse',			#stamp : 'dtl 11/8/2007 20:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1723' ],		#self : OmReference [ '1724' ],		#time : DateAndTime [ '2018-02-22T14:01:13.916302-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #keepInitialStdOutOpen,			#protocol : #accessing,			#sourceCode : 'keepInitialStdOutOpen\r\t"If false, close the output pipe when the child exits. If true, do not close the output pipe.\r\tThis should be set true for an output pipe connected to another process in a pipeline,\r\twhere it is assumed that the next process will close the pipe when it is done reading\r\tfrom it. Otherwise, the default behavior is to close the output pipe after transferring its\r\tcontents to a Smalltalk stream."\r\r\t^ keepInitialStdOutOpen ifNil: [keepInitialStdOutOpen := false]\r',			#stamp : 'dtl 11/8/2007 20:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1724' ],		#self : OmReference [ '1725' ],		#time : DateAndTime [ '2018-02-22T14:01:13.916852-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'keepInitialStdOutOpen:',			#protocol : #accessing,			#sourceCode : 'keepInitialStdOutOpen: trueOrFalse\r\t"If false, close the output pipe when the child exits. If true, do not close the output pipe.\r\tThis should be set true for an output pipe connected to another process in a pipeline,\r\twhere it is assumed that the next process will close the pipe when it is done reading\r\tfrom it. Otherwise, the default behavior is to close the output pipe after transfering its\r\tcontents to a Smalltalk stream."\r\r\tkeepInitialStdOutOpen := trueOrFalse\r',			#stamp : 'dtl 11/8/2007 20:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1725' ],		#self : OmReference [ '1726' ],		#time : DateAndTime [ '2018-02-22T14:01:13.917403-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #needsPrompt,			#protocol : #'shell support',			#sourceCode : 'needsPrompt\r\t"After evaluating the command, a shell will want to issue a prompt"\r\r\t^ true\r',			#stamp : 'dtl 10/13/2001 11:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1726' ],		#self : OmReference [ '1727' ],		#time : DateAndTime [ '2018-02-22T14:01:13.91798-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #next,			#protocol : #streaming,			#sourceCode : 'next\r\t"Answer the next character from the output stream of my external process,\r\tor nil if no data is available."\r\r\t| s |\r\ts := accessProtect critical: [pipeFromOutput ifNotNil: [pipeFromOutput next]].\r\t^ s',			#stamp : 'dtl 11/8/2007 20:40',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1727' ],		#self : OmReference [ '1728' ],		#time : DateAndTime [ '2018-02-22T14:01:13.918544-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'next:',			#protocol : #streaming,			#sourceCode : 'next: count\r\t"Answer up to count characters from the output stream of my external process,\r\tor an empty string if no data is available."\r\r\t| s |\r\ts := accessProtect critical: [pipeFromOutput ifNotNil: [pipeFromOutput next: count]].\r\t^ s',			#stamp : 'dtl 11/8/2007 20:40',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1728' ],		#self : OmReference [ '1729' ],		#time : DateAndTime [ '2018-02-22T14:01:13.919103-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'nextFromError:',			#protocol : #streaming,			#sourceCode : 'nextFromError: count\r\t"Answer up to count characters from the error stream of my external process,\r\tor an empty string if no data is available. All characters are routed through\r\tthe errorPipelineStream, so that they are concatenated with any preceeding\r\terror message text (possibly from a preceeding process in a command pipeline)."\r\r\tself updateErrorPipelineStream.\r\t^ self errorHasBeenRedirected\r\t\tifTrue: [nil]\r\t\tifFalse: [self errorPipelineStream next: count]\r',			#stamp : 'dtl 11/21/2002 18:37',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1729' ],		#self : OmReference [ '1730' ],		#time : DateAndTime [ '2018-02-22T14:01:13.919659-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #nullStream,			#protocol : #'shell support',			#sourceCode : 'nullStream\r\r\t^ FileStream oldFileNamed: \'/dev/null\'\r',			#stamp : 'dtl 10/13/2001 11:33',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1730' ],		#self : OmReference [ '1731' ],		#time : DateAndTime [ '2018-02-22T14:01:13.920617-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #pipeFromError,			#protocol : #accessing,			#sourceCode : 'pipeFromError\r\r\t^ pipeFromError',			#stamp : 'dtl 1/20/2001 17:14',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1731' ],		#self : OmReference [ '1732' ],		#time : DateAndTime [ '2018-02-22T14:01:13.921216-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'pipeFromError:',			#protocol : #accessing,			#sourceCode : 'pipeFromError: aPipeStream\r\r\t(pipeFromError := aPipeStream)\r\t\tifNotNil: [pipeFromError addDependent: self]\r',			#stamp : 'dtl 9/3/2010 17:22',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1732' ],		#self : OmReference [ '1733' ],		#time : DateAndTime [ '2018-02-22T14:01:13.921854-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #pipesAreEmpty,			#protocol : #testing,			#sourceCode : 'pipesAreEmpty\r\t"True after processing is complete and all available data has been read \r\tfrom the output pipe and the error pipe. Note: uses error handling \r\trather than testing for pipe closed to avoid race condition."\r\r\t^ (self atEndOfFile\r\t\t\tand: [pipeFromError isNil\r\t\t\t\t\tor: [pipeFromError atEndOfFile]])\r\t\tand: [errorPipelineStream atEnd]',			#stamp : 'dtl 6/4/2006 17:26',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1733' ],		#self : OmReference [ '1734' ],		#time : DateAndTime [ '2018-02-22T14:01:13.922486-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #prepareOutputForInternalReader,			#protocol : #'command pipelines - private',			#sourceCode : 'prepareOutputForInternalReader\r\t"Output stream will be used directly by a Smalltalk process. Set output stream\r\tcharacteristics accordingly."\r\r\t| err |\r\tsuper prepareOutputForInternalReader.\r\tself setKeepInitialStdOutOpen.\r\t(err := self pipeFromError) ifNotNil: [err setNonBlocking]\r',			#stamp : 'dtl 9/3/2010 17:23',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1734' ],		#self : OmReference [ '1735' ],		#time : DateAndTime [ '2018-02-22T14:01:13.923054-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #prepareOutputForPipe,			#protocol : #'command pipelines - private',			#sourceCode : 'prepareOutputForPipe\r\t"Output stream will be used by another process proxy as input. Set output stream\r\tcharacteristics accordingly."\r\r\tsuper prepareOutputForPipe.\r\tself setKeepInitialStdOutOpen; setBlockingOutput\r',			#stamp : 'dtl 1/18/2003 10:06',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1735' ],		#self : OmReference [ '1736' ],		#time : DateAndTime [ '2018-02-22T14:01:13.923663-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\taStream nextPutAll: \' on \'.\r\tself processProxy printOn: aStream\r',			#stamp : 'dtl 4/8/2006 19:32',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1736' ],		#self : OmReference [ '1737' ],		#time : DateAndTime [ '2018-02-22T14:01:13.924222-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #processProxy,			#protocol : #accessing,			#sourceCode : 'processProxy\r\t"An internal evaluation proxy, or an external OS process proxy."\r\r\t^ processProxy',			#stamp : 'dtl 3/3/2002 13:44',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1737' ],		#self : OmReference [ '1738' ],		#time : DateAndTime [ '2018-02-22T14:01:13.924826-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'processProxy:',			#protocol : #accessing,			#sourceCode : 'processProxy: aProxy\r\t"An internal evaluation proxy, or an external OS process proxy. Add myself as\r\ta dependent of aProxy in order to receive notification when the process run\r\tstate changes."\r\r\taProxy addDependent: self.\r\tprocessProxy := aProxy',			#stamp : 'dtl 11/8/2007 20:39',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1738' ],		#self : OmReference [ '1739' ],		#time : DateAndTime [ '2018-02-22T14:01:13.92547-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #release,			#protocol : #'initialize - release',			#sourceCode : 'release\r\r\tself processProxy release.\r\tself pipeFromError release.\r\t^ super release',			#stamp : 'dtl 1/4/2003 15:45',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1739' ],		#self : OmReference [ '1740' ],		#time : DateAndTime [ '2018-02-22T14:01:13.926545-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'replaceOutputStreamWith:',			#protocol : #'command pipelines',			#sourceCode : 'replaceOutputStreamWith: anotherStreamOrNil\r\t"Sender is my successor in a command pipeline."\r\r\tprocessProxy isNotYetRunning\r\t\tifFalse:\r\t\t\t[self error: \'too late to change the output now\'].\r\tanotherStreamOrNil isNil\r\t\tifFalse:\r\t\t\t[processProxy initialStdOut: anotherStreamOrNil.\r\t\t\tself pipeFromOutput: nil "Not accessible any more"]\r\t\tifTrue:\r\t\t\t["Sender is my successor in a command pipeline, but does not want to use\r\t\t\tmy standard output. Therefore, dump my standard output to the null device."\r\t\t\tpipeFromOutput\r\t\t\t\tifNotNil:\r\t\t\t\t\t[pipeFromOutput close.\r\t\t\t\t\tself pipeFromOutput: nil].\r\t\t\tprocessProxy initialStdOut: self nullStream]\r',			#stamp : 'dtl 2/28/2002 07:57',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1740' ],		#self : OmReference [ '1741' ],		#time : DateAndTime [ '2018-02-22T14:01:13.927124-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #requiresNonBlockingInput,			#protocol : #testing,			#sourceCode : 'requiresNonBlockingInput\r\t"A PipeJunction managed by Squeak may be subject to deadlocks associated with\r\treading or writing an OSPipe. A PipeableOSProcess relies on the external operating\r\tsystem to provide process scheduling, so it will not block the Squeak VM when it\r\tis blocked on a read or a write."\r\r\t^ false',			#stamp : 'dtl 9/18/2002 11:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1741' ],		#self : OmReference [ '1742' ],		#time : DateAndTime [ '2018-02-22T14:01:13.927724-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #setBlockingOutput,			#protocol : #private,			#sourceCode : 'setBlockingOutput\r\t"Set the pipe from the child stdout to blocking mode. This is the normal\r\tmode for a pipe, although for Squeak we set pipe outputs to nonblocking\r\tto protect ourselves from blocking the Squeak VM when reading from\r\ta pipe. Unix command pipelines use the normal blocking behavior, and\r\tlet the operating system timeslice the processes to keep the rest of the\r\tworld from hanging on a blocked read."\r\r\tSmalltalk at: #OSProcess ifPresent:\r\t\t[:osp | pipeFromOutput ifNotNil: [osp accessor setBlocking: self pipeFromOutput reader ioHandle]]\r',			#stamp : 'dtl 8/7/2002 11:56',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1742' ],		#self : OmReference [ '1743' ],		#time : DateAndTime [ '2018-02-22T14:01:13.928291-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #setKeepInitialStdErrOpen,			#protocol : #'command pipelines',			#sourceCode : 'setKeepInitialStdErrOpen\r\t"Send this message if stderr has been redirected and the handle must be kept open in\r\tcase a predecessor in a command pipeline might have more error messages to write\r\tto the redirected error stream."\r\r\tself keepInitialStdErrOpen: true',			#stamp : 'dtl 12/3/2001 23:52',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1743' ],		#self : OmReference [ '1744' ],		#time : DateAndTime [ '2018-02-22T14:01:13.928869-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #setKeepInitialStdOutOpen,			#protocol : #'command pipelines',			#sourceCode : 'setKeepInitialStdOutOpen\r\t"When child exits, do not close the output pipe. This is for an output pipe connected to\r\tanother process in a pipeline, where it is assumed that the next process will close\r\tthe pipe when it is done reading from it."\r\r\tself keepInitialStdOutOpen: true',			#stamp : 'dtl 1/18/2003 10:06',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1744' ],		#self : OmReference [ '1745' ],		#time : DateAndTime [ '2018-02-22T14:01:13.929465-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #succeeded,			#protocol : #testing,			#sourceCode : 'succeeded\r\r\t^ processProxy succeeded',			#stamp : 'dtl 2/27/2002 22:51',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1745' ],		#self : OmReference [ '1746' ],		#time : DateAndTime [ '2018-02-22T14:01:13.930157-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #unixFileNumbers,			#protocol : #private,			#sourceCode : 'unixFileNumbers\r\t"Utility method for debugging. Answer the Unix file numbers for the streams\r\tassociated with this instance. This may be useful for debugging file handle\r\tleaks (files or sockets being opened but never closed).\r\r\tWhen a process proxy is initially set up, it will normally have six file\r\tnumbers associated with it prior to forking the child (two file numbers each\r\tfor stdin, stdout, and stderr). Once the child is forked, the process proxy in\r\tSqueak will close its copies of the child ends of the pipes, so only three of\r\tthe original six file numbers remain visible to Squeak."\r\r\t"(PipeableOSProcess command: \'who\') unixFileNumbers"\r\r\t"(PipeableOSProcess new: \'/bin/ls\'\r\t\targuments: #(\'-ls\' \'hosts\' \'NOSUCHFILE\') environment: nil\r\t\tdescriptors: nil workingDir: \'/etc\'\r\t\terrorPipelineStream: ((WriteStream on: String new)\r\t\tnextPutAll: \'this is the error stream \'; yourself)) unixFileNumbers"\r\r\t| d |\r\tSmalltalk at: #OSProcess ifPresent:\r\t\t[:osp |\r\t\td := Dictionary new.\r\t\td at: #initialStdIn put: (osp accessor unixFileNumber: processProxy initialStdIn ioHandle).\r\t\td at: #initialStdOut put: (osp accessor unixFileNumber: processProxy initialStdOut ioHandle).\r\t\td at: #initialStdErr put: (osp accessor unixFileNumber: processProxy initialStdErr ioHandle).\r\t\td at: #\'pipeToInput writer\'\r\t\t\tput: (osp accessor unixFileNumber: pipeToInput writer ioHandle).\r\t\td at: #\'pipeFromOutput reader\'\r\t\t\tput: (osp accessor unixFileNumber: pipeFromOutput reader ioHandle).\r\t\td at: #\'pipeFromError reader\'\r\t\t\tput: (osp accessor unixFileNumber: pipeFromError reader ioHandle).\r\t\t^ d].\r\t^ nil\r',			#stamp : 'dtl 2/24/2013 10:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1746' ],		#self : OmReference [ '1747' ],		#time : DateAndTime [ '2018-02-22T14:01:13.930729-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #upToEnd,			#protocol : #streaming,			#sourceCode : 'upToEnd\r\t"Answer all available characters from the output of my external process."\r\r\t^ accessProtect critical: [super upToEnd]\r',			#stamp : 'dtl 6/3/2006 10:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1747' ],		#self : OmReference [ '1748' ],		#time : DateAndTime [ '2018-02-22T14:01:13.931285-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #upToEndOfFile,			#protocol : #streaming,			#sourceCode : 'upToEndOfFile\r\t"Answer all available characters from the output stream. Block and\r\tcontinue reading until end of file is detected."\r\r\t^ accessProtect critical: [super upToEndOfFile]\r',			#stamp : 'dtl 6/3/2006 10:35',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1748' ],		#self : OmReference [ '1749' ],		#time : DateAndTime [ '2018-02-22T14:01:13.932389-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: aParameter\r\t"Clean up after processProxy exits. Remove myself as a dependent of processProxy,\r\tand close pipes."\r\r\t| err |\r\t(aParameter == pipeFromError)\r\t\tifTrue:\r\t\t\t[accessProtect critical: [self addToErrorPipeline: pipeFromError upToEnd].\r\t\t\t^ self changed: self errorPipelineStream].\r\r\t(aParameter == #runState)\r\t\tifTrue:\r\t\t\t[processProxy isComplete\r\t\t\t\tifTrue:\r\t\t\t\t\t[(err := self pipeFromError)\r\t\t\t\t\t\tifNotNil: [self addToErrorPipeline: err upToEnd].\r\t\t\t\t\tself complete.\r\t\t\t\t\tself changed: aParameter]\r\t\t\t\tifFalse:\r\t\t\t\t\t[^ self]].\r\r\t^ super update: aParameter\r',			#stamp : 'dtl 9/3/2010 17:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1749' ],		#self : OmReference [ '1750' ],		#time : DateAndTime [ '2018-02-22T14:01:13.932966-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #updateErrorPipelineStream,			#protocol : #'event handling',			#sourceCode : 'updateErrorPipelineStream\r\t"Ensure that all available error output is placed into errorPipelineStream."\r\r\t| p |\r\t(p := self pipeFromError) ifNotNil: [ | s |\r\t\ts := p upToEnd. "must be outside the critical block, race condition on #update:"\r\t\taccessProtect critical: [errorPipelineStream nextPutAll: s]]\r\r',			#stamp : 'dtl 9/3/2010 17:24',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1750' ],		#self : OmReference [ '1751' ],		#time : DateAndTime [ '2018-02-22T14:01:13.933584-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #updateErrorPipelineStreamToEndOfFile,			#protocol : #'event handling',			#sourceCode : 'updateErrorPipelineStreamToEndOfFile\r\t"Move all error output up to end of file to the errorPipelineStream."\r\r\t| p |\r\t(p := self pipeFromError) ifNotNil: [ | s |\r\t\ts := p upToEndOfFile. "must be outside the critical block, race condition on #update:"\r\t\taccessProtect critical: [errorPipelineStream nextPutAll: s].\r\t\tp close]\r',			#stamp : 'dtl 9/3/2010 17:25',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1751' ],		#self : OmReference [ '1752' ],		#time : DateAndTime [ '2018-02-22T14:01:13.934201-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Start the external process"\r\r\t| p |\r\tself errorHasBeenRedirected ifTrue: [self handlePrecedingError].\r\taccessProtect critical:\r\t\t[p := processProxy ifNotNil: [processProxy value].\r\t\t"The external child process now owns its own copy of the pipe handles. We no\r\t\tlonger need our copies of these handles, so close the ones that are not needed."\r\t\tp ifNotNil:\r\t\t\t[self keepInitialStdOutOpen ifFalse: [p closeInitialStdOut].\r\t\t\tself keepInitialStdErrOpen ifFalse: [p closeInitialStdErr]]]\r',			#stamp : 'dtl 12/15/2007 08:54',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1752' ],		#self : OmReference [ '1753' ],		#time : DateAndTime [ '2018-02-22T14:01:13.934805-03:00' ],		#trigger : OmReference [ '1442' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PipeableOSProcess,				#isMetaSide : false			},			#name : #'|',			#protocol : #'command pipelines',			#sourceCode : '| anotherCommandString\r\t"Pipe my output to another external process, where the other external process\r\texecutes anotherCommandString."\r\r\t"(PipeableOSProcess command: \'ps\') | \'grep squeak\' | \'cut -c16-100\'"\r\r\tself setKeepInitialStdOutOpen.\r\tself setBlockingOutput.\r\t^ self species\r\t\t\tcommand: anotherCommandString\r\t\t\tpipeFrom: pipeFromOutput reader\r\t\t\terrorPipelineStream: self errorPipelineStream\r',			#stamp : 'dtl 1/18/2003 10:06',			#package : #CommandShell-Piping		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:13.992946-03:00' ],		#prior : OmReference [ '1753' ],		#self : OmReference [ '1754' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'CommandShell-Commands-dtl.19'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1754' ],		#self : OmReference [ '1755' ],		#time : DateAndTime [ '2018-02-22T14:01:14.099164-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ShellBuiltin\r\tinstanceVariableNames: \'name procedureSelector helpSelector needsPrompt\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ShellBuiltin,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #procedureSelector,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #helpSelector,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #needsPrompt,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellBuiltin class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellBuiltin class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellBuiltin,					#isMetaSide : false				},				#parent : @7,				#content : 'A shell builtin command, intended to be invoked by a CommandShell.\r\rA builtin command consists of:\r name - a String identifier, used by the CommandShell to identify and invoke the commmand.\r helpString - a String to describe the function of the command.\r procedure - a BlockContext with parameters to be passed by the CommandShell.\r\rCommands are implemented in instance methods. To create a new command, write a\rnew command implementation method and a new help method for the command. Write\ra new class side instance creation method patterned after one of the existing commands\rand install the instance creation method in an instance of CommandShell with\rCommandShell>>installCommand:.\r\rA command implementation is a method which receives six paramaters. The parameters are\rto be interpreted as follows:\r\t- First parameter: The EvaluatorProxy which is evaluating the command. If a command fails,\r\t  send #fail to this object.\r\t- Second parameter: The CommandShell from which the command was evaluated. Use this\r\t  for any additional parsing which may be required in the command implementation.\r\t- Third parameter: The input stream for the command.\r\t- Forth parameter: The output stream for the command.\r\t- Fifth parameter: The error stream for the command.\r\t- Sixth parameter: An array of optional command arguments.\r',				#stamp : 'dtl 2/1/2003 12:25'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A shell builtin command, intended to be invoked by a CommandShell.\r\rA builtin command consists of:\r name - a String identifier, used by the CommandShell to identify and invoke the commmand.\r helpString - a String to describe the function of the command.\r procedure - a BlockContext with parameters to be passed by the CommandShell.\r\rCommands are implemented in instance methods. To create a new command, write a\rnew command implementation method and a new help method for the command. Write\ra new class side instance creation method patterned after one of the existing commands\rand install the instance creation method in an instance of CommandShell with\rCommandShell>>installCommand:.\r\rA command implementation is a method which receives six paramaters. The parameters are\rto be interpreted as follows:\r\t- First parameter: The EvaluatorProxy which is evaluating the command. If a command fails,\r\t  send #fail to this object.\r\t- Second parameter: The CommandShell from which the command was evaluated. Use this\r\t  for any additional parsing which may be required in the command implementation.\r\t- Third parameter: The input stream for the command.\r\t- Forth parameter: The output stream for the command.\r\t- Fifth parameter: The error stream for the command.\r\t- Sixth parameter: An array of optional command arguments.\r',		#newStamp : 'dtl 2/1/2003 12:25'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1755' ],		#self : OmReference [ '1756' ],		#time : DateAndTime [ '2018-02-22T14:01:14.101352-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpCategoryAddition {		#classCategoryName : #CommandShell-Commands,		#affectedPackageName : #CommandShell-Commands	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1756' ],		#self : OmReference [ '1757' ],		#time : DateAndTime [ '2018-02-22T14:01:14.127244-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ShellBuiltin\r\tinstanceVariableNames: \'name procedureSelector helpSelector needsPrompt\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Commands\''			},			#name : #ShellBuiltin,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #procedureSelector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #helpSelector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ShellBuiltin,						#isMetaSide : false					},					#name : #needsPrompt,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ShellBuiltin class\r\tinstanceVariableNames: \'\''				},				#name : #'ShellBuiltin class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ShellBuiltin,					#isMetaSide : false				},				#parent : @8,				#content : 'A shell builtin command, intended to be invoked by a CommandShell.\r\rA builtin command consists of:\r name - a String identifier, used by the CommandShell to identify and invoke the commmand.\r helpString - a String to describe the function of the command.\r procedure - a BlockContext with parameters to be passed by the CommandShell.\r\rCommands are implemented in instance methods. To create a new command, write a\rnew command implementation method and a new help method for the command. Write\ra new class side instance creation method patterned after one of the existing commands\rand install the instance creation method in an instance of CommandShell with\rCommandShell>>installCommand:.\r\rA command implementation is a method which receives six paramaters. The parameters are\rto be interpreted as follows:\r\t- First parameter: The EvaluatorProxy which is evaluating the command. If a command fails,\r\t  send #fail to this object.\r\t- Second parameter: The CommandShell from which the command was evaluated. Use this\r\t  for any additional parsing which may be required in the command implementation.\r\t- Third parameter: The input stream for the command.\r\t- Forth parameter: The output stream for the command.\r\t- Fifth parameter: The error stream for the command.\r\t- Sixth parameter: An array of optional command arguments.\r',				#stamp : 'dtl 2/1/2003 12:25'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Commands,			#package : #CommandShell-Commands,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1757' ],		#self : OmReference [ '1758' ],		#time : DateAndTime [ '2018-02-22T14:01:14.131984-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #CrLfFileEditor\r\tinstanceVariableNames: \'contents lineEndConvention directory fileName viewStyle\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CrLfFileEditor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #contents,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #lineEndConvention,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #directory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #fileName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #viewStyle,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CrLfFileEditor class\r\tinstanceVariableNames: \'\''				},				#name : #'CrLfFileEditor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CrLfFileEditor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide an editor on a single file. I attempt to avoid changing the line termination character convention when writing my text back to a file.\r\rBug: On older Squeak systems which do not support FilesStream>>truncate, file permissions may be lost when a file is rewritten at a shorter length.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I provide an editor on a single file. I attempt to avoid changing the line termination character convention when writing my text back to a file.\r\rBug: On older Squeak systems which do not support FilesStream>>truncate, file permissions may be lost when a file is rewritten at a shorter length.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1758' ],		#self : OmReference [ '1759' ],		#time : DateAndTime [ '2018-02-22T14:01:14.134842-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #CrLfFileEditor\r\tinstanceVariableNames: \'contents lineEndConvention directory fileName viewStyle\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-Commands\''			},			#name : #CrLfFileEditor,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #contents,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #lineEndConvention,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #directory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #fileName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CrLfFileEditor,						#isMetaSide : false					},					#name : #viewStyle,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CrLfFileEditor class\r\tinstanceVariableNames: \'\''				},				#name : #'CrLfFileEditor class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CrLfFileEditor,					#isMetaSide : false				},				#parent : @8,				#content : 'I provide an editor on a single file. I attempt to avoid changing the line termination character convention when writing my text back to a file.\r\rBug: On older Squeak systems which do not support FilesStream>>truncate, file permissions may be lost when a file is rewritten at a shorter length.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-Commands,			#package : #CommandShell-Commands,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1759' ],		#self : OmReference [ '1760' ],		#time : DateAndTime [ '2018-02-22T14:01:14.243932-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'cd:',			#protocol : #'instance creation',			#sourceCode : 'cd: commandShell\r\t"Define command to set the current working directory. Answer an empty string\r\tor #invalidCommand."\r\r\t^ self name: \'cd\'\r\t\thelp: #cdHelp\r\t\tprocedure: #cdCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1760' ],		#self : OmReference [ '1761' ],		#time : DateAndTime [ '2018-02-22T14:01:14.245371-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'clear:',			#protocol : #'instance creation',			#sourceCode : 'clear: commandShell\r\t"Define command to clear the terminal display screen. Answer a string or an invalid\r\tcommand message."\r\r\t^ self name: \'clear\'\r\t\thelp: #clearHelp\r\t\tprocedure: #clearCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1761' ],		#self : OmReference [ '1762' ],		#time : DateAndTime [ '2018-02-22T14:01:14.246391-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'commandDictionaryFor:commands:',			#protocol : #'command dictionary creation',			#sourceCode : 'commandDictionaryFor: aCommandShell commands: commandNameArray\r\t"Answer a Dictionary of ShellBuiltin instances suitable for use by a CommandShell"\r\r\t"ShellBuiltin commandDictionaryFor: CommandShell new commands: #(cd: clear: copyToError: copyToOutput: edit: exit: fc: help: history: inspect: pwd: sls: sqsh: type:)"\r\r\t^ commandNameArray\r\t\tinject: Dictionary new\r\t\tinto:\r\t\t\t[:d :cmd | | b |\r\t\t\tb := self perform: cmd with: aCommandShell.\r\t\t\td at: b name put: b; yourself]',			#stamp : 'dtl 7/14/2002 12:11',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1762' ],		#self : OmReference [ '1763' ],		#time : DateAndTime [ '2018-02-22T14:01:14.247141-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'copyToError:',			#protocol : #'instance creation',			#sourceCode : 'copyToError: commandShell\r\t"Define command to copy the contents of (argArray at: 1) or stdin onto\r\tstderr. This command exists only for purposes of testing stdin and pipelines\r\tfor PipeableEvaluator proxies."\r\r\t^ self name: \'copyToError\'\r\t\thelp: nil\r\t\tprocedure: #copyToErrorCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1763' ],		#self : OmReference [ '1764' ],		#time : DateAndTime [ '2018-02-22T14:01:14.247793-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'copyToOutput:',			#protocol : #'instance creation',			#sourceCode : 'copyToOutput: commandShell\r\t"Define command to  copy the contents of (argArray at: 1) or stdin onto\r\tstdout. This command exists only for purposes of testing stdin and pipelines\r\tfor PipeableEvaluator proxies."\r\r\t^ self name: \'copyToOutput\'\r\t\thelp: nil\r\t\tprocedure: #copyToOutputCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1764' ],		#self : OmReference [ '1765' ],		#time : DateAndTime [ '2018-02-22T14:01:14.248374-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'edit:',			#protocol : #'instance creation',			#sourceCode : 'edit: commandShell\r\t"Define command to open an editor on each of the named files."\r\r\t^ self name: \'edit\'\r\t\thelp: #editHelp\r\t\tprocedure: #editCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1765' ],		#self : OmReference [ '1766' ],		#time : DateAndTime [ '2018-02-22T14:01:14.248939-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'exit:',			#protocol : #'instance creation',			#sourceCode : 'exit: commandShell\r\t"Define command to exit the shell window. Answer a string or an invalid\r\tcommand message."\r\r\t^ self name: \'exit\'\r\t\thelp: #exitHelp\r\t\tprocedure: #exitCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1766' ],		#self : OmReference [ '1767' ],		#time : DateAndTime [ '2018-02-22T14:01:14.249525-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'fc:',			#protocol : #'instance creation',			#sourceCode : 'fc: commandShell\r\t"Define \'fix command\' command. If argArray is emply, answer the last\r\tcommand in the history list. If there is one argument, interpret it as an\r\tinteger index into the history list. Otherwise answer an invalid command\r\tmessage."\r\r\t^ self name: \'fc\'\r\t\thelp: #fcHelp\r\t\tprocedure: #fcCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: false\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1767' ],		#self : OmReference [ '1768' ],		#time : DateAndTime [ '2018-02-22T14:01:14.250099-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'help:',			#protocol : #'instance creation',			#sourceCode : 'help: commandShell\r\t"Define command to display help messages."\r\r\t^ self name: \'help\'\r\t\thelp: #helpHelp\r\t\tprocedure: #helpCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1768' ],		#self : OmReference [ '1769' ],		#time : DateAndTime [ '2018-02-22T14:01:14.25221-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'history:',			#protocol : #'instance creation',			#sourceCode : 'history: commandShell\r\t"Define command to display the command history list."\r\r\t^ self name: \'history\'\r\t\thelp: #historyHelp\r\t\tprocedure: #historyCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1769' ],		#self : OmReference [ '1770' ],		#time : DateAndTime [ '2018-02-22T14:01:14.25293-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'inspect:',			#protocol : #'instance creation',			#sourceCode : 'inspect: commandShell\r\t"Define command to open a Smalltalk inspector on the contents of stdin, or the\r\tfile(s) named on the command line."\r\r\t^ self name: \'inspect\'\r\t\thelp: #inspectHelp\r\t\tprocedure: #inspectCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1770' ],		#self : OmReference [ '1771' ],		#time : DateAndTime [ '2018-02-22T14:01:14.253559-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'name:help:procedure:needsPrompt:',			#protocol : #private,			#sourceCode : 'name: aString help: helpSelector procedure: procedureSelector needsPrompt: trueOrFalse\r\t"Command definition methods use this method to create instances representing\r\tshell builtin commands. The commands are installed in a CommandShell, and\r\tlater evaluated in the context of a PipeableEvaluator."\r\r\t^ self new\r\t\tname: aString;\r\t\thelpSelector: helpSelector;\r\t\tprocedureSelector: procedureSelector;\r\t\tneedsPrompt: trueOrFalse\r',			#stamp : 'dtl 1/4/2002 21:28',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1771' ],		#self : OmReference [ '1772' ],		#time : DateAndTime [ '2018-02-22T14:01:14.254147-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'pwd:',			#protocol : #'instance creation',			#sourceCode : 'pwd: commandShell\r\t"Define command to answer the current working directory (a string) or an\r\tinvalid command message."\r\r\t^ self name: \'pwd\'\r\t\thelp: #pwdHelp\r\t\tprocedure: #pwdCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1772' ],		#self : OmReference [ '1773' ],		#time : DateAndTime [ '2018-02-22T14:01:14.254738-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'sls:',			#protocol : #'instance creation',			#sourceCode : 'sls: commandShell\r\t"Define command to for a simple directory contents lister"\r\r\t^ self name: \'sls\'\r\t\thelp: #slsHelp\r\t\tprocedure: #slsCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1773' ],		#self : OmReference [ '1774' ],		#time : DateAndTime [ '2018-02-22T14:01:14.255314-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'snapshot:',			#protocol : #'instance creation',			#sourceCode : 'snapshot: commandShell\r\t"Define command to save the Squeak image."\r\r\t^ self name: \'snapshot\'\r\t\thelp: #snapshotHelp\r\t\tprocedure: #snapshotCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1774' ],		#self : OmReference [ '1775' ],		#time : DateAndTime [ '2018-02-22T14:01:14.255898-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'sqsh:',			#protocol : #'instance creation',			#sourceCode : 'sqsh: commandShell\r\t"Define command to open a new shell window."\r\r\t^ self name: \'sqsh\'\r\t\thelp: #sqshHelp\r\t\tprocedure: #sqshCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1775' ],		#self : OmReference [ '1776' ],		#time : DateAndTime [ '2018-02-22T14:01:14.256506-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'ttyExit:',			#protocol : #'instance creation',			#sourceCode : 'ttyExit: commandShell\r\t"Define command to exit the Squeak shell and quit Squeak without saving the image."\r\r\t^ self name: \'exit\'\r\t\thelp: #ttyExitHelp\r\t\tprocedure: #ttyExitCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1776' ],		#self : OmReference [ '1777' ],		#time : DateAndTime [ '2018-02-22T14:01:14.25711-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ShellBuiltin class',				#isMetaSide : true			},			#name : #'type:',			#protocol : #'instance creation',			#sourceCode : 'type: commandShell\r\t"Define command to answer how each name would be interpreted if used as a\r\tcommand name."\r\r\t^ self name: \'type\'\r\t\thelp: #typeHelp\r\t\tprocedure: #typeCommand:shell:input:output:error:arguments:\r\t\tneedsPrompt: true\r',			#stamp : 'dtl 8/4/2002 19:04',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1777' ],		#self : OmReference [ '1778' ],		#time : DateAndTime [ '2018-02-22T14:01:14.259455-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #canAccessOSProcess,			#protocol : #private,			#sourceCode : 'canAccessOSProcess\r\t"True if OSProcess is in the image and if the OSProcess plugin is functioning properly"\r\r\t"self canAccessOSProcess"\r\r\t| osp |\r\t^ (osp := Smalltalk at: #OSProcess ifAbsent: []) notNil and: [osp accessor canAccessSystem]\r',			#stamp : 'dtl 8/7/2002 12:56',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1778' ],		#self : OmReference [ '1779' ],		#time : DateAndTime [ '2018-02-22T14:01:14.260386-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'cdCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'cdCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Set the current working directory. Answer an empty string or #invalidCommand."\r\r\t| newPath path arg pathCwd p |\r\targArray size == 0\r\t\tifTrue:\r\t\t\t[newPath := commandShell home]\r\t\tifFalse:\r\t\t\t[argArray size == 1\r\t\t\t\tifTrue:\r\t\t\t\t\t[path := argArray at: 1.\r\t\t\t\t\t(path = commandShell shellSyntax pathStringAboveRoot)\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[newPath := commandShell shellSyntax pathAboveRoot]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t[pathCwd := commandShell shellSyntax getCwdForPath: path.\r\t\t\t\t\t\t\targ := (path = CommandShell pathSeparator)\r\t\t\t\t\t\t\t\tifTrue: [path]\r\t\t\t\t\t\t\t\tifFalse: [commandShell shellSyntax\r\t\t\t\t\t\t\t\t\t\t\t\tfirstExpandedArgument: path\r\t\t\t\t\t\t\t\t\t\t\t\tinDirectoryPath: pathCwd].\r\t\t\t\t\t\t\tnewPath := arg isEmpty\r\t\t\t\t\t\t\t\tifTrue: [arg]\r\t\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t\t[p := commandShell shellSyntax newDirPath: arg from: pathCwd.\r\t\t\t\t\t\t\t\t\tp ifNotNil: [CommandShell fullNameFor: p]]]]\r\t\t\t\tifFalse:\r\t\t\t\t\t[myProxy fail.\r\t\t\t\t\t^ commandShell invalidCommandMessage]].\r\tnewPath isNil\r\t\tifTrue:\r\t\t\t["No directory found with this name"\r\t\t\tmyProxy fail.\r\t\t\tstderr nextPutAll: argArray first, \': No such file or directory\'; nextPut: Character lf]\r\t\tifFalse:\r\t\t\t[(commandShell workingDirectory ~= newPath)\r\t\t\t\tifTrue:\r\t\t\t\t\t[(newPath isEmpty or: [commandShell shellSyntax isDirectoryPath: newPath])\r\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t[commandShell workingDirectory: newPath.\r\t\t\t\t\t\t\tcommandShell changed: #relabel.\r\t\t\t\t\t\t\tcommandShell environment ifNotNil:\r\t\t\t\t\t\t\t\t[commandShell environment at: #PWD put: commandShell workingDirectory]]\r\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t["File of this name exists, but is not a directory"\r\t\t\t\t\t\t\tmyProxy fail.\r\t\t\t\t\t\t\tstderr nextPutAll: newPath, \': not a directory\'; nextPut: Character lf]]]\r',			#stamp : 'dtl 1/25/2013 19:37',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1779' ],		#self : OmReference [ '1780' ],		#time : DateAndTime [ '2018-02-22T14:01:14.260974-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #cdHelp,			#protocol : #'help messages',			#sourceCode : 'cdHelp\r\r\t^ \'cd [path] - change default directory\'',			#stamp : 'dtl 12/31/2001 19:58',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1780' ],		#self : OmReference [ '1781' ],		#time : DateAndTime [ '2018-02-22T14:01:14.261551-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'clearCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'clearCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Clear the terminal display screen. Answer a string or an invalid command message."\r\r\targArray size == 0 ifFalse:\r\t\t[myProxy fail.\r\t\t^ commandShell invalidCommandMessage].\r\tcommandShell startUpInNewSession.\r\tcommandShell changed: #clearText\r',			#stamp : 'dtl 8/4/2002 19:38',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1781' ],		#self : OmReference [ '1782' ],		#time : DateAndTime [ '2018-02-22T14:01:14.262097-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #clearHelp,			#protocol : #'help messages',			#sourceCode : 'clearHelp\r\r\t^ \'clear - clear screen\'\r',			#stamp : 'dtl 12/31/2001 19:59',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1782' ],		#self : OmReference [ '1783' ],		#time : DateAndTime [ '2018-02-22T14:01:14.262695-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'copyToErrorCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'copyToErrorCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Copy the contents of (argArray at: 1) or stdin onto stderr. This\r\tcommand exists only for purposes of testing stdin and pipelines\r\tfor PipeableEvaluator proxies."\r\r\t| fs |\r\t(argArray isNil or: [argArray size == 0])\r\t\tifTrue:\r\t\t\t[stdin ifNotNil: [self copyUntilDoneFrom: stdin to: stderr]]\r\t\tifFalse:\r\t\t\t[argArray do:\r\t\t\t\t[:file |\r\t\t\t\t(CommandShell fileExists: file)\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t[fs := FileStream readOnlyFileNamed: file.\r\t\t\t\t\t\tfs ifNotNil:\r\t\t\t\t\t\t\t[self copyUntilDoneFrom: fs to: stderr.\r\t\t\t\t\t\t\tfs close]]]]\r',			#stamp : 'dtl 1/25/2013 19:17',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1783' ],		#self : OmReference [ '1784' ],		#time : DateAndTime [ '2018-02-22T14:01:14.263317-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'copyToOutputCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'copyToOutputCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Copy the contents of (argArray at: 1) or stdin onto stdout. This\r\tcommand exists only for purposes of testing stdin and pipelines\r\tfor PipeableEvaluator proxies."\r\r\t| fs |\r\t(argArray isNil or: [argArray size == 0])\r\t\tifTrue:\r\t\t\t[stdin ifNotNil: [self copyUntilDoneFrom: stdin to: stdout]]\r\t\tifFalse:\r\t\t\t[argArray do:\r\t\t\t\t[:file |\r\t\t\t\t(CommandShell fileExists: file)\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t[fs := FileStream readOnlyFileNamed: file.\r\t\t\t\t\t\tfs ifNotNil:\r\t\t\t\t\t\t\t[self copyUntilDoneFrom: fs to: stdout.\r\t\t\t\t\t\t\tfs close]]]]\r',			#stamp : 'dtl 1/25/2013 19:17',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1784' ],		#self : OmReference [ '1785' ],		#time : DateAndTime [ '2018-02-22T14:01:14.263914-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'copyUntilDoneFrom:to:',			#protocol : #private,			#sourceCode : 'copyUntilDoneFrom: aPipe to: aStream\r\t"Copy the contents of aPipe to aStream, where aPipe is the output of a process\r\tproxy. Whenever new data is available, aPipe will trigger #dataReady. This\r\tmethod responds to the #dataReady events until the end of the pipe is reached.\r\tIt is possible for the #atEnd check to give a false negative, so a timeout alarm\r\tis used to prevent deadlock conditions."\r\r\t| sema s |\r\tsema := Semaphore new.\r\taPipe when: #dataReady send: #signal to: sema.\r\t[aPipe atEndOfFile] whileFalse:\r\t\t[self timeoutAfter: 200 notifying: sema.\r\t\tsema wait. "Wait for data available"\r\t\t[(s := aPipe next: 10000) isEmpty] whileFalse:\r\t\t\t[aStream nextPutAll: s; flush]].\r\taPipe release.\r\t^ aStream\r',			#stamp : 'dtl 4/8/2007 10:21',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1785' ],		#self : OmReference [ '1786' ],		#time : DateAndTime [ '2018-02-22T14:01:14.264613-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'dirEntryString:',			#protocol : #private,			#sourceCode : 'dirEntryString: aDirectoryEntry\r\t"Original code lifted from Lex Spoon\'s FileList>>fileNameFormattedFrom:sizePad:"\r\r\t"self new dirEntryString: FileDirectory default entries first"\r\r\t| folderString nameStr dateStr sizeStr date time |\r\tfolderString := \' [...]\'.\r\tCommandShell useFileSystem\r\t\tifTrue: [nameStr := aDirectoryEntry isDirectory\r\t\t\t\tifTrue: [(aDirectoryEntry perform: #basename), folderString]\r\t\t\t\tifFalse: [aDirectoryEntry perform: #basename].\r\t\t\t\tdate := aDirectoryEntry modificationTime asDate.\r\t\t\t\ttime := aDirectoryEntry modificationTime asTime.\r\t\t\t\tsizeStr := aDirectoryEntry size asStringWithCommas]\r\t\tifFalse: [nameStr := aDirectoryEntry isDirectory\r\t\t\t\tifTrue: [aDirectoryEntry name , folderString]\r\t\t\t\tifFalse: [aDirectoryEntry name].\r\t\t\t\tdate := Date fromSeconds: aDirectoryEntry modificationTime.\r\t\t\t\ttime := Time fromSeconds: aDirectoryEntry modificationTime \\\\ 86400.\r\t\t\t\tsizeStr := aDirectoryEntry fileSize asStringWithCommas].\r\tdateStr := (date printFormat: #(3 2 1 $. 1 1 2)) , \' \' ,\r\t\t\t\t\t(String streamContents: [:s | time print24: true on: s]).\r\t^ nameStr , \'    (\' , dateStr , \' \' , sizeStr , \')\'\r',			#stamp : 'dtl 1/26/2013 15:24',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1786' ],		#self : OmReference [ '1787' ],		#time : DateAndTime [ '2018-02-22T14:01:14.267025-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'editCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'editCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Open an editor on each of the named files."\r\r\t| controllers inputString expandedName |\r\t(argArray isNil or: [argArray size == 0])\r\t\tifTrue:\r\t\t\t["When taking input from a command pipeline, the input must be\r\t\t\tread into inputString now. This is because, in MVC, the CrLfFileEditor\r\t\t\tis scheduled to be created later, and the input pipe will be closed by\r\t\t\tthe caller of this method before the CrLfFileEditor ever has a chance\r\t\t\tto read it."\r\t\t\t| workingDir |\r\t\t\tinputString := stdin isNil\r\t\t\t\tifTrue:\r\t\t\t\t\t[\'\']\r\t\t\t\tifFalse:\r\t\t\t\t\t[(self copyUntilDoneFrom: stdin to: (WriteStream on: String new)) contents\r\t\t\t\t\t\treplaceAll: Character lf with: Character cr].\r\t\t\tworkingDir := CommandShell useFileSystem\r\t\t\t\t\tifTrue: [commandShell workingDirectory perform: #asFileReference]\r\t\t\t\t\tifFalse: [(Smalltalk at: #FileDirectory) on: commandShell workingDirectory].\r\t\t\tcommandShell scheduleToEvaluate:\r\t\t\t\t[CrLfFileEditor\r\t\t\t\t\topenOn: inputString\r\t\t\t\t\twithLabel: (commandShell commandHistory isEmpty\r\t\t\t\t\t\t\t\t\tifTrue: [\'\']\r\t\t\t\t\t\t\t\t\tifFalse: [commandShell commandHistory last])\r\t\t\t\t\tinDirectory: workingDir\r\t\t\t\t\tdefaultFileName: \'buffer.txt\']]\r\t\tifFalse:\r\t\t\t[controllers := argArray collect:\r\t\t\t\t[:arg |\r\t\t\t\t"Expand arguments to convert them to full pathnames as expected by CrLfFileEditor"\r\t\t\t\texpandedName := commandShell shellSyntax\r\t\t\t\t\t\t\t\t\tfirstExpandedArgument: arg\r\t\t\t\t\t\t\t\t\tinDirectoryPath: commandShell shellSyntax workingDirectory.\r\t\t\t\tCrLfFileEditor fileNamed: expandedName withLabel: arg].\r\t\t\tCommandShell isMorphic\r\t\t\t\tifFalse:\r\t\t\t\t\t[controllers\r\t\t\t\t\t\tinject: nil\r\t\t\t\t\t\tinto:\r\t\t\t\t\t\t\t[:prev :c |\r\t\t\t\t\t\t\tprev ifNotNil:\r\t\t\t\t\t\t\t\t[c addDeferredUIMessage: [prev open]].\r\t\t\t\t\t\t\tc].\r\t\t\t\t\tcommandShell scheduleToEvaluate: [controllers last open]]\r\t\t\t\tifTrue:\r\t\t\t\t\t[controllers do: [:e |\r\t\t\t\t\t\tWorldState addDeferredUIMessage: [e openInWorld]]]]\r',			#stamp : 'dtl 1/28/2013 21:45',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1787' ],		#self : OmReference [ '1788' ],		#time : DateAndTime [ '2018-02-22T14:01:14.26766-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #editHelp,			#protocol : #'help messages',			#sourceCode : 'editHelp\r\r\t^ \'edit [files...] - edit the contents of stdin or the named files\'\r',			#stamp : 'dtl 12/31/2001 20:00',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1788' ],		#self : OmReference [ '1789' ],		#time : DateAndTime [ '2018-02-22T14:01:14.26823-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'exitCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'exitCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Exit the shell window. Answer a string or an invalid command message."\r\r\targArray size == 0 ifFalse:\r\t\t[myProxy fail.\r\t\t^ commandShell invalidCommandMessage].\r\tcommandShell changed: #exit\r',			#stamp : 'dtl 8/4/2002 19:38',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1789' ],		#self : OmReference [ '1790' ],		#time : DateAndTime [ '2018-02-22T14:01:14.268805-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #exitHelp,			#protocol : #'help messages',			#sourceCode : 'exitHelp\r\r\t^ \'exit - exit shell and close window\'',			#stamp : 'dtl 12/31/2001 20:00',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1790' ],		#self : OmReference [ '1791' ],		#time : DateAndTime [ '2018-02-22T14:01:14.269477-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'fcCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'fcCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Fix command. If argArray is emply, answer the last command in the\r\thistory list. If there is one argument, interpret it as an integer index\r\tinto the history list. Otherwise answer an invalid command message."\r\r\t| index cmd |\r\tcommandShell commandHistory ifNotNil:\r\t\t[commandShell scheduleToEvaluate:\r\t\t\t[argArray size == 0\r\t\t\t\tifTrue:\r\t\t\t\t\t[cmd := commandShell editCommand: (commandShell historyAt: 0)]\r\t\t\t\tifFalse:\r\t\t\t\t\t[[index := (argArray at: 1) asNumber]\r\t\t\t\t\t\t\t\ton: Error\r\t\t\t\t\t\t\t\tdo: [:ex | index := nil].\r\t\t\t\t\tcmd := commandShell editCommand:\r\t\t\t\t\t\t\t(index isNil\r\t\t\t\t\t\t\t\tifTrue: [\'\']\r\t\t\t\t\t\t\t\tifFalse: [commandShell historyAt: index])].\r\t\t\t\t\tcommandShell notifyPrompt.\r\t\t\t\t\tcmd isEmpty ifFalse:\r\t\t\t\t\t\t[commandShell outputStream nextPutAll: cmd; cr; flush; processCommand: cmd echo: false]]]\r',			#stamp : 'dtl 9/15/2012 19:00',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1791' ],		#self : OmReference [ '1792' ],		#time : DateAndTime [ '2018-02-22T14:01:14.270028-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #fcHelp,			#protocol : #'help messages',			#sourceCode : 'fcHelp\r\r\t^ \'fc [i] - "fix command", command number i from history list, or -i, or the last command\'\r',			#stamp : 'dtl 12/31/2001 20:01',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1792' ],		#self : OmReference [ '1793' ],		#time : DateAndTime [ '2018-02-22T14:01:14.270705-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'helpCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'helpCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\r\t| topic command cacheStream |\r\targArray size == 0\r\t\tifTrue:\r\t\t\t[cacheStream := WriteStream on: String new.\r\t\t\t(commandShell builtinCommands\r\t\t\t\tcollect: [:c | c helpSelector] thenSelect: [:s | s notNil])\r\t\t\t\t\tasArray sort do:\r\t\t\t\t\t\t[:sel | cacheStream nextPutAll: (self perform: sel);\r\t\t\t\t\t\t\t\tnextPut: Character lf].\r\t\t\tcacheStream\r\t\t\t\tnextPutAll: \'simple Smalltalk expression! evaluates a simple expression as a doIt\';\r\t\t\t\tnextPut: Character lf;\r\t\t\t\tnextPutAll: \'<ctl-C> to interrupt a running program\';\r\t\t\t\tnextPut: Character lf;\r\t\t\t\tnextPutAll: \'<ctl-D> to end input to a running program\';\r\t\t\t\tnextPut: Character lf.\r\t\t\tstdout nextPutAll: cacheStream contents]\r\t\tifFalse:\r\t\t\t[topic := argArray at: 1.\r\t\t\tcommand := commandShell builtinCommands at: topic ifAbsent: [^ self].\r\t\t\tcommand helpSelector ifNotNil:\r\t\t\t\t[stdout nextPutAll: (self perform: command helpSelector); nextPut: Character lf]]\r',			#stamp : 'dtl 2/24/2013 10:25',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1793' ],		#self : OmReference [ '1794' ],		#time : DateAndTime [ '2018-02-22T14:01:14.271263-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #helpHelp,			#protocol : #'help messages',			#sourceCode : 'helpHelp\r\r\t^ \'help - help on sqsh commands\'\r',			#stamp : 'dtl 12/31/2001 20:01',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1794' ],		#self : OmReference [ '1795' ],		#time : DateAndTime [ '2018-02-22T14:01:14.273323-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #helpSelector,			#protocol : #accessing,			#sourceCode : 'helpSelector\r\r\t^ helpSelector',			#stamp : 'dtl 12/31/2001 20:08',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1795' ],		#self : OmReference [ '1796' ],		#time : DateAndTime [ '2018-02-22T14:01:14.274035-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'helpSelector:',			#protocol : #accessing,			#sourceCode : 'helpSelector: aSymbol\r\r\thelpSelector := aSymbol',			#stamp : 'dtl 12/31/2001 20:08',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1796' ],		#self : OmReference [ '1797' ],		#time : DateAndTime [ '2018-02-22T14:01:14.274685-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'historyCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'historyCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Display the command history list."\r\r\t| ws rs |\r\tws := WriteStream on: Character lf asString.\r\trs := ReadStream on: commandShell commandHistory.\r\t[rs atEnd]\r\t\twhileFalse: [ws nextPutAll: rs next.\r\t\t\tws nextPutAll: \' \'.\r\t\t\tws nextPutAll: rs next.\r\t\t\trs atEnd\r\t\t\t\tifFalse: [ws nextPut: Character lf]].\r\tstdout nextPutAll: (ws contents, Character lf asString)\r',			#stamp : 'dtl 12/29/2002 10:45',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1797' ],		#self : OmReference [ '1798' ],		#time : DateAndTime [ '2018-02-22T14:01:14.275247-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #historyHelp,			#protocol : #'help messages',			#sourceCode : 'historyHelp\r\r\t^ \'history - display command history list\'\r',			#stamp : 'dtl 12/31/2001 20:02',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1798' ],		#self : OmReference [ '1799' ],		#time : DateAndTime [ '2018-02-22T14:01:14.275838-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #imageName,			#protocol : #private,			#sourceCode : 'imageName \r\t"After Squeak version 3.6, #imageName was moved to SmalltalkImage "\r\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk imageName]) current imageName',			#stamp : 'dtl 12/23/2007 00:41',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1799' ],		#self : OmReference [ '1800' ],		#time : DateAndTime [ '2018-02-22T14:01:14.276567-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'inspectCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'inspectCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Open a Smalltalk inspector on the contents of stdin, or the file(s) named on the\r\tcommand line."\r\r\t| fs inputString pathName |\r\t(argArray isNil or: [argArray size == 0])\r\t\tifTrue:\r\t\t\t[stdin ifNotNil:\r\t\t\t\t["When taking input from a command pipeline, the input must be\r\t\t\t\tread into inputString now. This is because, in MVC, the inspector\r\t\t\t\tis scheduled to be created later, and the input pipe will be closed by\r\t\t\t\tthe caller of this method before the deferred block ever has a\r\t\t\t\tchance to read it."\r\t\t\t\tinputString := stdin ifNotNil:\r\t\t\t\t\t[(self copyUntilDoneFrom: stdin to: (WriteStream on: String new)) contents\r\t\t\t\t\t\treplaceAll: Character lf with: Character cr].\r\t\t\t\tcommandShell scheduleToEvaluate: [inputString inspect]]]\r\t\tifFalse:\r\t\t\t[argArray isEmpty\r\t\t\t\tifTrue:\r\t\t\t\t\t[commandShell scheduleToEvaluate: [nil inspect]]\r\t\t\t\tifFalse:\r\t\t\t\t\t[argArray do:\r\t\t\t\t\t\t[:e |\r\t\t\t\t\t\tpathName := commandShell shellSyntax\r\t\t\t\t\t\t\tfirstExpandedArgument: e\r\t\t\t\t\t\t\tinDirectoryPath: commandShell shellSyntax workingDirectory.\r\t\t\t\t\t\tfs := (CommandShell fileExists: pathName)\r\t\t\t\t\t\t\tifTrue: [FileStream readOnlyFileNamed: pathName]\r\t\t\t\t\t\t\tifFalse: [nil].\r\t\t\t\t\t\tfs isNil\r\t\t\t\t\t\t\tifTrue:\r\t\t\t\t\t\t\t\t[commandShell scheduleToEvaluate: [nil inspect]]\r\t\t\t\t\t\t\tifFalse:\r\t\t\t\t\t\t\t\t[commandShell scheduleToEvaluate:\r\t\t\t\t\t\t\t\t\t[(fs contentsOfEntireFile\r\t\t\t\t\t\t\t\t\treplaceAll: Character lf\r\t\t\t\t\t\t\t\t\twith: Character cr) inspect.\r\t\t\t\t\t\t\t\t\tfs close]]]]]\r',			#stamp : 'dtl 1/25/2013 19:17',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1800' ],		#self : OmReference [ '1801' ],		#time : DateAndTime [ '2018-02-22T14:01:14.277126-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #inspectHelp,			#protocol : #'help messages',			#sourceCode : 'inspectHelp\r\r\t^ \'inspect [files...] - open an inspector on the contents of stdin or the named files\'\r',			#stamp : 'dtl 12/31/2001 20:02',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1801' ],		#self : OmReference [ '1802' ],		#time : DateAndTime [ '2018-02-22T14:01:14.277679-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\r\t^ name',			#stamp : 'dtl 12/26/2001 19:54',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1802' ],		#self : OmReference [ '1803' ],		#time : DateAndTime [ '2018-02-22T14:01:14.278223-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: aString\r\r\tname := aString',			#stamp : 'dtl 12/26/2001 19:54',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1803' ],		#self : OmReference [ '1804' ],		#time : DateAndTime [ '2018-02-22T14:01:14.280341-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #needsPrompt,			#protocol : #accessing,			#sourceCode : 'needsPrompt\r\t"True if the command should be followed by a prompt"\r\r\t^ needsPrompt ifNil: [needsPrompt := true]',			#stamp : 'dtl 12/27/2001 01:24',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1804' ],		#self : OmReference [ '1805' ],		#time : DateAndTime [ '2018-02-22T14:01:14.281039-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'needsPrompt:',			#protocol : #accessing,			#sourceCode : 'needsPrompt: trueOrFalse\r\t"True if the command should be followed by a prompt"\r\r\tneedsPrompt := trueOrFalse',			#stamp : 'dtl 12/27/2001 01:22',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1805' ],		#self : OmReference [ '1806' ],		#time : DateAndTime [ '2018-02-22T14:01:14.281666-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'performWith:evaluator:shell:input:output:error:',			#protocol : #evaluating,			#sourceCode : 'performWith: argumentArray evaluator: aPipeableEvaluator shell: aCommandShell input: inputStream output: outputStream error: errorStream\r\r\tself perform: self procedureSelector\r\t\twithArguments: (Array\r\t\t\twith: aPipeableEvaluator\r\t\t\twith: aCommandShell\r\t\t\twith: inputStream\r\t\t\twith: outputStream\r\t\t\twith: errorStream\r\t\t\twith: argumentArray).\r\taPipeableEvaluator complete\r',			#stamp : 'dtl 2/1/2003 16:21',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1806' ],		#self : OmReference [ '1807' ],		#time : DateAndTime [ '2018-02-22T14:01:14.282232-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\taStream nextPutAll: \' for \'.\r\tself name printOn: aStream.',			#stamp : 'dtl 3/22/2003 13:53',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1807' ],		#self : OmReference [ '1808' ],		#time : DateAndTime [ '2018-02-22T14:01:14.282801-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #procedureSelector,			#protocol : #accessing,			#sourceCode : 'procedureSelector\r\r\t^ procedureSelector',			#stamp : 'dtl 12/31/2001 20:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1808' ],		#self : OmReference [ '1809' ],		#time : DateAndTime [ '2018-02-22T14:01:14.283351-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'procedureSelector:',			#protocol : #accessing,			#sourceCode : 'procedureSelector: aSymbol\r\r\tprocedureSelector := aSymbol',			#stamp : 'dtl 12/31/2001 20:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1809' ],		#self : OmReference [ '1810' ],		#time : DateAndTime [ '2018-02-22T14:01:14.283996-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'pwdCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'pwdCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Answer the current working directory (a string) or an invalid command message."\r\r\t| directoryString |\r\tdirectoryString := commandShell workingDirectory.\r\tdirectoryString isEmpty ifTrue: [directoryString := self nullDirectoryString].\r\targArray size == 0 ifFalse:\r\t\t[myProxy fail.\r\t\t^ commandShell invalidCommandMessage].\r\tstdout nextPutAll: directoryString; nextPut: Character lf\r',			#stamp : 'dtl 4/20/2003 11:50',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1810' ],		#self : OmReference [ '1811' ],		#time : DateAndTime [ '2018-02-22T14:01:14.284557-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #pwdHelp,			#protocol : #'help messages',			#sourceCode : 'pwdHelp\r\r\t^ \'pwd - print current working directory\'\r',			#stamp : 'dtl 12/31/2001 20:02',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1811' ],		#self : OmReference [ '1812' ],		#time : DateAndTime [ '2018-02-22T14:01:14.285354-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'slsCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'slsCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Simple directory contents lister"\r\r\t| filePatterns d entries names dirs files entry linesToPrint lineCount cacheStream |\r\r\t"A small value of linesToPrint will prevent an ExternalCommandShell from\r\toverdriving is stdout stream. Maybe. A larger value allows faster updates to\r\tan interactive CommandShell display."\r\tlinesToPrint := 16.\r\r\t(argArray isNil or: [argArray size == 0])\r\t\tifTrue:\r\t\t\t["Contents of current directory."\r\t\t\tfilePatterns := Array with: \'*\']\r\t\tifFalse:\r\t\t\t["List named files"\r\t\t\tfilePatterns := argArray].\r\tCommandShell useFileSystem\r\t\tifTrue: [d := commandShell workingDirectory perform: #asFileReference]\r\t\tifFalse: [d := (Smalltalk at: #FileDirectory) on: commandShell workingDirectory].\r\tentries := d entries.\r\tnames := Set new.\r\tfilePatterns do: [:pat | names addAll: (commandShell shellSyntax glob: pat inDirectory: commandShell workingDirectory)].\r\tdirs := OrderedCollection new.\r\tfiles := OrderedCollection new.\r\tnames asArray sort do:\r\t\t[:n |\r\t\tentry := entries detect: [:e | (CommandShell entryName: e) = n].\r\t\tentry isDirectory\r\t\t\tifTrue: [dirs add: entry]\r\t\t\tifFalse: [files add: entry]].\r\r\tlinesToPrint := 5.\r\tlineCount := 1.\r\tcacheStream := WriteStream on: String new.\r\tdirs do:\t[:dir |\r\t\tlineCount := lineCount + 1.\r\t\tcacheStream nextPutAll: (self dirEntryString: dir); nextPut: Character lf.\r\t\t(lineCount > linesToPrint) ifTrue:\r\t\t\t[stdout nextPutAll: cacheStream contents.\r\t\t\tcacheStream := WriteStream on: String new.\r\t\t\tlineCount := 1]].\r\tfiles do: [:file |\r\t\tlineCount := lineCount + 1.\r\t\tcacheStream nextPutAll: (self dirEntryString: file); nextPut: Character lf.\r\t\t(lineCount > linesToPrint) ifTrue:\r\t\t\t[stdout nextPutAll: cacheStream contents.\r\t\t\tcacheStream := WriteStream on: String new.\r\t\t\tlineCount := 1]].\r\tstdout nextPutAll: cacheStream contents.',			#stamp : 'dtl 2/24/2013 10:25',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1812' ],		#self : OmReference [ '1813' ],		#time : DateAndTime [ '2018-02-22T14:01:14.287527-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #slsHelp,			#protocol : #'help messages',			#sourceCode : 'slsHelp\r\r\t^ \'sls [filepatterns] - list current directory contents\'\r',			#stamp : 'dtl 12/31/2001 20:06',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1813' ],		#self : OmReference [ '1814' ],		#time : DateAndTime [ '2018-02-22T14:01:14.288174-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'snapshot:andQuit:',			#protocol : #private,			#sourceCode : 'snapshot: save andQuit: quit\r\t"After Squeak version 3.6, #snapshot:andQuit: was moved to SmalltalkImage "\r\r\t^ ((Smalltalk classNamed: \'SmalltalkImage\')\r\t\tifNil: [^ Smalltalk snapshot: save andQuit: quit]) current snapshot: save andQuit: quit',			#stamp : 'dtl 12/23/2007 12:23',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1814' ],		#self : OmReference [ '1815' ],		#time : DateAndTime [ '2018-02-22T14:01:14.288775-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'snapshotCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'snapshotCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Save the image"\r\r\t| s |\r\tSmalltalk at: #WorldState ifPresent:\r\t\t[:ws |\r\t\ts := Semaphore new.\r\t\tcommandShell safeToExit: false.\r\t\tstdout nextPutAll: self imageName; nextPut: Character lf.\r\t\tws addDeferredUIMessage:\r\t\t\t[self snapshot: true andQuit: false.\r\t\t\ts ifNotNil: [s signal] "s is nil when resuming after snapshot"].\r\t\ts ifNotNil: [s wait]]\r',			#stamp : 'dtl 12/23/2007 12:23',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1815' ],		#self : OmReference [ '1816' ],		#time : DateAndTime [ '2018-02-22T14:01:14.289322-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #snapshotHelp,			#protocol : #'help messages',			#sourceCode : 'snapshotHelp\r\r\t^ \'snapshot - snapshot and save image\'',			#stamp : 'dtl 1/28/2013 21:47',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1816' ],		#self : OmReference [ '1817' ],		#time : DateAndTime [ '2018-02-22T14:01:14.289944-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'sqshCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'sqshCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Open a new shell window."\r\r\t| ws |\r\targArray size == 0\r\t\tifTrue:\r\t\t\t[commandShell scheduleToEvaluate: [commandShell class open]]\r\t\tifFalse:\r\t\t\t[ws := WriteStream on: String new.\r\t\t\targArray inject: true into:\r\t\t\t\t[:first :each |\r\t\t\t\tfirst ifFalse: [ws nextPut: Character space].\r\t\t\t\tws nextPutAll: each.\r\t\t\t\tfalse].\r\t\t\tcommandShell scheduleToEvaluate: [commandShell class openLabel: ws contents]]\r',			#stamp : 'dtl 11/30/2010 07:33',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1817' ],		#self : OmReference [ '1818' ],		#time : DateAndTime [ '2018-02-22T14:01:14.290488-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #sqshHelp,			#protocol : #'help messages',			#sourceCode : 'sqshHelp\r\r\t^ \'sqsh [title] - open new shell window\'\r',			#stamp : 'dtl 12/31/2001 20:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1818' ],		#self : OmReference [ '1819' ],		#time : DateAndTime [ '2018-02-22T14:01:14.291048-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'timeoutAfter:notifying:',			#protocol : #private,			#sourceCode : 'timeoutAfter: milliseconds notifying: sema\r\t"Under certain conditions it is possible to receive a false negative on\r\tand end of file check (for example, closing the writer end of a pipe\r\tfrom Squeak, and immediately checking for end of file on the reader\r\tin the same Squeak method). If looping while waiting on end of file,\r\tthis timeout method can be used to prevent a deadlock condition."\r\r\t[(Delay forMilliseconds: milliseconds) wait.\r\tsema signal] fork',			#stamp : 'dtl 1/25/2003 14:28',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1819' ],		#self : OmReference [ '1820' ],		#time : DateAndTime [ '2018-02-22T14:01:14.291647-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'ttyExitCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'ttyExitCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Exit an ExternalCommandShell by quitting Squeak. The image is not saved and the shutdown\r\tlist is not processed."\r\r\tcommandShell safeToExit\r\t\tifTrue: [Smalltalk quitPrimitive]\r\t\tifFalse: [stderr nextPutAll: \'cannot exit in same command line with snapshot\'; nextPut: Character lf]\r',			#stamp : 'dtl 12/29/2002 10:51',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1820' ],		#self : OmReference [ '1821' ],		#time : DateAndTime [ '2018-02-22T14:01:14.29218-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #ttyExitHelp,			#protocol : #'help messages',			#sourceCode : 'ttyExitHelp\r\r\t^ \'exit - exit shell and quit Squeak without saving image\'',			#stamp : 'dtl 7/14/2002 12:24',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1821' ],		#self : OmReference [ '1822' ],		#time : DateAndTime [ '2018-02-22T14:01:14.294726-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #'typeCommand:shell:input:output:error:arguments:',			#protocol : #implementations,			#sourceCode : 'typeCommand: myProxy shell: commandShell input: stdin output: stdout error: stderr arguments: argArray\r\t"Answer how each name would be interpreted if used as a command name."\r\r\t| results exe |\r\targArray size == 0\r\t\tifTrue:\r\t\t\t[^ \'\']\r\t\tifFalse:\r\t\t\t[results := WriteStream on: Array new.\r\t\t\targArray do:\r\t\t\t[:arg |\r\t\t\t(commandShell isBuiltInCommand: arg)\r\t\t\t\tifTrue:\r\t\t\t\t\t[results nextPut: arg, \' is a shell builtin\']\r\t\t\t\tifFalse:\r\t\t\t\t\t[self canAccessOSProcess\r\t\t\t\t\t \tifFalse:\r\t\t\t\t\t\t\t[self inform:\r\t\t\t\t\t\t\t\t((Smalltalk hasClassNamed: #OSProcess)\r\t\t\t\t\t\t\t\t\tifTrue: [(Smalltalk at: #OSProcess) accessor class name]\r\t\t\t\t\t\t\t\t\tifFalse: [commandShell class name]), \' cannot access system\'.\r\t\t\t\t\t\t\tstdout nextPutAll: \'cannot access system\'; nextPut: Character lf.\r\t\t\t\t\t\t\t^ self].\r\t\t\t\t\texe := commandShell shellSyntax findExecutablePathFor: arg inDirectoryPath: commandShell workingDirectory.\r\t\t\t\t\t(commandShell shellSyntax isExecutable: exe) ifFalse: [exe := nil].\r\t\t\t\t\texe isNil\r\t\t\t\t\t\tifTrue: [results nextPut: arg, \': not found\']\r\t\t\t\t\t\t\t\tifFalse: [results nextPut: arg, \' is \', exe]]].\r\t\t\t\tresults contents do: [:e | stdout nextPutAll: e; nextPut: Character lf]]\r',			#stamp : 'dtl 12/29/2002 10:51',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1822' ],		#self : OmReference [ '1823' ],		#time : DateAndTime [ '2018-02-22T14:01:14.29532-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ShellBuiltin,				#isMetaSide : false			},			#name : #typeHelp,			#protocol : #'help messages',			#sourceCode : 'typeHelp\r\r\t^ \'type [names...] - indicate how each name would be interpreted if used as a command\'\r',			#stamp : 'dtl 12/31/2001 20:03',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1823' ],		#self : OmReference [ '1824' ],		#time : DateAndTime [ '2018-02-22T14:01:14.295949-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #defaultLineEndConvention,			#protocol : #private,			#sourceCode : 'defaultLineEndConvention\r\t"FIXME: The Unix and Win32 are right, but I just guessed at the others - dtl"\r\r\t| platform |\r\tplatform :=  ShellSyntax new platformName.\r\t(platform = \'unix\') ifTrue: [^ #lf].\r\t(platform = \'Win32\') ifTrue: [^ #crlf].\r\t(platform = \'Mac OS\') ifTrue: [^ #cr].\r\t(platform = \'RiscOS\') ifTrue: [^ #cr].\r\t(platform = \'OS2\') ifTrue: [^ #crlf]. "FIXME: Is this the right name for OS2?"\r\t"Add other system types here..."\r\t^ #cr\r',			#stamp : 'dtl 12/15/2007 13:38',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1824' ],		#self : OmReference [ '1825' ],		#time : DateAndTime [ '2018-02-22T14:01:14.296586-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'editFileNamed:',			#protocol : #'instance creation',			#sourceCode : 'editFileNamed: pathName\r\r\t"CrLfFileEditor editFileNamed: \'/etc/hosts\'"\r\t"CrLfFileEditor editFileNamed: \'/NO/SUCH/FILE\'"\r\t"CrLfFileEditor editFileNamed: \'/etc/NOSUCHFILE)\'"\r\r\t^ Cursor read showWhile: [self openForFileNamed: pathName].\r',			#stamp : 'dtl 9/12/2002 10:16',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1825' ],		#self : OmReference [ '1826' ],		#time : DateAndTime [ '2018-02-22T14:01:14.297142-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'fileNamed:',			#protocol : #'instance creation',			#sourceCode : 'fileNamed: pathName\r\t"Answer a Controller or Morph as view on an instance of myself."\r\r\t"CrLfFileEditor fileNamed: \'/etc/hosts\'"\r\t"CrLfFileEditor fileNamed: \'/NO/SUCH/FILE\'"\r\t"CrLfFileEditor fileNamed: \'/etc/NOSUCHFILE\'"\r\r\t^ self fileNamed: pathName withLabel: pathName\r',			#stamp : 'dtl 9/12/2002 11:38',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1826' ],		#self : OmReference [ '1827' ],		#time : DateAndTime [ '2018-02-22T14:01:14.297792-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'fileNamed:inDirectoryPath:',			#protocol : #'instance creation',			#sourceCode : 'fileNamed: pathName inDirectoryPath: dirPath\r\t"Answer a Controller or Morph as view on an instance of myself."\r\r\t"CrLfFileEditor fileNamed: \'/etc/hosts\' inDirectoryPath: \'/usr/bin\'"\r\t"CrLfFileEditor fileNamed: \'bin/vi\' inDirectoryPath: \'/usr\'"\r\t"CrLfFileEditor fileNamed: \'hosts\' inDirectoryPath: \'/etc\'"\r\t"CrLfFileEditor fileNamed: \'hosts\' inDirectoryPath: \'/usr/bin\'"\r\t"CrLfFileEditor fileNamed: \'/NO/SUCH/FILE\' inDirectoryPath: \'/etc\'"\r\t"CrLfFileEditor fileNamed: \'/etc/NOSUCHFILE\' inDirectoryPath: \'/etc\'"\r\r\t| dir fs convention editText |\r\tdir := CommandShell directoryForPath: dirPath.\r\t(dir fileExists: pathName)\r\t\tifTrue:\r\t\t\t[[fs := (Smalltalk\r\t\t\t\t\t\tat: #MultiByteFileStream\r\t\t\t\t\t\tifAbsent: [Smalltalk at: #CrLfFileStream])\r\t\t\t\t\t\t\treadOnlyFileNamed: dirPath, CommandShell pathSeparator, pathName.\r\t\t\tconvention := fs detectLineEndConvention.\r\t\t\teditText := fs contentsOfEntireFile.\r\t\t\tfs close]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex |\r\t\t\t\t\tconvention := #lf.\t"Default for Unix text files"\r\t\t\t\t\teditText := \'\']]\r\t\tifFalse:\r\t\t\t[convention := #lf.\t"Default for Unix text files"\r\t\t\teditText := \'\'].\r\t^ self on: editText\r\t\twithLabel: pathName\r\t\tinDirectory: dir\r\t\tdefaultFileName: pathName\r\t\tlineEndConvention: convention\r',			#stamp : 'dtl 7/1/2015 21:13',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1827' ],		#self : OmReference [ '1828' ],		#time : DateAndTime [ '2018-02-22T14:01:14.298426-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'fileNamed:withLabel:',			#protocol : #'instance creation',			#sourceCode : 'fileNamed: pathName withLabel: windowLabel\r\t"Answer a Controller or Morph as view on an instance of myself."\r\r\t"CrLfFileEditor fileNamed: \'/etc/hosts\' withLabel: \'an editor on /etc/hosts\'"\r\r\t| dirPath dir fs convention editText localName |\r\tdirPath := CommandShell dirPathFor: pathName.\r\tdir := CommandShell directoryForPath: dirPath..\r\tlocalName := CommandShell localNameFor: pathName.\r\t(CommandShell fileExists: localName inDirectory: dir)\r\t\tifTrue:\r\t\t\t[[fs := (Smalltalk\r\t\t\t\t\t\tat: #MultiByteFileStream\r\t\t\t\t\t\tifAbsent: [Smalltalk at: #CrLfFileStream])\r\t\t\t\t\t\t\treadOnlyFileNamed: pathName.\r\t\t\tconvention := fs detectLineEndConvention.\r\t\t\teditText := fs contentsOfEntireFile.\r\t\t\tfs close]\r\t\t\t\ton: Error\r\t\t\t\tdo: [:ex |\r\t\t\t\t\tconvention := #lf.\t"Default for Unix text files"\r\t\t\t\t\teditText := \'\']]\r\t\tifFalse:\r\t\t\t[convention := #lf.\t"Default for Unix text files"\r\t\t\teditText := \'\'].\r\t^ self on: editText\r\t\twithLabel: windowLabel\r\t\tinDirectory: dir\r\t\tdefaultFileName: localName\r\t\tlineEndConvention: convention\r',			#stamp : 'dtl 7/1/2015 21:14',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1828' ],		#self : OmReference [ '1829' ],		#time : DateAndTime [ '2018-02-22T14:01:14.299046-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'class initialization',			#sourceCode : 'initialize\r\r\t"CrLfFileEditor initialize"\r\r\t| preferencesClass |\r\t(Smalltalk hasClassNamed: #Preferences)\r\t\tifTrue: ["Pharo deprecates Preference in favor of pragma registration mechanism"\r\t\t\tpreferencesClass := Smalltalk at: #Preferences.\r\t\t\t(preferencesClass respondsTo: #setWindowColorFor:to: )\r\t\t\t\tifTrue: ["Squeak"\r\t\t\t\t\tpreferencesClass \r\t\t\t\t\t\tsetWindowColorFor: #CommandShell \r\t\t\t\t\t\tto: (Color colorFrom: self windowColorSpecification pastelColor)]\r\t\t\t\tifFalse: ["Pharo images use some other preferences protocol"]].\r',			#stamp : 'dtl 11/29/2010 22:10',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1829' ],		#self : OmReference [ '1830' ],		#time : DateAndTime [ '2018-02-22T14:01:14.299799-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'on:withLabel:inDirectory:defaultFileName:',			#protocol : #'instance creation',			#sourceCode : 'on: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString\r\r\t"(CrLfFileEditor on: \'this is the string to edit\' withLabel: \'this is the window label\' inDirectory: FileDirectory default defaultFileName: \'buffer.txt\') openInWorld"\r\r\t^ self on: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: self defaultLineEndConvention\r',			#stamp : 'dtl 9/12/2002 10:10',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1830' ],		#self : OmReference [ '1831' ],		#time : DateAndTime [ '2018-02-22T14:01:14.300388-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'on:withLabel:inDirectory:defaultFileName:lineEndConvention:',			#protocol : #'instance creation',			#sourceCode : 'on: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: convention\r\r\r\t"(CrLfFileEditor on: \'this is the string to edit\' withLabel: \'this is the window label\' inDirectory: FileDirectory default defaultFileName: \'buffer.txt\' lineEndConvention: #lf) openInWorld"\r\r\t| model |\r\tmodel := self new contents: aString.\r\tmodel directory: aDirectory.\r\tmodel fileName: nameString.\r\tmodel lineEndConvention: convention.\r\t^ model withLabel: aLabelString\r',			#stamp : 'dtl 9/12/2002 10:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1831' ],		#self : OmReference [ '1832' ],		#time : DateAndTime [ '2018-02-22T14:01:14.300943-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'openForFileNamed:',			#protocol : #private,			#sourceCode : 'openForFileNamed: pathName\r\r\t"CrLfFileEditor openForFileNamed: \'/etc/hosts\'"\r\t"CrLfFileEditor openForFileNamed: \'/NO/SUCH/FILE\'"\r\t"CrLfFileEditor openForFileNamed: \'/etc/NOSUCHFILE\'"\r\r\t^ CommandShell isMorphic\r\t\tifTrue: [(self fileNamed: pathName) openInWorld]\r\t\tifFalse: [(self fileNamed: pathName) open]\r',			#stamp : 'dtl 6/29/2010 21:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1832' ],		#self : OmReference [ '1833' ],		#time : DateAndTime [ '2018-02-22T14:01:14.301491-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'openOn:withLabel:inDirectory:defaultFileName:',			#protocol : #'instance creation',			#sourceCode : 'openOn: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString\r\r\t"CrLfFileEditor openOn: \'this is the string to edit\' withLabel: \'this is the window label\' inDirectory: FileDirectory default defaultFileName: \'buffer.txt\'"\r\r\t^ self openOn: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: self defaultLineEndConvention\r',			#stamp : 'dtl 9/12/2002 10:10',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1833' ],		#self : OmReference [ '1834' ],		#time : DateAndTime [ '2018-02-22T14:01:14.30206-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #'openOn:withLabel:inDirectory:defaultFileName:lineEndConvention:',			#protocol : #'instance creation',			#sourceCode : 'openOn: aString withLabel: aLabelString inDirectory: aDirectory defaultFileName: nameString lineEndConvention: convention\r\r\t"CrLfFileEditor openOn: \'this is the string to edit\' withLabel: \'this is the window label\' inDirectory: FileDirectory default defaultFileName: \'buffer.txt\' lineEndConvention: #lf"\r\r\t| model |\r\tmodel := self new contents: aString.\r\tmodel directory: aDirectory.\r\tmodel fileName: nameString.\r\tmodel lineEndConvention: convention.\r\t^ model openLabel: aLabelString\r',			#stamp : 'dtl 12/13/2007 21:08',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1834' ],		#self : OmReference [ '1835' ],		#time : DateAndTime [ '2018-02-22T14:01:14.30263-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CrLfFileEditor class',				#isMetaSide : true			},			#name : #windowColorSpecification,			#protocol : #'window color',			#sourceCode : 'windowColorSpecification\r\t"Answer a WindowColorSpec object that declares my preference"\r\r\t| windowColorSpec |\r\twindowColorSpec := Smalltalk\r\t\t\t\tat: #WindowColorSpec\r\t\t\t\tifAbsent: [^self error: \'this image does not support WindowColorSpec\'].\r\t^ windowColorSpec\r\t\tclassSymbol: self name\r\t\twording: \'Squeak Shell File Editor\'\r\t\tbrightColor: Color lightOrange\r\t\tpastelColor: Color lightOrange paler paler\r\t\thelpMessage: \'CrLfFileEditor window for CommandShell \'\'edit\'\' comand\'\r',			#stamp : 'dtl 6/29/2010 00:07',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1835' ],		#self : OmReference [ '1836' ],		#time : DateAndTime [ '2018-02-22T14:01:14.303235-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'bogusTruncate:',			#protocol : #private,			#sourceCode : 'bogusTruncate: fileStream\r\t"Truncate the file by brute force if FileStream>>truncate is not supported on\r\tthis system. Note that this does not preserve file permissions."\r\r\t| name |\r\tname := fileStream name.\r\tfileStream close.\r\tCommandShell deleteFileNamed: name inDirectory: directory.\r\t^ (Smalltalk at: #CrLfFileStream) fileNamed: name\r',			#stamp : 'ThierryGoubier 9/20/2013 15:14',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1836' ],		#self : OmReference [ '1837' ],		#time : DateAndTime [ '2018-02-22T14:01:14.303818-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #browseChanges,			#protocol : #menus,			#sourceCode : 'browseChanges\r\t"Browse in fileIn format."\r\r\t| fs |\r\tfs :=  CommandShell fileNamed: fileName inDirectory: directory.\r\tChangeList browseStream: fs.\r\tfs close\r',			#stamp : 'dtl 1/27/2013 17:53',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1837' ],		#self : OmReference [ '1838' ],		#time : DateAndTime [ '2018-02-22T14:01:14.304364-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #contents,			#protocol : #'model access',			#sourceCode : 'contents\r\r\t^ viewStyle == #hex\r\t\tifTrue: [self hexFormat: contents]\r\t\tifFalse: [contents]\r',			#stamp : 'dtl 1/26/2013 12:29',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1838' ],		#self : OmReference [ '1839' ],		#time : DateAndTime [ '2018-02-22T14:01:14.30515-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'contents:',			#protocol : #'model access',			#sourceCode : 'contents: aString\r\tviewStyle == #hex\r\t\tifTrue: [ self inform: \'cannot update in hex mode\' ]\r\t\tifFalse: [ contents := aString\t"asString" ]',			#stamp : 'ThierryGoubier 6/25/2015 22:26',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1839' ],		#self : OmReference [ '1840' ],		#time : DateAndTime [ '2018-02-22T14:01:14.305701-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #contentsSelection,			#protocol : #accessing,			#sourceCode : 'contentsSelection\r\t"Return the interval of text in the code pane to select when I set the pane\'s contents"\r\r\t^ 1 to: 0  "null selection"',			#stamp : 'ThierryGoubier 6/25/2015 22:27',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1840' ],		#self : OmReference [ '1841' ],		#time : DateAndTime [ '2018-02-22T14:01:14.306257-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #controllerForAccept,			#protocol : #menus,			#sourceCode : 'controllerForAccept\r\t"Find the controller or morph which expects the #accept message"\r\r\t| controller view |\r\tCommandShell isMorphic\r\t\tifTrue:\r\t\t\t[controller := dependents detect: [:e | e respondsTo: #accept] ifNone: [nil]]\r\t\tifFalse:\r\t\t\t[view := dependents detect: [:e | e controller respondsTo: #accept] ifNone: [nil].\r\t\t\tcontroller := view isNil\r\t\t\t\tifTrue: [nil]\r\t\t\t\tifFalse: [view controller]].\r\t^ controller',			#stamp : 'dtl 6/29/2010 21:08',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1841' ],		#self : OmReference [ '1842' ],		#time : DateAndTime [ '2018-02-22T14:01:14.306818-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #currentFilePathName,			#protocol : #'model access',			#sourceCode : 'currentFilePathName\r\r\t^ (CommandShell dirPathFor: directory pathName), CommandShell pathSeparator, fileName',			#stamp : 'dtl 10/13/2017 20:33',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1842' ],		#self : OmReference [ '1843' ],		#time : DateAndTime [ '2018-02-22T14:01:14.307392-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #defaultFont,			#protocol : #initialize-release,			#sourceCode : 'defaultFont\r\t"A fixed width font suitable for displaying output of shell command lines"\r\r\t^ StrikeFont familyName: \'Atlanta\' size: 11 emphasized: 0',			#stamp : 'dtl 12/13/2007 20:57',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1843' ],		#self : OmReference [ '1844' ],		#time : DateAndTime [ '2018-02-22T14:01:14.307946-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'directory:',			#protocol : #accessing,			#sourceCode : 'directory: aDirectory\r\r\tdirectory := aDirectory',			#stamp : 'dtl 5/19/2001 17:40',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1844' ],		#self : OmReference [ '1845' ],		#time : DateAndTime [ '2018-02-22T14:01:14.308575-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #exit,			#protocol : #menus,			#sourceCode : 'exit\r\r\tself changed: #accept.\r\tCommandShell isMorphic\r\t\tifTrue:\r\t\t\t[dependents do: [:d | (d respondsTo: #closeBoxHit) ifTrue: [d closeBoxHit]]]\r\t\tifFalse:\r\t\t\t[dependents first controller closeAndUnschedule]',			#stamp : 'dtl 6/29/2010 21:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1845' ],		#self : OmReference [ '1846' ],		#time : DateAndTime [ '2018-02-22T14:01:14.309156-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'fileContentsMenu:shifted:',			#protocol : #'model access',			#sourceCode : 'fileContentsMenu: aMenu shifted: shifted\r\r| shiftMenu |\r^ shifted \r\tifFalse: [aMenu \r\t\tlabels: \r\'save\rsave as...\rexit\rview as hex\rview as text\rbrowse changes\rfind...(f)\rfind again (g)\rset search string (h)\rdo again (j)\rundo (z)\rcopy (c)\rcut (x)\rpaste (v)\rpaste...\rdo it (d)\rprint it (p)\rinspect it (i)\rfileIn selection\raccept (s)\rcancel (l)\rmore...\' \r\t\tlines: #(3 6 9 11 15 19 21)\r\t\tselections: #(save saveAs exit getHex getText browseChanges\rfind findAgain setSearchString\ragain undo\rcopySelection cut paste pasteRecent\rdoIt printIt inspectIt fileItIn\raccept cancel\rshiftedYellowButtonActivity)]\r\r\tifTrue: [shiftMenu := (Smalltalk at: #ParagraphEditor) shiftedYellowButtonMenu.\r\t\taMenu \r\t\t\tlabels: shiftMenu labelString \r\t\t\tlines: shiftMenu lineArray\r\t\t\tselections: shiftMenu selections]\r\r',			#stamp : 'ThierryGoubier 9/20/2013 15:17',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1846' ],		#self : OmReference [ '1847' ],		#time : DateAndTime [ '2018-02-22T14:01:14.309703-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'fileName:',			#protocol : #accessing,			#sourceCode : 'fileName: aString\r\r\tfileName := aString',			#stamp : 'dtl 5/19/2001 17:01',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1847' ],		#self : OmReference [ '1848' ],		#time : DateAndTime [ '2018-02-22T14:01:14.310503-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #forceDirtyBuffer,			#protocol : #private,			#sourceCode : 'forceDirtyBuffer\r\t"This will force the view to behave as if it had been edited. Call this to\r\tenable a file save even if the text has not actually been edited by the\r\tuser."\r\r\t| controller |\r\tcontroller := self dependents\r\t\t\tdetect: [:e | e respondsTo: #hasUnacceptedEdits:]\r\t\t\tifNone:\r\t\t\t\t[self dependents\r\t\t\t\t\tcollect: [:d | d controller]\r\t\t\t\t\tthenSelect: [:c | c respondsTo: #hasUnacceptedEdits:]].\r\tcontroller hasUnacceptedEdits: true.\r',			#stamp : 'dtl 6/29/2001 23:21',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1848' ],		#self : OmReference [ '1849' ],		#time : DateAndTime [ '2018-02-22T14:01:14.311095-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'getAnotherFileName:',			#protocol : #private,			#sourceCode : 'getAnotherFileName: initialFileName\r\r\t| choice newFileName |\r\tchoice := ((Smalltalk at: #PopUpMenu)\r\t\tlabels: \'choose another name\\cancel\' withCRs)\r\t\tstartUpWithCaption: initialFileName.\r\tchoice = 1\r\t\tifTrue: [newFileName := (Smalltalk at: #FillInTheBlank)\r\t\t\t\t\t\t\t\t\trequest: \'Enter a new file name\'\r\t\t\t\t\t\t\t\t\tinitialAnswer: initialFileName.\r\t\t\t\tnewFileName := (CommandShell fileExists: newFileName inDirectory: directory)\r\t\t\t\t\tifTrue: [self getFileName: newFileName]\r\t\t\t\t\tifFalse: [newFileName].\r\t\t\t\t^ newFileName].\r\t^ nil',			#stamp : 'ThierryGoubier 9/20/2013 15:16',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1849' ],		#self : OmReference [ '1850' ],		#time : DateAndTime [ '2018-02-22T14:01:14.311722-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'getFileName:',			#protocol : #private,			#sourceCode : 'getFileName: initialFileName\r\r\t| choice newFileName |\r\tchoice := ((Smalltalk at: #PopUpMenu)\r\t\tlabels: \'overwrite that file\\choose another name\\cancel\' withCRs)\r\t\tstartUpWithCaption: initialFileName, \' already exists.\'.\r\tchoice = 1\r\t\tifTrue: [^ initialFileName].\r\tchoice = 2\r\t\tifTrue: [newFileName := (Smalltalk at: #FillInTheBlank)\r\t\t\t\t\t\t\t\t\trequest: \'Enter a new file name\'\r\t\t\t\t\t\t\t\t\tinitialAnswer: initialFileName.\r\t\t\t\tnewFileName := (CommandShell fileExists: newFileName inDirectory: directory)\r\t\t\t\t\tifTrue: [self getFileName: newFileName]\r\t\t\t\t\tifFalse: [newFileName].\r\t\t\t\t^ newFileName].\r\t^ nil',			#stamp : 'ThierryGoubier 9/20/2013 15:16',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1850' ],		#self : OmReference [ '1851' ],		#time : DateAndTime [ '2018-02-22T14:01:14.312272-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #getHex,			#protocol : #menus,			#sourceCode : 'getHex\r\r\tCursor read showWhile:\r\t\t[self viewStyle: #hex.\r\t\tself changed: #contents]\r',			#stamp : 'dtl 5/20/2001 12:46',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1851' ],		#self : OmReference [ '1852' ],		#time : DateAndTime [ '2018-02-22T14:01:14.312874-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #getSelection,			#protocol : #'model access',			#sourceCode : 'getSelection\r\r\t^ 1 to: 0  "null selection"',			#stamp : 'dtl 5/26/2001 18:23',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1852' ],		#self : OmReference [ '1853' ],		#time : DateAndTime [ '2018-02-22T14:01:14.313442-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #getText,			#protocol : #menus,			#sourceCode : 'getText\r\r\tCursor read showWhile:\r\t\t[self viewStyle: #text.\r\t\tself changed: #contents]\r',			#stamp : 'dtl 5/20/2001 14:01',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1853' ],		#self : OmReference [ '1854' ],		#time : DateAndTime [ '2018-02-22T14:01:14.314086-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'hexFormat:',			#protocol : #private,			#sourceCode : 'hexFormat: aString\r\r\t"CrLfFileEditor new hexFormat: \'this is a test of the HEX string reformat method\'"\r\r\t| s |\r\ts := WriteStream on: (String new: aString size*4).\r\t0 to: aString size-1 by: 16 do:\r\t\t[:loc | s nextPutAll: loc hex; space;\r\t\t\tnextPut: $(; print: loc; nextPut: $); space; tab.\r\t\tloc+1 to: (loc+16 min: aString size) do: [:i | s nextPutAll: (aString at: i) hex; space].\r\t\ts cr].\r\t^ s contents.\r',			#stamp : 'dtl 5/20/2001 14:25',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1854' ],		#self : OmReference [ '1855' ],		#time : DateAndTime [ '2018-02-22T14:01:14.314666-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #labelString,			#protocol : #'model access',			#sourceCode : 'labelString\r\t"For views to use as labels"\r\r\t^ self currentFilePathName',			#stamp : 'dtl 10/13/2017 20:29',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1855' ],		#self : OmReference [ '1856' ],		#time : DateAndTime [ '2018-02-22T14:01:14.315218-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'lineEndConvention:',			#protocol : #accessing,			#sourceCode : 'lineEndConvention: aSymbol\r\t"See CrLfFileStream for the allowable values of aSymbol."\r\r\tlineEndConvention := aSymbol',			#stamp : 'dtl 5/19/2001 17:01',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1856' ],		#self : OmReference [ '1857' ],		#time : DateAndTime [ '2018-02-22T14:01:14.31619-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'mvcWithLabel:',			#protocol : #initialize-release,			#sourceCode : 'mvcWithLabel: aLabelString\r\t| topView controllerClass fileContentsView |\r\tCommandShell isMorphic\r\t\tifTrue: [ ^ self error: \'this method should be used only for MVC\' ].\r\ttopView := (Smalltalk at: #StandardSystemView) new.\r\tcontrollerClass := Smalltalk\r\t\tat: #DeferredActionStandardSystemController\r\t\tifAbsent: [ Smalltalk at: #StandardSystemController ].\r\ttopView\r\t\tmodel: self;\r\t\tcontroller: controllerClass new;\r\t\tlabel: aLabelString;\r\t\tminimumSize: 200 @ 200.\r\ttopView borderWidth: 1.\r\tfileContentsView := (Smalltalk at: #PluggableTextView)\r\t\ton: self\r\t\ttext: #contents\r\t\taccept: #put:\r\t\treadSelection: #contentsSelection\r\t\tmenu: #fileContentsMenu:shifted:.\r\tfileContentsView window: (0 @ 0 extent: 200 @ 140).\r\ttopView addSubView: fileContentsView.\r\t^ topView controller',			#stamp : 'ThierryGoubier 9/20/2013 15:18',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1857' ],		#self : OmReference [ '1858' ],		#time : DateAndTime [ '2018-02-22T14:01:14.316857-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'openAsMorphLabel:',			#protocol : #initialize-release,			#sourceCode : 'openAsMorphLabel: aLabelString\r\r\t| window textMorph |\r\ttextMorph := PluggableTextMorph\r\t\ton: self\r\t\ttext: #contents\r\t\taccept: #put:\r\t\treadSelection: #contentsSelection menu: #fileContentsMenu:shifted:.\r\ttextMorph font: self defaultFont.\r\twindow := (SystemWindow labelled: aLabelString) model: self.\r\twindow\r\t\taddMorph: textMorph\r\t\tframe: (0@0 corner: 1@1).\r\t^ window',			#stamp : 'dtl 12/13/2007 20:57',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1858' ],		#self : OmReference [ '1859' ],		#time : DateAndTime [ '2018-02-22T14:01:14.317444-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'openLabel:',			#protocol : #initialize-release,			#sourceCode : 'openLabel: aLabelString\r\r\tCommandShell isMorphic\r\t\tifTrue:\r\t\t\t[^ (self openAsMorphLabel: aLabelString) openInWorld]\r\t\tifFalse:\r\t\t\t[^ (self mvcWithLabel: aLabelString) open]\r',			#stamp : 'dtl 6/29/2010 21:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1859' ],		#self : OmReference [ '1860' ],		#time : DateAndTime [ '2018-02-22T14:01:14.318131-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'put:',			#protocol : #'model access',			#sourceCode : 'put: aText \r\r\t| str newFileName fs |\r\tviewStyle == #hex\r\t\tifTrue: [self inform: \'cannot save file in hex mode\'.\r\t\t\t\t^ false].\r\tstr := aText asString.\r\tself contents: str.\r\t(CommandShell fileExists: fileName inDirectory: directory)\r\t\tifTrue: [newFileName := self\r\t\t\t\t\tgetFileName: (CommandShell pathNameForDirectory: directory),\r\t\t\t\t\t\tCommandShell pathSeparator , fileName.]\r\t\tifFalse: [newFileName := (CommandShell pathNameForDirectory: directory),\r\t\t\t\t\t\tCommandShell pathSeparator , fileName].\r\tnewFileName ifNil: [^ false].\r\tfs := (Smalltalk at: #CrLfFileStream ifAbsent: [ FileStream ]) fileNamed: newFileName.\r\t[fs isNil] whileTrue:\r\t\t[self inform: \'cannot write file\'.\r\t\tnewFileName := self getAnotherFileName: newFileName.\r\t\tnewFileName isNil\r\t\t\tifTrue:\r\t\t\t\t[self inform: \'file not written\'.\r\t\t\t\t^ false]\r\t\t\tifFalse:\r\t\t\t\t[fs := (Smalltalk at: #CrLfFileStream )fileNamed: newFileName]].\r\t(str size < fs size)\r\t\tifTrue:\r\t\t\t[(fs respondsTo: #truncate)\r\t\t\t\tifTrue:\r\t\t\t\t\t[[fs truncate]\r\t\t\t\t\t\ton: Error\r\t\t\t\t\t\tdo: [:ex | fs := self bogusTruncate: fs]]\r\t\t\t\tifFalse: [fs := self bogusTruncate: fs]].\r\tfs nextPutAll: str.\r\tfs close.\r\tself updateFilePathWith: newFileName.\r\t^ true',			#stamp : 'dtl 10/13/2017 21:25',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1860' ],		#self : OmReference [ '1861' ],		#time : DateAndTime [ '2018-02-22T14:01:14.318687-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #save,			#protocol : #menus,			#sourceCode : 'save\r\r\t| controller |\r\tself forceDirtyBuffer.\r\tcontroller := self controllerForAccept.\r\tcontroller ifNotNil: [controller accept]\r',			#stamp : 'dtl 6/29/2001 23:22',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1861' ],		#self : OmReference [ '1862' ],		#time : DateAndTime [ '2018-02-22T14:01:14.319311-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #saveAs,			#protocol : #menus,			#sourceCode : 'saveAs\r\r\t| oldFilePath newFilePath controller |\r\toldFilePath := self currentFilePathName.\r\tnewFilePath := (Smalltalk at: #FillInTheBlank)\r\t\t\t\t\trequest: \'Enter a new file name\'\r\t\t\t\t\tinitialAnswer: oldFilePath.\r\tnewFilePath isEmpty\r\t\tifFalse:\r\t\t\t[self updateFilePathWith: newFilePath.\r\t\t\tcontroller := self controllerForAccept.\r\t\t\tcontroller ifNotNil:\r\t\t\t\t[self forceDirtyBuffer.\r\t\t\t\tcontroller accept]]\r\r',			#stamp : 'ThierryGoubier 9/20/2013 15:17',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1862' ],		#self : OmReference [ '1863' ],		#time : DateAndTime [ '2018-02-22T14:01:14.319857-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #selectedClassOrMetaClass,			#protocol : #menus,			#sourceCode : 'selectedClassOrMetaClass\r\t"For support of the pretty printer menu option"\r\r\t^ self class',			#stamp : 'dtl 5/20/2001 19:39',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1863' ],		#self : OmReference [ '1864' ],		#time : DateAndTime [ '2018-02-22T14:01:14.320397-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #selectedMessageCategoryName,			#protocol : #menus,			#sourceCode : 'selectedMessageCategoryName\r\t"For support of the pretty printer menu option"\r\r\t^ \'-- all --\'',			#stamp : 'dtl 5/20/2001 19:37',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1864' ],		#self : OmReference [ '1865' ],		#time : DateAndTime [ '2018-02-22T14:01:14.321239-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'updateFilePathWith:',			#protocol : #private,			#sourceCode : 'updateFilePathWith: aPathString\r\r\tCommandShell useFileSystem\r\t\tifTrue: [\r\t\t\tself fileName: (CommandShell localNameFor: aPathString).\r\t\t\tself directory: (CommandShell directoryForPath: aPathString) ]\r\t\tifFalse: [ | fdClass | fdClass := Smalltalk at: #FileDirectory.\r\t\t\tfdClass splitName: aPathString to: [ :dir :file |\r\t\t\t\tself fileName: file.\r\t\t\t\tself directory: (fdClass on: dir) ]].\r\tself changed: #relabel\r',			#stamp : 'dtl 10/13/2017 21:02',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1865' ],		#self : OmReference [ '1866' ],		#time : DateAndTime [ '2018-02-22T14:01:14.321788-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'viewStyle:',			#protocol : #accessing,			#sourceCode : 'viewStyle: aSymbol\r\t"#text or #hex"\r\r\tviewStyle := aSymbol',			#stamp : 'dtl 5/20/2001 12:45',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1866' ],		#self : OmReference [ '1867' ],		#time : DateAndTime [ '2018-02-22T14:01:14.322376-03:00' ],		#trigger : OmReference [ '1754' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CrLfFileEditor,				#isMetaSide : false			},			#name : #'withLabel:',			#protocol : #initialize-release,			#sourceCode : 'withLabel: aLabelString\r\t"Same as #openLabel: but does not open the window in MVC"\r\r\tCommandShell isMorphic\r\t\tifTrue:\r\t\t\t[^ self openAsMorphLabel: aLabelString]\r\t\tifFalse:\r\t\t\t[^ self mvcWithLabel: aLabelString]\r',			#stamp : 'dtl 6/29/2010 21:09',			#package : #CommandShell-Commands		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:14.375563-03:00' ],		#prior : OmReference [ '1867' ],		#self : OmReference [ '1868' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'CommandShell-UI-dtl.18'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1868' ],		#self : OmReference [ '1869' ],		#time : DateAndTime [ '2018-02-22T14:01:14.47281-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WriteStream',				#traitCompositionSource : '{}',				#definitionSource : 'WriteStream subclass: #CommandShellTranscript\r\tinstanceVariableNames: \'cliShell lastPromptString activeController labelStringBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CommandShellTranscript,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #cliShell,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #lastPromptString,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #activeController,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #labelStringBlock,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CommandShellTranscript class\r\tinstanceVariableNames: \'\''				},				#name : #'CommandShellTranscript class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CommandShellTranscript,					#isMetaSide : false				},				#parent : @7,				#content : 'CommandShellTranscript is a user interface for a ComandShell. It behaves like a simple teletype text terminal.',				#stamp : 'dtl 1/20/2007 09:11'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CommandShellTranscript is a user interface for a ComandShell. It behaves like a simple teletype text terminal.',		#newStamp : 'dtl 1/20/2007 09:11'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1869' ],		#self : OmReference [ '1870' ],		#time : DateAndTime [ '2018-02-22T14:01:14.473597-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpCategoryAddition {		#classCategoryName : #CommandShell-UI,		#affectedPackageName : #CommandShell-UI	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1870' ],		#self : OmReference [ '1871' ],		#time : DateAndTime [ '2018-02-22T14:01:14.498355-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'WriteStream',				#traitCompositionSource : '{}',				#definitionSource : 'WriteStream subclass: #CommandShellTranscript\r\tinstanceVariableNames: \'cliShell lastPromptString activeController labelStringBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-UI\''			},			#name : #CommandShellTranscript,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #cliShell,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #lastPromptString,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #activeController,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CommandShellTranscript,						#isMetaSide : false					},					#name : #labelStringBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CommandShellTranscript class\r\tinstanceVariableNames: \'\''				},				#name : #'CommandShellTranscript class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CommandShellTranscript,					#isMetaSide : false				},				#parent : @8,				#content : 'CommandShellTranscript is a user interface for a ComandShell. It behaves like a simple teletype text terminal.',				#stamp : 'dtl 1/20/2007 09:11'			},			#classVariables : OrderedCollection [ ],			#category : #CommandShell-UI,			#package : #CommandShell-UI,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1871' ],		#self : OmReference [ '1872' ],		#time : DateAndTime [ '2018-02-22T14:01:14.503322-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExternalCommandShell\r\tinstanceVariableNames: \'cliShell isRunning inputStream lineBuffer sigIntSema sigIntHandler\'\r\tclassVariableNames: \'ExternalShell\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ExternalCommandShell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #cliShell,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #isRunning,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #inputStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #lineBuffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #sigIntSema,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #sigIntHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalCommandShell class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalCommandShell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalCommandShell,					#isMetaSide : false				},				#parent : @8,				#content : 'On some platforms it is possible to use OSProcess to read and write the standard input, output and error streams. In that case, ExternalCommandShell allows Squeak to be used as a traditional text mode command shell.\r\rWhen used in a headless Squeak image, ExternalCommandShell behaves like a traditional Unix command shell, except that it has the ability to evaluate Smalltalk expressions as well as other programs and commands. On a Unix system running a Squeak shell in a headless image, the Smalltalk display can be opened by entering the command "UnixProcess recapitate" at the Squeak shell prompt.\r\rExternalCommandShell has one instance, which is accessible as "ExternalCommandShell inSmalltalk". The shell can be stopped with "ExternalCommandShell stop" and restarted with "ExternalCommandShell start". If the shell is running when Squeak is shut down, it will be automatically be restarted when the image is restarted.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #ExternalShell,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'On some platforms it is possible to use OSProcess to read and write the standard input, output and error streams. In that case, ExternalCommandShell allows Squeak to be used as a traditional text mode command shell.\r\rWhen used in a headless Squeak image, ExternalCommandShell behaves like a traditional Unix command shell, except that it has the ability to evaluate Smalltalk expressions as well as other programs and commands. On a Unix system running a Squeak shell in a headless image, the Smalltalk display can be opened by entering the command "UnixProcess recapitate" at the Squeak shell prompt.\r\rExternalCommandShell has one instance, which is accessible as "ExternalCommandShell inSmalltalk". The shell can be stopped with "ExternalCommandShell stop" and restarted with "ExternalCommandShell start". If the shell is running when Squeak is shut down, it will be automatically be restarted when the image is restarted.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1872' ],		#self : OmReference [ '1873' ],		#time : DateAndTime [ '2018-02-22T14:01:14.506114-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExternalCommandShell\r\tinstanceVariableNames: \'cliShell isRunning inputStream lineBuffer sigIntSema sigIntHandler\'\r\tclassVariableNames: \'ExternalShell\'\r\tpoolDictionaries: \'\'\r\tcategory: \'CommandShell-UI\''			},			#name : #ExternalCommandShell,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #cliShell,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #isRunning,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #inputStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #lineBuffer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #sigIntSema,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #sigIntHandler,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExternalCommandShell class\r\tinstanceVariableNames: \'\''				},				#name : #'ExternalCommandShell class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExternalCommandShell,					#isMetaSide : false				},				#parent : @8,				#content : 'On some platforms it is possible to use OSProcess to read and write the standard input, output and error streams. In that case, ExternalCommandShell allows Squeak to be used as a traditional text mode command shell.\r\rWhen used in a headless Squeak image, ExternalCommandShell behaves like a traditional Unix command shell, except that it has the ability to evaluate Smalltalk expressions as well as other programs and commands. On a Unix system running a Squeak shell in a headless image, the Smalltalk display can be opened by entering the command "UnixProcess recapitate" at the Squeak shell prompt.\r\rExternalCommandShell has one instance, which is accessible as "ExternalCommandShell inSmalltalk". The shell can be stopped with "ExternalCommandShell stop" and restarted with "ExternalCommandShell start". If the shell is running when Squeak is shut down, it will be automatically be restarted when the image is restarted.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExternalCommandShell,						#isMetaSide : false					},					#name : #ExternalShell,					#parent : @8				}			],			#category : #CommandShell-UI,			#package : #CommandShell-UI,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1873' ],		#self : OmReference [ '1874' ],		#time : DateAndTime [ '2018-02-22T14:01:14.584891-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShellTranscript class',				#isMetaSide : true			},			#name : #'commandShell:',			#protocol : #'instance creation',			#sourceCode : 'commandShell: cliShell\r\r\t| ttyDisplay |\r\tttyDisplay := self new cliShell: cliShell.\r\tcliShell outputStream: ttyDisplay; errorStream: ttyDisplay.\r\tcliShell addDependent: ttyDisplay.\r\t^ ttyDisplay\r',			#stamp : 'dtl 1/20/2007 10:32',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1874' ],		#self : OmReference [ '1875' ],		#time : DateAndTime [ '2018-02-22T14:01:14.586376-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShellTranscript class',				#isMetaSide : true			},			#name : #defaultWindowName,			#protocol : #defaults,			#sourceCode : 'defaultWindowName\r\r\t^ \'Squeak Shell\'',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1875' ],		#self : OmReference [ '1876' ],		#time : DateAndTime [ '2018-02-22T14:01:14.588909-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShellTranscript class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\t^ (self on: (String new: 1000)) initialize',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1876' ],		#self : OmReference [ '1877' ],		#time : DateAndTime [ '2018-02-22T14:01:14.589979-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShellTranscript class',				#isMetaSide : true			},			#name : #open,			#protocol : #'instance creation',			#sourceCode : 'open\r\t"CommandShell open"\r\r\t^ self new open',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1877' ],		#self : OmReference [ '1878' ],		#time : DateAndTime [ '2018-02-22T14:01:14.590709-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShellTranscript class',				#isMetaSide : true			},			#name : #'openLabel:',			#protocol : #'instance creation',			#sourceCode : 'openLabel: aString\r\r\t"CommandShell openLabel: self defaultWindowName"\r\r\t^ self new openLabel: aString\r',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1878' ],		#self : OmReference [ '1879' ],		#time : DateAndTime [ '2018-02-22T14:01:14.591346-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CommandShellTranscript class',				#isMetaSide : true			},			#name : #windowColorSpecification,			#protocol : #'window color',			#sourceCode : 'windowColorSpecification\r\t"Answer a WindowColorSpec object that declares my preference"\r\r\t| windowColorSpec |\r\twindowColorSpec := Smalltalk\r\t\t\t\tat: #WindowColorSpec\r\t\t\t\tifAbsent: [^ self error: \'this image does not support WindowColorSpec\'].\r\t^ windowColorSpec\r\t\tclassSymbol: self name\r\t\twording: \'Squeak Shell\'\r\t\tbrightColor: (Color lightGray lighter paler)\r\t\tpastelColor: (Color lightGray lighter lighter paler paler)\r\t\thelpMessage: \'CommandShell window for evaluating Smalltalk and OS commands\'',			#stamp : 'dtl 6/29/2010 00:07',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1879' ],		#self : OmReference [ '1880' ],		#time : DateAndTime [ '2018-02-22T14:01:14.592059-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #activeController,			#protocol : #accessing,			#sourceCode : 'activeController\r\t"In Morphic, alway nil. In MVC, the controller that most recently invoked\r\ta command."\r\r\t^ activeController',			#stamp : 'dtl 6/24/2001 19:09',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1880' ],		#self : OmReference [ '1881' ],		#time : DateAndTime [ '2018-02-22T14:01:14.592703-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'activeController:',			#protocol : #accessing,			#sourceCode : 'activeController: aController\r\t"In Morphic, alway nil. In MVC, the controller that most recently invoked\r\ta command."\r\r\tactiveController := aController',			#stamp : 'dtl 11/8/2007 20:28',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1881' ],		#self : OmReference [ '1882' ],		#time : DateAndTime [ '2018-02-22T14:01:14.593329-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #bs,			#protocol : #'stream extensions',			#sourceCode : 'bs\r\tself position > 0 ifTrue: [^ self skip: -1].\r\tself changed: #bs',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1882' ],		#self : OmReference [ '1883' ],		#time : DateAndTime [ '2018-02-22T14:01:14.593896-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #characterLimit,			#protocol : #accessing,			#sourceCode : 'characterLimit\r\t"Tell the views how much to retain on screen"\r\t^ 20000',			#stamp : 'dtl 1/17/2007 06:28',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1883' ],		#self : OmReference [ '1884' ],		#time : DateAndTime [ '2018-02-22T14:01:14.594487-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'checkSttyForEvent:',			#protocol : #'input character filtering',			#sourceCode : 'checkSttyForEvent: keyboardEvent\r\t"Check for interrupt characters and such. Consume interrupt character and\r\tanswer nil, otherwise answer keyboardEvent."\r\r\t(self isInterruptEvent: keyboardEvent)\r\t\tifTrue:\r\t\t\t[self handleInterruptCharacterEvent.\r\t\t\t^ nil].\r\t(self isEndOfFileEvent: keyboardEvent)\r\t\tifTrue:\r\t\t\t[self cliShell doEndOfFile.\r\t\t\t^ nil].\r\t^ keyboardEvent',			#stamp : 'dtl 11/8/2007 19:38',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1884' ],		#self : OmReference [ '1885' ],		#time : DateAndTime [ '2018-02-22T14:01:14.596357-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #clear,			#protocol : #'stream extensions',			#sourceCode : 'clear\r\t"Clear all characters and redisplay the view"\r\tself changed: #clearText.\r\tself reset',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1885' ],		#self : OmReference [ '1886' ],		#time : DateAndTime [ '2018-02-22T14:01:14.597066-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #cliShell,			#protocol : #accessing,			#sourceCode : 'cliShell\r\t"Answer the value of cliShell"\r\r\t^ cliShell ifNil: [cliShell := CommandShell new]',			#stamp : 'dtl 12/11/2007 19:00',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1886' ],		#self : OmReference [ '1887' ],		#time : DateAndTime [ '2018-02-22T14:01:14.597635-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'cliShell:',			#protocol : #accessing,			#sourceCode : 'cliShell: commandShell\r\t"Set the value of cliShell"\r\r\tcliShell := commandShell',			#stamp : 'dtl 11/8/2007 20:28',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1887' ],		#self : OmReference [ '1888' ],		#time : DateAndTime [ '2018-02-22T14:01:14.598195-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\r\tsuper close.\r\tself changed: #exit',			#stamp : 'dtl 1/20/2007 11:56',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1888' ],		#self : OmReference [ '1889' ],		#time : DateAndTime [ '2018-02-22T14:01:14.598871-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'codePaneMenu:shifted:',			#protocol : #'model protocol',			#sourceCode : 'codePaneMenu: aMenu shifted: shifted\r\t"Note that unless we override perform:orSendTo:, PluggableTextController will respond\r\tto all menu items.\r\r\tIf StringHolder is not present, try to delegate to Workspace instead."\r\r\t^ (Smalltalk\r\t\tat: #StringHolder\r\t\tifAbsent: [Smalltalk\r\t\t\t\tat: #Workspace\r\t\t\t\tifAbsent: [^ self ]]) basicNew codePaneMenu: aMenu shifted: shifted',			#stamp : 'dtl 6/17/2015 21:22',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1889' ],		#self : OmReference [ '1890' ],		#time : DateAndTime [ '2018-02-22T14:01:14.599552-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'confirmBeforeKilling:',			#protocol : #'input character filtering',			#sourceCode : 'confirmBeforeKilling: externalProxies\r\t"Interrupt character detected, do interrupt stuff."\r\r\t| msgStrm |\r\t(externalProxies size > 0)\r\t\tifTrue:\r\t\t\t[msgStrm := WriteStream on: String new.\r\t\t\t(externalProxies size > 1)\r\t\t\t\tifTrue: [msgStrm nextPutAll: \'kill processes\']\r\t\t\t\tifFalse: [msgStrm nextPutAll: \'kill process\'].\r\t\t\texternalProxies do: [:e | msgStrm nextPutAll: \' \', e pid printString, \' (\', e programName, \')\'].\r\t\t\tmsgStrm nextPut: $?.\r\t\t\t(self confirm: msgStrm contents)\r\t\t\t\tifTrue:\r\t\t\t\t\t[externalProxies reverseDo: [:e | e terminate]]]\r',			#stamp : 'dtl 11/8/2007 20:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1890' ],		#self : OmReference [ '1891' ],		#time : DateAndTime [ '2018-02-22T14:01:14.600146-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #defaultLabelStringBlock,			#protocol : #'model protocol',			#sourceCode : 'defaultLabelStringBlock\r\r\t^ [ | directoryString |\r\tdirectoryString := self cliShell workingDirectory.\r\tdirectoryString isEmpty ifTrue: [directoryString := self cliShell shellSyntax nullDirectoryString].\r\tself class defaultWindowName, \': \', directoryString]\r',			#stamp : 'dtl 12/11/2007 20:19',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1891' ],		#self : OmReference [ '1892' ],		#time : DateAndTime [ '2018-02-22T14:01:14.600719-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #endEntry,			#protocol : #'stream extensions',			#sourceCode : 'endEntry\r\t"Display all the characters since the last endEntry, and reset the stream"\r\tself changed: #appendEntry.\r\tself reset',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1892' ],		#self : OmReference [ '1893' ],		#time : DateAndTime [ '2018-02-22T14:01:14.601272-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'filterAndForward:',			#protocol : #'input character filtering',			#sourceCode : 'filterAndForward: aCharacter\r\t"Filter aCharacter, taking special action if needed. If a child process is active,\r\tforward aCharacter to the child and answer nil. Otherwise answer aCharacter."\r\r\t^ self cliShell filterAndForward: aCharacter',			#stamp : 'dtl 1/20/2007 09:42',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1893' ],		#self : OmReference [ '1894' ],		#time : DateAndTime [ '2018-02-22T14:01:14.603092-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'filterAndForwardEvent:',			#protocol : #'input character filtering',			#sourceCode : 'filterAndForwardEvent: keyboardEvent \r\t"Filter keyboardEvent, taking special action if needed. If a child process\r\tis active, forward keyboardEvent to the child and answer nil. Otherwise\r\tanswer keyboardEvent."\r\r\t^ (self checkSttyForEvent: keyboardEvent)\r\t\tifNotNil: [self cliShell filterAndForwardEvent: keyboardEvent]',			#stamp : 'dtl 11/7/2007 06:54',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1894' ],		#self : OmReference [ '1895' ],		#time : DateAndTime [ '2018-02-22T14:01:14.603811-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #flush,			#protocol : #'stream extensions',			#sourceCode : 'flush\r\tself endEntry',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1895' ],		#self : OmReference [ '1896' ],		#time : DateAndTime [ '2018-02-22T14:01:14.604412-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #handleInterruptCharacterEvent,			#protocol : #'input character filtering',			#sourceCode : 'handleInterruptCharacterEvent\r\t"Interrupt character detected, do interrupt stuff."\r\r\tself confirmBeforeKilling: (self cliShell foregroundProxies\r\t\tselect: [:e | e isExternalProcess]\r\t\tthenCollect: [:r | r processProxy]).\r\tself confirmBeforeKilling: (self cliShell backgroundProxies\r\t\tselect: [:e | e isExternalProcess]\r\t\tthenCollect: [:r | r processProxy]).\r',			#stamp : 'dtl 11/8/2007 19:38',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1896' ],		#self : OmReference [ '1897' ],		#time : DateAndTime [ '2018-02-22T14:01:14.604993-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'isEndOfFileEvent:',			#protocol : #'input character filtering',			#sourceCode : 'isEndOfFileEvent: keystrokeEvent \r\t"A <ctl>d event, represented either as character value 4, or as $d with\r\tthe control or meta key. The actual representation varies on different\r\tversions of Squeak."\r\r\t^ keystrokeEvent keyValue == 4\r\t\tor: [keystrokeEvent keyCharacter = $d\r\t\t\t\tand: [keystrokeEvent controlKeyPressed]]',			#stamp : 'dtl 12/25/2007 16:30',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1897' ],		#self : OmReference [ '1898' ],		#time : DateAndTime [ '2018-02-22T14:01:14.605574-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'isInterruptEvent:',			#protocol : #'input character filtering',			#sourceCode : 'isInterruptEvent: keystrokeEvent \r\t"A <ctl>c event, represented either as character value 3, or as $c with\r\tthe control or meta key. The actual representation varies on different\r\tversions of Squeak."\r\r\t^ keystrokeEvent keyValue == 3\r\t\tor: [keystrokeEvent keyCharacter = $c\r\t\t\t\tand: [keystrokeEvent controlKeyPressed]]',			#stamp : 'dtl 12/25/2007 16:30',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1898' ],		#self : OmReference [ '1899' ],		#time : DateAndTime [ '2018-02-22T14:01:14.606138-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #keyboardConnector,			#protocol : #accessing,			#sourceCode : 'keyboardConnector\r\r\t^ self cliShell keyboardConnector',			#stamp : 'dtl 1/22/2007 21:24',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1899' ],		#self : OmReference [ '1900' ],		#time : DateAndTime [ '2018-02-22T14:01:14.606697-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #labelString,			#protocol : #'model protocol',			#sourceCode : 'labelString\r\r\t^ self labelStringBlock value\r',			#stamp : 'dtl 12/11/2007 20:20',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1900' ],		#self : OmReference [ '1901' ],		#time : DateAndTime [ '2018-02-22T14:01:14.607244-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #labelStringBlock,			#protocol : #accessing,			#sourceCode : 'labelStringBlock\r\t"Answer a block that when evaluated answers a string to be used\r\tas the window label."\r\r\t^ labelStringBlock ifNil: [labelStringBlock := self defaultLabelStringBlock]',			#stamp : 'dtl 12/11/2007 20:18',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1901' ],		#self : OmReference [ '1902' ],		#time : DateAndTime [ '2018-02-22T14:01:14.607799-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'labelStringBlock:',			#protocol : #accessing,			#sourceCode : 'labelStringBlock: aBlockAnsweringAString\r\r\tlabelStringBlock := aBlockAnsweringAString',			#stamp : 'dtl 12/11/2007 20:16',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1902' ],		#self : OmReference [ '1903' ],		#time : DateAndTime [ '2018-02-22T14:01:14.609623-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #lastPromptString,			#protocol : #accessing,			#sourceCode : 'lastPromptString\r\t"Answer the value of lastPromptString"\r\r\t^ lastPromptString ifNil: [lastPromptString := self cliShell promptString]',			#stamp : 'dtl 1/20/2007 11:44',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1903' ],		#self : OmReference [ '1904' ],		#time : DateAndTime [ '2018-02-22T14:01:14.610266-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'lastPromptString:',			#protocol : #accessing,			#sourceCode : 'lastPromptString: anObject\r\t"Set the value of lastPromptString"\r\r\tlastPromptString := anObject',			#stamp : 'dtl 11/8/2007 20:28',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1904' ],		#self : OmReference [ '1905' ],		#time : DateAndTime [ '2018-02-22T14:01:14.610829-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #'stream extensions',			#sourceCode : 'nextPut: anObject \r\r\tself scheduleToEvaluate:\r\t\t[super nextPut: anObject]',			#stamp : 'dtl 12/11/2007 21:35',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1905' ],		#self : OmReference [ '1906' ],		#time : DateAndTime [ '2018-02-22T14:01:14.611415-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #'stream extensions',			#sourceCode : 'nextPutAll: characters\r\t"Convert line terminators to cr. Note that #nextPut: does not do this conversion."\r\r\tself scheduleToEvaluate:\r\t\t[characters isEmpty ifFalse:\r\t\t\t[super nextPutAll: (characters copyReplaceAll: String lf with: String cr).\r\t\t\tself flush]]',			#stamp : 'dtl 12/11/2007 21:35',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1906' ],		#self : OmReference [ '1907' ],		#time : DateAndTime [ '2018-02-22T14:01:14.611974-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #open,			#protocol : #initialize-release,			#sourceCode : 'open\r\r\t^ self openLabel: nil "invoke default label setting block"',			#stamp : 'dtl 12/11/2007 20:31',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1907' ],		#self : OmReference [ '1908' ],		#time : DateAndTime [ '2018-02-22T14:01:14.612594-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'openAsMorphLabel:',			#protocol : #initialize-release,			#sourceCode : 'openAsMorphLabel: labelString \r\t"Build a morph viewing this stream"\r\r\t| window textMorph |\r\twindow := SystemWindow new model: self.\r\ttextMorph := ShellWindowMorph\r\t\t\t\t\ton: self\r\t\t\t\t\ttext: nil\r\t\t\t\t\taccept: nil\r\t\t\t\t\treadSelection: nil\r\t\t\t\t\tmenu: #codePaneMenu:shifted:.\r\ttextMorph acceptOnCR: true.\r\twindow addMorph: textMorph frame: (0@0 corner: 1@1).\r\tself prompt.\r\tlabelString ifNotNil: [self labelStringBlock: [labelString]].\r\tself changed: #relabel.\r\t^ window',			#stamp : 'dtl 12/11/2007 20:30',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1908' ],		#self : OmReference [ '1909' ],		#time : DateAndTime [ '2018-02-22T14:01:14.613323-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'openLabel:',			#protocol : #initialize-release,			#sourceCode : 'openLabel: aString \r\t"Open a window on this stream. This is copied from the corresponding method in\r\tTranscriptStream."\r\r\t| topView controllerClass codeView |\r\tCommandShell isMorphic ifTrue: [^ (self openAsMorphLabel: aString) openInWorld].\r\r\taString ifNotNil: [self labelStringBlock: [aString]].\r\ttopView := (Smalltalk at: #StandardSystemView) new.\r\tcontrollerClass := Smalltalk\r\t\tat: #DeferredActionStandardSystemController\r\t\tifAbsent: [(Smalltalk at: #StandardSystemController)].\t\r\ttopView model: self;\r\t\t\tcontroller: controllerClass new;\r\t\t\tborderWidth: 1;\r\t\t\tlabel: aString;\r\t\t\tminimumSize: 100 @ 50.\r\tcodeView := (Smalltalk at: #ShellWindowView)\r\t\t\t\t\ton: self\r\t\t\t\t\ttext: nil\r\t\t\t\t\taccept: nil\r\t\t\t\t\treadSelection: nil\r\t\t\t\t\tmenu: #codePaneMenu:shifted:.\r\tcodeView window: (0@0 extent: 200@200).\r\ttopView addSubView: codeView.\r\ttopView controller addDeferredUIMessage:\r\t\t[self changed: #relabel.\r\t\tself prompt].\r\ttopView controller open.\r',			#stamp : 'ThierryGoubier 9/20/2013 15:20',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1909' ],		#self : OmReference [ '1910' ],		#time : DateAndTime [ '2018-02-22T14:01:14.613903-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'pastEndPut:',			#protocol : #'stream extensions',			#sourceCode : 'pastEndPut: anObject\r\t"If the stream reaches its limit, just output the contents and reset."\r\tself endEntry.\r\t^ self nextPut: anObject',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1910' ],		#self : OmReference [ '1911' ],		#time : DateAndTime [ '2018-02-22T14:01:14.61447-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'perform:orSendTo:',			#protocol : #'model protocol',			#sourceCode : 'perform: selector orSendTo: otherTarget\r\t"Selector was just chosen from a menu by a user.  If can respond, then\r\tperform it on myself. If not, send it to otherTarget, presumably the\r\teditPane from which the menu was invoked."\r\r\t(self respondsTo: selector)\r\t\tifTrue: [^ self perform: selector]\r\t\tifFalse: [^ otherTarget perform: selector]',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1911' ],		#self : OmReference [ '1912' ],		#time : DateAndTime [ '2018-02-22T14:01:14.616346-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'processCommand:',			#protocol : #evaluation,			#sourceCode : 'processCommand: aCommandString\r\t"Evaluate aCommandString in a separate Smalltalk process. This permits the\r\tuser interface to remain responsive."\r\r\t^ self processCommand: aCommandString echo: true\r',			#stamp : 'dtl 9/15/2012 18:59',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1912' ],		#self : OmReference [ '1913' ],		#time : DateAndTime [ '2018-02-22T14:01:14.616955-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'processCommand:echo:',			#protocol : #evaluation,			#sourceCode : 'processCommand: aCommandString echo: showCommand\r\t"Evaluate aCommandString in a separate Smalltalk process. This permits the\r\tuser interface to remain responsive. If showCommand is true, update dependent\r\tviews in order to display the command."\r\r\t^ self cliShell processCommand: aCommandString echo: showCommand\r',			#stamp : 'dtl 9/15/2012 18:56',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1913' ],		#self : OmReference [ '1914' ],		#time : DateAndTime [ '2018-02-22T14:01:14.617534-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #prompt,			#protocol : #'command prompt',			#sourceCode : 'prompt\r\r\tself scheduleToEvaluate:\r\t\t[self show: self cliShell promptString.\r\t\tself restoreSelectionMarker]',			#stamp : 'dtl 12/11/2007 21:36',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1914' ],		#self : OmReference [ '1915' ],		#time : DateAndTime [ '2018-02-22T14:01:14.61811-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #promptString,			#protocol : #'command prompt',			#sourceCode : 'promptString\r\t"Dependents call this when restoring the prompt string display"\r\r\tself flag: #FIXME. "change the dependents to call #lastPromptString"\r\t^ self lastPromptString',			#stamp : 'dtl 1/20/2007 11:46',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1915' ],		#self : OmReference [ '1916' ],		#time : DateAndTime [ '2018-02-22T14:01:14.61869-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #promptTwo,			#protocol : #'command prompt',			#sourceCode : 'promptTwo\r\r\tself show: self cliShell promptStringTwo.\r\tself restoreSelectionMarker',			#stamp : 'dtl 1/20/2007 11:42',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1916' ],		#self : OmReference [ '1917' ],		#time : DateAndTime [ '2018-02-22T14:01:14.619248-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #restorePrompt,			#protocol : #'command prompt',			#sourceCode : 'restorePrompt\r\r\tself flag: #FIXME. "remember last prompt string and redisplay it"\r\tself prompt',			#stamp : 'dtl 1/20/2007 11:40',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1917' ],		#self : OmReference [ '1918' ],		#time : DateAndTime [ '2018-02-22T14:01:14.619864-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #restoreSelectionMarker,			#protocol : #'command prompt',			#sourceCode : 'restoreSelectionMarker\r\t"Restore selection marker in MVC"\r\r\t| c |\r\tCommandShell isMorphic\r\t\tifFalse:\r\t\t\t[c := self activeController.\r\t\t\tself scheduleToEvaluate: [c initializeSelection]]\r',			#stamp : 'dtl 11/30/2010 07:33',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1918' ],		#self : OmReference [ '1919' ],		#time : DateAndTime [ '2018-02-22T14:01:14.620478-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'scheduleToEvaluate:',			#protocol : #evaluation,			#sourceCode : 'scheduleToEvaluate: aBlock\r\t"Evaluate aBlock, typically to create a new scheduled window. Make it work in\r\tboth Morphic and MVC. In Morphic, just evaluate aBlock, but in MVC, put it in\r\ta queue for evaluation within a control loop. This method may be sent from\r\ta process running independent of MVC controller scheduling.\r\t\r\tNewer Squeak images implement #addDeferredUIMessage in the current\r\tproject, eliminating the need for an #isMorphic test. This mechanism is not\r\tavailable for older images or for Pharo."\r\r\tCommandShell isMorphic\r\t\tifTrue: [WorldState addDeferredUIMessage: aBlock]\r\t\tifFalse: [self activeController ifNotNil: [activeController addDeferredUIMessage: aBlock]]',			#stamp : 'dtl 6/29/2010 22:15',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1919' ],		#self : OmReference [ '1920' ],		#time : DateAndTime [ '2018-02-22T14:01:14.621043-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'show:',			#protocol : #'stream extensions',			#sourceCode : 'show: anObject  "TextCollector compatibility"\r\tself nextPutAll: anObject asString; endEntry',			#stamp : 'dtl 1/17/2007 06:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1920' ],		#self : OmReference [ '1921' ],		#time : DateAndTime [ '2018-02-22T14:01:14.623006-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CommandShellTranscript,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: event\r\r\tevent == #prompt\t"display $PS1"\r\t\tifTrue: [^ self prompt].\r\tevent == #alternatePrompt\t"display $PS2"\r\t\tifTrue: [^ self promptTwo].\r\tevent == #restorePrompt\t"restore last prompt display"\r\t\tifTrue: [self flag: #FIXME. ^ self prompt].\r\tevent == #exit\r\t\tifTrue: [^ self close].\r\tevent == #clearText\r\t\tifTrue: [^ self clear].\r\tevent == #interruptCharacter\r\t\tifTrue: [^ self handleInterruptCharacterEvent].\r\tevent == #relabel\r\t\tifTrue: [^ self changed: event].\r\t"Treat anything other than the symbols above as a string to be displayed on\r\tthe command line in the view"\r\tself show: event asString; cr.\r',			#stamp : 'dtl 9/15/2012 18:22',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1921' ],		#self : OmReference [ '1922' ],		#time : DateAndTime [ '2018-02-22T14:01:14.623643-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #default,			#protocol : #'instance creation',			#sourceCode : 'default\r\r\t^ ExternalShell',			#stamp : 'dtl 2/18/2007 14:09',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1922' ],		#self : OmReference [ '1923' ],		#time : DateAndTime [ '2018-02-22T14:01:14.624269-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'class initialization',			#sourceCode : 'initialize\r\t"If OSProcess is in this  image, it important that #startup be send to\r\tThisOSProcess before it is sent to ExternalCommandShell. Therefore ensure\r\tthat ExternalCommandShell appears after ThisOSProcess in the system\r\tstartup list."\r\r\t"ExternalCommandShell initialize"\r\r\tExternalShell\r\t\tifNotNil: [ ExternalShell stop.\r\t\t\tExternalShell := nil ].\r\tShellSyntax new isPharo5Update50558AndLater\r\t\tifFalse:\r\t\t\t[ Smalltalk addToStartUpList: self ]\r\t\tifTrue:\r\t\t\t[ (Smalltalk at: #SessionManager) default perform: #registerToolClassNamed: with: self name ]\r',			#stamp : 'dtl 2/19/2016 19:00',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1923' ],		#self : OmReference [ '1924' ],		#time : DateAndTime [ '2018-02-22T14:01:14.624839-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\r\tself notify: self name, \': Only one instance of ExternalCommandShell or any of its subclasses should exist in the image. Use #inSmalltalk to obtain the singleton instance.\'.\r\tself shouldNotImplement',			#stamp : 'dtl 7/12/2002 08:01',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1924' ],		#self : OmReference [ '1925' ],		#time : DateAndTime [ '2018-02-22T14:01:14.625388-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #onTty,			#protocol : #'instance creation',			#sourceCode : 'onTty\r\t"Answer a singleton instance. When called the first time, the shell is created\r\tand its evaluation loop is started. Subsequent calls answer the singleton\r\tinstance, which may or may not be running. Use the #stop and #start messages\r\tto control the shell once it has been created."\r\r\t"ExternalCommandShell onTty"\r\r\t^ ExternalShell ifNil: [ExternalShell := self basicNew initialize].',			#stamp : 'dtl 11/8/2007 20:21',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1925' ],		#self : OmReference [ '1926' ],		#time : DateAndTime [ '2018-02-22T14:01:14.625937-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #open,			#protocol : #'class initialization',			#sourceCode : 'open\r\r\tself start',			#stamp : 'dtl 8/4/2002 16:17',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1926' ],		#self : OmReference [ '1927' ],		#time : DateAndTime [ '2018-02-22T14:01:14.626483-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #'shutDown:',			#protocol : #'system startup',			#sourceCode : 'shutDown: quitting\r\t"System is going down. Stop input processing so we will not try to \r\trefer to invalid IO streams when the image is restarted. If OSProcess\r\tis in this  image, it important that #startup be send to ThisOSProcess\r\tbefore it is sent to ExternalCommandShell. Therefore ensure that\r\tExternalCommandShell appears after ThisOSProcess in the system startup\r\tlist."\r\r\t| shell |\r\tquitting\r\t\tifTrue: [(shell := self default)\r\t\t\tifNotNil: [shell shutdownInOldSession]]\r',			#stamp : 'dtl 9/3/2010 17:10',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1927' ],		#self : OmReference [ '1928' ],		#time : DateAndTime [ '2018-02-22T14:01:14.627021-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #start,			#protocol : #start-stop,			#sourceCode : 'start\r\r\t"ExternalCommandShell start"\r\t"ExternalCommandShell stop"\r\r\t^ self onTty start',			#stamp : 'dtl 8/7/2002 19:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1928' ],		#self : OmReference [ '1929' ],		#time : DateAndTime [ '2018-02-22T14:01:14.628779-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #'startUp:',			#protocol : #'system startup',			#sourceCode : 'startUp: resuming\r\r\t| shell |\r\tresuming ifTrue:\r\t\t[(shell := self default)\r\t\t\tifNotNil: [shell startUpInNewSession]]',			#stamp : 'dtl 9/3/2010 17:10',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1929' ],		#self : OmReference [ '1930' ],		#time : DateAndTime [ '2018-02-22T14:01:14.629484-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExternalCommandShell class',				#isMetaSide : true			},			#name : #stop,			#protocol : #start-stop,			#sourceCode : 'stop\r\r\t"ExternalCommandShell stop"\r\t"ExternalCommandShell start"\r\r\t^ self onTty stop',			#stamp : 'dtl 8/7/2002 19:29',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1930' ],		#self : OmReference [ '1931' ],		#time : DateAndTime [ '2018-02-22T14:01:14.630079-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #cliShell,			#protocol : #accessing,			#sourceCode : 'cliShell\r\t"Answer the value of cliShell"\r\r\t^ cliShell',			#stamp : 'dtl 2/18/2007 11:59',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1931' ],		#self : OmReference [ '1932' ],		#time : DateAndTime [ '2018-02-22T14:01:14.630628-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'cliShell:',			#protocol : #accessing,			#sourceCode : 'cliShell: anObject\r\t"Set the value of cliShell"\r\r\tcliShell := anObject',			#stamp : 'dtl 11/8/2007 20:24',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1932' ],		#self : OmReference [ '1933' ],		#time : DateAndTime [ '2018-02-22T14:01:14.631194-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'confirm:',			#protocol : #'interrupt handling',			#sourceCode : 'confirm: queryString\r\t"Put up a yes/no menu with caption queryString. Answer true if the \r\tresponse is yes, false if no."\r\r\tself flag: #FIXME. "bypass the dialog and assume true"\r\r\tself cliShell backgroundMessageQueue addLast: queryString, \' (yes)\', Character lf asString.\r\t^ true\r',			#stamp : 'dtl 2/18/2007 15:57',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1933' ],		#self : OmReference [ '1934' ],		#time : DateAndTime [ '2018-02-22T14:01:14.631835-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'confirmBeforeKilling:',			#protocol : #'input character filtering',			#sourceCode : 'confirmBeforeKilling: externalProxies\r\t"Interrupt character detected, do interrupt stuff."\r\r\t| msgStrm |\r\t(externalProxies size > 0)\r\t\tifTrue:\r\t\t\t[msgStrm := WriteStream on: String new.\r\t\t\t(externalProxies size > 1)\r\t\t\t\tifTrue: [msgStrm nextPutAll: \'kill processes\']\r\t\t\t\tifFalse: [msgStrm nextPutAll: \'kill process\'].\r\t\t\texternalProxies do: [:e | msgStrm nextPutAll: \' \', e pid printString, \' (\', e programName, \')\'].\r\t\t\tmsgStrm nextPut: $?.\r\t\t\t(self confirm: msgStrm contents)\r\t\t\t\tifTrue:\r\t\t\t\t\t[externalProxies reverseDo: [:e | e terminate]]]\r',			#stamp : 'dtl 11/8/2007 20:26',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1934' ],		#self : OmReference [ '1935' ],		#time : DateAndTime [ '2018-02-22T14:01:14.632393-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #cr,			#protocol : #updating,			#sourceCode : 'cr\r\r\tself cliShell outputStream lf; flush.',			#stamp : 'dtl 2/26/2017 01:09',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1935' ],		#self : OmReference [ '1936' ],		#time : DateAndTime [ '2018-02-22T14:01:14.632946-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #defaultBuiltinCommands,			#protocol : #defaults,			#sourceCode : 'defaultBuiltinCommands\r\t"The commands which make sense in a headless tty environment"\r\r\t^ #(cd: copyToError: copyToOutput: snapshot: ttyExit: help: history: pwd: sls: type:)\r',			#stamp : 'dtl 12/30/2002 10:45',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1936' ],		#self : OmReference [ '1937' ],		#time : DateAndTime [ '2018-02-22T14:01:14.633508-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #disableInputProcessing,			#protocol : #'input processing',			#sourceCode : 'disableInputProcessing\r\r\tself inputStream removeDependent: self; disableEventHandling',			#stamp : 'dtl 3/20/2007 06:15',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1937' ],		#self : OmReference [ '1938' ],		#time : DateAndTime [ '2018-02-22T14:01:14.635331-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #doInterruptCharHandler,			#protocol : #'interrupt handling',			#sourceCode : 'doInterruptCharHandler\r\t"Interrupt character detected, do interrupt stuff."\r\r\tself confirmBeforeKilling: (self cliShell foregroundProxies\r\t\tselect: [:e | e isExternalProcess]\r\t\tthenCollect: [:r | r processProxy]).\r\tself confirmBeforeKilling: (self cliShell backgroundProxies\r\t\tselect: [:e | e isExternalProcess]\r\t\tthenCollect: [:r | r processProxy]).\r',			#stamp : 'dtl 2/18/2007 15:49',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1938' ],		#self : OmReference [ '1939' ],		#time : DateAndTime [ '2018-02-22T14:01:14.636057-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'editCommand:',			#protocol : #'command history',			#sourceCode : 'editCommand: aString\r\r\tself flag: #FIXME. "should interact with tty"\r\t^ super editCommand: aString',			#stamp : 'dtl 1/20/2007 14:02',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1939' ],		#self : OmReference [ '1940' ],		#time : DateAndTime [ '2018-02-22T14:01:14.636631-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #enableInputProcessing,			#protocol : #'input processing',			#sourceCode : 'enableInputProcessing\r\r\tself inputStream addDependent: self; enableEventHandling',			#stamp : 'dtl 3/20/2007 06:14',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1940' ],		#self : OmReference [ '1941' ],		#time : DateAndTime [ '2018-02-22T14:01:14.637232-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'handleInput:',			#protocol : #'input processing',			#sourceCode : 'handleInput: str \r\r\t| rs line |\r\tself lineBuffer nextPutAll: str.\r\t[self lineBuffer contents includes: Character lf]\r\t\twhileTrue: [rs := ReadStream on: lineBuffer contents.\r\t\t\tself lineBuffer: nil.\r\t\t\tline := rs upTo: Character lf.\r\t\t\tself cliShell command: line echo: false.\r\t\t\tself lineBuffer nextPutAll: rs upToEnd]',			#stamp : 'dtl 9/15/2012 18:51',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1941' ],		#self : OmReference [ '1942' ],		#time : DateAndTime [ '2018-02-22T14:01:14.63788-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\r\tsuper initialize.\r\tself cliShell: (CommandShell new\r\t\t\tinstallCommands: self defaultBuiltinCommands;\r\t\t\tpromptString: \'sqsh> \';\r\t\t\taddDependent: self;\r\t\t\tyourself).\r\tself setStdioStreams\r\r',			#stamp : 'dtl 3/12/2007 18:44',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1942' ],		#self : OmReference [ '1943' ],		#time : DateAndTime [ '2018-02-22T14:01:14.63845-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'inputFrom:',			#protocol : #updating,			#sourceCode : 'inputFrom: aStream\r\r\t| strm s |\r\tstrm := \'\' writeStream.\r\t[ (s := aStream upToEnd) isEmpty not ] whileTrue: [ strm nextPutAll: s ].\r\t^ strm contents.',			#stamp : 'dtl 3/3/2017 21:49',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1943' ],		#self : OmReference [ '1944' ],		#time : DateAndTime [ '2018-02-22T14:01:14.638986-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #inputStream,			#protocol : #accessing,			#sourceCode : 'inputStream\r\r\t^ inputStream',			#stamp : 'dtl 7/12/2002 19:15',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1944' ],		#self : OmReference [ '1945' ],		#time : DateAndTime [ '2018-02-22T14:01:14.63953-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'inputStream:',			#protocol : #accessing,			#sourceCode : 'inputStream: externalStream\r\r\tinputStream := externalStream',			#stamp : 'dtl 11/8/2007 20:24',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1945' ],		#self : OmReference [ '1946' ],		#time : DateAndTime [ '2018-02-22T14:01:14.6401-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #isRunning,			#protocol : #accessing,			#sourceCode : 'isRunning\r\t"True if my evaluation loop should be running. This instance variable supports\r\trestarting the evaluation loop after an image restart."\r\r\t^ isRunning ifNil: [isRunning := false]\r',			#stamp : 'dtl 11/8/2007 20:24',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1946' ],		#self : OmReference [ '1947' ],		#time : DateAndTime [ '2018-02-22T14:01:14.642003-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'isRunning:',			#protocol : #accessing,			#sourceCode : 'isRunning: trueOrFalse\r\t"True if my evaluation loop should be running. This instance variable supports\r\trestarting the evaluation loop after an image restart."\r\r\tisRunning := trueOrFalse\r',			#stamp : 'dtl 11/8/2007 20:24',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1947' ],		#self : OmReference [ '1948' ],		#time : DateAndTime [ '2018-02-22T14:01:14.642686-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #lineBuffer,			#protocol : #accessing,			#sourceCode : 'lineBuffer\r\t"Answer the value of lineBuffer"\r\r\t^ lineBuffer ifNil: [lineBuffer := WriteStream on: String new]',			#stamp : 'dtl 2/24/2013 10:23',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1948' ],		#self : OmReference [ '1949' ],		#time : DateAndTime [ '2018-02-22T14:01:14.643244-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'lineBuffer:',			#protocol : #accessing,			#sourceCode : 'lineBuffer: anObject\r\t"Set the value of lineBuffer"\r\r\tlineBuffer := anObject',			#stamp : 'dtl 11/8/2007 20:24',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1949' ],		#self : OmReference [ '1950' ],		#time : DateAndTime [ '2018-02-22T14:01:14.643816-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tsuper printOn: aStream.\r\taStream nextPutAll: (self isRunning ifTrue: [\' (running)\'] ifFalse: [\' (stopped)\'])\r',			#stamp : 'dtl 4/9/2006 11:11',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1950' ],		#self : OmReference [ '1951' ],		#time : DateAndTime [ '2018-02-22T14:01:14.644386-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #prompt,			#protocol : #'command prompt',			#sourceCode : 'prompt\r\r\tself cliShell outputStream nextPutAll: self cliShell promptString; flush.\r',			#stamp : 'dtl 3/4/2017 15:13',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1951' ],		#self : OmReference [ '1952' ],		#time : DateAndTime [ '2018-02-22T14:01:14.644937-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #promptString,			#protocol : #'command prompt',			#sourceCode : 'promptString\r\t"Dependents call this when restoring the prompt string display"\r\r\tself flag: #FIXME. "change the dependents to call #lastPromptString"\r\t^ self lastPromptString',			#stamp : 'dtl 1/20/2007 11:46',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1952' ],		#self : OmReference [ '1953' ],		#time : DateAndTime [ '2018-02-22T14:01:14.645515-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #promptTwo,			#protocol : #'command prompt',			#sourceCode : 'promptTwo\r\r\tself cliShell outputStream nextPutAll: self cliShell promptStringTwo; flush\r',			#stamp : 'dtl 2/26/2017 00:49',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1953' ],		#self : OmReference [ '1954' ],		#time : DateAndTime [ '2018-02-22T14:01:14.646076-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #release,			#protocol : #initialize-release,			#sourceCode : 'release\r\r\tcliShell ifNotNil: [cliShell removeDependent: self].\r\tsuper release\r',			#stamp : 'dtl 9/3/2010 17:08',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1954' ],		#self : OmReference [ '1955' ],		#time : DateAndTime [ '2018-02-22T14:01:14.646629-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #restorePrompt,			#protocol : #'command prompt',			#sourceCode : 'restorePrompt\r\r\tself flag: #FIXME. "remember last prompt string and redisplay it"\r\tself prompt',			#stamp : 'dtl 1/20/2007 11:40',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1955' ],		#self : OmReference [ '1956' ],		#time : DateAndTime [ '2018-02-22T14:01:14.64853-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #setNonblockingInput,			#protocol : #initialize-release,			#sourceCode : 'setNonblockingInput\r\r\tSmalltalk at: #OSProcess ifPresent:\r\t\t[:osp | osp thisOSProcess stdIn setNonBlocking]\r',			#stamp : 'dtl 2/18/2007 11:22',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1956' ],		#self : OmReference [ '1957' ],		#time : DateAndTime [ '2018-02-22T14:01:14.6492-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #setStdioStreams,			#protocol : #initialize-release,			#sourceCode : 'setStdioStreams\r\r\tSmalltalk\r\t\tat: #OSProcess\r\t\tifPresent: [:osp | \r\t\t\tself inputStream: osp thisOSProcess stdIn\r\t\t\t\tasBufferedAsyncFileReadStream disableEventHandling.\r\t\t\tself cliShell outputStream: osp thisOSProcess stdOut.\r\t\t\tself cliShell errorStream: osp thisOSProcess stdErr]',			#stamp : 'dtl 3/12/2007 22:33',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1957' ],		#self : OmReference [ '1958' ],		#time : DateAndTime [ '2018-02-22T14:01:14.649772-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'show:',			#protocol : #updating,			#sourceCode : 'show: something\r\r\tself cliShell outputStream nextPutAll: something asString.',			#stamp : 'dtl 2/26/2017 01:09',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1958' ],		#self : OmReference [ '1959' ],		#time : DateAndTime [ '2018-02-22T14:01:14.650338-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #shutdownInOldSession,			#protocol : #initialize-release,			#sourceCode : 'shutdownInOldSession\r\t"The VM is about to shut down."\r\r\tself disableInputProcessing.\r\tself stopHandlingInterruptSignal\r',			#stamp : 'dtl 3/12/2007 18:54',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1959' ],		#self : OmReference [ '1960' ],		#time : DateAndTime [ '2018-02-22T14:01:14.650911-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #sigIntHandler,			#protocol : #accessing,			#sourceCode : 'sigIntHandler\r\t"The interrupt handler process, for catching <ctl>C from the keyboard."\r\r\t^ sigIntHandler ifNil: [sigIntHandler := self sigIntHandlerProcess]',			#stamp : 'dtl 11/8/2007 20:25',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1960' ],		#self : OmReference [ '1961' ],		#time : DateAndTime [ '2018-02-22T14:01:14.651466-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'sigIntHandler:',			#protocol : #accessing,			#sourceCode : 'sigIntHandler: aProcess\r\t"The interrupt handler process, for catching <ctl>C from the keyboard."\r\r\tsigIntHandler := aProcess',			#stamp : 'dtl 11/8/2007 20:25',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1961' ],		#self : OmReference [ '1962' ],		#time : DateAndTime [ '2018-02-22T14:01:14.652054-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #sigIntHandlerProcess,			#protocol : #'interrupt handling',			#sourceCode : 'sigIntHandlerProcess\r\t"The interrupt handler process, for catching <ctl>C from the keyboard."\r\r\t^ [[self sigIntSema isNil\r\t\tifTrue:\r\t\t\t[(Delay forMilliseconds: 1000) wait]\r\t\tifFalse:\r\t\t\t[self sigIntSema wait.\r\t\t\tself doInterruptCharHandler]] repeat] fork\r\r',			#stamp : 'dtl 12/15/2002 15:43',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1962' ],		#self : OmReference [ '1963' ],		#time : DateAndTime [ '2018-02-22T14:01:14.652607-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #sigIntSema,			#protocol : #accessing,			#sourceCode : 'sigIntSema\r\t"A Smalltalk Semaphore which will be signalled when an external SIGINT signal is\r\treceived from the operating system."\r\r\t^ sigIntSema',			#stamp : 'dtl 8/4/2002 12:48',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1963' ],		#self : OmReference [ '1964' ],		#time : DateAndTime [ '2018-02-22T14:01:14.653147-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'sigIntSema:',			#protocol : #accessing,			#sourceCode : 'sigIntSema: aSemaphore\r\t"A Smalltalk Semaphore which will be signalled when an external SIGINT signal is\r\treceived from the operating system."\r\r\tsigIntSema := aSemaphore\r',			#stamp : 'dtl 11/8/2007 20:25',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1964' ],		#self : OmReference [ '1965' ],		#time : DateAndTime [ '2018-02-22T14:01:14.655095-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #start,			#protocol : #initialize-release,			#sourceCode : 'start\r\r\tself isRunning ifTrue: [self stop].\r\tself setNonblockingInput.\r\tself isRunning: true.\r\tself startHandlingInterruptSignal.\r\tself cliShell addDependent: self.\r\tself cliShell outputStream cr; nextPut: Character lf.\r\tself cliShell notifyPrompt.\r\tself enableInputProcessing\r',			#stamp : 'dtl 3/13/2007 06:23',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1965' ],		#self : OmReference [ '1966' ],		#time : DateAndTime [ '2018-02-22T14:01:14.655768-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #startHandlingInterruptSignal,			#protocol : #'interrupt handling',			#sourceCode : 'startHandlingInterruptSignal\r\t"Whenever a SIGINT is received, forward it to my sigIntSema."\r\r\t| sema |\r\tsigIntHandler ifNotNil: [sigIntHandler terminate. self sigIntHandler: nil].\r\tSmalltalk at: #OSProcess\r\t\tifPresent:\r\t\t\t[:osp |\r\t\t\tosp accessor handlesOsSignals ifTrue:\r\t\t\t\t[sema := osp accessor forwardSignal: osp accessor primSigIntNumber.\r\t\t\t\tsema ifNotNil: [self sigIntSema: sema].\r\t\t\t\tself sigIntHandler]]\r',			#stamp : 'dtl 11/8/2007 20:26',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1966' ],		#self : OmReference [ '1967' ],		#time : DateAndTime [ '2018-02-22T14:01:14.65641-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #startUpInNewSession,			#protocol : #initialize-release,			#sourceCode : 'startUpInNewSession\r\t"Image has been restarted, so the references to standard input, output\r\tand error are no longer valid. Reinitialize to make things right."\r\r\tself setNonblockingInput.\r\tself setStdioStreams.\r\tself isRunning\r\t\tifTrue: [self stop; start]',			#stamp : 'dtl 3/12/2007 22:31',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1967' ],		#self : OmReference [ '1968' ],		#time : DateAndTime [ '2018-02-22T14:01:14.656976-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #stop,			#protocol : #initialize-release,			#sourceCode : 'stop\r\r\tself disableInputProcessing.\r\tself stopHandlingInterruptSignal.\r\tcliShell ifNotNil: [cliShell removeDependent: self].\r\tself isRunning: false',			#stamp : 'dtl 9/3/2010 17:08',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1968' ],		#self : OmReference [ '1969' ],		#time : DateAndTime [ '2018-02-22T14:01:14.657603-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #stopHandlingInterruptSignal,			#protocol : #'interrupt handling',			#sourceCode : 'stopHandlingInterruptSignal\r\t"Revert to prior SIGINT handling behavior in the VM."\r\r\tSmalltalk at: #OSProcess\r\t\tifPresent:\r\t\t\t[:osp |\r\t\t\tosp accessor handlesOsSignals\r\t\t\t\tifTrue:\r\t\t\t\t\t[osp accessor restoreSignal: osp accessor primSigIntNumber].\r\t\t\tself sigIntSema: nil.\r\t\t\tself sigIntHandler terminate.\r\t\t\tself sigIntHandler: nil]\r',			#stamp : 'dtl 8/8/2002 15:19',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1969' ],		#self : OmReference [ '1970' ],		#time : DateAndTime [ '2018-02-22T14:01:14.658227-03:00' ],		#trigger : OmReference [ '1868' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExternalCommandShell,				#isMetaSide : false			},			#name : #'update:',			#protocol : #updating,			#sourceCode : 'update: event\r\r\tevent == self inputStream\r\t\tifTrue: [^ self handleInput: (self inputFrom: event)].\r\tevent == #prompt\t"display $PS1"\r\t\tifTrue: [^ self prompt].\r\tevent == #alternatePrompt\t"display $PS2"\r\t\tifTrue: [^ self promptTwo].\r\tevent == #restorePrompt\t"restore last prompt display"\r\t\tifTrue: [self flag: #FIXME. ^ self prompt].\r\tevent == #exit\r\t\tifTrue: [^ self close].\r\tevent == #clearText\r\t\tifTrue: [^ self error: \'FIXME\'].\r\tevent == #interruptCharacter\r\t\tifTrue: [^ self doInterruptCharHandler].\r\t"Treat anything other than the symbols above as a string to be displayed on\r\tthe command line in the view"\r\tself show: event asString; cr.\r',			#stamp : 'dtl 3/3/2017 21:49',			#package : #CommandShell-UI		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:14.718771-03:00' ],		#prior : OmReference [ '1970' ],		#self : OmReference [ '1971' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'OSProcess-Tests-dtl.15'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1971' ],		#self : OmReference [ '1972' ],		#time : DateAndTime [ '2018-02-22T14:01:14.854836-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AbstractUnixProcessFileLockingTestCase\r\tinstanceVariableNames: \'accessor fileStream delay remoteProcess initialCompatibilitySetting\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AbstractUnixProcessFileLockingTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #accessor,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #fileStream,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #delay,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #remoteProcess,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #initialCompatibilitySetting,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractUnixProcessFileLockingTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'AbstractUnixProcessFileLockingTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AbstractUnixProcessFileLockingTestCase,					#isMetaSide : false				},				#parent : @7,				#content : 'Test file locking with the UnixOSProcessPlugin. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',				#stamp : 'dtl 4/30/2006 14:02'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test file locking with the UnixOSProcessPlugin. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',		#newStamp : 'dtl 4/30/2006 14:02'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1972' ],		#self : OmReference [ '1973' ],		#time : DateAndTime [ '2018-02-22T14:01:14.85565-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpCategoryAddition {		#classCategoryName : #OSProcess-Tests,		#affectedPackageName : #OSProcess-Tests	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1973' ],		#self : OmReference [ '1974' ],		#time : DateAndTime [ '2018-02-22T14:01:14.885914-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AbstractUnixProcessFileLockingTestCase\r\tinstanceVariableNames: \'accessor fileStream delay remoteProcess initialCompatibilitySetting\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #AbstractUnixProcessFileLockingTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #accessor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #fileStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #delay,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #remoteProcess,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AbstractUnixProcessFileLockingTestCase,						#isMetaSide : false					},					#name : #initialCompatibilitySetting,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AbstractUnixProcessFileLockingTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'AbstractUnixProcessFileLockingTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AbstractUnixProcessFileLockingTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test file locking with the UnixOSProcessPlugin. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',				#stamp : 'dtl 4/30/2006 14:02'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1974' ],		#self : OmReference [ '1975' ],		#time : DateAndTime [ '2018-02-22T14:01:14.901265-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractUnixProcessFileLockingTestCase',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractUnixProcessFileLockingTestCase subclass: #UnixProcessUnixFileLockingTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcessUnixFileLockingTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessUnixFileLockingTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessUnixFileLockingTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessUnixFileLockingTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test file locking with the UnixOSProcessPlugin using Unix file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',				#stamp : 'dtl 4/30/2006 14:03'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test file locking with the UnixOSProcessPlugin using Unix file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',		#newStamp : 'dtl 4/30/2006 14:03'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1975' ],		#self : OmReference [ '1976' ],		#time : DateAndTime [ '2018-02-22T14:01:14.905506-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractUnixProcessFileLockingTestCase',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractUnixProcessFileLockingTestCase subclass: #UnixProcessUnixFileLockingTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #UnixProcessUnixFileLockingTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessUnixFileLockingTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessUnixFileLockingTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessUnixFileLockingTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test file locking with the UnixOSProcessPlugin using Unix file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',				#stamp : 'dtl 4/30/2006 14:03'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1976' ],		#self : OmReference [ '1977' ],		#time : DateAndTime [ '2018-02-22T14:01:14.909947-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractUnixProcessFileLockingTestCase',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractUnixProcessFileLockingTestCase subclass: #UnixProcessWin32FileLockingTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcessWin32FileLockingTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessWin32FileLockingTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessWin32FileLockingTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessWin32FileLockingTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test file locking with the UnixOSProcessPlugin using Windows file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',				#stamp : 'dtl 4/30/2006 14:03'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test file locking with the UnixOSProcessPlugin using Windows file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',		#newStamp : 'dtl 4/30/2006 14:03'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1977' ],		#self : OmReference [ '1978' ],		#time : DateAndTime [ '2018-02-22T14:01:14.911712-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AbstractUnixProcessFileLockingTestCase',				#traitCompositionSource : '{}',				#definitionSource : 'AbstractUnixProcessFileLockingTestCase subclass: #UnixProcessWin32FileLockingTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #UnixProcessWin32FileLockingTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessWin32FileLockingTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessWin32FileLockingTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessWin32FileLockingTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test file locking with the UnixOSProcessPlugin using Windows file locking semantics. The test suite requires that OSProcess and CommandShell be loaded in the image.\r\rThese tests rely on a remote Squeak image to test file locks between cooperating Unix processes. This may be timing dependent (see #delay, set in #setUp, and cleanup in #tearDown). In case of intermittent failures, try running the failed test individually. In some cases it may be necessary to restart Squeak in order to clear leftover file locks from previous failed tests.',				#stamp : 'dtl 4/30/2006 14:03'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1978' ],		#self : OmReference [ '1979' ],		#time : DateAndTime [ '2018-02-22T14:01:14.916882-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AioEventHandlerTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AioEventHandlerTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AioEventHandlerTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'AioEventHandlerTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AioEventHandlerTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test AioEventHandler and AioPlugin. Provides fair coverage of IO readable events, minimal coverage of IO writable events, and no real coverage for IO exception events. The writable events and exception events probably work, but this test suite will not prove it.',				#stamp : 'dtl 7/10/2005 15:41'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test AioEventHandler and AioPlugin. Provides fair coverage of IO readable events, minimal coverage of IO writable events, and no real coverage for IO exception events. The writable events and exception events probably work, but this test suite will not prove it.',		#newStamp : 'dtl 7/10/2005 15:41'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1979' ],		#self : OmReference [ '1980' ],		#time : DateAndTime [ '2018-02-22T14:01:14.918681-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AioEventHandlerTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #AioEventHandlerTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AioEventHandlerTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'AioEventHandlerTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AioEventHandlerTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test AioEventHandler and AioPlugin. Provides fair coverage of IO readable events, minimal coverage of IO writable events, and no real coverage for IO exception events. The writable events and exception events probably work, but this test suite will not prove it.',				#stamp : 'dtl 7/10/2005 15:41'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1980' ],		#self : OmReference [ '1981' ],		#time : DateAndTime [ '2018-02-22T14:01:14.922926-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #OSPipeTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #OSPipeTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSPipeTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'OSPipeTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSPipeTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test operation of OSPipe in blocking and nonBlocking mode.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test operation of OSPipe in blocking and nonBlocking mode.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1981' ],		#self : OmReference [ '1982' ],		#time : DateAndTime [ '2018-02-22T14:01:14.924629-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #OSPipeTestCase\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #OSPipeTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OSPipeTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'OSPipeTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OSPipeTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Test operation of OSPipe in blocking and nonBlocking mode.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1982' ],		#self : OmReference [ '1983' ],		#time : DateAndTime [ '2018-02-22T14:01:14.928245-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #UnixProcessAccessorTestCase\r\tinstanceVariableNames: \'accessor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcessAccessorTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessAccessorTestCase,						#isMetaSide : false					},					#name : #accessor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessAccessorTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessAccessorTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessAccessorTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Unit tests for the UnixProcessAccessor.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Unit tests for the UnixProcessAccessor.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1983' ],		#self : OmReference [ '1984' ],		#time : DateAndTime [ '2018-02-22T14:01:14.931481-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #UnixProcessAccessorTestCase\r\tinstanceVariableNames: \'accessor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #UnixProcessAccessorTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessAccessorTestCase,						#isMetaSide : false					},					#name : #accessor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessAccessorTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessAccessorTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessAccessorTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Unit tests for the UnixProcessAccessor.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1984' ],		#self : OmReference [ '1985' ],		#time : DateAndTime [ '2018-02-22T14:01:14.935205-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #UnixProcessFileLockTestCase\r\tinstanceVariableNames: \'fileStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcessFileLockTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessFileLockTestCase,						#isMetaSide : false					},					#name : #fileStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessFileLockTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessFileLockTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessFileLockTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'This test case was provided by Julian Fitzell. It provides more file locking tests in addition to those in UnitProcessFileLockingTestCase.',				#stamp : 'dtl 3/7/2005 21:57'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This test case was provided by Julian Fitzell. It provides more file locking tests in addition to those in UnitProcessFileLockingTestCase.',		#newStamp : 'dtl 3/7/2005 21:57'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1985' ],		#self : OmReference [ '1986' ],		#time : DateAndTime [ '2018-02-22T14:01:14.936892-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #UnixProcessFileLockTestCase\r\tinstanceVariableNames: \'fileStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #UnixProcessFileLockTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessFileLockTestCase,						#isMetaSide : false					},					#name : #fileStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessFileLockTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessFileLockTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessFileLockTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'This test case was provided by Julian Fitzell. It provides more file locking tests in addition to those in UnitProcessFileLockingTestCase.',				#stamp : 'dtl 3/7/2005 21:57'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1986' ],		#self : OmReference [ '1987' ],		#time : DateAndTime [ '2018-02-22T14:01:14.941115-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #UnixProcessTestCase\r\tinstanceVariableNames: \'thisOSProcess\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #UnixProcessTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessTestCase,						#isMetaSide : false					},					#name : #thisOSProcess,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Unit tests for the Unix portion of OSProcess.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Unit tests for the Unix portion of OSProcess.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1987' ],		#self : OmReference [ '1988' ],		#time : DateAndTime [ '2018-02-22T14:01:14.9428-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #UnixProcessTestCase\r\tinstanceVariableNames: \'thisOSProcess\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'OSProcess-Tests\''			},			#name : #UnixProcessTestCase,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #UnixProcessTestCase,						#isMetaSide : false					},					#name : #thisOSProcess,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'UnixProcessTestCase class\r\tinstanceVariableNames: \'\''				},				#name : #'UnixProcessTestCase class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #UnixProcessTestCase,					#isMetaSide : false				},				#parent : @8,				#content : 'Unit tests for the Unix portion of OSProcess.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #OSProcess-Tests,			#package : #OSProcess-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1988' ],		#self : OmReference [ '1989' ],		#time : DateAndTime [ '2018-02-22T14:01:15.12926-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AbstractUnixProcessFileLockingTestCase class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t"Override to true if a TestCase subclass is Abstract and should not have\r\tTestCase instances built from it"\r\r\t^ true',			#stamp : 'dtl 4/30/2006 13:49',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1989' ],		#self : OmReference [ '1990' ],		#time : DateAndTime [ '2018-02-22T14:01:15.131083-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #delay,			#protocol : #accessing,			#sourceCode : 'delay\r\t"Answer the value of delay"\r\r\t^ delay',			#stamp : 'dtl 4/30/2006 13:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1990' ],		#self : OmReference [ '1991' ],		#time : DateAndTime [ '2018-02-22T14:01:15.132256-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #'doRemote:doLocal:',			#protocol : #'remote image commands',			#sourceCode : 'doRemote: remoteBlock doLocal: localBlock\r\t"Evaluate remoteBlock in a remote Squeak image. While the remote Squeak is\r\tstill running, evaluate localBlock. When done, terminate the remote Squeak\r\timage and answer the result of evaluating localBlock."\r\r\t"self new\r\t\tdoRemote: [OSProcess thisOSProcess stdOut nextPutAll: \'hello from child Squeak\';\r\t\t\t\t\t\tnextPut: Character lf]\r\t\tdoLocal: [(Delay forSeconds: 1) wait.\r\t\t\t\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'hello from parent Squeak\';\r\t\t\t\t\tnextPut: Character lf]"\r\r\t| result |\r\tself shouldnt: [remoteProcess := OSProcess thisOSProcess forkHeadlessSqueak]\r\t\traise: Warning.\r\tself assert: remoteProcess notNil. "Fail if fork did not succeed"\r\t(remoteProcess == OSProcess thisOSProcess)\r\t\tifTrue:\r\t\t\t["remote child Squeak"\r\t\t\tremoteBlock value]\r\t\tifFalse:\r\t\t\t["parent Squeak"\r\t\t\t[[remoteProcess isRunning] whileFalse: [self delay wait].\r\t\t\tself delay wait.\r\t\t\tresult := localBlock value]\r\t\t\t\tensure:\t[remoteProcess terminate.\r\t\t\t\t\t[remoteProcess isComplete] whileFalse: [self delay wait].\r\t\t\t\t\tself delay wait.\r\t\t\t\t\tresult]].\r\t^ result\r',			#stamp : 'dtl 12/15/2013 15:50',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1991' ],		#self : OmReference [ '1992' ],		#time : DateAndTime [ '2018-02-22T14:01:15.133096-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #expectedFailures,			#protocol : #failures,			#sourceCode : 'expectedFailures\r\t^UnixOSProcessAccessor basicNew safeToForkSqueak\r\t\tifTrue: [#()]\r\t\tifFalse: [#(\ttestCooperatingProcesses01\r\t\t\t\t\ttestCooperatingProcesses02\r\t\t\t\t\ttestCooperatingProcesses03\r\t\t\t\t\ttestCooperatingProcesses04\r\t\t\t\t\ttestCooperatingProcesses05\r\t\t\t\t\ttestFailFileLockOnLockedFile\r\t\t\t\t\ttestFailLockOnLockedOverlappedRegion\r\t\t\t\t\ttestFailLockOnLockedRegion\r\t\t\t\t\ttestFailLockOnLockedSupersetRegion\r\t\t\t\t\ttestFailRegionLockOnLockedFile\r\t\t\t\t\ttestLockEntireFileForWrite01\r\t\t\t\t\ttestLockEntireFileForWrite02\r\t\t\t\t\ttestLockEntireFileForWrite03\r\t\t\t\t\ttestLockEntireFileForWrite04\r\t\t\t\t\ttestLockEntireFileForWrite05\r\t\t\t\t\ttestLockEntireFileForWrite06\r\t\t\t\t\ttestLockRegionForRead01\r\t\t\t\t\ttestLockRegionForRead02\r\t\t\t\t\ttestLockRegionForWrite01\r\t\t\t\t\ttestLockRegionForWrite02\r\t\t\t\t\ttestLockRegionForWrite03\r\t\t\t\t\ttestLockRegionForWrite04\r\t\t\t\t\ttestLockRegionForWrite05\r\t\t\t\t\ttestLockRegionForWrite06\r\t\t\t\t\ttestLockRegionForWrite07\r\t\t\t\t\ttestLockRegionForWrite08\r\t\t\t\t\ttestNoFailLockOnAdjacentLockedRegions\r\t\t\t\t\ttestNoFailLockOnDifferentLockedRegion)]',			#stamp : 'eem 3/27/2014 11:28',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1992' ],		#self : OmReference [ '1993' ],		#time : DateAndTime [ '2018-02-22T14:01:15.133827-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\r\tinitialCompatibilitySetting\r\t\tifNil: [initialCompatibilitySetting := OSProcess accessor emulateWin32FileLocking]',			#stamp : 'dtl 12/17/2016 17:54',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1993' ],		#self : OmReference [ '1994' ],		#time : DateAndTime [ '2018-02-22T14:01:15.134471-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #'isValidUnlockResult:',			#protocol : #'testing - platform specific',			#sourceCode : 'isValidUnlockResult: result\r\r\tself subclassResponsibility\r',			#stamp : 'dtl 5/13/2006 09:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1994' ],		#self : OmReference [ '1995' ],		#time : DateAndTime [ '2018-02-22T14:01:15.135112-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #quitImage,			#protocol : #'remote image commands',			#sourceCode : 'quitImage\r\r\tfileStream close.\r\tOSProcess snapshot: false andQuit: true\r',			#stamp : 'dtl 4/30/2006 13:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1995' ],		#self : OmReference [ '1996' ],		#time : DateAndTime [ '2018-02-22T14:01:15.13664-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\r\t(self respondsTo: #timeout: ) "Recent Squeak images with test case timeout"\r\t\tifTrue: [self perform: #timeout: with: 30].\r\tdelay := Delay forMilliseconds: 150.\r\taccessor := ThisOSProcess accessor.\r\tFileDirectory default deleteFileNamed: \'junkfile\'.\r\tfileStream := FileStream fileNamed: \'junkfile\'.\r\t1000 timesRepeat: (fileStream nextPutAll: \'hello world \').\r',			#stamp : 'dtl 12/17/2016 17:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1996' ],		#self : OmReference [ '1997' ],		#time : DateAndTime [ '2018-02-22T14:01:15.137288-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\r\t| d |\r\tOSProcessAccessor emulateWin32FileLocking: initialCompatibilitySetting.\r\td := Delay forMilliseconds: 50.\r\tfileStream close.\r\tremoteProcess ifNotNil:\r\t\t[remoteProcess terminate.\r\t\t[remoteProcess isComplete] whileFalse: [d wait].\r\t\tremoteProcess := nil]\r',			#stamp : 'dtl 12/17/2016 17:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1997' ],		#self : OmReference [ '1998' ],		#time : DateAndTime [ '2018-02-22T14:01:15.138042-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testCooperatingProcesses01,			#protocol : #testing,			#sourceCode : 'testCooperatingProcesses01\r\t"Two cooperating Squeak processes using file region locking to coordinate their\r\twrites to a shared file."\r\r\t"(self selector: #testCooperatingProcesses01) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].\r\t\t\tfileStream position: 100.\r\t\t\tfileStream nextPutAll: \'THIS \'; flush.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 120.\r\t\t\tdelay wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 108.\r\t\t\tfileStream nextPutAll: \'A \'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tdelay wait.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).\r\t\t\tfileStream position: 105.\r\t\t\tfileStream nextPutAll: \'is \'; flush.\r\t\t\taccessor unlockFile: fileStream from: 104 to: 120.\r\t\t\tdelay wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 110.\r\t\t\tfileStream nextPutAll: \'test \'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tdelay wait].\r\tself tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].\r\tfileStream position: 100.\r\tresult := fileStream next: 14.\r\taccessor unlockFile: fileStream from: 100 to: 140.\r\tself assert: result = \'THIS is A test\'\r',			#stamp : 'dtl 12/17/2016 16:30',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1998' ],		#self : OmReference [ '1999' ],		#time : DateAndTime [ '2018-02-22T14:01:15.138781-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testCooperatingProcesses02,			#protocol : #testing,			#sourceCode : 'testCooperatingProcesses02\r\t"Two cooperating Squeak processes using file region locking to coordinate their\r\twrites to a shared file."\r\r\t"(self selector: #testCooperatingProcesses02) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].\r\t\t\tfileStream position: 100.\r\t\t\tfileStream nextPutAll: \'THIS 11111111111111111111111\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 120.\r\t\t\tdelay wait; wait; wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 108.\r\t\t\tfileStream nextPutAll: \'A 3333333333333333333333333\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).\r\t\t\tfileStream position: 105.\r\t\t\tfileStream nextPutAll: \'IS 2222222222222222222222222\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 104 to: 120.\r\t\t\tdelay wait; wait; wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 110.\r\t\t\tfileStream nextPutAll: \'TEST 4444444444444444444444\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120].\r\tself tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].\r\tfileStream position: 100.\r\tresult := fileStream next: 17.\r\taccessor unlockFile: fileStream from: 100 to: 140.\r\tself assert: result = \'THIS IS A TEST 44\'\r',			#stamp : 'dtl 12/17/2016 16:31',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '1999' ],		#self : OmReference [ '2000' ],		#time : DateAndTime [ '2018-02-22T14:01:15.139464-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testCooperatingProcesses03,			#protocol : #testing,			#sourceCode : 'testCooperatingProcesses03\r\t"Two cooperating Squeak processes using file region locking to coordinate their\r\twrites to a shared file."\r\r\t"(self selector: #testCooperatingProcesses03) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].\r\t\t\tfileStream position: 100.\r\t\t\tfileStream nextPutAll: \'THIS 11111111111111111111111\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 120.\r\t\t\tdelay wait; wait; wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 108.\r\t\t\tfileStream nextPutAll: \'A 3333333333333333333333333\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).\r\t\t\tfileStream position: 105.\r\t\t\tfileStream nextPutAll: \'IS 2222222222222222222222222\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 104 to: 120.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 110.\r\t\t\tfileStream nextPutAll: \'TEST 4444444444444444444444\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120].\r\tself tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].\r\tfileStream position: 100.\r\tresult := fileStream next: 17.\r\taccessor unlockFile: fileStream from: 100 to: 140.\r\tself assert: result = \'THIS IS 22TEST 44\'\r',			#stamp : 'dtl 12/17/2016 16:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2000' ],		#self : OmReference [ '2001' ],		#time : DateAndTime [ '2018-02-22T14:01:15.140135-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testCooperatingProcesses04,			#protocol : #testing,			#sourceCode : 'testCooperatingProcesses04\r\t"Two cooperating Squeak processes using file region locking to coordinate their\r\twrites to a shared file."\r\r\t"(self selector: #testCooperatingProcesses04) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait.\r\t\t\tfileStream position: 100.\r\t\t\tfileStream nextPutAll: \'THIS 11111111111111111111111\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 120.\r\t\t\tdelay wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tdelay wait.\r\t\t\tfileStream position: 108.\r\t\t\tfileStream nextPutAll: \'A 3333333333333333333333333\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tdelay wait.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).\r\t\t\tdelay wait.\r\t\t\tfileStream position: 105.\r\t\t\tfileStream nextPutAll: \'IS 2222222222222222222222222\'; flush.\r\t\t\taccessor unlockFile: fileStream from: 104 to: 120.\r\t\t\tdelay wait.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tfileStream position: 110.\r\t\t\tfileStream nextPutAll: \'TEST 4444444444444444444444; flush\'.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120].\r\tself tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].\r\tfileStream position: 100.\r\tresult := fileStream next: 17.\r\taccessor unlockFile: fileStream from: 100 to: 140.\r\tself assert: result = \'THIS IS A TEST 44\'\r',			#stamp : 'dtl 12/17/2016 16:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2001' ],		#self : OmReference [ '2002' ],		#time : DateAndTime [ '2018-02-22T14:01:15.140993-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testCooperatingProcesses05,			#protocol : #testing,			#sourceCode : 'testCooperatingProcesses05\r\t"Two cooperating Squeak processes using file region locking to coordinate their\r\twrites to a shared file."\r\r\t"(self selector: #testCooperatingProcesses05) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[OSProcess thisOSProcess stdOut nextPutAll: \'starting remote squeak requesting lock on 100 to 120\';\r\t\t\t\tnextPut: Character lf.\r\t\t\t(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak lock acquired on 100 to 120\'; nextPut: Character lf; flush.\r\t\t\tfileStream position: 100.\r\t\t\tfileStream nextPutAll: \'THIS \'; flush.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak releasing lock on 100 to 120\'; nextPut: Character lf; flush.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 120.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak lock released on 100 to 120\'; nextPut: Character lf; flush.\r\t\t\tdelay wait.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak requesting lock on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak lock acquired on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\tfileStream position: 108.\r\t\t\tfileStream nextPutAll: \'A \'; flush.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak releasing lock on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'remote squeak lock released on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\tdelay wait.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[OSProcess thisOSProcess stdOut nextPutAll: \'starting local squeak requesting lock on 104 to: 120\';\r\t\t\t\tnextPut: Character lf.\r\t\t\tself assert: (self tryUntil: [(accessor lockFile: fileStream from: 104 to: 120) notNil]).\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak lock acquired on 104 to: 120\'; nextPut: Character lf; flush.\r\t\t\tfileStream position: 105.\r\t\t\tfileStream nextPutAll: \'IS \'; flush.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak releasing lock on 104 to: 120\'; nextPut: Character lf; flush.\r\t\t\taccessor unlockFile: fileStream from: 104 to: 120.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak lock released on 104 to: 120\'; nextPut: Character lf; flush.\r\t\t\tdelay wait.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak requesting lock on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\tself tryUntil: [(accessor lockFile: fileStream from: 108 to: 120) notNil].\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak lock acquired on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\tfileStream position: 110.\r\t\t\tfileStream nextPutAll: \'TEST \'; flush.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak releasing lock on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\taccessor unlockFile: fileStream from: 108 to: 120.\r\t\t\tOSProcess thisOSProcess stdOut nextPutAll: \'local squeak lock released on 108 to: 120\'; nextPut: Character lf; flush.\r\t\t\tdelay wait].\r\tself tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil].\r\tfileStream position: 100.\r\tresult := fileStream next: 14.\r\taccessor unlockFile: fileStream from: 100 to: 140.\r\tself assert: result = \'THIS IS A TEST\'\r',			#stamp : 'dtl 12/17/2016 18:05',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2002' ],		#self : OmReference [ '2003' ],		#time : DateAndTime [ '2018-02-22T14:01:15.141674-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testFailFileLockOnLockedFile,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testFailFileLockOnLockedFile\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a region, lock attempt in parent Squeak will\r\tfail."\r\r\t"(self selector: #testFailFileLockOnLockedFile) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self should: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error\r\t\t\t\tdescription: \'#lockFile failed because child Squeak now holds a lock\']\r',			#stamp : 'dtl 8/30/2009 15:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2003' ],		#self : OmReference [ '2004' ],		#time : DateAndTime [ '2018-02-22T14:01:15.142599-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testFailLockOnLockedOverlappedRegion,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testFailLockOnLockedOverlappedRegion\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a region, lock attempt in parent Squeak will\r\tfail. Locked regions overlap by one character."\r\r\t"(self selector: #testFailLockOnLockedOverlappedRegion) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 104) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 104.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self should: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\tfrom: 104\r\t\t\t\t\t\t\tto: 120\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error\r\t\t\t\tdescription: \'#lockFile failed because child Squeak now holds a lock\']\r',			#stamp : 'dtl 8/30/2009 16:00',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2004' ],		#self : OmReference [ '2005' ],		#time : DateAndTime [ '2018-02-22T14:01:15.143297-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testFailLockOnLockedRegion,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testFailLockOnLockedRegion\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a region, lock attempt in parent Squeak will\r\tfail."\r\r\t"(self selector: #testFailLockOnLockedRegion) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 120) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 120.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self should: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\tfrom: 100\r\t\t\t\t\t\t\tto: 120\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream from: 100 to: 120. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error\r\t\t\t\tdescription: \'#lockFile failed because child Squeak now holds a lock\']\r',			#stamp : 'dtl 8/30/2009 15:51',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2005' ],		#self : OmReference [ '2006' ],		#time : DateAndTime [ '2018-02-22T14:01:15.144006-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testFailLockOnLockedSupersetRegion,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testFailLockOnLockedSupersetRegion\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a region, lock attempt in parent Squeak will\r\tfail. Fail when requesting a lock on a subset of the locked region."\r\r\t"(self selector: #testFailLockOnLockedSupersetRegion) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 140) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 140.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self should: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\tfrom: 104\r\t\t\t\t\t\t\tto: 120\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error\r\t\t\t\tdescription: \'#lockFile failed because child Squeak now holds a lock\']\r',			#stamp : 'dtl 8/30/2009 16:01',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2006' ],		#self : OmReference [ '2007' ],		#time : DateAndTime [ '2018-02-22T14:01:15.144702-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testFailRegionLockOnLockedFile,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testFailRegionLockOnLockedFile\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a file, the region lock attempt in parent\r\tSqueak will fail."\r\r\t"(self selector: #testFailRegionLockOnLockedFile) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self should: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\tfrom: 100\r\t\t\t\t\t\t\tto: 120\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream from: 100 to: 120. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error\r\t\t\t\tdescription: \'#lockFile failed because child Squeak now holds a lock\']\r',			#stamp : 'dtl 8/30/2009 16:02',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2007' ],		#self : OmReference [ '2008' ],		#time : DateAndTime [ '2018-02-22T14:01:15.14533-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockEntireFileForWrite01,			#protocol : #testing,			#sourceCode : 'testLockEntireFileForWrite01\r\t"Local lock request should succeed"\r\r\t"(self selector: #testLockEntireFileForWrite01) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [nil]\r\t\tdoLocal: [accessor lockFile: fileStream].\r\tself delay wait; wait.\r\tself assert: (result isKindOf: OSFileLock).\r\tresult := accessor unlockFile: fileStream.\r\tself assert: (result isKindOf: OSFileLock)\r',			#stamp : 'dtl 5/7/2006 22:44',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2008' ],		#self : OmReference [ '2009' ],		#time : DateAndTime [ '2018-02-22T14:01:15.146047-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockEntireFileForWrite02,			#protocol : #testing,			#sourceCode : 'testLockEntireFileForWrite02\r\t"Local lock request should fail"\r\r\t"(self selector: #testLockEntireFileForWrite02) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[accessor lockFile: fileStream]\r\t\tdoLocal: [accessor lockFile: fileStream].\r\tself delay wait; wait.\r\tself assert: result isNil.\r\t"Region is in the cache as a result of the (failed) lock request. This is legitimate\r\tbecause the lock exists in some other image, so we want to mark it as locked\r\tlocally. However, it is not quite correct because the remote lock may pertain to\r\ta different but overlapping region. Nevertheless, this seems like reasonable\r\tbehavior."\r\tresult := accessor unlockFile: fileStream.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:40',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2009' ],		#self : OmReference [ '2010' ],		#time : DateAndTime [ '2018-02-22T14:01:15.146673-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockEntireFileForWrite03,			#protocol : #testing,			#sourceCode : 'testLockEntireFileForWrite03\r\t"Local lock request should succeed"\r\r\t"(self selector: #testLockEntireFileForWrite03) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[accessor lockFile: fileStream.\r\t\t\taccessor unlockFile: fileStream]\r\t\tdoLocal:\r\t\t\t[accessor lockFile: fileStream].\r\tself delay wait; wait.\r\tself assert: (result isKindOf: OSFileLock).\r\tresult := accessor unlockFile: fileStream.\r\tself assert: (result isKindOf: OSFileLock)',			#stamp : 'dtl 5/7/2006 22:45',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2010' ],		#self : OmReference [ '2011' ],		#time : DateAndTime [ '2018-02-22T14:01:15.147319-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockEntireFileForWrite04,			#protocol : #testing,			#sourceCode : 'testLockEntireFileForWrite04\r\t"Local lock should be available"\r\r\t"(self selector: #testLockEntireFileForWrite04) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [nil]\r\t\tdoLocal: [accessor isLockableFile: fileStream].\r\tself delay wait; wait.\r\tself should: result.\r\t"No lock on the region, so the unlock should fail."\r\tresult := accessor unlockFile: fileStream.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:48',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2011' ],		#self : OmReference [ '2012' ],		#time : DateAndTime [ '2018-02-22T14:01:15.147983-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockEntireFileForWrite05,			#protocol : #testing,			#sourceCode : 'testLockEntireFileForWrite05\r\t"Local lock should be available"\r\r\t"(self selector: #testLockEntireFileForWrite05) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[accessor lockFile: fileStream]\r\t\tdoLocal: [accessor isLockableFile: fileStream].\r\tself delay wait; wait.\r\tself shouldnt: result.\r\t"No local lock in the cache for this file, so the unlock call will appear to fail.\r\tActually, it will have passed the unlock request through to the operating system,\r\tand it will actually unlock the file."\r\tresult := accessor unlockFile: fileStream.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:50',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2012' ],		#self : OmReference [ '2013' ],		#time : DateAndTime [ '2018-02-22T14:01:15.148881-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockEntireFileForWrite06,			#protocol : #testing,			#sourceCode : 'testLockEntireFileForWrite06\r\t"Local lock should be available"\r\r\t"(self selector: #testLockEntireFileForWrite06) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote:\r\t\t\t[accessor lockFile: fileStream.\r\t\t\taccessor unlockFile: fileStream]\r\t\tdoLocal:\r\t\t\t[accessor isLockableFile: fileStream].\r\tself delay wait; wait.\r\tself should: result.\r\t"No local lock in the cache for this file, so the unlock call will appear to fail.\r\tActually, it will have passed the unlock request through to the operating system,\r\tbut it will have no effect because the file was never locked."\r\tresult := accessor unlockFile: fileStream.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:49',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2013' ],		#self : OmReference [ '2014' ],		#time : DateAndTime [ '2018-02-22T14:01:15.149523-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockFileIfFail,			#protocol : #'fail blocks',			#sourceCode : 'testLockFileIfFail\r\r\t"(self selector: #testLockFileIfFail) run"\r\r\t| fail |\r\tfail := false.\r\taccessor lockFile: fileStream ifFail: [fail := true].\r\tself shouldnt: fail.\r\tfileStream close.\r\taccessor lockFile: fileStream ifFail: [fail := true].\r\tself should: fail\r',			#stamp : 'dtl 5/11/2006 07:22',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2014' ],		#self : OmReference [ '2015' ],		#time : DateAndTime [ '2018-02-22T14:01:15.150168-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockFileRegionIfFail,			#protocol : #'fail blocks',			#sourceCode : 'testLockFileRegionIfFail\r\r\t"(self selector: #testLockFileRegionIfFail) run"\r\r\t| fail |\r\tfail := false.\r\taccessor\r\t\tlockFile: fileStream from: 100 to: 199 exclusive: true\r\t\tifFail: [fail := true].\r\tself shouldnt: fail.\r\tfileStream close.\r\taccessor\r\t\tlockFile: fileStream from: 100 to: 199 exclusive: true\r\t\tifFail: [fail := true].\r\tself should: fail.\r\taccessor\r\t\tlockFile: fileStream from: 100 to: 199\r\t\tifFail: [fail := true].\r\tself should: fail\r',			#stamp : 'dtl 11/28/2010 19:05',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2015' ],		#self : OmReference [ '2016' ],		#time : DateAndTime [ '2018-02-22T14:01:15.150791-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockPreviouslyLockedFile,			#protocol : #'testing - platform specific',			#sourceCode : 'testLockPreviouslyLockedFile\r\r\tself subclassResponsibility',			#stamp : 'dtl 5/10/2006 07:04',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2016' ],		#self : OmReference [ '2017' ],		#time : DateAndTime [ '2018-02-22T14:01:15.151403-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockPreviouslyLockedFileRegion,			#protocol : #'testing - platform specific',			#sourceCode : 'testLockPreviouslyLockedFileRegion\r\r\tself subclassResponsibility',			#stamp : 'dtl 5/10/2006 07:10',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2017' ],		#self : OmReference [ '2018' ],		#time : DateAndTime [ '2018-02-22T14:01:15.152042-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForRead01,			#protocol : #testing,			#sourceCode : 'testLockRegionForRead01\r\t"Read lock, the local lock request should succeed"\r\r\t"(self selector: #testLockRegionForRead01) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: false]\r\t\tdoLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: false].\r\tself delay wait; wait.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tresult := accessor unlockFile: fileStream from: 100 to: 199 exclusive: false.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))',			#stamp : 'dtl 5/7/2006 22:46',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2018' ],		#self : OmReference [ '2019' ],		#time : DateAndTime [ '2018-02-22T14:01:15.152693-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForRead02,			#protocol : #testing,			#sourceCode : 'testLockRegionForRead02\r\t"Read lock, the local lock request should fail when requesting a write lock"\r\r\t"(self selector: #testLockRegionForRead02) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: false].\r\tself delay wait; wait.\r\tself assert: result isNil.\r\tresult := accessor unlockFile: fileStream from: 100 to: 199.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:53',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2019' ],		#self : OmReference [ '2020' ],		#time : DateAndTime [ '2018-02-22T14:01:15.153329-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite01,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite01\r\t"Local lock request should succeed"\r\r\t"(self selector: #testLockRegionForWrite01) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [nil]\r\t\tdoLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true].\r\tself delay wait; wait.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tresult := accessor unlockFile: fileStream from: 100 to: 199.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))',			#stamp : 'dtl 5/7/2006 22:46',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2020' ],		#self : OmReference [ '2021' ],		#time : DateAndTime [ '2018-02-22T14:01:15.154235-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite02,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite02\r\t"Write lock, the local lock request should fail"\r\r\t"(self selector: #testLockRegionForWrite02) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true].\r\tself delay wait; wait.\r\tself assert: result isNil.\r\t"Lock is not in the local cache, so unlock will appear to fail. Actually, the region\r\twill be unlocked."\r\taccessor unlockFile: fileStream from: 100 to: 199.\r\tself assert: result isNil.\r',			#stamp : 'dtl 4/30/2006 13:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2021' ],		#self : OmReference [ '2022' ],		#time : DateAndTime [ '2018-02-22T14:01:15.154877-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite03,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite03\r\t"Write lock, nonoverlapping regions, the lock check should succeed"\r\r\t"(self selector: #testLockRegionForWrite03) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor isLockableFile: fileStream from: 200 to: 299 exclusive: true].\r\tself delay wait; wait.\r\tself assert: result.\r\tresult := accessor unlockFile: fileStream from: 200 to: 299.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2022' ],		#self : OmReference [ '2023' ],		#time : DateAndTime [ '2018-02-22T14:01:15.155544-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite04,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite04\r\t"Write lock, overlapping regions, the local lock request should fail"\r\r\t"(self selector: #testLockRegionForWrite04) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor lockFile: fileStream from: 150 to: 249 exclusive: true].\r\tself delay wait; wait.\r\tself assert: result isNil.\r\tresult := accessor unlockFile: fileStream from: 150 to: 249.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:53',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2023' ],		#self : OmReference [ '2024' ],		#time : DateAndTime [ '2018-02-22T14:01:15.156197-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite05,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite05\r\t"Write lock, nonoverlapping regions, the local lock request should succeed"\r\r\t"(self selector: #testLockRegionForWrite05) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor lockFile: fileStream from: 200 to: 299 exclusive: true].\r\tself delay wait; wait.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (200 to: 299)).\r\tresult := accessor unlockFile: fileStream from: 200 to: 299.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (200 to: 299))',			#stamp : 'dtl 5/7/2006 22:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2024' ],		#self : OmReference [ '2025' ],		#time : DateAndTime [ '2018-02-22T14:01:15.156903-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite06,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite06\r\t"Write lock, overlapping regions, the local lock request should fail"\r\r\t"(self selector: #testLockRegionForWrite06) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor lockFile: fileStream from: 199 to: 199 exclusive: true].\r\tself delay wait; wait.\r\tself assert: result isNil.\r\tresult := accessor unlockFile: fileStream from: 199 to: 199.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:53',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2025' ],		#self : OmReference [ '2026' ],		#time : DateAndTime [ '2018-02-22T14:01:15.157659-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite07,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite07\r\t"Write lock, overlapping regions, the lock check should fail"\r\r\t"(self selector: #testLockRegionForWrite07) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor isLockableFile: fileStream from: 100 to: 199 exclusive: true].\r\tself delay wait; wait.\r\tself deny: result.\r\tresult := accessor unlockFile: fileStream from: 100 to: 199.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2026' ],		#self : OmReference [ '2027' ],		#time : DateAndTime [ '2018-02-22T14:01:15.158531-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockRegionForWrite08,			#protocol : #testing,			#sourceCode : 'testLockRegionForWrite08\r\t"Write lock, overlapping regions, the lock check should fail"\r\r\t"(self selector: #testLockRegionForWrite08) run"\r\r\t| result |\r\tresult := self\r\t\tdoRemote: [accessor lockFile: fileStream from: 100 to: 199 exclusive: true]\r\t\tdoLocal: [accessor isLockableFile: fileStream from: 150 to: 299 exclusive: true].\r\tself delay wait; wait.\r\tself deny: result.\r\tresult := accessor unlockFile: fileStream from: 150 to: 299.\r\tself assert: (self isValidUnlockResult: result)\r',			#stamp : 'dtl 5/13/2006 09:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2027' ],		#self : OmReference [ '2028' ],		#time : DateAndTime [ '2018-02-22T14:01:15.159897-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testNoFailLockOnAdjacentLockedRegions,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testNoFailLockOnAdjacentLockedRegions\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a region, lock attempt in parent Squeak will\r\tfail. No failure occurs when the regions are adjacent but do not overlap."\r\r\t"(self selector: #testNoFailLockOnAdjacentLockedRegions) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 100 to: 103) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream from: 100 to: 103.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self shouldnt: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\tfrom: 104\r\t\t\t\t\t\t\tto: 120\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error]\r',			#stamp : 'dtl 8/30/2009 16:03',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2028' ],		#self : OmReference [ '2029' ],		#time : DateAndTime [ '2018-02-22T14:01:15.160927-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testNoFailLockOnDifferentLockedRegion,			#protocol : #'testing - exclusive locking',			#sourceCode : 'testNoFailLockOnDifferentLockedRegion\r\t"Two cooperating Squeak processes using mandatory file locking. When\r\tchild Squeak takes a lock on a region, lock attempt in parent Squeak will\r\tfail. No failure occurs if the regions are different and do not overlap."\r\r\t"(self selector: #testNoFailLockOnDifferentLockedRegion) run"\r\r\tself\r\t\tdoRemote:\r\t\t\t[(self tryUntil: [(accessor lockFile: fileStream from: 50 to: 80) notNil]) ifNil: [self quitImage].\r\t\t\tdelay wait; wait; wait.\r\t\t\taccessor unlockFile: fileStream from: 50 to: 80.\r\t\t\tself quitImage]\r\t\tdoLocal:\r\t\t\t[self shouldnt: [\r\t\t\t\t10 timesRepeat: [ "lock and unlock until failure due to child taking the lock"\r\t\t\t\t\taccessor lockFile: fileStream\r\t\t\t\t\t\t\tfrom: 104\r\t\t\t\t\t\t\tto: 120\r\t\t\t\t\t\t\texclusive: true\r\t\t\t\t\t\t\tifFail: [self error: \'#lockFile failed because child Squeak now holds a lock\'].\r\t\t\t\t\taccessor unlockFile: fileStream from: 104 to: 120. "release lock to allow child to acquire it"\r\t\t\t\t\tdelay wait]]\r\t\t\t\traise: Error]\r',			#stamp : 'dtl 8/30/2009 16:03',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2029' ],		#self : OmReference [ '2030' ],		#time : DateAndTime [ '2018-02-22T14:01:15.162221-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockFileIfFail,			#protocol : #'fail blocks',			#sourceCode : 'testUnlockFileIfFail\r\r\t"(self selector: #testUnlockFileIfFail) run"\r\r\t| fail |\r\tfail := false.\r\taccessor lockFile: fileStream ifFail: [fail := true].\r\tself shouldnt: fail.\r\taccessor unlockFile: fileStream ifFail: [fail := true].\r\tself shouldnt: fail.\r\tfileStream close.\r\taccessor unlockFile: fileStream ifFail: [fail := true].\r\tself should: fail\r',			#stamp : 'dtl 5/11/2006 07:24',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2030' ],		#self : OmReference [ '2031' ],		#time : DateAndTime [ '2018-02-22T14:01:15.163579-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockFileRegionIfFail,			#protocol : #'fail blocks',			#sourceCode : 'testUnlockFileRegionIfFail\r\r\t"(self selector: #testUnlockFileRegionIfFail) run"\r\r\t| fail |\r\tfail := false.\r\taccessor\r\t\tlockFile: fileStream from: 100 to: 199 exclusive: true\r\t\tifFail: [fail := true].\r\tself shouldnt: fail.\r\taccessor\r\t\tunlockFile: fileStream from: 100 to: 199 exclusive: true\r\t\tifFail: [fail := true].\r\tself shouldnt: fail.\r\tfileStream close.\r\taccessor\r\t\tunlockFile: fileStream from: 100 to: 199 exclusive: true\r\t\tifFail: [fail := true].\r\tself should: fail.\r\taccessor\r\t\tunlockFile: fileStream from: 100 to: 199\r\t\tifFail: [fail := true].\r\tself should: fail\r\r',			#stamp : 'dtl 11/28/2010 19:11',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2031' ],		#self : OmReference [ '2032' ],		#time : DateAndTime [ '2018-02-22T14:01:15.164885-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockPreviouslyLockedFile,			#protocol : #'testing - platform specific',			#sourceCode : 'testUnlockPreviouslyLockedFile\r\r\tself subclassResponsibility',			#stamp : 'dtl 5/11/2006 06:53',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2032' ],		#self : OmReference [ '2033' ],		#time : DateAndTime [ '2018-02-22T14:01:15.166148-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockPreviouslyLockedFileRegion,			#protocol : #'testing - platform specific',			#sourceCode : 'testUnlockPreviouslyLockedFileRegion\r\r\tself subclassResponsibility',			#stamp : 'dtl 5/11/2006 06:54',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2033' ],		#self : OmReference [ '2034' ],		#time : DateAndTime [ '2018-02-22T14:01:15.167539-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testWin32LockEmulation01,			#protocol : #testing,			#sourceCode : 'testWin32LockEmulation01\r\t"Make sure the cache does what is expected, and that it can be disabled\r\tExpect non-exclusive read locks to to succeed."\r\r\t"(self selector: #testWin32LockEmulation01) run"\r\r\t| result |\r\taccessor class emulateWin32FileLocking: true.\r\tresult := accessor lockFile: fileStream from: 100 to: 199 exclusive: false.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tresult := accessor lockFile: fileStream from: 100 to: 199 exclusive: false.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tresult := accessor unlockFile: fileStream from: 100 to: 199 exclusive: false.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))\r',			#stamp : 'dtl 5/7/2006 12:56',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2034' ],		#self : OmReference [ '2035' ],		#time : DateAndTime [ '2018-02-22T14:01:15.168912-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testWin32LockEmulation02,			#protocol : #testing,			#sourceCode : 'testWin32LockEmulation02\r\t"Make sure the cache does what is expected, and that it can be disabled.\r\tExpect exclusive read-write locks to be protected by the cache."\r\r\t"(self selector: #testWin32LockEmulation02) run"\r\r\t| result |\r\taccessor class emulateWin32FileLocking: true.\r\tresult := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tresult := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: result isNil.\r\tresult := accessor unlockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))\r',			#stamp : 'dtl 5/7/2006 12:56',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2035' ],		#self : OmReference [ '2036' ],		#time : DateAndTime [ '2018-02-22T14:01:15.170409-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testWin32LockEmulation03,			#protocol : #testing,			#sourceCode : 'testWin32LockEmulation03\r\t"Make sure the cache does what is expected, and that it can be disabled.\r\tExpect the cache to protect the file even if we open a second stream"\r\r\t"(self selector: #testWin32LockEmulation03) run"\r\r\t| result stream2 |\r\taccessor class emulateWin32FileLocking: true.\r\tresult := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tstream2 := FileStream fileNamed: \'junkfile\'.\r\t[result := accessor lockFile: stream2 from: 100 to: 199 exclusive: true.\r\tself assert: result isNil]\r\t\tensure: [stream2 close].\r\tresult := accessor unlockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))\r',			#stamp : 'dtl 5/7/2006 12:57',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2036' ],		#self : OmReference [ '2037' ],		#time : DateAndTime [ '2018-02-22T14:01:15.171512-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #testWin32LockEmulation04,			#protocol : #testing,			#sourceCode : 'testWin32LockEmulation04\r\t"Make sure the cache does what is expected, and that it can be disabled.\r\tExpect the cache to allow a lock after the stream has been closed (since the OS will have freed its lock)"\r\r\t"(self selector: #testWin32LockEmulation04) run"\r\r\t| result stream2 |\r\taccessor class emulateWin32FileLocking: true.\r\tstream2 := FileStream fileNamed: \'junkfile\'.\r\t[result := accessor lockFile: stream2 from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))]\r\t\tensure: [stream2 close].\r\tresult := accessor lockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199)).\r\tresult := accessor unlockFile: fileStream from: 100 to: 199 exclusive: true.\r\tself assert: (result isKindOf: OSFileRegionLock).\r\tself assert: (result interval = (100 to: 199))',			#stamp : 'dtl 5/7/2006 12:57',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2037' ],		#self : OmReference [ '2038' ],		#time : DateAndTime [ '2018-02-22T14:01:15.172579-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AbstractUnixProcessFileLockingTestCase,				#isMetaSide : false			},			#name : #'tryUntil:',			#protocol : #private,			#sourceCode : 'tryUntil: aBlock\r\t"Repeat until block evaluates true, but do not get in an infinite loop if a primitive is failing"\r\r\t| result |\r\t10 timesRepeat:\r\t\t[result := aBlock value.\r\t\tresult ifTrue: [^ result].\r\t\tdelay wait].\r\t^ result\r',			#stamp : 'dtl 4/30/2006 13:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2038' ],		#self : OmReference [ '2039' ],		#time : DateAndTime [ '2018-02-22T14:01:15.173812-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcessUnixFileLockingTestCase class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t"Override to true if a TestCase subclass is Abstract and should not have\r\tTestCase instances built from it"\r\r\t^self name = #TestCase\r',			#stamp : 'dtl 1/13/2007 15:40',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2039' ],		#self : OmReference [ '2040' ],		#time : DateAndTime [ '2018-02-22T14:01:15.174868-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessUnixFileLockingTestCase,				#isMetaSide : false			},			#name : #'isValidUnlockResult:',			#protocol : #'testing - platform specific',			#sourceCode : 'isValidUnlockResult: result\r\t"With no lock cache, the unlock requests will succeed even though there\r\tis no lock to be removed."\t\r\r\t^ result isKindOf: OSFileLock\r',			#stamp : 'dtl 5/13/2006 09:38',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2040' ],		#self : OmReference [ '2041' ],		#time : DateAndTime [ '2018-02-22T14:01:15.175762-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessUnixFileLockingTestCase,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\r\t"Set system to use Unix file locking semantics. The tearDown method is expected to restore the setting."\r\r\tOSProcessAccessor emulateWin32FileLocking: false.\r\t^ super setUp\r',			#stamp : 'dtl 4/30/2006 14:05',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2041' ],		#self : OmReference [ '2042' ],		#time : DateAndTime [ '2018-02-22T14:01:15.176559-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessUnixFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockPreviouslyLockedFile,			#protocol : #'testing - platform specific',			#sourceCode : 'testLockPreviouslyLockedFile\r\t"Locking a previously locked file is permitted"\r\r\t"(self selector: #testLockPreviouslyLockedFile) run"\r\r\taccessor lockFile: fileStream.\r\tself should: (accessor isLockableFile: fileStream).\r\tself should: ((accessor lockFile: fileStream) isKindOf: OSFileLock).\r\taccessor unlockFile: fileStream',			#stamp : 'dtl 5/11/2006 07:12',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2042' ],		#self : OmReference [ '2043' ],		#time : DateAndTime [ '2018-02-22T14:01:15.177618-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessUnixFileLockingTestCase,				#isMetaSide : false			},			#name : #testLockPreviouslyLockedFileRegion,			#protocol : #'testing - platform specific',			#sourceCode : 'testLockPreviouslyLockedFileRegion\r\t"Locking a previously locked file region is permitted"\r\r\t"(self selector: #testLockPreviouslyLockedFileRegion) run"\r\r\taccessor\r\t\tlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true.\r\tself should: (accessor\r\t\tisLockableFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true).\r\tself should: ((accessor\r\t\tlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true)\r\t\tisKindOf: OSFileLock).\r\taccessor unlockFile: fileStream',			#stamp : 'dtl 5/11/2006 07:12',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2043' ],		#self : OmReference [ '2044' ],		#time : DateAndTime [ '2018-02-22T14:01:15.178512-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessUnixFileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockPreviouslyLockedFile,			#protocol : #'testing - platform specific',			#sourceCode : 'testUnlockPreviouslyLockedFile\r\t"The unlock operation will succeed even if no lock is in effect"\r\r\t"(self selector: #testUnlockPreviouslyLockedFile) run"\r\r\tself should: ((accessor unlockFile: fileStream) isKindOf: OSFileLock).\r\taccessor lockFile: fileStream.\r\tself should: ((accessor unlockFile: fileStream) isKindOf: OSFileLock)\r',			#stamp : 'dtl 5/11/2006 07:07',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2044' ],		#self : OmReference [ '2045' ],		#time : DateAndTime [ '2018-02-22T14:01:15.179279-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessUnixFileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockPreviouslyLockedFileRegion,			#protocol : #'testing - platform specific',			#sourceCode : 'testUnlockPreviouslyLockedFileRegion\r\t"The unlock operation will succeed even if no lock is in effect"\r\r\t"(self selector: #testUnlockPreviouslyLockedFileRegion) run"\r\r\tself should: ((accessor\r\t\tunlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true) isKindOf: OSFileLock).\r\taccessor\r\t\tlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true.\r\tself should: ((accessor\r\t\tunlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true) isKindOf: OSFileLock)\r',			#stamp : 'dtl 5/11/2006 07:07',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2045' ],		#self : OmReference [ '2046' ],		#time : DateAndTime [ '2018-02-22T14:01:15.180127-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcessWin32FileLockingTestCase class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t"Override to true if a TestCase subclass is Abstract and should not have\r\tTestCase instances built from it"\r\r\t^self name = #TestCase\r',			#stamp : 'dtl 1/13/2007 15:40',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2046' ],		#self : OmReference [ '2047' ],		#time : DateAndTime [ '2018-02-22T14:01:15.181142-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessWin32FileLockingTestCase,				#isMetaSide : false			},			#name : #'isValidUnlockResult:',			#protocol : #'testing - platform specific',			#sourceCode : 'isValidUnlockResult: result\r\t"With a lock cache, the unlock requests will fail when if there\r\tis no lock to be removed."\t\r\r\t^ result == nil\r',			#stamp : 'dtl 5/13/2006 09:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2047' ],		#self : OmReference [ '2048' ],		#time : DateAndTime [ '2018-02-22T14:01:15.181832-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessWin32FileLockingTestCase,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\r\t"Set system to use Windows file locking semantics. The tearDown method is expected to restore the setting."\r\r\tOSProcessAccessor emulateWin32FileLocking: true.\r\t^ super setUp\r',			#stamp : 'dtl 4/30/2006 14:06',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2048' ],		#self : OmReference [ '2049' ],		#time : DateAndTime [ '2018-02-22T14:01:15.182456-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessWin32FileLockingTestCase,				#isMetaSide : false			},			#name : #testLockPreviouslyLockedFile,			#protocol : #'testing - platform specific',			#sourceCode : 'testLockPreviouslyLockedFile\r\t"A previously locked file cannot be locked."\r\r\t"(self selector: #testLockPreviouslyLockedFile) run"\r\r\taccessor lockFile: fileStream.\r\tself shouldnt: (accessor isLockableFile: fileStream).\r\tself should: (accessor lockFile: fileStream) isNil.\r\taccessor unlockFile: fileStream',			#stamp : 'dtl 5/11/2006 07:13',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2049' ],		#self : OmReference [ '2050' ],		#time : DateAndTime [ '2018-02-22T14:01:15.183025-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessWin32FileLockingTestCase,				#isMetaSide : false			},			#name : #testLockPreviouslyLockedFileRegion,			#protocol : #'testing - platform specific',			#sourceCode : 'testLockPreviouslyLockedFileRegion\r\t"A previously locked file region cannot be locked."\r\r\t"(self selector: #testLockPreviouslyLockedFileRegion) run"\r\r\taccessor\r\t\tlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true.\r\tself shouldnt: (accessor\r\t\tisLockableFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true).\r\tself should: ((accessor\r\t\tlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true) isNil).\r\taccessor unlockFile: fileStream',			#stamp : 'dtl 5/11/2006 07:13',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2050' ],		#self : OmReference [ '2051' ],		#time : DateAndTime [ '2018-02-22T14:01:15.183672-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessWin32FileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockPreviouslyLockedFile,			#protocol : #'testing - platform specific',			#sourceCode : 'testUnlockPreviouslyLockedFile\r\t"The unlock operation will fail if lock is in effect"\r\r\t"(self selector: #testUnlockPreviouslyLockedFile) run"\r\r\tself shouldnt: ((accessor unlockFile: fileStream) isKindOf: OSFileLock).\r\taccessor lockFile: fileStream.\r\tself should: ((accessor unlockFile: fileStream) isKindOf: OSFileLock).\r\tself shouldnt: ((accessor unlockFile: fileStream) isKindOf: OSFileLock)\r',			#stamp : 'dtl 5/11/2006 07:08',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2051' ],		#self : OmReference [ '2052' ],		#time : DateAndTime [ '2018-02-22T14:01:15.18424-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessWin32FileLockingTestCase,				#isMetaSide : false			},			#name : #testUnlockPreviouslyLockedFileRegion,			#protocol : #'testing - platform specific',			#sourceCode : 'testUnlockPreviouslyLockedFileRegion\r\t"The unlock operation will fail if a lock is in effect"\r\r\t"(self selector: #testUnlockPreviouslyLockedFileRegion) run"\r\r\tself shouldnt: ((accessor\r\t\tunlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true) isKindOf: OSFileLock).\r\taccessor\r\t\tlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true.\r\tself should: ((accessor\r\t\tunlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true) isKindOf: OSFileLock).\r\tself shouldnt: ((accessor\r\t\tunlockFile: fileStream\r\t\tfrom: 100\r\t\tto: 199\r\t\texclusive: true) isKindOf: OSFileLock)\r',			#stamp : 'dtl 5/12/2006 07:48',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2052' ],		#self : OmReference [ '2053' ],		#time : DateAndTime [ '2018-02-22T14:01:15.18501-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testEnableHandleAndDisable,			#protocol : #testing,			#sourceCode : 'testEnableHandleAndDisable\r\r\t| eventHandler anOpenFile fileHandle aioHandleResult sema semaIndex aioEnableResult aioDisableResult |\r\teventHandler := AioEventHandler new.\r\tanOpenFile := SourceFiles at: 1.\r\tfileHandle := eventHandler handleForFile: anOpenFile.\r\tsema := Semaphore new.\r\t[semaIndex := Smalltalk registerExternalObject: sema.\r\t[aioEnableResult := eventHandler\r\t\t\taioEnable: fileHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\tself assert: semaIndex == aioEnableResult.\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: true\r\t\treadEvents: true\r\t\twriteEvents: true.\r\tself assert: aioHandleResult == 2r0111. "return bitmask, all three bits set"\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: true\r\t\treadEvents: false\r\t\twriteEvents: true.\r\tself assert: aioHandleResult == 2r0101.\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: false\r\t\twriteEvents: true.\r\tself assert: aioHandleResult == 2r0100.\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: true\r\t\treadEvents: false\r\t\twriteEvents: false.\r\tself assert: aioHandleResult == 2r0001.\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: false\r\t\twriteEvents: false.\r\tself assert: aioHandleResult == 2r0000.\r\taioDisableResult := eventHandler aioDisable: fileHandle.\r\tself assert: aioDisableResult == fileHandle]\r\t\tensure:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t(fileHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: fileHandle]]',			#stamp : 'dtl 8/7/2005 13:02',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2053' ],		#self : OmReference [ '2054' ],		#time : DateAndTime [ '2018-02-22T14:01:15.185883-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testFileReadableEvent,			#protocol : #testing,			#sourceCode : 'testFileReadableEvent\r\r\t| eventHandler anOpenFile fileHandle aioHandleResult sema semaIndex aioEnableResult fileName |\r\tfileName := \'DeleteThisTemporaryFile\'.\r\r\teventHandler := AioEventHandler new.\r\tOSProcess deleteFileNamed: fileName.\r\t[anOpenFile := FileStream fileNamed: fileName.\r\tfileHandle := eventHandler handleForFile: anOpenFile.\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\t[aioEnableResult := eventHandler\r\t\t\taioEnable: fileHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\tself assert: semaIndex == aioEnableResult.\r\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself assert: aioHandleResult == 2r010.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but readable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin reading data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself deny: sema isSignaled. "Nothing has happened to indicate more data available."\r\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself assert: aioHandleResult == 2r010.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but readable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin reading data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself deny: sema isSignaled. "Nothing has happened to indicate more data available."\r\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself assert: aioHandleResult == 2r010.\r\tanOpenFile nextPutAll: \'write some stuff to the file\'; flush.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but readable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin reading data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself assert: aioHandleResult == 2r010.\r\tanOpenFile upToEnd.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but readable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin reading data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself deny: sema isSignaled. "handler has not been reset"]\r\t\tensure:\r\t\t\t[[anOpenFile close] on: Error do: [].\r\t\t\tSmalltalk unregisterExternalObject: sema.\r\t\t\t(fileHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: fileHandle]]',			#stamp : 'dtl 1/23/2013 19:40',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2054' ],		#self : OmReference [ '2055' ],		#time : DateAndTime [ '2018-02-22T14:01:15.186966-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testFileWritableEvent,			#protocol : #testing,			#sourceCode : 'testFileWritableEvent\r\r\t| eventHandler anOpenFile fileHandle aioHandleResult sema semaIndex aioEnableResult fileName |\r\tfileName := \'DeleteThisTemporaryFile\'.\r\r\teventHandler := AioEventHandler new.\r\tOSProcess deleteFileNamed: fileName.\r\t[anOpenFile := FileStream fileNamed: fileName.\r\tfileHandle := eventHandler handleForFile: anOpenFile.\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\t[aioEnableResult := eventHandler\r\t\t\taioEnable: fileHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\tself assert: semaIndex == aioEnableResult.\r\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: false\r\t\twriteEvents: true.\r\tself assert: aioHandleResult == 2r0100.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but writable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin writing data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\tself deny: sema isSignaled.\r\r\t"Reset handler"\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: false\r\t\twriteEvents: true.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but writable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin writing data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\tself deny: sema isSignaled.\r\r\t"Reset handler"\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: false\r\t\twriteEvents: true.\r\tanOpenFile upToEnd.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but writable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin writing data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\tself deny: sema isSignaled.\r\r\t"Reset handler"\r\taioHandleResult := eventHandler\r\t\taioHandle: fileHandle\r\t\texceptionEvents: false\r\t\treadEvents: false\r\t\twriteEvents: true.\r\tanOpenFile nextPutAll: \'write some stuff to the file\'; flush.\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself assert: sema isSignaled. "File is empty but writable. A signal is sent once,\r\tpresumably in the interest of priming the pump. A listening process would\r\tbegin writing data based on having received this initial signal."\r\tsema wait. "consume the signal"\r\tself deny: sema isSignaled.\r\r\t(Delay forMilliseconds: 20) wait. "Allow signals to be handled"\r\tself deny: sema isSignaled. "handler has not been reset"]\r\t\tensure:\r\t\t\t[[anOpenFile close] on: Error do: [].\r\t\t\tSmalltalk unregisterExternalObject: sema.\r\t\t\t(fileHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: fileHandle]]',			#stamp : 'dtl 1/23/2013 19:41',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2055' ],		#self : OmReference [ '2056' ],		#time : DateAndTime [ '2018-02-22T14:01:15.187666-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testHandleForFile,			#protocol : #testing,			#sourceCode : 'testHandleForFile\r\r\t| eventHandler anOpenFile fileHandle |\r\teventHandler := AioEventHandler new.\r\tanOpenFile := SourceFiles at: 1.\r\tfileHandle := eventHandler handleForFile: anOpenFile.\r\tself assert: fileHandle notNil.\r\tself assert: (fileHandle isKindOf: Integer)\r',			#stamp : 'dtl 7/9/2005 17:10',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2056' ],		#self : OmReference [ '2057' ],		#time : DateAndTime [ '2018-02-22T14:01:15.188248-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testHandleForSocket,			#protocol : #testing,			#sourceCode : 'testHandleForSocket\r\r\t| eventHandler socket socketHandle |\r\teventHandler := AioEventHandler new.\r\tsocket := Socket newTCP.\r\tsocketHandle := eventHandler handleForSocket: socket.\r\tself assert: socketHandle notNil.\r\tself assert: (socketHandle isKindOf: Integer).\r\tself assert: (socketHandle ~= 0) "0 is stdin on unix, unlikely to be used on other platforms"\r',			#stamp : 'dtl 7/9/2005 17:10',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2057' ],		#self : OmReference [ '2058' ],		#time : DateAndTime [ '2018-02-22T14:01:15.188849-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testPrimAioModuleName,			#protocol : #testing,			#sourceCode : 'testPrimAioModuleName\r\r\t| eventHandler moduleName |\r\teventHandler := AioEventHandler new.\r\tmoduleName := eventHandler primAioModuleName.\r\tself assert: (\'AioPlugin*\' match: moduleName)\r',			#stamp : 'dtl 7/9/2005 16:41',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2058' ],		#self : OmReference [ '2059' ],		#time : DateAndTime [ '2018-02-22T14:01:15.189458-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testPrimAioModuleVersionString,			#protocol : #testing,			#sourceCode : 'testPrimAioModuleVersionString\r\r\t| eventHandler versionString |\r\teventHandler := AioEventHandler new.\r\tversionString := eventHandler primAioModuleName.\r\tself assert: (versionString isKindOf: String)\r',			#stamp : 'dtl 7/9/2005 16:42',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2059' ],		#self : OmReference [ '2060' ],		#time : DateAndTime [ '2018-02-22T14:01:15.190219-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testSocketExceptionEvent,			#protocol : #testing,			#sourceCode : 'testSocketExceptionEvent\r\t"Close the client socket to generate an event on the server socket"\r\r\t| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |\r\tport := 8086.\r\tserverName := \'127.0.0.1\'.\r\tSocket initializeNetwork.\r\r\t"Create the server (reader) socket"\r\tserverTcpSocket := Socket newTCP.\r\tserverTcpSocket listenOn: port.\r\r\t"Create the client (writer) socket"\r\tclientTcpSocket := Socket newTCP.\r\tclientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.\r\r\t"Esstablish socket connection"\r\t[serverTcpSocket waitForConnectionFor: 10] fork.\r\tclientTcpSocket waitForConnectionFor: 10.\r\r\t["Set up a read event handler on the server socket"\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\teventHandler := AioEventHandler new.\r\tsocketHandle := eventHandler handleForSocket: serverTcpSocket.\r\r\t"An aio handler may already have been established for the socket\r\tby the SocketPlugin. The following request disables any existing handling\r\tin order to prevent a warning message on the console stderr."\r\teventHandler aioDisable: socketHandle.\r\r\t"Now set our own handler."\r\t[eventHandler\r\t\t\taioEnable: socketHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: true\r\t\treadEvents: false\r\t\twriteEvents: false.\r\tself deny: sema isSignaled.\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself deny: sema isSignaled.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tself deny: sema isSignaled.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tclientTcpSocket close.\r\t(Delay forMilliseconds: 200) wait.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\t(Delay forMilliseconds: 200) wait.\r"\tself assert: sema isSignaled.\tFIXME: no error generated; need to find a way to generate an error -dtl"\r\tself deny: sema isSignaled.\r\tserverTcpSocket close]\r\t\tensure:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]',			#stamp : 'dtl 8/7/2005 12:58',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2060' ],		#self : OmReference [ '2061' ],		#time : DateAndTime [ '2018-02-22T14:01:15.190922-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testSocketExceptionEvent2,			#protocol : #testing,			#sourceCode : 'testSocketExceptionEvent2\r\t"Close the client socket to generate an event on the server socket"\r\r\t| port serverTcpSocket sema semaIndex socketHandle eventHandler |\r\tport := 8086.\r\tSocket initializeNetwork.\r\r\t"Create the server (reader) socket"\r\tserverTcpSocket := Socket newTCP.\r\tserverTcpSocket listenOn: port.\r\r\t["Set up an exception event handler on the server socket"\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\teventHandler := AioEventHandler new.\r\tsocketHandle := eventHandler handleForSocket: serverTcpSocket.\r\r\t"An aio handler may already have been established for the socket\r\tby the SocketPlugin. The following request disables any existing handling\r\tin order to prevent a warning message on the console stderr."\r\teventHandler aioDisable: socketHandle.\r\r\t"Now set our own handler."\r\t[eventHandler\r\t\t\taioEnable: socketHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: true\r\t\treadEvents: false\r\t\twriteEvents: true.\r\tself deny: sema isSignaled.\r\t[serverTcpSocket\r\t\tprimSocket: serverTcpSocket socketHandle\r\t\tsendData: \'a string to send\'\r\t\tstartIndex: 1\r\t\tcount: 10] on: Error do: [self halt].\r\tserverTcpSocket\r\t\treceiveSomeDataInto: (String new: 1000)\r\t\tstartingAt: 1.\r\r"\tself assert: sema isSignaled.\tFIXME: no error generated; need to find a way to generate an error -dtl"\r\tself deny: sema isSignaled.\r\r\tserverTcpSocket close]\r\t\tensure:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]',			#stamp : 'dtl 8/7/2005 13:01',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2061' ],		#self : OmReference [ '2062' ],		#time : DateAndTime [ '2018-02-22T14:01:15.191778-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testSocketReadableEvent,			#protocol : #testing,			#sourceCode : 'testSocketReadableEvent\r\r\t| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |\r\tport := 8086.\r\tserverName := \'127.0.0.1\'.\r\tSocket initializeNetwork.\r\r\t"Create the server (reader) socket"\r\tserverTcpSocket := Socket newTCP.\r\tserverTcpSocket listenOn: port.\r\r\t"Create the client (writer) socket"\r\tclientTcpSocket := Socket newTCP.\r\tclientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.\r\r\t"Establish socket connection"\r\t[serverTcpSocket waitForConnectionFor: 10] fork.\r\tclientTcpSocket waitForConnectionFor: 10.\r\r\t["Set up a read event handler on the server socket"\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\teventHandler := AioEventHandler new.\r\tsocketHandle := eventHandler handleForSocket: serverTcpSocket.\r\r\t"An aio handler may already have been established for the socket\r\tby the SocketPlugin. The following request disables any existing handling\r\tin order to prevent a warning message on the console stderr."\r\teventHandler aioDisable: socketHandle.\r\r\t"Now set our own handler."\r\t[eventHandler\r\t\t\taioEnable: socketHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself deny: sema isSignaled.\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself assert: sema isSignaled.\r\tsema wait. "consume the signal"\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself deny: sema isSignaled.\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself assert: sema isSignaled.\r\tsema wait. "consume the signal"\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\tself deny: sema isSignaled.\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself assert: sema isSignaled.\r\tsema wait. "consume the signal"\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\r\tclientTcpSocket close.\r\tserverTcpSocket close]\r\t\tensure:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]',			#stamp : 'dtl 8/7/2005 13:02',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2062' ],		#self : OmReference [ '2063' ],		#time : DateAndTime [ '2018-02-22T14:01:15.19255-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testSocketReadableEventWithMaskNotSet,			#protocol : #testing,			#sourceCode : 'testSocketReadableEventWithMaskNotSet\r\t"Same as testSocketReadableEvent, except that the mask bit for read events is not set,\r\tso we expect to not receive the event notification. This is just a check to ensure that\r\tthe event mask is working."\r\r\t| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |\r\tport := 8086.\r\tserverName := \'127.0.0.1\'.\r\tSocket initializeNetwork.\r\r\t"Create the server (reader) socket"\r\tserverTcpSocket := Socket newTCP.\r\tserverTcpSocket listenOn: port.\r\r\t"Create the client (writer) socket"\r\tclientTcpSocket := Socket newTCP.\r\tclientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.\r\r\t"Establish socket connection"\r\t[serverTcpSocket waitForConnectionFor: 10] fork.\r\tclientTcpSocket waitForConnectionFor: 10.\r\r\t["Set up a read event handler on the server socket"\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\teventHandler := AioEventHandler new.\r\tsocketHandle := eventHandler handleForSocket: serverTcpSocket.\r\r\t"An aio handler may already have been established for the socket\r\tby the SocketPlugin. The following request disables any existing handling\r\tin order to prevent a warning message on the console stderr."\r\teventHandler aioDisable: socketHandle.\r\r\t"Now set our own handler."\r\t[eventHandler\r\t\t\taioEnable: socketHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: true\r\t\treadEvents: false\t"Read event bit not set"\r\t\twriteEvents: false.\r\tself deny: sema isSignaled.\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself deny: sema isSignaled. "This time we should not receive a signal"\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tclientTcpSocket close.\r\tserverTcpSocket close]\r\t\tensure:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]',			#stamp : 'dtl 8/7/2005 12:59',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2063' ],		#self : OmReference [ '2064' ],		#time : DateAndTime [ '2018-02-22T14:01:15.193691-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AioEventHandlerTestCase,				#isMetaSide : false			},			#name : #testSuspendAioForSocketReadableEvent,			#protocol : #testing,			#sourceCode : 'testSuspendAioForSocketReadableEvent\r\r\t| port serverName serverTcpSocket clientTcpSocket sema semaIndex socketHandle eventHandler receivedData |\r\tport := 8086.\r\tserverName := \'127.0.0.1\'.\r\tSocket initializeNetwork.\r\r\t"Create the server (reader) socket"\r\tserverTcpSocket := Socket newTCP.\r\tserverTcpSocket listenOn: port.\r\r\t"Create the client (writer) socket"\r\tclientTcpSocket := Socket newTCP.\r\tclientTcpSocket connectTo: (NetNameResolver addressFromString: serverName) port: port.\r\r\t"Establish socket connection"\r\t[serverTcpSocket waitForConnectionFor: 10] fork.\r\tclientTcpSocket waitForConnectionFor: 10.\r\r\t["Set up a read event handler on the server socket"\r\tsema := Semaphore new.\r\tsemaIndex := Smalltalk registerExternalObject: sema.\r\teventHandler := AioEventHandler new.\r\tsocketHandle := eventHandler handleForSocket: serverTcpSocket.\r\r\t"An aio handler may already have been established for the socket\r\tby the SocketPlugin. The following request disables any existing handling\r\tin order to prevent a warning message on the console stderr."\r\teventHandler aioDisable: socketHandle.\r\r\t"Now set our own handler."\r\t[eventHandler\r\t\t\taioEnable: socketHandle\r\t\t\tforSemaphore: semaIndex\r\t\t\texternalObject: true]\r\t\ton: Warning\r\t\tdo: ["Suppress warning dialog. Unit test will fail next assert."].\r\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\r\tself deny: sema isSignaled.\r\r\t"Handler generates a signal"\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tself assert: sema isSignaled.\r\tsema wait.\r\tself deny: sema isSignaled.\r\r\t"Handler has not been reset, so no signal this time"\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tself deny: sema isSignaled.\r\r\t"Reset the handler"\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\r\t"Handler generates a signal"\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tself assert: sema isSignaled.\r\tsema wait.\r\tself deny: sema isSignaled.\r\r\t"Reset the handler"\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\t"But temporarily disable it"\r\teventHandler aioSuspend: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\r\t"Handler suspended, so no signal this time"\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tself deny: sema isSignaled.\r\r\t"Reset the handler"\r\teventHandler\r\t\taioHandle: socketHandle\r\t\texceptionEvents: false\r\t\treadEvents: true\r\t\twriteEvents: false.\r\r\t"Handler generates a signal"\r\tclientTcpSocket sendData: \'some data to send to the socket\'.\r\t(Delay forMilliseconds: 200) wait.\r\treceivedData := serverTcpSocket receiveAvailableData.\r\tself assert: \'some data to send to the socket\' = receivedData.\r\tself assert: sema isSignaled.\r\tsema wait.\r\tself deny: sema isSignaled.\r\r\tclientTcpSocket close.\r\tserverTcpSocket close]\r\t\tensure:\r\t\t\t[Smalltalk unregisterExternalObject: sema.\r\t\t\t(socketHandle isKindOf: Integer) ifTrue: [eventHandler aioDisable: socketHandle]]',			#stamp : 'dtl 8/7/2005 12:59',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2064' ],		#self : OmReference [ '2065' ],		#time : DateAndTime [ '2018-02-22T14:01:15.194439-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #'primTestEndOfFileFlag:',			#protocol : #private,			#sourceCode : 'primTestEndOfFileFlag: aSqFileStruct\r\t"Answer whether the file represented by aSqFileStruct is at end of file, as determined\r\tby a call to feof(). This is different from StandardFileStream>>primAtEnd: which answers\r\ttrue if the file pointer is at the end of the file, but which does not call feof() to\r\tdetermine that an end of file condition has occurred. The difference is significant\r\tif aSqFileStruct represents a pipe or a device file, which may not be positionable\r\tin the sense of a conventional disk file."\r\r\t<primitive: \'primitiveTestEndOfFileFlag\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 11/28/2010 14:05',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2065' ],		#self : OmReference [ '2066' ],		#time : DateAndTime [ '2018-02-22T14:01:15.195117-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #'readFromAndClose:writingTo:',			#protocol : #private,			#sourceCode : 'readFromAndClose: aPipe writingTo: aStream\r\r\t| s |\r\t[aPipe atEndOfFile] whileFalse:\r\t\t[s := aPipe next: 10000.\r\t\taStream nextPutAll: s asString.\r\t\t(Delay forMilliseconds: 100) wait].\r\t(aPipe respondsTo: #reader) ifTrue: [aPipe reader close].\r\t^ aStream\r',			#stamp : 'dtl 6/4/2006 16:03',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2066' ],		#self : OmReference [ '2067' ],		#time : DateAndTime [ '2018-02-22T14:01:15.195806-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testBlocking,			#protocol : #testing,			#sourceCode : 'testBlocking\r\r\t"(OSPipeTestCase selector: #testBlocking) run"\r\r\t| p |\r\tp := OSPipe blockingPipe.\r\t(1 to: 10) do: [:i | p nextPutAll: \'this is line \', i printString; cr].\r\tp flush. "protect against buggy clib that may never flush output"\r\tself should: [\'this is line 1*\' match: (p next: 15)].\r\tself should: [\'this is line 2*\' match: (p next: 15)].\r\tself should: [\'this is line 3*\' match: (p next: 15)].\r\tself should: [\'this is line 4*\' match: (p next: 15)].\r\tself should: [\'this is line 5*\' match: (p next: 15)].\r\tself should: [\'this is line 6*\' match: (p next: 15)].\r\tself should: [\'this is line 7*\' match: (p next: 15)].\r\tself should: [\'this is line 8*\' match: (p next: 15)].\r\tself should: [\'this is line 9*\' match: (p next: 15)].\r\tp writer close.\r\tself shouldnt: p atEnd.\r\tself should: [\'this is line 10*\' match: (p next: 16)].\r\tself should: p atEnd.\r\tp close\r',			#stamp : 'dtl 4/12/2014 16:07',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2067' ],		#self : OmReference [ '2068' ],		#time : DateAndTime [ '2018-02-22T14:01:15.196487-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testBlockingBufferedPipe,			#protocol : #testing,			#sourceCode : 'testBlockingBufferedPipe\r\r\t"(OSPipeTestCase selector: #testBlockingBufferedPipe) run"\r\r\t| p |\r\tp := ExternalPipe bufferedBlockingPipe.\r\t[(1 to: 10) do: [:i | p nextPutAll: \'this is line \', i printString; cr; flush].\r\t(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"\r\tself should: [\'this is line 1*\' match: (p next: 15)].\r\tself should: [\'this is line 2*\' match: (p next: 15)].\r\tself should: [\'this is line 3*\' match: (p next: 15)].\r\tself should: [\'this is line 4*\' match: (p next: 15)].\r\tself should: [\'this is line 5*\' match: (p next: 15)].\r\tself should: [\'this is line 6*\' match: (p next: 15)].\r\tself should: [\'this is line 7*\' match: (p next: 15)].\r\tself should: [\'this is line 8*\' match: (p next: 15)].\r\tself should: [\'this is line 9*\' match: (p next: 15)].\r\tp writer close.\r\tself shouldnt: p atEnd.\r\tself should: [\'this is line 10*\' match: (p next: 16)].\r\tself should: p atEnd]\r\t\tensure: [p close]\r',			#stamp : 'dtl 6/6/2015 09:27',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2068' ],		#self : OmReference [ '2069' ],		#time : DateAndTime [ '2018-02-22T14:01:15.19708-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testBlockingPeek,			#protocol : #testing,			#sourceCode : 'testBlockingPeek\r\r\t"(OSPipeTestCase selector: #testBlockingPeek) run"\r\r\t| p |\r\tp := OSPipe blockingPipe.\r\tp nextPutAll: \'abc\'.\r\tp flush. "protect against buggy clib that may never flush output"\r\tself assert: (p peek == $a).\r\tself assert: (p next == $a).\r\tself assert: (p peek == $b).\r\tself assert: (p next == $b).\r\tself assert: (p peek == $c).\r\tself deny: p atEnd.\r\tself assert: (p next == $c).\r\tself deny: p atEnd.\r\tp closeWriter.\r\tself assert: p atEnd.\r\tp close\r',			#stamp : 'dtl 4/12/2014 16:09',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2069' ],		#self : OmReference [ '2070' ],		#time : DateAndTime [ '2018-02-22T14:01:15.197723-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testBlockingPeekBufferedPipe,			#protocol : #testing,			#sourceCode : 'testBlockingPeekBufferedPipe\r\r\t"(OSPipeTestCase selector: #testBlockingPeekBufferedPipe) run"\r\r\t| p |\r\tp := ExternalPipe bufferedBlockingPipe.\r\t[p nextPutAll: \'abc\'; flush.\r\t(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"\r\tself assert: (p peek == $a).\r\tself assert: (p next == $a).\r\tself assert: (p peek == $b).\r\tself assert: (p next == $b).\r\tself assert: (p peek == $c).\r\tself deny: p atEnd.\r\tself assert: (p next == $c).\r\tself deny: p atEnd.\r\tp closeWriter.\r\tself assert: p atEnd]\r\t\tensure: [p close]\r',			#stamp : 'dtl 6/6/2015 09:28',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2070' ],		#self : OmReference [ '2071' ],		#time : DateAndTime [ '2018-02-22T14:01:15.198308-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testBufferedUpToEnd,			#protocol : #testing,			#sourceCode : 'testBufferedUpToEnd\r\r\t"(OSPipeTestCase selector: #testBufferedUpToEnd) debug"\r\r\t| s p r1 r2 |\r\ts := \'some data to put through the pipe\'.\r\tp := OSPipe new.\r\tself primTestEndOfFileFlag: p reader fileID. "check that OSPP is updated"\r\tself assert: p setBufferedReader.\r\t[p nextPutAll: s.\r\tp closeWriter.\r\tr1 := p upToEnd. "#atEnd does not detect EOF on a pipe"\r\tself assert: r1 isEmpty.\r\tr2 := p upToEndOfFile. "detects EOF correctly, gets remaining data"\r\tself assert: r2 = s]\r\t\tensure: [p close]\r',			#stamp : 'dtl 5/17/2006 23:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2071' ],		#self : OmReference [ '2072' ],		#time : DateAndTime [ '2018-02-22T14:01:15.199283-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testIsAtEndOfFile,			#protocol : #testing,			#sourceCode : 'testIsAtEndOfFile\r\r\t"(OSPipeTestCase selector: #testIsAtEndOfFile) debug"\r\r\t| p |\r\tp := OSPipe new.\r\tself primTestEndOfFileFlag: p reader fileID. "check that OSPP is updated"\r\tself deny: (OSProcess accessor isAtEndOfFile: p reader fileID).\r\tself deny: p reader atEnd.\r\tself deny: p atEnd.\r\tself assert: (p reader basicNext == nil).\r\tself deny: (OSProcess accessor isAtEndOfFile: p reader fileID).\r\tself deny: p reader atEnd.\r\tself deny: p atEnd.\r\tp writer nextPut: $X; flush.\r\tself assert: (p reader basicNext == $X).\r\tself deny: (OSProcess accessor isAtEndOfFile: p reader fileID).\r\tself deny: p reader atEnd.\r\tself deny: p atEnd.\r\tself assert: (p reader basicNext == nil).\r\tself deny: (OSProcess accessor isAtEndOfFile: p reader fileID).\r\tself deny: p reader atEnd.\r\tself deny: p atEnd.\r\r\tp writer close.\r\tself deny: (OSProcess accessor isAtEndOfFile: p reader fileID).\r\tself deny: p atEndOfFile. "no read yet, so flag has not been set"\r\tself deny: p reader atEnd.\r\tself assert: p atEnd. "writer closed and read gives nil"\r\r\tself assert: (p reader basicNext == nil). "read operation should set flag"\r\tself assert: (OSProcess accessor isAtEndOfFile: p reader fileID).\r\tself deny: p reader atEnd. "#atEnd does not detect EOF on a pipe"\r\tself assert: p reader atEndOfFile.\r\tself assert: p atEnd.\r\tp close\r',			#stamp : 'dtl 6/6/2015 09:21',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2072' ],		#self : OmReference [ '2073' ],		#time : DateAndTime [ '2018-02-22T14:01:15.199892-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testIsAtEndOfFile2,			#protocol : #testing,			#sourceCode : 'testIsAtEndOfFile2\r\r\t"(OSPipeTestCase selector: #testIsAtEndOfFile2) debug"\r\r\t| p s |\r\tp := OSPipe new.\r\t[p nextPutAll: \'hello\'; flush.\r\ts := p next: 100.\r\tself assert: s = \'hello\'.\r\tself deny: p atEndOfFile.\r\tp closeWriter.\r\tself deny: p atEndOfFile.\r\ts := p next: 100.\r\tself assert: s = \'\'.\r\tself assert: p atEndOfFile]\r\t\tensure: [p close]\r',			#stamp : 'dtl 6/6/2015 09:23',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2073' ],		#self : OmReference [ '2074' ],		#time : DateAndTime [ '2018-02-22T14:01:15.200494-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testNonBlocking,			#protocol : #testing,			#sourceCode : 'testNonBlocking\r\r\t"(OSPipeTestCase selector: #testNonBlocking) run"\r\r\t| p ws str |\r\tp := OSPipe nonBlockingPipe.\r\tself writeStuffOnThenClose: p.\r\tws := self readFromAndClose: p writingTo: (WriteStream on: String new).\r\tstr := (ws contents last: 16).\r\tself should: [\'this is line 10*\' match: str].\r\tp close\r',			#stamp : 'dtl 3/25/2006 13:44',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2074' ],		#self : OmReference [ '2075' ],		#time : DateAndTime [ '2018-02-22T14:01:15.201095-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testNonBlockingBufferedPipe,			#protocol : #testing,			#sourceCode : 'testNonBlockingBufferedPipe\r\r\t"(OSPipeTestCase selector: #testNonBlockingBufferedPipe) run"\r\r\t| p ws str |\r\tp := ExternalPipe bufferedNonBlockingPipe.\r\t[self writeStuffOnThenClose: p.\r\tself assert: (p peek == nil).\r\t(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"\r\tws := self readFromAndClose: p writingTo: (WriteStream on: String new).\r\tstr := (ws contents last: 16).\r\tself should: [\'this is line 10*\' match: str]]\r\t\tensure: [p close]\r',			#stamp : 'dtl 4/2/2006 21:40',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2075' ],		#self : OmReference [ '2076' ],		#time : DateAndTime [ '2018-02-22T14:01:15.201721-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testNonBlockingPeek,			#protocol : #testing,			#sourceCode : 'testNonBlockingPeek\r\r\t"(OSPipeTestCase selector: #testNonBlockingPeek) run"\r\r\t| p |\r\tp := OSPipe nonBlockingPipe.\r\tp nextPutAll: \'abc\'; flush.\r\tself assert: (p peek == $a).\r\tself assert: (p next == $a).\r\tself assert: (p peek == $b).\r\tself assert: (p next == $b).\r\tself assert: (p peek == $c).\r\tself deny: p atEnd.\r\tself assert: (p next == $c).\r\tself deny: p atEnd.\r\tp closeWriter.\r\tself assert: p atEnd.\r\tp close\r',			#stamp : 'dtl 6/6/2015 09:28',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2076' ],		#self : OmReference [ '2077' ],		#time : DateAndTime [ '2018-02-22T14:01:15.202368-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #testNonBlockingPeekBufferedPipe,			#protocol : #testing,			#sourceCode : 'testNonBlockingPeekBufferedPipe\r\r\t"(OSPipeTestCase selector: #testNonBlockingPeekBufferedPipe) run"\r\r\t| p |\r\tp := ExternalPipe bufferedNonBlockingPipe.\r\t[p nextPutAll: \'abc\'; flush.\r\tself assert: (p peek == nil).\r\t(Delay forMilliseconds: 100) wait. "allow pipe reads to complete"\r\tself assert: (p peek == $a).\r\tself assert: (p next == $a).\r\tself assert: (p peek == $b).\r\tself assert: (p next == $b).\r\tself assert: (p peek == $c).\r\tself deny: p atEnd.\r\tself assert: (p next == $c).\r\tself deny: p atEnd.\r\tp closeWriter.\r\tself assert: p atEnd]\r\t\tensure: [p close]\r',			#stamp : 'dtl 6/6/2015 09:28',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2077' ],		#self : OmReference [ '2078' ],		#time : DateAndTime [ '2018-02-22T14:01:15.202992-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSPipeTestCase,				#isMetaSide : false			},			#name : #'writeStuffOnThenClose:',			#protocol : #private,			#sourceCode : 'writeStuffOnThenClose: aPipe\r\r\t^ [(1 to: 10) do:\r\t\t[:i |\r\t\t[aPipe nextPutAll: \'this is line \', i printString; cr]\r\t\t\ton: Error\r\t\t\tdo: ["Ignore error. Test case will still fail, and throwing an error in this\r\t\t\t\tprocess would cause a debugger to be scheduled inconveniently."].\r\t\t(Delay forMilliseconds: 50) wait].\r\t(aPipe respondsTo: #writer)\r\t\tifTrue: [[aPipe writer close]\r\t\t\t\t\ton: Error\r\t\t\t\t\tdo: ["Ignore error to avoid a debugger"]]\r\t\tifFalse: [[aPipe close]\r\t\t\t\t\ton: Error\r\t\t\t\t\tdo: ["Ignore error to avoid a debugger"]]]\r\t\tforkAt: Processor userBackgroundPriority',			#stamp : 'dtl 3/25/2006 18:29',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2078' ],		#self : OmReference [ '2079' ],		#time : DateAndTime [ '2018-02-22T14:01:15.203661-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #'primFixPointersInArrayOfStrings:withOffsets:count:',			#protocol : #'testing - C string arrays',			#sourceCode : 'primFixPointersInArrayOfStrings: cStringArray withOffsets: offsetArray count: count\r\t"This primitive call exists only for purposes of testing the\r\tfixPointersInArrayOfStrings:withOffsets:count: method. I believe it to be\r\treasonably machine and compiler independent, but have no way of verifying\r\tthis on a variety of machines, so I\'ll leave this test method here in case\r\tsomeone runs into problems on other hardware or compilers. -dtl"\r\r\t"| a |\r\ta := OSProcess thisOSProcess envAsFlatArrayAndOffsets: UnixProcess env.\r\tUnixProcessAccessorTestCase new\r\t\tprimFixPointersInArrayOfStrings: (a at: 1)\r\t\twithOffsets: (a at: 2)\r\t\tcount: (a at: 2) size"\r\r\t<primitive: \'primitiveFixPointersInArrayOfStrings\' module: \'UnixOSProcessPlugin\'>\r\t^ nil',			#stamp : 'dtl 7/11/2005 19:00',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2079' ],		#self : OmReference [ '2080' ],		#time : DateAndTime [ '2018-02-22T14:01:15.20472-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #runAll,			#protocol : #running,			#sourceCode : 'runAll\r\r\t"UnixProcessAccessorTestCase new runAll"\r\r\t| result suite |\r\tsuite := TestSuite new.\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testSessionIdentifier).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testCanAccessSystem).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testMakePipeHandles).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testUnixFileNumber).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testFileProtectionMask).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testFileStat).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testIsExecutable).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testIsExecutableForUserInGroup).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testIsReadable).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testIsReadableForUserInGroup).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testIsWritable).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testIsWritableForUserInGroup).\r\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #runExternalProcessAccess).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #runForkAndExec).\r\r\tresult := suite run.\r\tself should: [result defects size == 0].\r\t^ result\r',			#stamp : 'dtl 3/1/2002 18:02',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2080' ],		#self : OmReference [ '2081' ],		#time : DateAndTime [ '2018-02-22T14:01:15.205474-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #runExternalProcessAccess,			#protocol : #running,			#sourceCode : 'runExternalProcessAccess\r\r\t"UnixProcessAccessorTestCase new runExternalProcessAccess"\r\r\t| result suite |\r\tsuite := TestSuite new.\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testCanAccessSystem).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetCurrentWorkingDirectory).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testChDir).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAt).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAtPut1).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAtPut2).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testEnvironmentAtPut).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimUnsetEnv).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testGetStdInHandle).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testGetStdOutHandle).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testGetStdErrHandle).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimArgumentAt).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimErrorMessageAt).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetPid).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetGid).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetEGid).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetPid).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetPPid).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetUid).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetSession).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testRealpath).\r\r\tresult := suite run.\r\tself should: [result defects size == 0].\r\t^ result\r',			#stamp : 'dtl 8/3/2003 18:02',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2081' ],		#self : OmReference [ '2082' ],		#time : DateAndTime [ '2018-02-22T14:01:15.206078-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #runForkAndExec,			#protocol : #running,			#sourceCode : 'runForkAndExec\r\t"Most of this must be tested from class UnixProcess"\r\r\t"UnixProcessAccessorTestCase new runForkAndExec"\r\r\t| result suite |\r\tsuite := TestSuite new.\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimGetChildExitStatus).\r\tsuite addTest: (UnixProcessAccessorTestCase selector: #testPrimForkAndExec).\r\tresult := suite run.\r\tself should: [result defects size == 0].\r\t^ result\r',			#stamp : 'dtl 10/6/2001 11:37',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2082' ],		#self : OmReference [ '2083' ],		#time : DateAndTime [ '2018-02-22T14:01:15.206641-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\r\taccessor := ThisOSProcess accessor',			#stamp : 'dtl 10/6/2001 08:29',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2083' ],		#self : OmReference [ '2084' ],		#time : DateAndTime [ '2018-02-22T14:01:15.207435-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testArgsAsFlatArrayAndOffsets,			#protocol : #'testing - C string arrays',			#sourceCode : 'testArgsAsFlatArrayAndOffsets\r\t"Test conversion of an array of strings into the form used to create a C **char\r\tin UnixOSProcessPlugin."\r\r\t"(UnixProcessAccessorTestCase selector: #testArgsAsFlatArrayAndOffsets) debug"\r\r\t| a pointerSize lengthOfCStrings totalLength stringsAndOffsets rs s arrayWithMachineDependentPointers |\r\tpointerSize := OSProcess accessor sizeOfPointer.\r\ta := { \'one \' . \'two \' . \'three \' }.\r\ta do: [:e | e at: e size put: (Character value: 0)].\r\tstringsAndOffsets := OSProcess thisOSProcess argsAsFlatArrayAndOffsets: a.\r\tself assert: stringsAndOffsets size == 2.\r\tself assert: stringsAndOffsets second size == 3.\r\tlengthOfCStrings := (a collect: [:e | e size]) sum.\r\ttotalLength := 4 * pointerSize + lengthOfCStrings.\r\tself assert: stringsAndOffsets first size == totalLength.\r\tstringsAndOffsets second do: [:offset |\r\t\t(stringsAndOffsets first at: offset) == (Character value: 0)].\r\r\trs := ReadStream on: stringsAndOffsets first.\r\trs next: 4 * pointerSize.\r\ts :=  rs next: 3.\r\trs next.\r\tself assert: s = \'one\'.\r\ts :=  rs next: 3.\r\trs next.\r\tself assert: s = \'two\'.\r\ts :=  rs next: 5.\r\trs next.\r\tself assert: s = \'three\'.\r\r\trs := ReadStream on: stringsAndOffsets first.\r\trs next: (stringsAndOffsets second at: 1).\r\ts :=  rs next: 3.\r\tself assert: s = \'one\'.\r\trs := ReadStream on: stringsAndOffsets first.\r\trs next: (stringsAndOffsets second at: 2).\r\ts :=  rs next: 3.\r\tself assert: s = \'two\'.\r\trs := ReadStream on: stringsAndOffsets first.\r\trs next: (stringsAndOffsets second at: 3).\r\ts :=  rs next: 5.\r\tself assert: s = \'three\'.\r\r\tarrayWithMachineDependentPointers := self\r\t\tprimFixPointersInArrayOfStrings: stringsAndOffsets first\r\t\twithOffsets: stringsAndOffsets second\r\t\tcount: stringsAndOffsets second size.\r\tself assert: arrayWithMachineDependentPointers size == stringsAndOffsets first size.\r\trs := ReadStream on: arrayWithMachineDependentPointers.\r\ts := rs next: pointerSize.\r\tself assert: s ~= (String new: pointerSize). "a C pointer"\r\ts := rs next: pointerSize.\r\tself assert: s ~= (String new: pointerSize). "a C pointer"\r\ts := rs next: pointerSize.\r\tself assert: s ~= (String new: pointerSize). "a C pointer"\r\ts := rs next: pointerSize.\r\tself assert: s = (String new: pointerSize). "a NULL pointer"\r\tself assert: rs upToEnd = (stringsAndOffsets first allButFirst: pointerSize * 4)\r',			#stamp : 'dtl 9/10/2011 14:17',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2084' ],		#self : OmReference [ '2085' ],		#time : DateAndTime [ '2018-02-22T14:01:15.208011-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testCanAccessSystem,			#protocol : #testing,			#sourceCode : 'testCanAccessSystem\r\r\t"(UnixProcessAccessorTestCase selector: #testCanAccessSystem) run"\r\r\tself assert: accessor canAccessSystem',			#stamp : 'dtl 10/6/2001 08:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2085' ],		#self : OmReference [ '2086' ],		#time : DateAndTime [ '2018-02-22T14:01:15.208617-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testChDir,			#protocol : #'testing - external process access',			#sourceCode : 'testChDir\r\r\t"(UnixProcessAccessorTestCase selector: #testChDir) run"\r\r\t| cwd new |\r\tcwd := accessor primGetCurrentWorkingDirectory.\r\tnew := \'/bin\'. "nb Do not use /tmp because OS X implements it as a sym link to private/tmp"\r\taccessor chDir: new.\r\tself should: [new = accessor primGetCurrentWorkingDirectory].\r\taccessor chDir: cwd.\r\tself should: [cwd = accessor primGetCurrentWorkingDirectory].\r',			#stamp : 'dtl 6/10/2011 15:04',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2086' ],		#self : OmReference [ '2087' ],		#time : DateAndTime [ '2018-02-22T14:01:15.209312-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testDupTo,			#protocol : #testing,			#sourceCode : 'testDupTo\r\t"Perform a dup2() call to assign IO to a new file stream"\r\r\t"(UnixProcessAccessorTestCase selector: #testDupTo) run"\r\r\t| f1 f2 fd1 fd2 result contents1 contents2 |\r\tOSProcess deleteFileNamed: \'/tmp/delete-1.me\'.\t\r\tOSProcess deleteFileNamed: \'/tmp/delete-2.me\'.\t\r\tf1 := FileStream newFileNamed: \'/tmp/delete-1.me\'.\r\tf2 := FileStream newFileNamed: \'/tmp/delete-2.me\'.\r\tfd1 := OSProcess accessor primUnixFileNumber: f1 fileID.\r\tfd2 := OSProcess accessor primUnixFileNumber: f2 fileID.\r\tresult := OSProcess accessor primDup: fd1 to: fd2.\r\t"f1 and f2 now both refer to the same IO stream"\r\tself assert: result = fd2.\r\tf2 nextPutAll: \'write something to the original f2 file stream that will appear in duped f1 instead\'; flush.\r\tf1 reset.\r\tcontents1 := f1 upToEnd.\r\tself deny: contents1 isEmpty.\r\tself assert: (\'write something*\' match: contents1).\r\tf2 reset.\r\tcontents2 := f2 upToEnd.\r\tself deny: contents2 isEmpty.\r\tself assert: (\'write something*\' match: contents2).\r\tf1 close.\r\tf2 close.\r\t"check the contents of the actual files"\r\tcontents1 := (FileStream fileNamed: \'/tmp/delete-1.me\') contentsOfEntireFile.\r\tself assert: (\'write something*\' match: contents1).\r\tcontents2 := (FileStream fileNamed: \'/tmp/delete-2.me\') contentsOfEntireFile.\r\tself assert: contents2 isEmpty.\r\tOSProcess deleteFileNamed: \'/tmp/delete-1.me\'.\t\r\tOSProcess deleteFileNamed: \'/tmp/delete-2.me\'.\t\r',			#stamp : 'dtl 6/6/2015 09:38',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2087' ],		#self : OmReference [ '2088' ],		#time : DateAndTime [ '2018-02-22T14:01:15.210064-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testEnvAsFlatArrayAndOffsets,			#protocol : #'testing - C string arrays',			#sourceCode : 'testEnvAsFlatArrayAndOffsets\r\t"Test conversion of a dictionary of key-value environment variables into the\r\tform used to create a C **char in UnixOSProcessPlugin."\r\r\t"(UnixProcessAccessorTestCase selector: #testEnvAsFlatArrayAndOffsets) debug"\r\r\t| pointerSize lengthOfCStrings totalLength stringsAndOffsets rs s arrayWithMachineDependentPointers d |\r\tpointerSize := OSProcess accessor sizeOfPointer.\r\td := Dictionary new.\r\td at: #ONE put: \'one\'.\r\td at: #TWO put: \'two\'.\r\td at: #THREE put: \'three\'.\r\tstringsAndOffsets := OSProcess thisOSProcess envAsFlatArrayAndOffsets: d.\r\tself assert: stringsAndOffsets size == 2.\r\tself assert: stringsAndOffsets second size == 3.\r\r\tlengthOfCStrings := d keys\r\t\tinject: 0\r\t\tinto: [:sum :e | sum + e size + \'=\' size + (d at: e) size + (String new: 1) size].\r\r\ttotalLength := 4 * pointerSize + lengthOfCStrings.\r\tself assert: stringsAndOffsets first size == totalLength.\r\tstringsAndOffsets second do: [:offset |\r\t\t(stringsAndOffsets first at: offset) == (Character value: 0)].\r\r\tarrayWithMachineDependentPointers := self\r\t\tprimFixPointersInArrayOfStrings: stringsAndOffsets first\r\t\twithOffsets: stringsAndOffsets second\r\t\tcount: stringsAndOffsets second size.\r\tself assert: arrayWithMachineDependentPointers size == stringsAndOffsets first size.\r\trs := ReadStream on: arrayWithMachineDependentPointers.\r\ts := rs next: pointerSize.\r\tself assert: s ~= (String new: pointerSize). "a C pointer"\r\ts := rs next: pointerSize.\r\tself assert: s ~= (String new: pointerSize). "a C pointer"\r\ts := rs next: pointerSize.\r\tself assert: s ~= (String new: pointerSize). "a C pointer"\r\ts := rs next: pointerSize.\r\tself assert: s = (String new: pointerSize). "a NULL pointer"\r\tself assert: rs upToEnd = (stringsAndOffsets first allButFirst: pointerSize * 4)\r',			#stamp : 'dtl 9/10/2011 14:16',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2088' ],		#self : OmReference [ '2089' ],		#time : DateAndTime [ '2018-02-22T14:01:15.210956-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testEnvironmentAt,			#protocol : #'testing - external process access',			#sourceCode : 'testEnvironmentAt\r\r\t"(UnixProcessAccessorTestCase selector: #testEnvironmentAt) run"\r\r\t| path |\r\tpath := accessor environmentAt: \'PATH\'.\r\tself should: [path notNil and: [path isEmpty not]]',			#stamp : 'dtl 10/6/2001 08:53',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2089' ],		#self : OmReference [ '2090' ],		#time : DateAndTime [ '2018-02-22T14:01:15.211583-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testEnvironmentAtPut,			#protocol : #'testing - external process access',			#sourceCode : 'testEnvironmentAtPut\r\r\t"(UnixProcessAccessorTestCase selector: #testEnvironmentAtPut) run"\r\r\t| oldPath newPath resetPath s |\r\toldPath := accessor environmentAt: \'PATH\'.\r\tnewPath := \'this is a test string\'.\r\taccessor environmentAt: \'PATH\' put: newPath.\r\tresetPath := accessor environmentAt: \'PATH\'.\r\tself should: [newPath = resetPath].\r\taccessor environmentAt: \'PATH\' put: oldPath.\r\tresetPath := accessor environmentAt: \'PATH\'.\r\tself should: [oldPath = resetPath].\r\ts := WriteStream on: String new.\r\t10000 timesRepeat: [s nextPutAll: \'Do something to provoke garbage collection\'].\r\tresetPath := accessor environmentAt: \'PATH\'.\r\tself should: [oldPath = resetPath].\r\r\r',			#stamp : 'dtl 2/24/2013 10:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2090' ],		#self : OmReference [ '2091' ],		#time : DateAndTime [ '2018-02-22T14:01:15.212197-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testEnvironmentAtPut1,			#protocol : #'testing - external process access',			#sourceCode : 'testEnvironmentAtPut1\r\r\t"(UnixProcessAccessorTestCase selector: #testEnvironmentAtPut1) run"\r\r\t| oldVal newVal resetVal |\r\toldVal := accessor environmentAt: \'AAAA\'.\r\tnewVal := \'this is a test string\'.\r\taccessor environmentAt: \'AAAA\' put: newVal.\r\tresetVal := accessor environmentAt: \'AAAA\'.\r\tself should: [resetVal notNil and: [resetVal isEmpty not]].\r\tself should: [newVal = resetVal].\r\taccessor environmentAt: \'AAAA\' put: oldVal.\r\tself should: [oldVal = (accessor environmentAt: \'AAAA\')]\r',			#stamp : 'dtl 10/7/2001 11:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2091' ],		#self : OmReference [ '2092' ],		#time : DateAndTime [ '2018-02-22T14:01:15.212877-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testEnvironmentAtPut2,			#protocol : #'testing - external process access',			#sourceCode : 'testEnvironmentAtPut2\r\t"This looks for a bug in which the enviroment is successfully, but later gets\r\tinvalidated by memory moves or reallocation."\r\r\t"(UnixProcessAccessorTestCase selector: #testEnvironmentAtPut2) run"\r\r\t| oldVal newVal resetVal count ws goodResults notFound totallyBogus |\r\toldVal := accessor environmentAt: \'AAAA\'.\r\tnewVal := \'this is a test string\'.\r\taccessor environmentAt: \'AAAA\' put: newVal.\r\tresetVal := accessor environmentAt: \'AAAA\'.\r\tself should: [resetVal notNil and: [resetVal isEmpty not]].\r\tself should: [newVal = resetVal].\r\r\tcount := 50000.\r\tws := WriteStream on: Array new.\r\tcount timesRepeat: [ws nextPut: (accessor environmentAt: \'AAAA\')].\r\tgoodResults := ws contents select: [:e | e = newVal].\r\tnotFound := ws contents select: [:e | e isNil].\r\ttotallyBogus := ws contents select: [:e | e notNil and: [e ~= newVal]].\r\r\t"Uncomment the following to see when the problem is happening"\r\t"(Array with: goodResults with: notFound with: totallyBogus) inspect."\r\r\tself should: [goodResults size == count].\r\tself should: [notFound isEmpty].\r\tself should: [totallyBogus isEmpty].\r\r\taccessor environmentAt: \'AAAA\' put: oldVal.\r\tself should: [oldVal = (accessor environmentAt: \'AAAA\')]\r',			#stamp : 'dtl 10/7/2001 12:14',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2092' ],		#self : OmReference [ '2093' ],		#time : DateAndTime [ '2018-02-22T14:01:15.213459-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testFileProtectionMask,			#protocol : #testing,			#sourceCode : 'testFileProtectionMask\r\r\t"(UnixProcessAccessorTestCase selector: #testFileProtectionMask) run"\r\r\t| mask |\r\tmask := accessor fileProtectionMask: \'/bin/rm\'.\r\tself assert: (mask isKindOf: Array).\r\tself assert: (mask size == 4)\r',			#stamp : 'dtl 10/6/2001 11:59',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2093' ],		#self : OmReference [ '2094' ],		#time : DateAndTime [ '2018-02-22T14:01:15.214056-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testFileStat,			#protocol : #testing,			#sourceCode : 'testFileStat\r\r\t"(UnixProcessAccessorTestCase selector: #testFileStat) run"\r\r\t| stat |\r\tstat := accessor fileStat: \'/bin/rm\'.\r\tself assert: (stat isKindOf: Array).\r\tself assert: (stat size == 3).\r\tself assert: ((stat at: 1) isKindOf: Integer).\r\tself assert: ((stat at: 2) isKindOf: Integer).\r\tself assert: ((stat at: 3) isKindOf: Array).\r\tself assert: ((stat at: 3) size == 4)\r',			#stamp : 'dtl 10/6/2001 12:06',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2094' ],		#self : OmReference [ '2095' ],		#time : DateAndTime [ '2018-02-22T14:01:15.214628-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testGetStdErrHandle,			#protocol : #'testing - external process access',			#sourceCode : 'testGetStdErrHandle\r\r\t"(UnixProcessAccessorTestCase selector: #testGetStdErrHandle) run"\r\r\t| handle |\r\thandle := accessor primGetStdErrHandle.\r\tself assert: handle notNil\r',			#stamp : 'dtl 10/6/2001 09:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2095' ],		#self : OmReference [ '2096' ],		#time : DateAndTime [ '2018-02-22T14:01:15.215248-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testGetStdInHandle,			#protocol : #'testing - external process access',			#sourceCode : 'testGetStdInHandle\r\r\t"(UnixProcessAccessorTestCase selector: #testGetStdInHandle) run"\r\r\t| handle |\r\thandle := accessor primGetStdInHandle.\r\tself assert: handle notNil\r',			#stamp : 'dtl 10/6/2001 09:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2096' ],		#self : OmReference [ '2097' ],		#time : DateAndTime [ '2018-02-22T14:01:15.216138-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testGetStdOutHandle,			#protocol : #'testing - external process access',			#sourceCode : 'testGetStdOutHandle\r\r\t"(UnixProcessAccessorTestCase selector: #testGetStdOutHandle) run"\r\r\t| handle |\r\thandle := accessor primGetStdOutHandle.\r\tself assert: handle notNil\r',			#stamp : 'dtl 10/6/2001 09:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2097' ],		#self : OmReference [ '2098' ],		#time : DateAndTime [ '2018-02-22T14:01:15.21673-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsExecutable,			#protocol : #testing,			#sourceCode : 'testIsExecutable\r\r\t"(UnixProcessAccessorTestCase selector: #testIsExecutable) run"\r\r\tself should: [accessor isExecutable: \'/bin/sh\'].\r\tself shouldnt: [accessor isExecutable: \'/etc/hosts\']\r',			#stamp : 'dtl 10/6/2001 12:08',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2098' ],		#self : OmReference [ '2099' ],		#time : DateAndTime [ '2018-02-22T14:01:15.217359-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsExecutableForUserInGroup,			#protocol : #testing,			#sourceCode : 'testIsExecutableForUserInGroup\r\r\t"(UnixProcessAccessorTestCase selector: #testIsExecutableForUserInGroup) run"\r\r\tself shouldnt: [OSProcess waitForCommand: \'touch /tmp/delete.me\']\r\t\traise: Warning.\r\tOSProcess waitForCommand: \'chmod 550 /tmp/delete.me\'.\r\t"explicitly set file group because OS X may have set it to something other than current gid"\r\tOSProcess waitForCommand: \'chgrp \', accessor primGetGid asString, \' /tmp/delete.me\'.\r\tself should: [accessor isExecutable: \'/bin/sh\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself shouldnt: [accessor isExecutable: \'/etc/hosts\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself should: [accessor isExecutable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: 99999].\r\tself should: [accessor isExecutable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: 99999\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself shouldnt: [accessor isExecutable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: 99999\r\t\t\t\t\tinGroup: 99999].\r\tOSProcess deleteFileNamed: \'/tmp/delete.me\'\r',			#stamp : 'dtl 1/23/2013 21:35',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2099' ],		#self : OmReference [ '2100' ],		#time : DateAndTime [ '2018-02-22T14:01:15.218005-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsLockableFile,			#protocol : #'file locking',			#sourceCode : 'testIsLockableFile\r\r\t"(UnixProcessAccessorTestCase selector: #testIsLockableFile) debug"\r\r\t| fs result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\r\tresult := OSProcess accessor isLockableFile: fs.\r\tself should: result.\r\r\tresult := OSProcess accessor lockFile: fs.\r\tself should: (result isKindOf: OSFileLock).\r\tresult := OSProcess accessor isLockableFile: fs.\r\tself should: result.\r\r\tOSProcess accessor unlockFile: fs.\r\tresult := OSProcess accessor isLockableFile: fs.\r\tself should: result.\r\r\tfs close.\r\tresult := OSProcess accessor isLockableFile: fs.\r\tself shouldnt: result.\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 11:13',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2100' ],		#self : OmReference [ '2101' ],		#time : DateAndTime [ '2018-02-22T14:01:15.218597-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsReadable,			#protocol : #testing,			#sourceCode : 'testIsReadable\r\r\t"(UnixProcessAccessorTestCase selector: #testIsReadable) run"\r\r\tself should: [accessor isReadable: \'/bin/sh\'].\r\tOSProcess waitForCommand: \'touch /tmp/delete.me\'.\r\tOSProcess waitForCommand: \'chmod 440 /tmp/delete.me\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself should: [accessor isReadable: \'/tmp/delete.me\'].\r',			#stamp : 'dtl 10/20/2001 11:39',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2101' ],		#self : OmReference [ '2102' ],		#time : DateAndTime [ '2018-02-22T14:01:15.219239-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsReadableForUserInGroup,			#protocol : #testing,			#sourceCode : 'testIsReadableForUserInGroup\r\r\t"(UnixProcessAccessorTestCase selector: #testIsReadableForUserInGroup) run"\r\r\tself shouldnt: [OSProcess waitForCommand: \'touch /tmp/delete.me\']\r\t\traise: Warning.\r\tOSProcess waitForCommand: \'chmod 550 /tmp/delete.me\'.\r\t"explicitly set file group because OS X may have set it to something other than current gid"\r\tOSProcess waitForCommand: \'chgrp \', accessor primGetGid asString, \' /tmp/delete.me\'.\r\tself should: [accessor isReadable: \'/bin/sh\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself should: [accessor isReadable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: 99999].\r\tself should: [accessor isReadable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: 99999\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself shouldnt: [accessor isReadable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: 99999\r\t\t\t\t\tinGroup: 99999].\r\tOSProcess deleteFileNamed: \'/tmp/delete.me\'\r',			#stamp : 'dtl 1/23/2013 21:35',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2102' ],		#self : OmReference [ '2103' ],		#time : DateAndTime [ '2018-02-22T14:01:15.219869-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsWritable,			#protocol : #testing,			#sourceCode : 'testIsWritable\r\r\t"(UnixProcessAccessorTestCase selector: #testIsWritable) run"\r\r\tself shouldnt: [accessor isWritable: \'/bin/sh\'].\r\tOSProcess waitForCommand: \'touch /tmp/delete.me\'.\r\tOSProcess waitForCommand: \'chmod 770 /tmp/delete.me\'.\r\t(Delay forMilliseconds: 200) wait.\r\tself should: [accessor isWritable: \'/tmp/delete.me\'].\r',			#stamp : 'dtl 10/20/2001 11:38',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2103' ],		#self : OmReference [ '2104' ],		#time : DateAndTime [ '2018-02-22T14:01:15.220519-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testIsWritableForUserInGroup,			#protocol : #testing,			#sourceCode : 'testIsWritableForUserInGroup\r\r\t"(UnixProcessAccessorTestCase selector: #testIsWritableForUserInGroup) run"\r\r\tself shouldnt: [OSProcess waitForCommand: \'touch /tmp/delete.me\']\r\t\traise: Warning.\r\tOSProcess waitForCommand: \'chmod 770 /tmp/delete.me\'.\r\t"explicitly set file group because OS X may have set it to something other than current gid"\r\tOSProcess waitForCommand: \'chgrp \', accessor primGetGid asString, \' /tmp/delete.me\'.\r\tself shouldnt: [accessor isWritable: \'/bin/sh\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself should: [accessor isWritable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: accessor primGetUid\r\t\t\t\t\tinGroup: 99999].\r\tself should: [accessor isWritable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: 99999\r\t\t\t\t\tinGroup: accessor primGetGid].\r\tself shouldnt: [accessor isWritable: \'/tmp/delete.me\'\r\t\t\t\t\tforUser: 99999\r\t\t\t\t\tinGroup: 99999].\r\tOSProcess deleteFileNamed: \'/tmp/delete.me\'\r',			#stamp : 'dtl 1/23/2013 21:35',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2104' ],		#self : OmReference [ '2105' ],		#time : DateAndTime [ '2018-02-22T14:01:15.221135-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testLockFile,			#protocol : #'file locking',			#sourceCode : 'testLockFile\r\r\t"(UnixProcessAccessorTestCase selector: #testLockFile) debug"\r\r\t| fs result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tresult := OSProcess accessor lockFile: fs.\r\tself should: (result isKindOf: OSFileLock).\r\tfs close.\r\tresult := OSProcess accessor lockFile: fs.\r\tself should: (result == nil).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:58',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2105' ],		#self : OmReference [ '2106' ],		#time : DateAndTime [ '2018-02-22T14:01:15.222129-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testMakePipeHandles,			#protocol : #testing,			#sourceCode : 'testMakePipeHandles\r\r\t"(UnixProcessAccessorTestCase selector: #testMakePipeHandles) run"\r\r\t| p |\r\tp := OSPipe new.\r\tself assert: p reader closed not.\r\tself assert: p writer closed not.\r\tp close',			#stamp : 'dtl 10/6/2001 11:48',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2106' ],		#self : OmReference [ '2107' ],		#time : DateAndTime [ '2018-02-22T14:01:15.22279-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testOSFileLockLock,			#protocol : #'file locking',			#sourceCode : 'testOSFileLockLock\r\r\t"(UnixProcessAccessorTestCase selector: #testOSFileLockLock) debug"\r\r\t| fs fileLock result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tfileLock := OSFileLock onFile: fs exclusive: true.\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tfs close.\r\tresult := fileLock lock.\r\tself should: (result == false).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:54',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2107' ],		#self : OmReference [ '2108' ],		#time : DateAndTime [ '2018-02-22T14:01:15.223401-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testOSFileLockTest,			#protocol : #'file locking',			#sourceCode : 'testOSFileLockTest\r\r\t"(UnixProcessAccessorTestCase selector: #testOSFileLockTest) debug"\r\r\t| fs fileLock result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tfileLock := OSFileLock onFile: fs exclusive: true.\r\tresult := fileLock test.\r\tself should: (result == true).\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tresult := fileLock test.\r\tself should: (result == true).\r\tresult := fileLock unlock.\r\tself should: (result == true).\r\tresult := fileLock test.\r\tself should: (result == true).\r\tfs close.\r\tresult := fileLock test.\r\tself should: (result == false).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:44',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2108' ],		#self : OmReference [ '2109' ],		#time : DateAndTime [ '2018-02-22T14:01:15.22403-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testOSFileLockUnlock,			#protocol : #'file locking',			#sourceCode : 'testOSFileLockUnlock\r\r\t"(UnixProcessAccessorTestCase selector: #testOSFileLockUnlock) debug"\r\r\t| fs fileLock result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tfileLock := OSFileLock onFile: fs exclusive: true.\r\tresult := fileLock unlock.\r\tself should: (result == true).\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tresult := fileLock unlock.\r\tself should: (result == true).\r\tfs close.\r\tresult := fileLock unlock.\r\tself should: (result == false).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:41',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2109' ],		#self : OmReference [ '2110' ],		#time : DateAndTime [ '2018-02-22T14:01:15.224629-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testOSFileRegionLockLock,			#protocol : #'file locking',			#sourceCode : 'testOSFileRegionLockLock\r\r\t"(UnixProcessAccessorTestCase selector: #testOSFileRegionLockLock) debug"\r\r\t| fs fileLock result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tfileLock := OSFileRegionLock onFile: fs from: 2 to: 4 exclusive: true.\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tfs close.\r\tresult := fileLock lock.\r\tself should: (result == false).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:54',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2110' ],		#self : OmReference [ '2111' ],		#time : DateAndTime [ '2018-02-22T14:01:15.225255-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testOSFileRegionLockTest,			#protocol : #'file locking',			#sourceCode : 'testOSFileRegionLockTest\r\r\t"(UnixProcessAccessorTestCase selector: #testOSFileRegionLockTest) debug"\r\r\t| fs fileLock result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tfileLock := OSFileRegionLock onFile: fs from: 2 to: 4 exclusive: true.\r\tresult := fileLock test.\r\tself should: (result == true).\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tresult := fileLock test.\r\tself should: (result == true).\r\tresult := fileLock unlock.\r\tself should: (result == true).\r\tresult := fileLock test.\r\tself should: (result == true).\r\tfs close.\r\tresult := fileLock test.\r\tself should: (result == false).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:46',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2111' ],		#self : OmReference [ '2112' ],		#time : DateAndTime [ '2018-02-22T14:01:15.225867-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testOSFileRegionLockUnlock,			#protocol : #'file locking',			#sourceCode : 'testOSFileRegionLockUnlock\r\r\t"(UnixProcessAccessorTestCase selector: #testOSFileRegionLockUnlock) debug"\r\r\t| fs fileLock result |\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[fs nextPutAll: \'ABCDEFG\'.\r\tfileLock := OSFileRegionLock onFile: fs from: 2 to: 4 exclusive: true.\r\tresult := fileLock unlock.\r\tself should: (result == true).\r\tresult := fileLock lock.\r\tself should: (result == true).\r\tresult := fileLock unlock.\r\tself should: (result == true).\r\tfs close.\r\tresult := fileLock unlock.\r\tself should: (result == false).\r\t] ensure: [fs close]\r',			#stamp : 'dtl 5/7/2006 10:46',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2112' ],		#self : OmReference [ '2113' ],		#time : DateAndTime [ '2018-02-22T14:01:15.226462-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimArgumentAt,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimArgumentAt\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimArgumentAt) run"\r\r\t| progName |\r\tprogName := accessor primArgumentAt: 1.\r\tself should: [progName notNil and: [progName isEmpty not]]\r',			#stamp : 'dtl 10/6/2001 09:42',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2113' ],		#self : OmReference [ '2114' ],		#time : DateAndTime [ '2018-02-22T14:01:15.227356-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimErrorMessageAt,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimErrorMessageAt\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimErrorMessageAt) run"\r\r\t| msg |\r\tmsg := accessor primErrorMessageAt: 1.\r\tself should: [msg notNil and: [msg isEmpty not]].\r\tmsg := accessor primErrorMessageAt: 0.\r\tself should: [msg notNil and: [msg isEmpty not]]\r',			#stamp : 'dtl 10/6/2001 09:45',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2114' ],		#self : OmReference [ '2115' ],		#time : DateAndTime [ '2018-02-22T14:01:15.22799-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimForkAndExec,			#protocol : #'testing - fork and exec',			#sourceCode : 'testPrimForkAndExec\r\t"These methods can only be tested properly from UnixProcess, which knows how\r\tto set up the parameters on the stack."\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimForkAndExec) run"\r\r\t| p |\r\tself shouldnt: [p := UnixProcess command: \'ls /bin\']\r\t\traise: Warning.\r\t(Delay forMilliseconds: 500) wait.\r\tself should: [p isComplete].\r\tself should: [p exitStatus == 0]\r\r',			#stamp : 'dtl 6/11/2011 12:25',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2115' ],		#self : OmReference [ '2116' ],		#time : DateAndTime [ '2018-02-22T14:01:15.22859-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetChildExitStatus,			#protocol : #'testing - fork and exec',			#sourceCode : 'testPrimGetChildExitStatus\r\t"Cannot really test this here, because it needs to be wired into the interrupt\r\thandler. Just make sure it returns nil when there is nothing to do."\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetChildExitStatus) run"\r\r\t| stat |\r\tstat := accessor primGetChildExitStatus: -1.\r\tself should: [stat isNil].\r\tstat := accessor primGetChildExitStatus: 1.\r\tself should: [stat isNil]\r',			#stamp : 'dtl 10/6/2001 10:44',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2116' ],		#self : OmReference [ '2117' ],		#time : DateAndTime [ '2018-02-22T14:01:15.229175-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetCurrentWorkingDirectory,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetCurrentWorkingDirectory\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetCurrentWorkingDirectory) run"\r\r\t| cwd |\r\tcwd := accessor primGetCurrentWorkingDirectory.\r\tself should: [cwd notNil and: [cwd isEmpty not]]',			#stamp : 'dtl 10/6/2001 08:45',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2117' ],		#self : OmReference [ '2118' ],		#time : DateAndTime [ '2018-02-22T14:01:15.229763-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetEGid,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetEGid\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetEGid) run"\r\r\t| id |\r\tid := accessor primGetEGid.\r\tself should: [id isKindOf: Integer]\r',			#stamp : 'dtl 10/6/2001 09:49',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2118' ],		#self : OmReference [ '2119' ],		#time : DateAndTime [ '2018-02-22T14:01:15.230339-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetEUid,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetEUid\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetEUid) run"\r\r\t| id |\r\tid := accessor primGetEUid.\r\tself should: [id isKindOf: Integer]\r',			#stamp : 'dtl 10/6/2001 09:49',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2119' ],		#self : OmReference [ '2120' ],		#time : DateAndTime [ '2018-02-22T14:01:15.230931-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetGid,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetGid\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetGid) run"\r\r\t| id |\r\tid := accessor primGetGid.\r\tself should: [id isKindOf: Integer]\r',			#stamp : 'dtl 10/6/2001 09:50',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2120' ],		#self : OmReference [ '2121' ],		#time : DateAndTime [ '2018-02-22T14:01:15.231511-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetPPid,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetPPid\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetPPid) run"\r\r\t| id |\r\tid := accessor primGetPPid.\r\tself should: [id isKindOf: Integer]\r',			#stamp : 'dtl 10/6/2001 09:50',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2121' ],		#self : OmReference [ '2122' ],		#time : DateAndTime [ '2018-02-22T14:01:15.232144-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetPid,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetPid\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetPid) run"\r\r\t| id |\r\tid := accessor primGetPid.\r\tself should: [id isKindOf: Integer]\r',			#stamp : 'dtl 10/6/2001 09:50',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2122' ],		#self : OmReference [ '2123' ],		#time : DateAndTime [ '2018-02-22T14:01:15.233672-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetSession,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetSession\r\t"As of OSPP version 4 and greater, the session ID should always be obtained from\r\tthe interpreter. Previously it was deduced by looking at the handle of an open file."\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetSession) run"\r\r\t| id expectedSessionSize |\r\texpectedSessionSize := [OSProcess accessor sizeOfInt] on: Error do: [4].\r\tid := OSProcess accessor primGetSession.\r\tself assert: (id isNil or: [id isKindOf: ByteArray]).\r\tid := OSProcess accessor getSessionIdentifier.\r\tself assert: (id isKindOf: ByteArray).\r\tself assert: (id size / expectedSessionSize) == 1\r\r',			#stamp : 'dtl 8/19/2005 06:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2123' ],		#self : OmReference [ '2124' ],		#time : DateAndTime [ '2018-02-22T14:01:15.234278-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimGetUid,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimGetUid\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimGetUid) run"\r\r\t| id |\r\tid := accessor primGetUid.\r\tself should: [id isKindOf: Integer]\r',			#stamp : 'dtl 10/6/2001 09:50',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2124' ],		#self : OmReference [ '2125' ],		#time : DateAndTime [ '2018-02-22T14:01:15.234929-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testPrimUnsetEnv,			#protocol : #'testing - external process access',			#sourceCode : 'testPrimUnsetEnv\r\r\t"(UnixProcessAccessorTestCase selector: #testPrimUnsetEnv) run"\r\r\t| oldVal newVal resetVal |\r\toldVal := accessor environmentAt: \'AAAA\'.\r\tnewVal := \'this is a test string\'.\r\taccessor environmentAt: \'AAAA\' put: newVal.\r\tresetVal := accessor environmentAt: \'AAAA\'.\r\tself should: [resetVal notNil and: [resetVal isEmpty not]].\r\tself should: [newVal = resetVal].\r\r\taccessor primUnsetEnv: \'AAAA\', (Character value: 0) asString.\r\tresetVal := accessor environmentAt: \'AAAA\'.\r\tself should: [resetVal isNil].\r\r\taccessor environmentAt: \'AAAA\' put: oldVal.\r\tself should: [oldVal = (accessor environmentAt: \'AAAA\')]\r',			#stamp : 'dtl 10/7/2001 14:07',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2125' ],		#self : OmReference [ '2126' ],		#time : DateAndTime [ '2018-02-22T14:01:15.235558-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testRealpath,			#protocol : #'testing - external process access',			#sourceCode : 'testRealpath\r\r\t"(UnixProcessAccessorTestCase selector: #testRealpath) run"\r\r\t| p |\r\tp := accessor realpath: \'/usr/bin\'.\r\tself should: [p notNil and: [p isEmpty not]].\r\tp := accessor realpath: \'/bogus/path/name\'.\r\tself should: [p isNil]\r',			#stamp : 'dtl 10/6/2001 10:03',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2126' ],		#self : OmReference [ '2127' ],		#time : DateAndTime [ '2018-02-22T14:01:15.236323-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testRedirectStdOutTo,			#protocol : #testing,			#sourceCode : 'testRedirectStdOutTo\r\t"Perform a dup2() call on the standard output descriptor to assign it\r\tto a new file stream"\r\r\t"(UnixProcessAccessorTestCase selector: #testRedirectStdOutTo) run"\r\r\t| out aFileStream contents outFd saveFd newFileNo saveFs |\r\tout := OSProcess thisOSProcess stdOut.\r\t"save file number to allow cleanup at end of test"\r\tOSProcess deleteFileNamed: \'/tmp/delete.2.me\'.\t\r\tsaveFs := FileStream newFileNamed: \'/tmp/delete.2.me\'.\r\toutFd := OSProcess accessor primUnixFileNumber: out fileID.\r\tsaveFd := OSProcess accessor primUnixFileNumber: saveFs fileID.\r\tOSProcess accessor primDup: outFd to: saveFd.\r\t"Original stdout file descriptor is saved as safeFd, to be restored at end of test"\r\r\tOSProcess deleteFileNamed: \'/tmp/delete.me\'.\t\r\taFileStream := FileStream newFileNamed: \'/tmp/delete.me\'.\r\t"nb - #contentsOfEntireFile closes the file, do not use"\r\taFileStream reset.\r\tself assert: aFileStream upToEnd isEmpty.\r\t"note - do not close aFileStream as this affects actual stdout"\r\tout nextPutAll: \'foo\'; flush.\r\taFileStream reset.\r\tself assert: aFileStream upToEnd isEmpty.\r\tOSProcess thisOSProcess redirectStdOutTo: aFileStream.\r\tout nextPutAll: \'foo\'; flush.\r\taFileStream reset.\r\tcontents := aFileStream upToEnd.\r\tself deny: contents isEmpty.\r\tself assert: contents = \'foo\'. "assume noone else is using stdout right now"\r\t"ensure the we can still find the real stdout"\r\tself deny: OSProcess thisOSProcess stdOut closed.\r\tOSProcess thisOSProcess stdOut nextPutAll: \'bar\'; flush.\r\taFileStream reset.\r\tcontents := aFileStream upToEnd.\r\tself deny: contents isEmpty.\r\tself assert: contents = \'foobar\'.\r\t"Restore the original file number. The stdOut stream is cached in ThisOSProcess\r\t(and should probably be recalculated following a dup2(), so find the real handle\r\twith getStdOutHandle."\r\tnewFileNo := OSProcess accessor primUnixFileNumber: OSProcess accessor getStdOutHandle.\r\tOSProcess accessor primDup: saveFd to: newFileNo.\r\tOSProcess thisOSProcess stdOut lf; nextPutAll: \'UnixProcessAccessorTestCase>>testRedirectStdOutTo - this should appear on original console stdout\'; lf.\r\tsaveFs close.\r\taFileStream close.\t\r\tOSProcess deleteFileNamed: \'/tmp/delete.me\'.\t\r\tOSProcess deleteFileNamed: \'/tmp/delete.2.me\'.\t\r\r',			#stamp : 'dtl 6/6/2015 09:40',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2127' ],		#self : OmReference [ '2128' ],		#time : DateAndTime [ '2018-02-22T14:01:15.236936-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testSessionIdentifier,			#protocol : #testing,			#sourceCode : 'testSessionIdentifier\r\t"This is an indirect way to make sure that the primitive for obtaining the session ID does\r\tnot get out of kilter with respect to the method for obtaining session ID from an existing\r\topen file. The dangerous failure mode is if the SQFile data stucture format changes and\r\tOSProcess does not get updated to reflect the change.\r\r\tAs of approximately Squeak 3.8 and beyond, the session id has been moved to the\r\tfirst slot of the data structure. Deducing the session ID from an open file will not\r\twork for a Squeak VM beyond that point, and will not work for any 64 bit VM.\r\tOSPP version 4.0 or higher obtains session ID from the interpreter, so this is no\r\tlonger an issue. Skip this test for OSPP 4.0 and higher."\r\r\t"(UnixProcessAccessorTestCase selector: #testSessionIdentifier) debug"\r\r\t| installedOSPPMajorVersion |\r\tself should: [accessor getSessionIdentifier isKindOf: ByteArray].\r\tinstalledOSPPMajorVersion := (OSProcess accessor osppModuleVersionString\r\t\tifNil: [-1]) asInteger.\r\t(installedOSPPMajorVersion >= 4)\r\t\tifTrue: ["ignore this test"]\r\t\tifFalse: [self should:\r\t\t\t[accessor getSessionIdentifierFromSourcesFile = accessor getSessionIdentifier]]\r',			#stamp : 'dtl 10/1/2005 10:33',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2128' ],		#self : OmReference [ '2129' ],		#time : DateAndTime [ '2018-02-22T14:01:15.237631-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testSignalNumbers,			#protocol : #testing,			#sourceCode : 'testSignalNumbers\r\t"Signal numbers as reported by UnixOSProcessPlugin. Note that some signal definitions\r\tare architecture dependent, with specific number assignments differing between e.g. Intel\r\tand Sparc. Intel architecture is assumed for this test."\r\r\t"NOTE OSPP prior to version 4.4.12 had several incorrect signal number assignments.\r\tCheck the version level of OSPP by evaluating this expression:\r\r\t\tOSProcess accessor primOSProcessPluginModuleVersionString"\r\r\tself assert: OSProcess accessor primSigHupNumber = 1.\r\tself assert: OSProcess accessor primSigIntNumber = 2.\r\tself assert: OSProcess accessor primSigKillNumber = 9.\r\tself assert: OSProcess accessor primSigPipeNumber = 13.\r\tself assert: OSProcess accessor primSigQuitNumber = 3.\r\tself assert: OSProcess accessor primSigTermNumber = 15.\r\tOSProcess platformName caseOf:\r\t\t{ [\'unix\']\t\t->\r\t\t\t[self assert: OSProcess accessor primSigUsr1Number = 10.\r\t\t\t self assert: OSProcess accessor primSigUsr2Number = 12.\r\t\t\t self assert: OSProcess accessor primSigChldNumber = 17.].\r\t\t   [\'Mac OS\']\t->\r\t\t\t[self assert: OSProcess accessor primSigUsr1Number = 30.\r\t\t\t self assert: OSProcess accessor primSigUsr2Number = 31.\r\t\t\t self assert: OSProcess accessor primSigChldNumber = 20.]}\r\t\r\t\r',			#stamp : 'eem 3/27/2014 11:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2129' ],		#self : OmReference [ '2130' ],		#time : DateAndTime [ '2018-02-22T14:01:15.238282-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testUnixFileNumber,			#protocol : #testing,			#sourceCode : 'testUnixFileNumber\r\t"For purposes of this test, assume that stdin and stderr have not been\r\tdirected."\r\r\t"(UnixProcessAccessorTestCase selector: #testUnixFileNumber) run"\r\r\t| err errFileNo errHandle in inFileNo inHandle aFileStream fFileNo fHandle |\r\terr := OSProcess thisOSProcess stdErr.\r\terrHandle := err fileID.\r\terrFileNo := OSProcess accessor unixFileNumber: errHandle.\r\tself assert: errFileNo == 2.\r\tin := OSProcess thisOSProcess stdIn.\r\tinHandle := in fileID.\r\tinFileNo := OSProcess accessor unixFileNumber: inHandle.\r\tself assert: inFileNo == 0.\r\taFileStream := FileStream fileNamed: \'/tmp/delete.me\'.\r\tfHandle := aFileStream fileID.\r\tfFileNo := OSProcess accessor unixFileNumber: fHandle.\r\tself assert: fFileNo notNil.\r\tself assert: fFileNo > 2.\r\taFileStream close\r\r',			#stamp : 'dtl 9/10/2011 09:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2130' ],		#self : OmReference [ '2131' ],		#time : DateAndTime [ '2018-02-22T14:01:15.239291-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testUnlockFileUnixCompatible,			#protocol : #'file locking',			#sourceCode : 'testUnlockFileUnixCompatible\r\r\t"(UnixProcessAccessorTestCase selector: #testUnlockFileUnixCompatible) debug"\r\r\t| mode fs result |\r\tmode := OSProcess accessor emulateWin32FileLocking. "remember setting"\r\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[OSProcessAccessor emulateWin32FileLocking: false. "unix mode"\r\tfs nextPutAll: \'ABCDEFG\'.\r\tresult := OSProcess accessor unlockFile: fs.\r\t"On Unix, the fcntl call to unlock the file will succeed even if\r\tthe file is not locked."\r\tself should: (result isKindOf: OSFileLock).\r\r\tresult := OSProcess accessor lockFile: fs.\r\tself should: (result isKindOf: OSFileLock).\r\tresult := OSProcess accessor unlockFile: fs.\r\tself should: (result isKindOf: OSFileLock).\r\r\tfs close.\r\tresult := OSProcess accessor unlockFile: fs.\r\tself should: result == nil] ensure:\r\t\t[OSProcessAccessor emulateWin32FileLocking: mode.\r\t\tfs close]\r',			#stamp : 'dtl 5/7/2006 12:13',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2131' ],		#self : OmReference [ '2132' ],		#time : DateAndTime [ '2018-02-22T14:01:15.239958-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessAccessorTestCase,				#isMetaSide : false			},			#name : #testUnlockFileWin32Compatible,			#protocol : #'file locking',			#sourceCode : 'testUnlockFileWin32Compatible\r\r\t"(UnixProcessAccessorTestCase selector: #testUnlockFileWin32Compatible) debug"\r\r\t| mode fs result |\r\tmode := OSProcess accessor emulateWin32FileLocking. "remember setting"\r\r\tfs := FileStream fileNamed: \'junkfile\'.\r\t[OSProcessAccessor emulateWin32FileLocking: true. "win32 mode"\r\tfs nextPutAll: \'ABCDEFG\'.\r\tresult := OSProcess accessor unlockFile: fs.\r\tself should: result == nil.\r\r\tresult := OSProcess accessor lockFile: fs.\r\tself should: (result isKindOf: OSFileLock).\r\tresult := OSProcess accessor unlockFile: fs.\r\tself should: (result isKindOf: OSFileLock).\r\r\tfs close.\r\tresult := OSProcess accessor unlockFile: fs.\r\tself should: result == nil] ensure:\r\t\t[OSProcessAccessor emulateWin32FileLocking: mode.\r\t\tfs close]\r',			#stamp : 'dtl 5/7/2006 12:11',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2132' ],		#self : OmReference [ '2133' ],		#time : DateAndTime [ '2018-02-22T14:01:15.240564-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #'assertLock:lock:conflicts:',			#protocol : #asserting,			#sourceCode : 'assertLock: lock1 lock: lock2 conflicts: aBoolean\r\tself assert: (lock1 conflictsWith: lock2) = aBoolean.\r\tself assert: (lock2 conflictsWith: lock1) = aBoolean.',			#stamp : 'jf 2/22/2004 19:07',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2133' ],		#self : OmReference [ '2134' ],		#time : DateAndTime [ '2018-02-22T14:01:15.241182-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #entireExclusiveLock,			#protocol : #data,			#sourceCode : 'entireExclusiveLock\r\t^ OSFileLock onFile: fileStream exclusive: true',			#stamp : 'dtl 12/17/2016 17:37',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2134' ],		#self : OmReference [ '2135' ],		#time : DateAndTime [ '2018-02-22T14:01:15.241768-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #entireSharedLock,			#protocol : #data,			#sourceCode : 'entireSharedLock\r\t^ OSFileLock onFile: fileStream exclusive: false',			#stamp : 'dtl 12/17/2016 17:37',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2135' ],		#self : OmReference [ '2136' ],		#time : DateAndTime [ '2018-02-22T14:01:15.242309-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #fileStream,			#protocol : #accessing,			#sourceCode : 'fileStream\r\t^ fileStream',			#stamp : 'jf 2/21/2004 18:14',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2136' ],		#self : OmReference [ '2137' ],		#time : DateAndTime [ '2018-02-22T14:01:15.24289-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #regionExclusiveLock,			#protocol : #data,			#sourceCode : 'regionExclusiveLock\r\t^ self regionLockFrom: 10 to: 20 exclusive: true',			#stamp : 'jf 2/22/2004 19:22',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2137' ],		#self : OmReference [ '2138' ],		#time : DateAndTime [ '2018-02-22T14:01:15.243445-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #'regionLockFrom:to:exclusive:',			#protocol : #data,			#sourceCode : 'regionLockFrom: from to: to exclusive: exclusive\r\t^ OSFileRegionLock onFile: fileStream from: from to: to exclusive: exclusive',			#stamp : 'dtl 12/17/2016 17:37',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2138' ],		#self : OmReference [ '2139' ],		#time : DateAndTime [ '2018-02-22T14:01:15.244001-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #regionSharedLock,			#protocol : #data,			#sourceCode : 'regionSharedLock\r\t^ self regionLockFrom: 10 to: 20 exclusive: false',			#stamp : 'jf 2/22/2004 19:22',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2139' ],		#self : OmReference [ '2140' ],		#time : DateAndTime [ '2018-02-22T14:01:15.244931-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tFileDirectory default deleteFileNamed: \'junkfile\'.\r\tfileStream := FileStream fileNamed: \'junkfile\'.',			#stamp : 'dtl 12/17/2016 16:15',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2140' ],		#self : OmReference [ '2141' ],		#time : DateAndTime [ '2018-02-22T14:01:15.245549-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\tfileStream close.\r\tOSProcess deleteFileNamed: fileStream fullName',			#stamp : 'dtl 1/23/2013 19:42',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2141' ],		#self : OmReference [ '2142' ],		#time : DateAndTime [ '2018-02-22T14:01:15.246118-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testDistinctExclusiveRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testDistinctExclusiveRegionWithExclusiveRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: true)\r\t\tlock: (self regionLockFrom: 30 to: 40 exclusive: true)\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:27',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2142' ],		#self : OmReference [ '2143' ],		#time : DateAndTime [ '2018-02-22T14:01:15.246676-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testDistinctExclusiveRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testDistinctExclusiveRegionWithSharedRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: true)\r\t\tlock: (self regionLockFrom: 30 to: 40 exclusive: false)\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:27',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2143' ],		#self : OmReference [ '2144' ],		#time : DateAndTime [ '2018-02-22T14:01:15.247243-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testDistinctSharedRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testDistinctSharedRegionWithExclusiveRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: false)\r\t\tlock: (self regionLockFrom: 30 to: 40 exclusive: true)\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:27',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2144' ],		#self : OmReference [ '2145' ],		#time : DateAndTime [ '2018-02-22T14:01:15.247808-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testDistinctSharedRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testDistinctSharedRegionWithSharedRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: false)\r\t\tlock: (self regionLockFrom: 30 to: 40 exclusive: false)\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2145' ],		#self : OmReference [ '2146' ],		#time : DateAndTime [ '2018-02-22T14:01:15.248356-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireExclusiveWithEntireExclusive,			#protocol : #testing,			#sourceCode : 'testEntireExclusiveWithEntireExclusive\r\tself\r\t\tassertLock: self entireExclusiveLock\r\t\tlock: self entireExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:12',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2146' ],		#self : OmReference [ '2147' ],		#time : DateAndTime [ '2018-02-22T14:01:15.248918-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireExclusiveWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testEntireExclusiveWithExclusiveRegion\r\tself\r\t\tassertLock: self entireExclusiveLock\r\t\tlock: self regionExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:16',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2147' ],		#self : OmReference [ '2148' ],		#time : DateAndTime [ '2018-02-22T14:01:15.249474-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireExclusiveWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testEntireExclusiveWithSharedRegion\r\tself\r\t\tassertLock: self entireExclusiveLock\r\t\tlock: self regionSharedLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:17',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2148' ],		#self : OmReference [ '2149' ],		#time : DateAndTime [ '2018-02-22T14:01:15.250363-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireSharedWithEntireExclusive,			#protocol : #testing,			#sourceCode : 'testEntireSharedWithEntireExclusive\r\tself\r\t\tassertLock: self entireSharedLock\r\t\tlock: self entireExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:12',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2149' ],		#self : OmReference [ '2150' ],		#time : DateAndTime [ '2018-02-22T14:01:15.250934-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireSharedWithEntireShared,			#protocol : #testing,			#sourceCode : 'testEntireSharedWithEntireShared\r\tself\r\t\tassertLock: self entireSharedLock\r\t\tlock: self entireSharedLock\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:12',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2150' ],		#self : OmReference [ '2151' ],		#time : DateAndTime [ '2018-02-22T14:01:15.251513-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireSharedWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testEntireSharedWithExclusiveRegion\r\tself\r\t\tassertLock: self entireSharedLock\r\t\tlock: self regionExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:14',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2151' ],		#self : OmReference [ '2152' ],		#time : DateAndTime [ '2018-02-22T14:01:15.252074-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testEntireSharedWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testEntireSharedWithSharedRegion\r\tself\r\t\tassertLock: self entireSharedLock\r\t\tlock: self regionSharedLock\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:15',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2152' ],		#self : OmReference [ '2153' ],		#time : DateAndTime [ '2018-02-22T14:01:15.252631-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testExclusiveRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testExclusiveRegionWithExclusiveRegion\r\tself\r\t\tassertLock: self regionExclusiveLock\r\t\tlock: self regionExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:18',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2153' ],		#self : OmReference [ '2154' ],		#time : DateAndTime [ '2018-02-22T14:01:15.253178-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testIdenticalExclusiveRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testIdenticalExclusiveRegionWithExclusiveRegion\r\tself\r\t\tassertLock: self regionExclusiveLock\r\t\tlock: self regionExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:25',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2154' ],		#self : OmReference [ '2155' ],		#time : DateAndTime [ '2018-02-22T14:01:15.253743-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testIdenticalSharedRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testIdenticalSharedRegionWithExclusiveRegion\r\tself\r\t\tassertLock: self regionSharedLock\r\t\tlock: self regionExclusiveLock\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:24',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2155' ],		#self : OmReference [ '2156' ],		#time : DateAndTime [ '2018-02-22T14:01:15.254293-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testIdenticalSharedRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testIdenticalSharedRegionWithSharedRegion\r\tself\r\t\tassertLock: self regionSharedLock\r\t\tlock: self regionSharedLock\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:24',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2156' ],		#self : OmReference [ '2157' ],		#time : DateAndTime [ '2018-02-22T14:01:15.254848-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testOverlappingExclusiveRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testOverlappingExclusiveRegionWithExclusiveRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: true)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: true)\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:25',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2157' ],		#self : OmReference [ '2158' ],		#time : DateAndTime [ '2018-02-22T14:01:15.255814-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testOverlappingExclusiveRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testOverlappingExclusiveRegionWithSharedRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: true)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: false)\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2158' ],		#self : OmReference [ '2159' ],		#time : DateAndTime [ '2018-02-22T14:01:15.256376-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testOverlappingSharedRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testOverlappingSharedRegionWithExclusiveRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: false)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: true)\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2159' ],		#self : OmReference [ '2160' ],		#time : DateAndTime [ '2018-02-22T14:01:15.25695-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testOverlappingSharedRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testOverlappingSharedRegionWithSharedRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 20 exclusive: false)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: false)\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2160' ],		#self : OmReference [ '2161' ],		#time : DateAndTime [ '2018-02-22T14:01:15.257562-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testSupersetExclusiveRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testSupersetExclusiveRegionWithExclusiveRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 40 exclusive: true)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: true)\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:21',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2161' ],		#self : OmReference [ '2162' ],		#time : DateAndTime [ '2018-02-22T14:01:15.258128-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testSupersetExclusiveRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testSupersetExclusiveRegionWithSharedRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 40 exclusive: true)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: false)\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:23',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2162' ],		#self : OmReference [ '2163' ],		#time : DateAndTime [ '2018-02-22T14:01:15.258709-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testSupersetSharedRegionWithExclusiveRegion,			#protocol : #testing,			#sourceCode : 'testSupersetSharedRegionWithExclusiveRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 40 exclusive: false)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: true)\r\t\tconflicts: true',			#stamp : 'jf 2/22/2004 19:23',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2163' ],		#self : OmReference [ '2164' ],		#time : DateAndTime [ '2018-02-22T14:01:15.25926-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessFileLockTestCase,				#isMetaSide : false			},			#name : #testSupersetSharedRegionWithSharedRegion,			#protocol : #testing,			#sourceCode : 'testSupersetSharedRegionWithSharedRegion\r\tself\r\t\tassertLock: (self regionLockFrom: 10 to: 40 exclusive: false)\r\t\tlock: (self regionLockFrom: 20 to: 30 exclusive: false)\r\t\tconflicts: false',			#stamp : 'jf 2/22/2004 19:24',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2164' ],		#self : OmReference [ '2165' ],		#time : DateAndTime [ '2018-02-22T14:01:15.259855-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'UnixProcessTestCase class',				#isMetaSide : true			},			#name : #expectedFailures,			#protocol : #failures,			#sourceCode : 'expectedFailures\r\t^UnixOSProcessAccessor basicNew safeToForkSqueak\r\t\tifTrue: [#()]\r\t\tifFalse: [#(\ttestClassForkHeadlessSqueakAndDo\r\t\t\t\t\ttestClassForkHeadlessSqueakAndDoThenQuit\r\t\t\t\t\ttestClassForkSqueak\r\t\t\t\t\ttestClassForkSqueakAndDo\r\t\t\t\t\ttestClassForkSqueakAndDoThenQuit\r\t\t\t\t\ttestForkHeadlessSqueakAndDo\r\t\t\t\t\ttestForkHeadlessSqueakAndDoThenQuit\r\t\t\t\t\ttestForkSqueak\r\t\t\t\t\ttestForkSqueakAndDo\r\t\t\t\t\ttestForkSqueakAndDoThenQuit\r\t\t\t\t\ttestHeadlessChild\r\t\t\t\t\ttestSpawnTenHeadlessChildren)]',			#stamp : 'eem 3/27/2014 11:20',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2165' ],		#self : OmReference [ '2166' ],		#time : DateAndTime [ '2018-02-22T14:01:15.260506-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #expectedFailures,			#protocol : #failures,			#sourceCode : 'expectedFailures\r\t^UnixOSProcessAccessor basicNew safeToForkSqueak\r\t\tifTrue: [#()]\r\t\tifFalse: [#(\ttestClassForkHeadlessSqueakAndDo\r\t\t\t\t\ttestClassForkHeadlessSqueakAndDoThenQuit\r\t\t\t\t\ttestClassForkSqueak\r\t\t\t\t\ttestClassForkSqueakAndDo\r\t\t\t\t\ttestClassForkSqueakAndDoThenQuit\r\t\t\t\t\ttestEightLeafSqueakTree\r\t\t\t\t\ttestForkHeadlessSqueakAndDo\r\t\t\t\t\ttestForkHeadlessSqueakAndDoThenQuit\r\t\t\t\t\ttestForkSqueak\r\t\t\t\t\ttestForkSqueakAndDo\r\t\t\t\t\ttestForkSqueakAndDoThenQuit\r\t\t\t\t\ttestHeadlessChild\r\t\t\t\t\ttestSpawnTenHeadlessChildren)]',			#stamp : 'eem 3/27/2014 11:29',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2166' ],		#self : OmReference [ '2167' ],		#time : DateAndTime [ '2018-02-22T14:01:15.261519-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #numberOfOpenFiles,			#protocol : #private,			#sourceCode : 'numberOfOpenFiles\r\t"Answer the number of files currently open for this OS process. This works\r\tonly on a system with a /proc filesystem and file descriptors located in a\r\tdirectory called /proc/<pid>/fd. On other systems, just answer 0."\r\r\t"UnixProcessTestCase new numberOfOpenFiles"\r\r\t| path |\r\tpath := \'/proc/\' , OSProcess thisOSProcess pid printString, \'/fd\'.\r\t^ (OSProcess directoryExists: path)\r\t\tifTrue: [(OSProcess directoryEntryNames: path) size]\r\t\tifFalse: [0]\r',			#stamp : 'dtl 1/23/2013 21:30',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2167' ],		#self : OmReference [ '2168' ],		#time : DateAndTime [ '2018-02-22T14:01:15.262229-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #runAll,			#protocol : #running,			#sourceCode : 'runAll\r\t"If you get intermittent failures, try doing a garbage collect. Some of these\r\ttests can fail intermittently on the open file handle count checks"\r\r\t"UnixProcessTestCase new runAll"\r\r\t| result suite |\r\tSmalltalk garbageCollect.\r\tsuite := TestSuite new.\r\tsuite addTest: (UnixProcessTestCase selector: #testClassForkSqueak).\r\tsuite addTest: (UnixProcessTestCase selector: #testClassForkSqueakAndDo).\r\tsuite addTest: (UnixProcessTestCase selector: #testClassForkSqueakAndDoThenQuit).\r\tsuite addTest: (UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDo).\r\tsuite addTest: (UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDoThenQuit).\r\tsuite addTest: (UnixProcessTestCase selector: #testForkSqueak).\r\tsuite addTest: (UnixProcessTestCase selector: #testForkSqueakAndDo).\r\tsuite addTest: (UnixProcessTestCase selector: #testForkSqueakAndDoThenQuit).\r\tsuite addTest: (UnixProcessTestCase selector: #testForkHeadlessSqueakAndDo).\r\tsuite addTest: (UnixProcessTestCase selector: #testForkHeadlessSqueakAndDoThenQuit).\r\tsuite addTest: (UnixProcessTestCase selector: #testHeadlessChild).\r\tsuite addTest: (UnixProcessTestCase selector: #testSpawnTenHeadlessChildren).\r\tsuite addTest: (UnixProcessTestCase selector: #testEightLeafSqueakTree).\r\tsuite addTest: (UnixProcessTestCase selector: #testCatAFile).\r\tsuite addTest: (UnixProcessTestCase selector: #testCatFromFileToFiles).\r\tsuite addTest: (UnixProcessTestCase selector: #testRunCommand).\r\tsuite addTest: (UnixProcessTestCase selector: #testPipe).\r\tsuite addTest: (UnixProcessTestCase selector: #testPipeLine).\r\r\tresult := suite run.\r\tself should: [result defects size == 0].\r\t^ result\r',			#stamp : 'dtl 3/10/2002 10:52',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2168' ],		#self : OmReference [ '2169' ],		#time : DateAndTime [ '2018-02-22T14:01:15.262791-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\r\t(self respondsTo: #timeout: ) "Recent Squeak images with test case timeout"\r\t\tifTrue: [self perform: #timeout: with: 60].\r\tthisOSProcess := OSProcess thisOSProcess\r',			#stamp : 'dtl 7/30/2010 16:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2169' ],		#self : OmReference [ '2170' ],		#time : DateAndTime [ '2018-02-22T14:01:15.263422-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testCatAFile,			#protocol : #'testing - class examples',			#sourceCode : 'testCatAFile\r\r\t"(UnixProcessTestCase selector: #testCatAFile) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt: [p := UnixProcess catAFile]\r\t\traise: Warning.\r\tself assert: p notNil.\r\tself should: [p isRunning].\r\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\tself should: [p isComplete].\r\tself should: [p exitStatus == 0].\r\tself should: [p initialStdIn closed]. "Used a file for input, should be closed"\r\tself shouldnt: [p initialStdOut closed]. "Shared stdout with the VM, should be open"\r\tself shouldnt: [p initialStdErr closed]. "Shared stderr with the VM, should be open"\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 6/11/2011 12:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2170' ],		#self : OmReference [ '2171' ],		#time : DateAndTime [ '2018-02-22T14:01:15.264101-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testCatFromFileToFiles,			#protocol : #'testing - class examples',			#sourceCode : 'testCatFromFileToFiles\r\r\t"(UnixProcessTestCase selector: #testCatFromFileToFiles) run"\r\r\t| p f openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tOSProcess deleteFileNamed: \'/tmp/deleteMe.out\'.\r\tOSProcess deleteFileNamed: \'/tmp/deleteMe.err\'.\r\tself shouldnt: [p := UnixProcess catFromFileToFiles]\r\t\traise: Warning.\r\tself assert: p notNil.\r\tself should: [p isRunning].\r\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\tself should: [p isComplete].\r\tself should: [p exitStatus == 0].\r\tself should: [p initialStdIn closed].\r\tself should: [p initialStdOut closed].\r\tself should: [p initialStdErr closed].\r\tf := FileStream oldFileNamed: \'/tmp/deleteMe.out\'.\r\tself shouldnt: [f upToEnd isEmpty].\r\tf close.\r\tf := FileStream oldFileNamed: \'/tmp/deleteMe.err\'.\r\tself should: [f upToEnd isEmpty].\r\tf close.\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 1/23/2013 21:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2171' ],		#self : OmReference [ '2172' ],		#time : DateAndTime [ '2018-02-22T14:01:15.264743-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testClassForkHeadlessSqueakAndDo,			#protocol : #'testing - class side methods',			#sourceCode : 'testClassForkHeadlessSqueakAndDo\r\r\t"(UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDo) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t[p := UnixProcess forkHeadlessSqueakAndDo:\r\t\t\t[(Delay forMilliseconds: 100) wait.\r\t\t\tOSProcess snapshot: false andQuit: true]]\r\t\traise: Warning. "Catch warning if fork fails"\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/29/2005 14:24',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2172' ],		#self : OmReference [ '2173' ],		#time : DateAndTime [ '2018-02-22T14:01:15.265337-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testClassForkHeadlessSqueakAndDoThenQuit,			#protocol : #'testing - class side methods',			#sourceCode : 'testClassForkHeadlessSqueakAndDoThenQuit\r\r\t"(UnixProcessTestCase selector: #testClassForkHeadlessSqueakAndDoThenQuit) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t[p := UnixProcess forkHeadlessSqueakAndDoThenQuit:\r\t\t\t[(Delay forMilliseconds: 100) wait]]\r\t\traise: Warning. "Catch warning if fork fails"\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/29/2005 14:26',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2173' ],		#self : OmReference [ '2174' ],		#time : DateAndTime [ '2018-02-22T14:01:15.265982-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testClassForkSqueak,			#protocol : #'testing - class side methods',			#sourceCode : 'testClassForkSqueak\r\r\t"(UnixProcessTestCase selector: #testClassForkSqueak) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt: [p := UnixProcess forkSqueak]\r\t\traise: Warning.\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifTrue:\r\t\t\t["Child Squeak"\r\t\t\tp inspect.\r\t\t\t(Delay forMilliseconds: 100) wait.\r\t\t\tOSProcess snapshot: false andQuit: true]\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:38',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2174' ],		#self : OmReference [ '2175' ],		#time : DateAndTime [ '2018-02-22T14:01:15.266951-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testClassForkSqueakAndDo,			#protocol : #'testing - class side methods',			#sourceCode : 'testClassForkSqueakAndDo\r\r\t"(UnixProcessTestCase selector: #testClassForkSqueakAndDo) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t\t[p := UnixProcess forkSqueakAndDo:\r\t\t\t\t\t[(Delay forMilliseconds: 100) wait.\r\t\t\t\t\tOSProcess snapshot: false andQuit: true]]\r\t\traise: Warning.\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:43',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2175' ],		#self : OmReference [ '2176' ],		#time : DateAndTime [ '2018-02-22T14:01:15.267589-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testClassForkSqueakAndDoThenQuit,			#protocol : #'testing - class side methods',			#sourceCode : 'testClassForkSqueakAndDoThenQuit\r\r\t"(UnixProcessTestCase selector: #testClassForkSqueakAndDoThenQuit) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t\t[p := UnixProcess forkSqueakAndDoThenQuit:\r\t\t\t\t\t[(Delay forMilliseconds: 100) wait]]\r\t\traise: Warning.\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:43',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2176' ],		#self : OmReference [ '2177' ],		#time : DateAndTime [ '2018-02-22T14:01:15.268187-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testEightLeafSqueakTree,			#protocol : #'testing - class examples',			#sourceCode : 'testEightLeafSqueakTree\r\r\t"(UnixProcessTestCase selector: #testEightLeafSqueakTree) run"\r\r\t| a openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt: [a := UnixProcess eightLeafSqueakTree]\r\t\traise: Warning.\r\tself assert: (a isKindOf: Array).\r\tself assert: a size == 3.\r\t(a includes: 0)\r\t\tifTrue:\r\t\t\t[Smalltalk quitPrimitive].\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 6/10/2011 15:55',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2177' ],		#self : OmReference [ '2178' ],		#time : DateAndTime [ '2018-02-22T14:01:15.268822-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testForkHeadlessSqueakAndDo,			#protocol : #'testing - child process creation',			#sourceCode : 'testForkHeadlessSqueakAndDo\r\r\t"(UnixProcessTestCase selector: #testForkHeadlessSqueakAndDo) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t\t[p := thisOSProcess forkHeadlessSqueakAndDo:\r\t\t\t\t\t[(Delay forMilliseconds: 100) wait.\r\t\t\t\t\tOSProcess snapshot: false andQuit: true]]\r\t\traise: Warning. "Catch warning if fork fails"\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2178' ],		#self : OmReference [ '2179' ],		#time : DateAndTime [ '2018-02-22T14:01:15.269423-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testForkHeadlessSqueakAndDoThenQuit,			#protocol : #'testing - child process creation',			#sourceCode : 'testForkHeadlessSqueakAndDoThenQuit\r\r\t"(UnixProcessTestCase selector: #testForkHeadlessSqueakAndDoThenQuit) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t\t[p := thisOSProcess forkHeadlessSqueakAndDoThenQuit:\r\t\t\t\t\t[(Delay forMilliseconds: 100) wait]]\r\t\traise: Warning. "Catch warning if fork fails"\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:47',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2179' ],		#self : OmReference [ '2180' ],		#time : DateAndTime [ '2018-02-22T14:01:15.270056-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testForkSqueak,			#protocol : #'testing - child process creation',			#sourceCode : 'testForkSqueak\r\r\t"(UnixProcessTestCase selector: #testForkSqueak) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt: [p := thisOSProcess forkSqueak]\r\t\traise: Warning. "Catch warning if fork fails"\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifTrue:\r\t\t\t["Child Squeak"\r\t\t\tp inspect.\r\t\t\t(Delay forMilliseconds: 100) wait.\r\t\t\tOSProcess snapshot: false andQuit: true]\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/29/2005 14:30',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2180' ],		#self : OmReference [ '2181' ],		#time : DateAndTime [ '2018-02-22T14:01:15.270655-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testForkSqueakAndDo,			#protocol : #'testing - child process creation',			#sourceCode : 'testForkSqueakAndDo\r\r\t"(UnixProcessTestCase selector: #testForkSqueakAndDo) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t\t[p := thisOSProcess forkSqueakAndDo:\r\t\t\t\t\t[(Delay forMilliseconds: 100) wait.\r\t\t\t\t\tOSProcess snapshot: false andQuit: true]]\r\t\traise: Warning.\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:45',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2181' ],		#self : OmReference [ '2182' ],		#time : DateAndTime [ '2018-02-22T14:01:15.2713-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testForkSqueakAndDoThenQuit,			#protocol : #'testing - child process creation',			#sourceCode : 'testForkSqueakAndDoThenQuit\r\r\t"(UnixProcessTestCase selector: #testForkSqueakAndDoThenQuit) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt:\r\t\t\t[p := thisOSProcess forkSqueakAndDoThenQuit:\r\t\t\t\t\t[(Delay forMilliseconds: 100) wait]]\r\t\traise: Warning.\r\tself assert: p notNil.\r\t(p == thisOSProcess)\r\t\tifFalse:\r\t\t\t["Parent Squeak process"\r\t\t\tself should: [p isRunning].\r\t\t\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\t\t\tself should: [p isComplete].\r\t\t\tself should: [p exitStatus == 0].\r\t\t\tself assert: self numberOfOpenFiles == openFileCount]\r',			#stamp : 'dtl 6/10/2011 15:46',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2182' ],		#self : OmReference [ '2183' ],		#time : DateAndTime [ '2018-02-22T14:01:15.27227-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testHeadlessChild,			#protocol : #'testing - class examples',			#sourceCode : 'testHeadlessChild\r\r\t"(UnixProcessTestCase selector: #testHeadlessChild) run"\r\r\t| p openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt: [p := UnixProcess headlessChild]\r\t\traise: Warning. "Catch warning if fork fails"\r\t[p isComplete] whileFalse: [(Delay forMilliseconds: 100) wait].\r\tself assert: p isComplete.\r\tself assert: p exitStatus == 0.\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 6/29/2005 14:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2183' ],		#self : OmReference [ '2184' ],		#time : DateAndTime [ '2018-02-22T14:01:15.272871-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testPipe,			#protocol : #'testing - class examples',			#sourceCode : 'testPipe\r\r\t"(UnixProcessTestCase selector: #testPipe) run"\r\r\t| openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself should: [UnixProcess testPipe = \'this is some text to write into the pipe\'].\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 10/12/2001 08:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2184' ],		#self : OmReference [ '2185' ],		#time : DateAndTime [ '2018-02-22T14:01:15.273452-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testPipeLine,			#protocol : #'testing - class examples',			#sourceCode : 'testPipeLine\r\r\t"(UnixProcessTestCase selector: #testPipeLine) run"\r\r\t| openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself should: [\'This is the text to write*\' match: UnixProcess testPipeLine].\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 10/12/2001 08:32',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2185' ],		#self : OmReference [ '2186' ],		#time : DateAndTime [ '2018-02-22T14:01:15.274099-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testRunCommand,			#protocol : #'testing - class examples',			#sourceCode : 'testRunCommand\r\r\t"(UnixProcessTestCase selector: #testRunCommand) run"\r\r\t| p f openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tOSProcess deleteFileNamed: \'/tmp/deleteMe.out\'.\r\tOSProcess deleteFileNamed: \'/tmp/deleteMe.err\'.\r\tself shouldnt: [p := UnixProcess testRunCommand]\r\t\traise: Warning.\r\tself assert: p notNil.\r\tself should: [p isRunning].\r\t[p isRunning] whileTrue: [(Delay forMilliseconds: 100) wait].\r\tself should: [p isComplete].\r\tself should: [p exitStatus > 0].\t"Forced an error exit status"\r\t"stdin was shared with the Squeak VM, so it should not have been closed."\r\tself shouldnt: [p initialStdIn closed].\r\t"but the output and error streams should have been closed."\r\tself should: [p initialStdOut closed].\r\tself should: [p initialStdErr closed].\r\tf := FileStream oldFileNamed: \'/tmp/deleteMe.out\'.\r\tself shouldnt: [f upToEnd isEmpty].\r\tf close.\r\tf := FileStream oldFileNamed: \'/tmp/deleteMe.err\'.\r\tself shouldnt: [f upToEnd isEmpty].\r\tf close.\r\tself assert: self numberOfOpenFiles == openFileCount\r\r\r',			#stamp : 'dtl 1/23/2013 21:36',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2186' ],		#self : OmReference [ '2187' ],		#time : DateAndTime [ '2018-02-22T14:01:15.274758-03:00' ],		#trigger : OmReference [ '1971' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UnixProcessTestCase,				#isMetaSide : false			},			#name : #testSpawnTenHeadlessChildren,			#protocol : #'testing - class examples',			#sourceCode : 'testSpawnTenHeadlessChildren\r\r\t"(UnixProcessTestCase selector: #testSpawnTenHeadlessChildren) run"\r\r\t| a openFileCount |\r\topenFileCount := self numberOfOpenFiles.\r\tself shouldnt: [a := UnixProcess spawnTenHeadlessChildren]\r\t\traise: Warning. "Catch warning if fork fails"\r\t[(a detect: [:p | p isComplete not] ifNone: []) notNil]\r\t\twhileTrue: [(Delay forMilliseconds: 100) wait].\r\tself should: [(a select: [:p | p isComplete not]) isEmpty].\r\tself assert: self numberOfOpenFiles == openFileCount\r',			#stamp : 'dtl 6/29/2005 14:33',			#package : #OSProcess-Tests		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:15.333239-03:00' ],		#prior : OmReference [ '2187' ],		#self : OmReference [ '2188' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'WKHTML2PDF-Core-TorstenBergmann.20'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2188' ],		#self : OmReference [ '2189' ],		#time : DateAndTime [ '2018-02-22T14:01:15.427818-03:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HTML2PDFConverter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'Engine\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #HTML2PDFConverter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFConverter class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFConverter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFConverter,					#isMetaSide : false				},				#parent : @7,				#content : 'This class represents a HTML to PDF converter\rusing the WKHTML TO PDF Suite',				#stamp : 'TorstenBergmann 5/23/2014 16:38'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #HTML2PDFConverter,						#isMetaSide : false					},					#name : #Engine,					#parent : @7				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class represents a HTML to PDF converter\rusing the WKHTML TO PDF Suite',		#newStamp : 'TorstenBergmann 5/23/2014 16:38'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2189' ],		#self : OmReference [ '2190' ],		#time : DateAndTime [ '2018-02-22T14:01:15.430593-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WKHTML2PDF-Core-Basic,		#affectedPackageName : #WKHTML2PDF-Core	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2190' ],		#self : OmReference [ '2191' ],		#time : DateAndTime [ '2018-02-22T14:01:15.457768-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HTML2PDFConverter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'Engine\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Basic\''			},			#name : #HTML2PDFConverter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFConverter class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFConverter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFConverter,					#isMetaSide : false				},				#parent : @8,				#content : 'This class represents a HTML to PDF converter\rusing the WKHTML TO PDF Suite',				#stamp : 'TorstenBergmann 5/23/2014 16:38'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #HTML2PDFConverter,						#isMetaSide : false					},					#name : #Engine,					#parent : @8				}			],			#category : #WKHTML2PDF-Core-Basic,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2191' ],		#self : OmReference [ '2192' ],		#time : DateAndTime [ '2018-02-22T14:01:15.462313-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HTML2PDFSettings\r\tinstanceVariableNames: \'options\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #HTML2PDFSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #HTML2PDFSettings,						#isMetaSide : false					},					#name : #options,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'Settings for WKPDF',				#stamp : 'TorstenBergmann 6/3/2014 22:04'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Settings for WKPDF',		#newStamp : 'TorstenBergmann 6/3/2014 22:04'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2192' ],		#self : OmReference [ '2193' ],		#time : DateAndTime [ '2018-02-22T14:01:15.46328-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WKHTML2PDF-Core-Basic-Settings,		#affectedPackageName : #WKHTML2PDF-Core	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2193' ],		#self : OmReference [ '2194' ],		#time : DateAndTime [ '2018-02-22T14:01:15.465043-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HTML2PDFSettings\r\tinstanceVariableNames: \'options\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Basic-Settings\''			},			#name : #HTML2PDFSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #HTML2PDFSettings,						#isMetaSide : false					},					#name : #options,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'Settings for WKPDF',				#stamp : 'TorstenBergmann 6/3/2014 22:04'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Basic-Settings,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2194' ],		#self : OmReference [ '2195' ],		#time : DateAndTime [ '2018-02-22T14:01:15.4696-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'HTML2PDFSettings',				#traitCompositionSource : '{}',				#definitionSource : 'HTML2PDFSettings subclass: #HTML2PDFGlobalSettings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #HTML2PDFGlobalSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFGlobalSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFGlobalSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFGlobalSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'global settings',				#stamp : 'TorstenBergmann 6/3/2014 22:06'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'global settings',		#newStamp : 'TorstenBergmann 6/3/2014 22:06'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2195' ],		#self : OmReference [ '2196' ],		#time : DateAndTime [ '2018-02-22T14:01:15.473035-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'HTML2PDFSettings',				#traitCompositionSource : '{}',				#definitionSource : 'HTML2PDFSettings subclass: #HTML2PDFGlobalSettings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Basic-Settings\''			},			#name : #HTML2PDFGlobalSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFGlobalSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFGlobalSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFGlobalSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'global settings',				#stamp : 'TorstenBergmann 6/3/2014 22:06'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Basic-Settings,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2196' ],		#self : OmReference [ '2197' ],		#time : DateAndTime [ '2018-02-22T14:01:15.476603-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WKPDFExecutable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WKPDFExecutable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFExecutable class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFExecutable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFExecutable,					#isMetaSide : false				},				#parent : @8,				#content : 'The WKPDF executable',				#stamp : 'TorstenBergmann 6/3/2014 21:39'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'The WKPDF executable',		#newStamp : 'TorstenBergmann 6/3/2014 21:39'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2197' ],		#self : OmReference [ '2198' ],		#time : DateAndTime [ '2018-02-22T14:01:15.477511-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WKHTML2PDF-Core-Engines-Executable,		#affectedPackageName : #WKHTML2PDF-Core	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2198' ],		#self : OmReference [ '2199' ],		#time : DateAndTime [ '2018-02-22T14:01:15.479159-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WKPDFExecutable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Engines-Executable\''			},			#name : #WKPDFExecutable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFExecutable class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFExecutable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFExecutable,					#isMetaSide : false				},				#parent : @8,				#content : 'The WKPDF executable',				#stamp : 'TorstenBergmann 6/3/2014 21:39'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Engines-Executable,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2199' ],		#self : OmReference [ '2200' ],		#time : DateAndTime [ '2018-02-22T14:01:15.492604-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FFIExternalObject',				#traitCompositionSource : '{}',				#definitionSource : 'FFIExternalObject subclass: #WKPDFConverter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WKPDFConverter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFConverter class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFConverter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFConverter,					#isMetaSide : false				},				#parent : @8,				#content : 'Wrapper for struct wkhtmltopdf_converter from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Wrapper for struct wkhtmltopdf_converter from pdf.h',		#newStamp : 'TorstenBergmann 5/23/2014 16:34'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2200' ],		#self : OmReference [ '2201' ],		#time : DateAndTime [ '2018-02-22T14:01:15.494614-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WKHTML2PDF-Core-Component-Structs,		#affectedPackageName : #WKHTML2PDF-Core	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2201' ],		#self : OmReference [ '2202' ],		#time : DateAndTime [ '2018-02-22T14:01:15.497532-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FFIExternalObject',				#traitCompositionSource : '{}',				#definitionSource : 'FFIExternalObject subclass: #WKPDFConverter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Component-Structs\''			},			#name : #WKPDFConverter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFConverter class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFConverter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFConverter,					#isMetaSide : false				},				#parent : @8,				#content : 'Wrapper for struct wkhtmltopdf_converter from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Component-Structs,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2202' ],		#self : OmReference [ '2203' ],		#time : DateAndTime [ '2018-02-22T14:01:15.501473-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FFIExternalObject',				#traitCompositionSource : '{}',				#definitionSource : 'FFIExternalObject subclass: #WKPDFGlobalSettings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WKPDFGlobalSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFGlobalSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFGlobalSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFGlobalSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'Wrapper for struct wkhtmltopdf_global_settings from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Wrapper for struct wkhtmltopdf_global_settings from pdf.h',		#newStamp : 'TorstenBergmann 5/23/2014 16:34'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2203' ],		#self : OmReference [ '2204' ],		#time : DateAndTime [ '2018-02-22T14:01:15.503553-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FFIExternalObject',				#traitCompositionSource : '{}',				#definitionSource : 'FFIExternalObject subclass: #WKPDFGlobalSettings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Component-Structs\''			},			#name : #WKPDFGlobalSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFGlobalSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFGlobalSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFGlobalSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'Wrapper for struct wkhtmltopdf_global_settings from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Component-Structs,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2204' ],		#self : OmReference [ '2205' ],		#time : DateAndTime [ '2018-02-22T14:01:15.507739-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FFIExternalObject',				#traitCompositionSource : '{}',				#definitionSource : 'FFIExternalObject subclass: #WKPDFObjectSettings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WKPDFObjectSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFObjectSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFObjectSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFObjectSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'Wrapper for struct wkhtmltopdf_object_settings from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Wrapper for struct wkhtmltopdf_object_settings from pdf.h',		#newStamp : 'TorstenBergmann 5/23/2014 16:34'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2205' ],		#self : OmReference [ '2206' ],		#time : DateAndTime [ '2018-02-22T14:01:15.509633-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FFIExternalObject',				#traitCompositionSource : '{}',				#definitionSource : 'FFIExternalObject subclass: #WKPDFObjectSettings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Component-Structs\''			},			#name : #WKPDFObjectSettings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFObjectSettings class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFObjectSettings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFObjectSettings,					#isMetaSide : false				},				#parent : @8,				#content : 'Wrapper for struct wkhtmltopdf_object_settings from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Component-Structs,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2206' ],		#self : OmReference [ '2207' ],		#time : DateAndTime [ '2018-02-22T14:01:15.514145-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SharedPool',				#traitCompositionSource : '{}',				#definitionSource : 'SharedPool subclass: #WKPDFConstants\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'wkhtmltopdf_converter wkhtmltopdf_global_settings wkhtmltopdf_int_callback wkhtmltopdf_object_settings wkhtmltopdf_str_callback wkhtmltopdf_void_callback\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #WKPDFConstants,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFConstants class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFConstants class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFConstants,					#isMetaSide : false				},				#parent : @8,				#content : 'This pool includes constants from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_converter,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_global_settings,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_int_callback,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_object_settings,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_str_callback,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_void_callback,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This pool includes constants from pdf.h',		#newStamp : 'TorstenBergmann 5/23/2014 16:34'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2207' ],		#self : OmReference [ '2208' ],		#time : DateAndTime [ '2018-02-22T14:01:15.516999-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SharedPool',				#traitCompositionSource : '{}',				#definitionSource : 'SharedPool subclass: #WKPDFConstants\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'wkhtmltopdf_converter wkhtmltopdf_global_settings wkhtmltopdf_int_callback wkhtmltopdf_object_settings wkhtmltopdf_str_callback wkhtmltopdf_void_callback\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Component-Structs\''			},			#name : #WKPDFConstants,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFConstants class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFConstants class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFConstants,					#isMetaSide : false				},				#parent : @8,				#content : 'This pool includes constants from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_converter,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_global_settings,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_int_callback,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_object_settings,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_str_callback,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_void_callback,					#parent : @8				}			],			#category : #WKHTML2PDF-Core-Component-Structs,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2208' ],		#self : OmReference [ '2209' ],		#time : DateAndTime [ '2018-02-22T14:01:15.521653-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WKPDFLibrary\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'WKPDFConstants\'\r\tcategory: \'Unclassified\''			},			#name : #WKPDFLibrary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFLibrary class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFLibrary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFLibrary,					#isMetaSide : false				},				#parent : @8,				#content : 'Represents the WKPDF shared library',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFLibrary,						#isMetaSide : false					},					#name : #WKPDFConstants,					#parent : @8				}			]		},		#oldComment : '',		#newComment : 'Represents the WKPDF shared library',		#newStamp : 'TorstenBergmann 5/23/2014 16:34'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2209' ],		#self : OmReference [ '2210' ],		#time : DateAndTime [ '2018-02-22T14:01:15.522645-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WKHTML2PDF-Core-Engines-Library,		#affectedPackageName : #WKHTML2PDF-Core	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2210' ],		#self : OmReference [ '2211' ],		#time : DateAndTime [ '2018-02-22T14:01:15.524376-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #WKPDFLibrary\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'WKPDFConstants\'\r\tcategory: \'WKHTML2PDF-Core-Engines-Library\''			},			#name : #WKPDFLibrary,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFLibrary class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFLibrary class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFLibrary,					#isMetaSide : false				},				#parent : @8,				#content : 'Represents the WKPDF shared library',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Core-Engines-Library,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFLibrary,						#isMetaSide : false					},					#name : #WKPDFConstants,					#parent : @8				}			]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2211' ],		#self : OmReference [ '2212' ],		#time : DateAndTime [ '2018-02-22T14:01:15.549431-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SharedPool',				#traitCompositionSource : '{}',				#definitionSource : 'SharedPool subclass: #WKPDFConstants\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'wkhtmltopdf_converter wkhtmltopdf_global_settings wkhtmltopdf_int_callback wkhtmltopdf_object_settings wkhtmltopdf_str_callback wkhtmltopdf_void_callback\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Component-Structs\''			},			#name : #WKPDFConstants,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFConstants class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFConstants class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFConstants,					#isMetaSide : false				},				#parent : @8,				#content : 'This pool includes constants from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_converter,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_global_settings,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_int_callback,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_object_settings,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_str_callback,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_void_callback,					#parent : @8				}			],			#category : #WKHTML2PDF-Core-Component-Structs,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SharedPool',				#traitCompositionSource : '{}',				#definitionSource : 'SharedPool subclass: #WKPDFConstants\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'wkhtmltopdf_converter wkhtmltopdf_global_settings wkhtmltopdf_int_callback wkhtmltopdf_object_settings wkhtmltopdf_str_callback wkhtmltopdf_void_callback\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Core-Component-Structs\''			},			#name : #WKPDFConstants,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WKPDFConstants class\r\tinstanceVariableNames: \'\''				},				#name : #'WKPDFConstants class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @34			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WKPDFConstants,					#isMetaSide : false				},				#parent : @34,				#content : 'This pool includes constants from pdf.h',				#stamp : 'TorstenBergmann 5/23/2014 16:34'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_converter,					#parent : @34				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_global_settings,					#parent : @34				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_int_callback,					#parent : @34				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_object_settings,					#parent : @34				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_str_callback,					#parent : @34				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #WKPDFConstants,						#isMetaSide : false					},					#name : #wkhtmltopdf_void_callback,					#parent : @34				}			],			#category : #WKHTML2PDF-Core-Component-Structs,			#package : #WKHTML2PDF-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2212' ],		#self : OmReference [ '2213' ],		#time : DateAndTime [ '2018-02-22T14:01:15.670035-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HTML2PDFConverter class',				#isMetaSide : true			},			#name : #'convert:toFile:',			#protocol : #conversion,			#sourceCode : 'convert: url toFile: fileName\r\r\t^self engine convert: url toFile: fileName',			#stamp : 'TorstenBergmann 12/19/2014 09:52',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2213' ],		#self : OmReference [ '2214' ],		#time : DateAndTime [ '2018-02-22T14:01:15.671462-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HTML2PDFConverter class',				#isMetaSide : true			},			#name : #engine,			#protocol : #'private accessing',			#sourceCode : 'engine\r\r\t^Engine',			#stamp : 'TorstenBergmann 12/19/2014 09:56',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2214' ],		#self : OmReference [ '2215' ],		#time : DateAndTime [ '2018-02-22T14:01:15.673949-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HTML2PDFConverter class',				#isMetaSide : true			},			#name : #example,			#protocol : #examples,			#sourceCode : 'example\r\r\tself convert: \'http://www.pharo.org\'\r\t       toFile: \'pharo.pdf\'',			#stamp : 'TorstenBergmann 12/19/2014 09:55',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2215' ],		#self : OmReference [ '2216' ],		#time : DateAndTime [ '2018-02-22T14:01:15.675226-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HTML2PDFConverter class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tself useExecutable ',			#stamp : 'TorstenBergmann 12/19/2014 10:05',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2216' ],		#self : OmReference [ '2217' ],		#time : DateAndTime [ '2018-02-22T14:01:15.675996-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HTML2PDFConverter class',				#isMetaSide : true			},			#name : #useExecutable,			#protocol : #engines,			#sourceCode : 'useExecutable\r\r\tEngine := WKPDFExecutable ',			#stamp : 'TorstenBergmann 12/19/2014 09:53',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2217' ],		#self : OmReference [ '2218' ],		#time : DateAndTime [ '2018-02-22T14:01:15.676599-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HTML2PDFConverter class',				#isMetaSide : true			},			#name : #useLibrary,			#protocol : #engines,			#sourceCode : 'useLibrary\r\r\tEngine := WKPDFLibrary ',			#stamp : 'TorstenBergmann 12/19/2014 09:53',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2218' ],		#self : OmReference [ '2219' ],		#time : DateAndTime [ '2018-02-22T14:01:15.677282-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #collate,			#protocol : #options,			#sourceCode : 'collate\r\t"Collate when printing multiple copies (default)"\r\t\r\tself addSingleOption: \'collate\'',			#stamp : 'TorstenBergmann 6/3/2014 22:11',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2219' ],		#self : OmReference [ '2220' ],		#time : DateAndTime [ '2018-02-22T14:01:15.677904-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #'cookieJAR:',			#protocol : #options,			#sourceCode : 'cookieJAR: aPath\r\t"Read and write cookies from and to the supplied cookie jar file"\r\t\r\tself addOption: \'cookie-jar\' value: aPath',			#stamp : 'TorstenBergmann 6/3/2014 22:13',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2220' ],		#self : OmReference [ '2221' ],		#time : DateAndTime [ '2018-02-22T14:01:15.679895-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #'copies:',			#protocol : #options,			#sourceCode : 'copies: number\r\t"Number of copies to print into the pdf file (default 1)"\r\t\r\tself addOption: \'copies\' value: number',			#stamp : 'TorstenBergmann 9/10/2014 23:30',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2221' ],		#self : OmReference [ '2222' ],		#time : DateAndTime [ '2018-02-22T14:01:15.680643-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #'dpi:',			#protocol : #options,			#sourceCode : 'dpi: anInteger \r\t"Change the dpi explicitly (this has no effect on X11 based systems)"\r\t\r\tself addOption: \'dpi\' value: anInteger',			#stamp : 'TorstenBergmann 9/10/2014 23:31',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2222' ],		#self : OmReference [ '2223' ],		#time : DateAndTime [ '2018-02-22T14:01:15.681233-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #grayscale,			#protocol : #options,			#sourceCode : 'grayscale\r\tself addSingleOption: \'grayscale\'',			#stamp : 'TorstenBergmann 9/10/2014 23:28',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2223' ],		#self : OmReference [ '2224' ],		#time : DateAndTime [ '2018-02-22T14:01:15.681826-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #lowQuality,			#protocol : #options,			#sourceCode : 'lowQuality                      \r\t"Generates lower quality pdf/ps. Useful to shrink the result document space"\r\t\r\tself addSingleOption: \'lowquality\'',			#stamp : 'TorstenBergmann 9/10/2014 23:34',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2224' ],		#self : OmReference [ '2225' ],		#time : DateAndTime [ '2018-02-22T14:01:15.682369-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettings,				#isMetaSide : false			},			#name : #noCollate,			#protocol : #options,			#sourceCode : 'noCollate\r\t"Do not collate when printing multiple copies"\r\t\r\tself addSingleOption: \'no-collate\'',			#stamp : 'TorstenBergmann 6/3/2014 22:11',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2225' ],		#self : OmReference [ '2226' ],		#time : DateAndTime [ '2018-02-22T14:01:15.682971-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFSettings,				#isMetaSide : false			},			#name : #'addOption:value:',			#protocol : #initialization,			#sourceCode : 'addOption: option value: aValue\r\r\tself options at: option put: aValue',			#stamp : 'TorstenBergmann 9/10/2014 23:20',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2226' ],		#self : OmReference [ '2227' ],		#time : DateAndTime [ '2018-02-22T14:01:15.683571-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFSettings,				#isMetaSide : false			},			#name : #'addSingleOption:',			#protocol : #initialization,			#sourceCode : 'addSingleOption: option\r\r\tself options at: option put: nil',			#stamp : 'TorstenBergmann 9/10/2014 23:20',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2227' ],		#self : OmReference [ '2228' ],		#time : DateAndTime [ '2018-02-22T14:01:15.684132-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFSettings,				#isMetaSide : false			},			#name : #'hasOption:',			#protocol : #accessing,			#sourceCode : 'hasOption: aString \r\t^self options includesKey: aString',			#stamp : 'TorstenBergmann 9/10/2014 23:22',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2228' ],		#self : OmReference [ '2229' ],		#time : DateAndTime [ '2018-02-22T14:01:15.684689-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFSettings,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\toptions := Dictionary new.',			#stamp : 'TorstenBergmann 6/3/2014 22:08',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2229' ],		#self : OmReference [ '2230' ],		#time : DateAndTime [ '2018-02-22T14:01:15.68662-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFSettings,				#isMetaSide : false			},			#name : #options,			#protocol : #'private accessing',			#sourceCode : 'options\r\r\t^options',			#stamp : 'TorstenBergmann 6/3/2014 22:10',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2230' ],		#self : OmReference [ '2231' ],		#time : DateAndTime [ '2018-02-22T14:01:15.687335-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFSettings,				#isMetaSide : false			},			#name : #'valueForOption:',			#protocol : #accessing,			#sourceCode : 'valueForOption: aString \r\t^self options at: aString ifAbsent: nil',			#stamp : 'TorstenBergmann 9/10/2014 23:23',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2231' ],		#self : OmReference [ '2232' ],		#time : DateAndTime [ '2018-02-22T14:01:15.687962-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFExecutable class',				#isMetaSide : true			},			#name : #'convert:toFile:',			#protocol : #converting,			#sourceCode : 'convert: url toFile: fileName\r\t"\r\tself convert: \'http://www.pharo.org\'\r\t       toFile: \'pharo.pdf\'\r\t"\r\tself runWKHTMLWithOptions: url, \' \', fileName',			#stamp : 'TorstenBergmann 12/19/2014 09:43',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2232' ],		#self : OmReference [ '2233' ],		#time : DateAndTime [ '2018-02-22T14:01:15.688575-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFExecutable class',				#isMetaSide : true			},			#name : #'runWKHTMLWithOptions:',			#protocol : #converting,			#sourceCode : 'runWKHTMLWithOptions: options\r\r\tSmalltalk os isWin32 \r\t\tifTrue: [ ^ OSProcess command: \'wkhtmltopdf.exe \', options ].\r\tSmalltalk os isUnix \r\t\tifTrue: [ ^  OSProcess command: \'wkhtmltopdf \', options ]',			#stamp : 'TorstenBergmann 12/19/2014 09:51',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2233' ],		#self : OmReference [ '2234' ],		#time : DateAndTime [ '2018-02-22T14:01:15.68916-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFConstants class',				#isMetaSide : true			},			#name : #initTypes,			#protocol : #'private - initialization',			#sourceCode : 'initTypes\r\r\twkhtmltopdf_global_settings := #WKPDFGlobalSettings.\r\twkhtmltopdf_object_settings := #WKPDFObjectSettings.\r\twkhtmltopdf_converter := #WKPDFConverter.\r\twkhtmltopdf_str_callback := #FFICallback.\r\twkhtmltopdf_void_callback := #FFICallback.\r\twkhtmltopdf_int_callback := #FFICallback ',			#stamp : 'TorstenBergmann 2/9/2016 09:26',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2234' ],		#self : OmReference [ '2235' ],		#time : DateAndTime [ '2018-02-22T14:01:15.689713-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFConstants class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \r\t"Initializes the receiver class\r\t\r\t\tself initialize\r\t"\r\t\r\tself initTypes',			#stamp : 'TorstenBergmann 4/24/2014 20:25',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2235' ],		#self : OmReference [ '2236' ],		#time : DateAndTime [ '2018-02-22T14:01:15.690309-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'addObject:to:',			#protocol : #adding,			#sourceCode : 'addObject: converter to: settings\r\r\t \r\t\r\t ^self ffiCall: #(void wkhtmltopdf_add_object(wkhtmltopdf_converter converter, wkhtmltopdf_object_settings settings, 0)) module: \'wkhtmltox.dll\' options: #( - optCoerceNilToNull )',			#stamp : 'TorstenBergmann 11/14/2016 08:20',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2236' ],		#self : OmReference [ '2237' ],		#time : DateAndTime [ '2018-02-22T14:01:15.690876-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'convert:',			#protocol : #actions,			#sourceCode : 'convert: converter\r\r\t ^self ffiCall: #(int wkhtmltopdf_convert(wkhtmltopdf_converter converter)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:22',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2237' ],		#self : OmReference [ '2238' ],		#time : DateAndTime [ '2018-02-22T14:01:15.691539-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'convert:toFile:',			#protocol : #conversion,			#sourceCode : 'convert: url toFile: fileName\r\r\t| globalSettings objectSettings converter  conversionResult errorCode |\r\r\tself init: 0.\r\tglobalSettings := self createGlobalSettings.\r\tself setGlobalSetting: \'out\' to: fileName in: globalSettings.\r\tobjectSettings := self createObjectSettings.\r\tself setObjectSetting: \'page\' to: url in: objectSettings.\r\tconverter := self createConverter: globalSettings.\r\tself addObject: converter to: objectSettings.\r\tconversionResult := self convert: converter.\r\tconversionResult = 1 ifFalse: [ errorCode := self getHTTPErrorCode: converter ].\r\tself destroyConverter: converter.\r\tself deinit.\r\t\r\t^conversionResult = 1 \r\t\tifTrue: [ true ]\r\t\tifFalse: [ errorCode ]',			#stamp : 'TorstenBergmann 11/14/2016 08:24',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2238' ],		#self : OmReference [ '2239' ],		#time : DateAndTime [ '2018-02-22T14:01:15.693521-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'createConverter:',			#protocol : #'private - api',			#sourceCode : 'createConverter: settings\r\r\t \r\t ^self ffiCall: #(wkhtmltopdf_converter* wkhtmltopdf_create_converter(wkhtmltopdf_global_settings settings)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:20',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2239' ],		#self : OmReference [ '2240' ],		#time : DateAndTime [ '2018-02-22T14:01:15.694199-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #createGlobalSettings,			#protocol : #'private - api - settings',			#sourceCode : 'createGlobalSettings\r\r\t ^self ffiCall: #(wkhtmltopdf_global_settings* wkhtmltopdf_create_global_settings()) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 2/9/2016 09:07',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2240' ],		#self : OmReference [ '2241' ],		#time : DateAndTime [ '2018-02-22T14:01:15.694759-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #createObjectSettings,			#protocol : #'private - api - settings',			#sourceCode : 'createObjectSettings\r\r\t ^self ffiCall: #(wkhtmltopdf_object_settings* wkhtmltopdf_create_object_settings()) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 2/9/2016 09:07',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2241' ],		#self : OmReference [ '2242' ],		#time : DateAndTime [ '2018-02-22T14:01:15.695337-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #deinit,			#protocol : #'private - api - initialization',			#sourceCode : 'deinit\r\r\t \r\t ^self ffiCall: #(int wkhtmltopdf_deinit()) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 2/9/2016 09:07',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2242' ],		#self : OmReference [ '2243' ],		#time : DateAndTime [ '2018-02-22T14:01:15.695891-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'destroyConverter:',			#protocol : #'private - api',			#sourceCode : 'destroyConverter: converter\r\r\t \r\t ^self ffiCall: #(void wkhtmltopdf_destroy_converter(wkhtmltopdf_converter converter)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:24',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2243' ],		#self : OmReference [ '2244' ],		#time : DateAndTime [ '2018-02-22T14:01:15.696436-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #example,			#protocol : #examples,			#sourceCode : 'example\r\r\tself convert: \'http://www.pharo.org\' toFile:  \'c:\\temp\\test7.pdf\'',			#stamp : 'TorstenBergmann 2/9/2016 09:10',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2244' ],		#self : OmReference [ '2245' ],		#time : DateAndTime [ '2018-02-22T14:01:15.697146-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #exampleWithCallbacks,			#protocol : #examples,			#sourceCode : 'exampleWithCallbacks\r\r\t| globalSettings objectSettings converter cb phaseCallback |\r\tself init: 0.\r\tglobalSettings := self createGlobalSettings.\r\tself setGlobalSetting: \'out\' to: \'pharo_with_callback.pdf\' in: globalSettings.\r\tobjectSettings := self createObjectSettings.\r\tself setObjectSetting: \'page\' to: \'http://www.pharo.org\' in: objectSettings.\r\tconverter := self createConverter: globalSettings.\r\t\r\tcb := FFICallback  \r\t\t\t\tsignature: #(void (WKPDFConverter converter, String str))\r\t\t\t\tblock: [ :con :m | Transcript show: m readString; flush ].\r\t\tself setErrorCallback: cb onConverter: converter.\r\t\tself setWarningCallback: cb onConverter: converter.\r\t\r\tphaseCallback := FFICallback \r\t\t\t\t\t\t\t signature: #(void (WKPDFConverter converter))\r\t\t\t\t\t\t\t block:  [ :con | \r\t\t\t\t\t\t\t\t|description cvt|\r\t\t\t\t\t\t\t\tcvt := WKPDFConverter fromHandle:con.\r\t\t\t\t\t\t\t\tdescription := self getPhaseDescription: cvt forPhase: (self getCurrentPhase: cvt).\t\t\t\r\t\t\t\t\t\t\t\tTranscript show: description; cr; flush ].\r\t\t\t\t\t\t\r\tself setPhaseChangedCallback: phaseCallback onConverter: converter.\r\tself addObject: converter to: objectSettings.\r\tself convert: converter.\r\tself destroyConverter: converter.\r\tself deinit',			#stamp : 'TorstenBergmann 11/14/2016 08:36',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2245' ],		#self : OmReference [ '2246' ],		#time : DateAndTime [ '2018-02-22T14:01:15.697702-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'getCurrentPhase:',			#protocol : #'private - api - accessing',			#sourceCode : 'getCurrentPhase: converter\r\r\t \r\t ^self ffiCall: #(int wkhtmltopdf_current_phase(wkhtmltopdf_converter converter)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:31',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2246' ],		#self : OmReference [ '2247' ],		#time : DateAndTime [ '2018-02-22T14:01:15.698251-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'getHTTPErrorCode:',			#protocol : #'private - api - accessing',			#sourceCode : 'getHTTPErrorCode: converter\r\r\t^self ffiCall: #(int wkhtmltopdf_http_error_code(wkhtmltopdf_converter* converter)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 2/9/2016 09:08',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2247' ],		#self : OmReference [ '2248' ],		#time : DateAndTime [ '2018-02-22T14:01:15.70026-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'getPhaseDescription:forPhase:',			#protocol : #'private - api - accessing',			#sourceCode : 'getPhaseDescription: converter forPhase: phase\r\r\t ^self ffiCall: #(String wkhtmltopdf_phase_description(wkhtmltopdf_converter converter, int phase)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:33',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2248' ],		#self : OmReference [ '2249' ],		#time : DateAndTime [ '2018-02-22T14:01:15.701025-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'init:',			#protocol : #'private - api - initialization',			#sourceCode : 'init: use_graphics\r\r\t<primitive: #primitiveNativeCall module: #NativeBoostPlugin>\r\t\r\t ^self ffiCall: #(int wkhtmltopdf_init(int use_graphics)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 2/9/2016 09:06',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2249' ],		#self : OmReference [ '2250' ],		#time : DateAndTime [ '2018-02-22T14:01:15.701655-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'setErrorCallback:onConverter:',			#protocol : #'private - api - callbacks',			#sourceCode : 'setErrorCallback: cb onConverter: converter\r\r\t ^self ffiCall: #(void* wkhtmltopdf_set_error_callback(wkhtmltopdf_converter converter, wkhtmltopdf_str_callback cb)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:28',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2250' ],		#self : OmReference [ '2251' ],		#time : DateAndTime [ '2018-02-22T14:01:15.702205-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'setGlobalSetting:to:in:',			#protocol : #'private - api - settings',			#sourceCode : 'setGlobalSetting: aName to: value in: settings\r\r\t ^self ffiCall: #(int wkhtmltopdf_set_global_setting(wkhtmltopdf_global_settings settings, String aName, String value)) module: \'wkhtmltox.dll\' \t',			#stamp : 'TorstenBergmann 11/14/2016 08:18',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2251' ],		#self : OmReference [ '2252' ],		#time : DateAndTime [ '2018-02-22T14:01:15.702805-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'setObjectSetting:to:in:',			#protocol : #'private - api - settings',			#sourceCode : 'setObjectSetting: aName to: value in: settings\r\r \r\t ^self ffiCall: #(int wkhtmltopdf_set_object_setting(wkhtmltopdf_object_settings settings, String aName, String value)) module: \'wkhtmltox.dll\' \t',			#stamp : 'TorstenBergmann 11/14/2016 08:18',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2252' ],		#self : OmReference [ '2253' ],		#time : DateAndTime [ '2018-02-22T14:01:15.703403-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'setPhaseChangedCallback:onConverter:',			#protocol : #initialization,			#sourceCode : 'setPhaseChangedCallback: cb onConverter: converter\r\r\t ^self ffiCall: #(void* wkhtmltopdf_set_phase_changed_callback(wkhtmltopdf_converter converter, wkhtmltopdf_void_callback cb)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:29',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2253' ],		#self : OmReference [ '2254' ],		#time : DateAndTime [ '2018-02-22T14:01:15.70399-03:00' ],		#trigger : OmReference [ '2188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WKPDFLibrary class',				#isMetaSide : true			},			#name : #'setWarningCallback:onConverter:',			#protocol : #'private - api - callbacks',			#sourceCode : 'setWarningCallback: cb onConverter: converter\r\t \r\t ^self ffiCall: #(void* wkhtmltopdf_set_warning_callback(wkhtmltopdf_converter converter, wkhtmltopdf_str_callback cb)) module: \'wkhtmltox.dll\' ',			#stamp : 'TorstenBergmann 11/14/2016 08:29',			#package : #WKHTML2PDF-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T14:01:15.767987-03:00' ],		#prior : OmReference [ '2254' ],		#self : OmReference [ '2255' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'WKHTML2PDF-Tests-Core-TorstenBergmann.1'		]	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2255' ],		#self : OmReference [ '2256' ],		#time : DateAndTime [ '2018-02-22T14:01:15.855012-03:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #WKHTML2PDF-Tests-Core-Basic-Settings,		#affectedPackageName : #WKHTML2PDF-Tests-Core	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2256' ],		#self : OmReference [ '2257' ],		#time : DateAndTime [ '2018-02-22T14:01:15.88209-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #HTML2PDFGlobalSettingsTest\r\tinstanceVariableNames: \'globalSettings\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'WKHTML2PDF-Tests-Core-Basic-Settings\''			},			#name : #HTML2PDFGlobalSettingsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #HTML2PDFGlobalSettingsTest,						#isMetaSide : false					},					#name : #globalSettings,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HTML2PDFGlobalSettingsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'HTML2PDFGlobalSettingsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HTML2PDFGlobalSettingsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #WKHTML2PDF-Tests-Core-Basic-Settings,			#package : #WKHTML2PDF-Tests-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2257' ],		#self : OmReference [ '2258' ],		#time : DateAndTime [ '2018-02-22T14:01:15.90734-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\r\tsuper setUp.\r\tglobalSettings := HTML2PDFGlobalSettings new.',			#stamp : 'TorstenBergmann 9/10/2014 23:16',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2258' ],		#self : OmReference [ '2259' ],		#time : DateAndTime [ '2018-02-22T14:01:15.911217-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testCollate,			#protocol : #'tests - options',			#sourceCode : 'testCollate\r\r\tglobalSettings collate.\r\t\r\tself assert: (globalSettings hasOption: \'collate\')',			#stamp : 'TorstenBergmann 9/10/2014 23:24',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2259' ],		#self : OmReference [ '2260' ],		#time : DateAndTime [ '2018-02-22T14:01:15.912354-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testCookieJAR,			#protocol : #'tests - options',			#sourceCode : 'testCookieJAR\r\r\tglobalSettings cookieJAR: \'simple.jar\'.\r\t\r\tself assert: (globalSettings hasOption: \'cookie-jar\');\r\t\t assert: (globalSettings valueForOption: \'cookie-jar\') = \'simple.jar\'',			#stamp : 'TorstenBergmann 9/10/2014 23:25',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2260' ],		#self : OmReference [ '2261' ],		#time : DateAndTime [ '2018-02-22T14:01:15.91316-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testCopies,			#protocol : #'tests - options',			#sourceCode : 'testCopies\r\r\tglobalSettings copies: 3.\r\t\r\tself \r\t\tassert: (globalSettings hasOption: \'copies\');\r\t\tassert: (globalSettings valueForOption: \'copies\') = 3',			#stamp : 'TorstenBergmann 9/10/2014 23:30',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2261' ],		#self : OmReference [ '2262' ],		#time : DateAndTime [ '2018-02-22T14:01:15.913808-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testDPI,			#protocol : #'tests - options',			#sourceCode : 'testDPI\r\r\tglobalSettings dpi: 3.\r\t\r\tself \r\t\tassert: (globalSettings hasOption: \'dpi\');\r\t\tassert: (globalSettings valueForOption: \'dpi\') = 3',			#stamp : 'TorstenBergmann 9/10/2014 23:30',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2262' ],		#self : OmReference [ '2263' ],		#time : DateAndTime [ '2018-02-22T14:01:15.914408-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testGrayscale,			#protocol : #'tests - options',			#sourceCode : 'testGrayscale\r\r\tglobalSettings grayscale.\r\t\r\tself assert: (globalSettings hasOption: \'grayscale\')',			#stamp : 'TorstenBergmann 9/10/2014 23:27',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2263' ],		#self : OmReference [ '2264' ],		#time : DateAndTime [ '2018-02-22T14:01:15.914985-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testLowQuality,			#protocol : #'tests - options',			#sourceCode : 'testLowQuality\r\r\tglobalSettings lowQuality.\r\t\r\tself assert: (globalSettings hasOption: \'lowquality\')',			#stamp : 'TorstenBergmann 9/10/2014 23:33',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2264' ],		#self : OmReference [ '2265' ],		#time : DateAndTime [ '2018-02-22T14:01:15.91563-03:00' ],		#trigger : OmReference [ '2255' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HTML2PDFGlobalSettingsTest,				#isMetaSide : false			},			#name : #testNoCollate,			#protocol : #'tests - options',			#sourceCode : 'testNoCollate\r\r\tglobalSettings noCollate.\r\t\r\tself assert: (globalSettings hasOption: \'no-collate\')',			#stamp : 'TorstenBergmann 9/10/2014 23:26',			#package : #WKHTML2PDF-Tests-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:02:57.649521-03:00' ],		#prior : OmReference [ '2265' ],		#self : OmReference [ '2266' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Educia-Tools,		#affectedPackageName : #Educia-Tools	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:02:57.652152-03:00' ],		#prior : OmReference [ '2266' ],		#self : OmReference [ '2267' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: \'a subclass of EduRoot\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #'a subclass of EduRoot',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'a subclass of EduRoot class\r\tinstanceVariableNames: \'\''				},				#name : #'a subclass of EduRoot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'a subclass of EduRoot',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:06:43.851833-03:00' ],		#prior : OmReference [ '2267' ],		#self : OmReference [ '2268' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: \'a subclass of EduRoot\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #'a subclass of EduRoot',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'a subclass of EduRoot class\r\tinstanceVariableNames: \'\''				},				#name : #'a subclass of EduRoot class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'a subclass of EduRoot',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:07:22.623892-03:00' ],		#prior : OmReference [ '2268' ],		#self : OmReference [ '2269' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'Educia-Core-jmdc.1',		#repositoryDescription : '/home/juan/Documents/Pharo-Educia/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:07:50.820127-03:00' ],		#prior : OmReference [ '2269' ],		#self : OmReference [ '2270' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: \'a subclass of Object\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #'a subclass of Object',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'a subclass of Object class\r\tinstanceVariableNames: \'\''				},				#name : #'a subclass of Object class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'a subclass of Object',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:09:05.834537-03:00' ],		#prior : OmReference [ '2270' ],		#self : OmReference [ '2271' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:09:17.369077-03:00' ],		#prior : OmReference [ '2271' ],		#self : OmReference [ '2272' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:09:17.466936-03:00' ],		#prior : OmReference [ '2272' ],		#self : OmReference [ '2273' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:09:24.448226-03:00' ],		#prior : OmReference [ '2273' ],		#self : OmReference [ '2274' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:09'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'generator',		#newStamp : 'jmdc 2/22/2018 17:09'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:12:55.88074-03:00' ],		#prior : OmReference [ '2274' ],		#self : OmReference [ '2275' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #'as yet unclassified',			#sourceCode : 'generate',			#stamp : 'jmdc 2/22/2018 17:12',			#package : #Educia-Tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:14:04.816825-03:00' ],		#prior : OmReference [ '2275' ],		#self : OmReference [ '2276' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:09'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @21,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:09'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:14:04.907638-03:00' ],		#prior : OmReference [ '2276' ],		#self : OmReference [ '2277' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'EduRoot',				#traitCompositionSource : '{}',				#definitionSource : 'EduRoot subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:09'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @21,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:09'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:14:53.846354-03:00' ],		#prior : OmReference [ '2277' ],		#self : OmReference [ '2278' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'Educia-Tools-jmdc.1',		#repositoryDescription : '/home/juan/Documents/Pharo-Educia/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:15:18.181825-03:00' ],		#prior : OmReference [ '2278' ],		#self : OmReference [ '2279' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#SetGenerator ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2279' ],		#self : OmReference [ '2280' ],		#time : DateAndTime [ '2018-02-22T17:15:18.232818-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteSetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteSetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:15:37.812869-03:00' ],		#prior : OmReference [ '2280' ],		#self : OmReference [ '2281' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GenerateSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #GenerateSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GenerateSet class\r\tinstanceVariableNames: \'\''				},				#name : #'GenerateSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GenerateSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:15:42.975323-03:00' ],		#prior : OmReference [ '2281' ],		#self : OmReference [ '2282' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GenerateSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #GenerateSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GenerateSet class\r\tinstanceVariableNames: \'\''				},				#name : #'GenerateSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GenerateSet,					#isMetaSide : false				},				#parent : @7,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:15'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'generator',		#newStamp : 'jmdc 2/22/2018 17:15'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:17:00.80721-03:00' ],		#prior : OmReference [ '2282' ],		#self : OmReference [ '2283' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GenerateSet,				#isMetaSide : false			},			#name : #generate,			#protocol : #'as yet unclassified',			#sourceCode : 'generate',			#stamp : 'jmdc 2/22/2018 17:15',			#package : #Educia-Tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:17:22.898903-03:00' ],		#prior : OmReference [ '2283' ],		#self : OmReference [ '2284' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'Educia-Tools-jmdc.2',		#repositoryDescription : '/home/juan/Documents/Pharo-Educia/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:18:06.310547-03:00' ],		#prior : OmReference [ '2284' ],		#self : OmReference [ '2285' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GenerateSet class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: aFileName\r\r\t^ super new file: aFileName ',			#stamp : 'jmdc 2/22/2018 17:18',			#package : #Educia-Tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:18:30.733864-03:00' ],		#prior : OmReference [ '2285' ],		#self : OmReference [ '2286' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GenerateSet\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #GenerateSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GenerateSet class\r\tinstanceVariableNames: \'\''				},				#name : #'GenerateSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GenerateSet,					#isMetaSide : false				},				#parent : @7,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:15'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GenerateSet\r\tinstanceVariableNames: \'input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Tools\''			},			#name : #GenerateSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GenerateSet,						#isMetaSide : false					},					#name : #input,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GenerateSet class\r\tinstanceVariableNames: \'\''				},				#name : #'GenerateSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GenerateSet,					#isMetaSide : false				},				#parent : @21,				#content : 'generator',				#stamp : 'jmdc 2/22/2018 17:15'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:19:06.017946-03:00' ],		#prior : OmReference [ '2286' ],		#self : OmReference [ '2287' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GenerateSet,				#isMetaSide : false			},			#name : #'file:',			#protocol : #'as yet unclassified',			#sourceCode : 'file: aFileString\r\r\tinput := StandardFileStream fileNamed: aFileString .',			#stamp : 'jmdc 2/22/2018 17:19',			#package : #Educia-Tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:19:19.993842-03:00' ],		#prior : OmReference [ '2287' ],		#self : OmReference [ '2288' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#GenerateSet ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2288' ],		#self : OmReference [ '2289' ],		#time : DateAndTime [ '2018-02-22T17:19:20.046442-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GenerateSet\r\tinstanceVariableNames: \'input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Tools\''			},			#name : #GenerateSet,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoleteGenerateSet,						#isMetaSide : false					},					#name : #input,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GenerateSet class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteGenerateSet class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteGenerateSet,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Tools,			#package : #Educia-Tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:20:50.256088-03:00' ],		#prior : OmReference [ '2289' ],		#self : OmReference [ '2290' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Educia-tools,		#affectedPackageName : #Educia-tools	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:20:50.257704-03:00' ],		#prior : OmReference [ '2290' ],		#self : OmReference [ '2291' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-tools,			#package : #Educia-tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:20:57.851118-03:00' ],		#prior : OmReference [ '2291' ],		#self : OmReference [ '2292' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generates,			#protocol : #'as yet unclassified',			#sourceCode : 'generates',			#stamp : 'jmdc 2/22/2018 17:20',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:20:58.62243-03:00' ],		#prior : OmReference [ '2292' ],		#self : OmReference [ '2293' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #'as yet unclassified',			#sourceCode : 'generate',			#stamp : 'jmdc 2/22/2018 17:20',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:20:58.636092-03:00' ],		#prior : OmReference [ '2293' ],		#self : OmReference [ '2294' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #'as yet unclassified',			#sourceCode : 'generate',			#stamp : 'jmdc 2/22/2018 17:20',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate',			#stamp : 'jmdc 2/22/2018 17:20',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:21:01.957865-03:00' ],		#prior : OmReference [ '2294' ],		#self : OmReference [ '2295' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generates,			#protocol : #'as yet unclassified',			#sourceCode : 'generates',			#stamp : 'jmdc 2/22/2018 17:20',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:21:09.933262-03:00' ],		#prior : OmReference [ '2295' ],		#self : OmReference [ '2296' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-tools,			#package : #Educia-tools,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SetGenerator,						#isMetaSide : false					},					#name : #input,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-tools,			#package : #Educia-tools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:21:29.53518-03:00' ],		#prior : OmReference [ '2296' ],		#self : OmReference [ '2297' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SetGenerator class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: aStringName\r\r\t^ super new input: aStringName .',			#stamp : 'jmdc 2/22/2018 17:21',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:21:29.600174-03:00' ],		#prior : OmReference [ '2297' ],		#self : OmReference [ '2298' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SetGenerator class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'as yet unclassified',			#sourceCode : 'on: aStringName\r\r\t^ super new input: aStringName .',			#stamp : 'jmdc 2/22/2018 17:21',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SetGenerator class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aStringName\r\r\t^ super new input: aStringName .',			#stamp : 'jmdc 2/22/2018 17:21',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:22:03.79909-03:00' ],		#prior : OmReference [ '2298' ],		#self : OmReference [ '2299' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'input:',			#protocol : #'as yet unclassified',			#sourceCode : 'input: aString \r\r\tinput  := StandardFileStream fileNamed: aString .',			#stamp : 'jmdc 2/22/2018 17:22',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:22:03.850342-03:00' ],		#prior : OmReference [ '2299' ],		#self : OmReference [ '2300' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'input:',			#protocol : #'as yet unclassified',			#sourceCode : 'input: aString \r\r\tinput  := StandardFileStream fileNamed: aString .',			#stamp : 'jmdc 2/22/2018 17:22',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'input:',			#protocol : #accessing,			#sourceCode : 'input: aString \r\r\tinput  := StandardFileStream fileNamed: aString .',			#stamp : 'jmdc 2/22/2018 17:22',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:22:14.73187-03:00' ],		#prior : OmReference [ '2300' ],		#self : OmReference [ '2301' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate',			#stamp : 'jmdc 2/22/2018 17:20',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t',			#stamp : 'jmdc 2/22/2018 17:22',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:22:35.023441-03:00' ],		#prior : OmReference [ '2301' ],		#self : OmReference [ '2302' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SetGenerator,						#isMetaSide : false					},					#name : #input,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : 'a generators',				#stamp : 'jmdc 2/22/2018 17:22'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-tools,			#package : #Educia-tools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'a generators',		#newStamp : 'jmdc 2/22/2018 17:22'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:23:27.068122-03:00' ],		#prior : OmReference [ '2302' ],		#self : OmReference [ '2303' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SetGenerator\r\tinstanceVariableNames: \'input\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-tools\''			},			#name : #SetGenerator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SetGenerator,						#isMetaSide : false					},					#name : #input,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SetGenerator class\r\tinstanceVariableNames: \'\''				},				#name : #'SetGenerator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SetGenerator,					#isMetaSide : false				},				#parent : @7,				#content : 'a generator',				#stamp : 'jmdc 2/22/2018 17:23'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-tools,			#package : #Educia-tools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'a generators',		#newComment : 'a generator',		#oldStamp : 'jmdc 2/22/2018 17:22',		#newStamp : 'jmdc 2/22/2018 17:23'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:25:00.605275-03:00' ],		#prior : OmReference [ '2303' ],		#self : OmReference [ '2304' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t',			#stamp : 'jmdc 2/22/2018 17:22',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r     ',			#stamp : 'jmdc 2/22/2018 17:25',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:25:46.804197-03:00' ],		#prior : OmReference [ '2304' ],		#self : OmReference [ '2305' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r     ',			#stamp : 'jmdc 2/22/2018 17:25',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \rInstruccions   subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'     ',			#stamp : 'jmdc 2/22/2018 17:25',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:26:58.905392-03:00' ],		#prior : OmReference [ '2305' ],		#self : OmReference [ '2306' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \rInstruccions   subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'     ',			#stamp : 'jmdc 2/22/2018 17:25',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r code := \'Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpackage: \'\'Educia-Core\'\'\'.     \r\t\rInstruccions compile: code. \r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:26',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:27:09.871442-03:00' ],		#prior : OmReference [ '2306' ],		#self : OmReference [ '2307' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r code := \'Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpackage: \'\'Educia-Core\'\'\'.     \r\t\rInstruccions compile: code. \r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:27',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:27:40.316153-03:00' ],		#prior : OmReference [ '2307' ],		#self : OmReference [ '2308' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r code := \'Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpackage: \'\'Educia-Core\'\'\'.     \r\t\rInstruccions compile: code. \r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:26',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generate,			#protocol : #translating,			#sourceCode : 'generate\r\r\t[  input atEnd  ]\r   whileFalse: [   self generateClass  ].\r   input close.',			#stamp : 'jmdc 2/22/2018 17:27',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:28:17.91245-03:00' ],		#prior : OmReference [ '2308' ],		#self : OmReference [ '2309' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r code := \'Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpackage: \'\'Educia-Core\'\'\'.     \r\t\rInstruccions compile: code. \r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:27',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r code := \'Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpackage: \'\'Educia-Core\'\'\'.     \r\t\rclass:=Instruccions compile: code. \r\r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:28',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:33:51.256624-03:00' ],		#prior : OmReference [ '2309' ],		#self : OmReference [ '2310' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t| code  class  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r code := \'Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpackage: \'\'Educia-Core\'\'\'.     \r\t\rclass:=Instruccions compile: code. \r\r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:28',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t| code  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\r\r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:33',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:33:56.732234-03:00' ],		#prior : OmReference [ '2310' ],		#self : OmReference [ '2311' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t| code  name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\r\r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:33',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\r\r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:33',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:34:00.674855-03:00' ],		#prior : OmReference [ '2311' ],		#self : OmReference [ '2312' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:34:35.815684-03:00' ],		#prior : OmReference [ '2312' ],		#self : OmReference [ '2313' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ADC ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2313' ],		#self : OmReference [ '2314' ],		#time : DateAndTime [ '2018-02-22T17:34:35.870853-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:34:52.045474-03:00' ],		#prior : OmReference [ '2314' ],		#self : OmReference [ '2315' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#LDA ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2315' ],		#self : OmReference [ '2316' ],		#time : DateAndTime [ '2018-02-22T17:34:52.093498-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #LDA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDA class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteLDA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteLDA,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:34:59.882344-03:00' ],		#prior : OmReference [ '2316' ],		#self : OmReference [ '2317' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:35:51.176117-03:00' ],		#prior : OmReference [ '2317' ],		#self : OmReference [ '2318' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ADC ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2318' ],		#self : OmReference [ '2319' ],		#time : DateAndTime [ '2018-02-22T17:35:51.181422-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:37:15.235664-03:00' ],		#prior : OmReference [ '2319' ],		#self : OmReference [ '2320' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:37:54.421077-03:00' ],		#prior : OmReference [ '2320' ],		#self : OmReference [ '2321' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\r\r\rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:33',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\r\r\rinput nextLine . \rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:37',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:38:11.416292-03:00' ],		#prior : OmReference [ '2321' ],		#self : OmReference [ '2322' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ADC ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2322' ],		#self : OmReference [ '2323' ],		#time : DateAndTime [ '2018-02-22T17:38:11.420729-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:38:42.383432-03:00' ],		#prior : OmReference [ '2323' ],		#self : OmReference [ '2324' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:38:57.938516-03:00' ],		#prior : OmReference [ '2324' ],		#self : OmReference [ '2325' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:39:52.442267-03:00' ],		#prior : OmReference [ '2325' ],		#self : OmReference [ '2326' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \r Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\r\r\rinput nextLine . \rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:37',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr class |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \rclass :=  Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\rclass comment: descr .\r\r\rinput nextLine . \rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:39',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:17.393973-03:00' ],		#prior : OmReference [ '2326' ],		#self : OmReference [ '2327' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ADC ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2327' ],		#self : OmReference [ '2328' ],		#time : DateAndTime [ '2018-02-22T17:40:17.444211-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:25.327572-03:00' ],		#prior : OmReference [ '2328' ],		#self : OmReference [ '2329' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#ADD ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2329' ],		#self : OmReference [ '2330' ],		#time : DateAndTime [ '2018-02-22T17:40:25.376822-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.064742-03:00' ],		#prior : OmReference [ '2330' ],		#self : OmReference [ '2331' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.072582-03:00' ],		#prior : OmReference [ '2331' ],		#self : OmReference [ '2332' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.074934-03:00' ],		#prior : OmReference [ '2332' ],		#self : OmReference [ '2333' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.079363-03:00' ],		#prior : OmReference [ '2333' ],		#self : OmReference [ '2334' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.08165-03:00' ],		#prior : OmReference [ '2334' ],		#self : OmReference [ '2335' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.085917-03:00' ],		#prior : OmReference [ '2335' ],		#self : OmReference [ '2336' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.088231-03:00' ],		#prior : OmReference [ '2336' ],		#self : OmReference [ '2337' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.092401-03:00' ],		#prior : OmReference [ '2337' ],		#self : OmReference [ '2338' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.095814-03:00' ],		#prior : OmReference [ '2338' ],		#self : OmReference [ '2339' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.100599-03:00' ],		#prior : OmReference [ '2339' ],		#self : OmReference [ '2340' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.103272-03:00' ],		#prior : OmReference [ '2340' ],		#self : OmReference [ '2341' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.107051-03:00' ],		#prior : OmReference [ '2341' ],		#self : OmReference [ '2342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.109654-03:00' ],		#prior : OmReference [ '2342' ],		#self : OmReference [ '2343' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:40:41.113675-03:00' ],		#prior : OmReference [ '2343' ],		#self : OmReference [ '2344' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:42:35.313614-03:00' ],		#prior : OmReference [ '2344' ],		#self : OmReference [ '2345' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #'as yet unclassified',			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each ].',			#stamp : 'jmdc 2/22/2018 17:42',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:42:35.383113-03:00' ],		#prior : OmReference [ '2345' ],		#self : OmReference [ '2346' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #'as yet unclassified',			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each ].',			#stamp : 'jmdc 2/22/2018 17:42',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each ].',			#stamp : 'jmdc 2/22/2018 17:42',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:03.648655-03:00' ],		#prior : OmReference [ '2346' ],		#self : OmReference [ '2347' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\r\tInstruccions clear.',			#stamp : 'jmdc 2/22/2018 17:43',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:03.693708-03:00' ],		#prior : OmReference [ '2347' ],		#self : OmReference [ '2348' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\r\tInstruccions clear.',			#stamp : 'jmdc 2/22/2018 17:43',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tInstruccions clear.',			#stamp : 'jmdc 2/22/2018 17:43',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:51.572638-03:00' ],		#prior : OmReference [ '2348' ],		#self : OmReference [ '2349' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each ].',			#stamp : 'jmdc 2/22/2018 17:42',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each name ].',			#stamp : 'jmdc 2/22/2018 17:43',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.771585-03:00' ],		#prior : OmReference [ '2349' ],		#self : OmReference [ '2350' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.779692-03:00' ],		#prior : OmReference [ '2350' ],		#self : OmReference [ '2351' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.782306-03:00' ],		#prior : OmReference [ '2351' ],		#self : OmReference [ '2352' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.786308-03:00' ],		#prior : OmReference [ '2352' ],		#self : OmReference [ '2353' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.788858-03:00' ],		#prior : OmReference [ '2353' ],		#self : OmReference [ '2354' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.79513-03:00' ],		#prior : OmReference [ '2354' ],		#self : OmReference [ '2355' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.797408-03:00' ],		#prior : OmReference [ '2355' ],		#self : OmReference [ '2356' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.801571-03:00' ],		#prior : OmReference [ '2356' ],		#self : OmReference [ '2357' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.803793-03:00' ],		#prior : OmReference [ '2357' ],		#self : OmReference [ '2358' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.80786-03:00' ],		#prior : OmReference [ '2358' ],		#self : OmReference [ '2359' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.810228-03:00' ],		#prior : OmReference [ '2359' ],		#self : OmReference [ '2360' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.814893-03:00' ],		#prior : OmReference [ '2360' ],		#self : OmReference [ '2361' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.817238-03:00' ],		#prior : OmReference [ '2361' ],		#self : OmReference [ '2362' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:43:53.822416-03:00' ],		#prior : OmReference [ '2362' ],		#self : OmReference [ '2363' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:19.840717-03:00' ],		#prior : OmReference [ '2363' ],		#self : OmReference [ '2364' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each name ].',			#stamp : 'jmdc 2/22/2018 17:43',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each name ifAbsent:[]  ].',			#stamp : 'jmdc 2/22/2018 17:45',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.850873-03:00' ],		#prior : OmReference [ '2364' ],		#self : OmReference [ '2365' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.85631-03:00' ],		#prior : OmReference [ '2365' ],		#self : OmReference [ '2366' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.860396-03:00' ],		#prior : OmReference [ '2366' ],		#self : OmReference [ '2367' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.865154-03:00' ],		#prior : OmReference [ '2367' ],		#self : OmReference [ '2368' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.86809-03:00' ],		#prior : OmReference [ '2368' ],		#self : OmReference [ '2369' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.871873-03:00' ],		#prior : OmReference [ '2369' ],		#self : OmReference [ '2370' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.874584-03:00' ],		#prior : OmReference [ '2370' ],		#self : OmReference [ '2371' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.87842-03:00' ],		#prior : OmReference [ '2371' ],		#self : OmReference [ '2372' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.881236-03:00' ],		#prior : OmReference [ '2372' ],		#self : OmReference [ '2373' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.886846-03:00' ],		#prior : OmReference [ '2373' ],		#self : OmReference [ '2374' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.889598-03:00' ],		#prior : OmReference [ '2374' ],		#self : OmReference [ '2375' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.893626-03:00' ],		#prior : OmReference [ '2375' ],		#self : OmReference [ '2376' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.896319-03:00' ],		#prior : OmReference [ '2376' ],		#self : OmReference [ '2377' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:45:29.900755-03:00' ],		#prior : OmReference [ '2377' ],		#self : OmReference [ '2378' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:46:00.49004-03:00' ],		#prior : OmReference [ '2378' ],		#self : OmReference [ '2379' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:46:06.75462-03:00' ],		#prior : OmReference [ '2379' ],		#self : OmReference [ '2380' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:46:13.513678-03:00' ],		#prior : OmReference [ '2380' ],		#self : OmReference [ '2381' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr class |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \rclass :=  Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\rclass comment: descr .\r\r\rinput nextLine . \rinput nextLine . ',			#stamp : 'jmdc 2/22/2018 17:39',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr class |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \rclass :=  Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\rclass comment: descr .\r\r\rinput nextLine . \r',			#stamp : 'jmdc 2/22/2018 17:46',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:46:38.050479-03:00' ],		#prior : OmReference [ '2381' ],		#self : OmReference [ '2382' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:46:39.270942-03:00' ],		#prior : OmReference [ '2382' ],		#self : OmReference [ '2383' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:47:54.608956-03:00' ],		#prior : OmReference [ '2383' ],		#self : OmReference [ '2384' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr class |\r\t\r   name := input nextLine .\r   descr  := input nextLine .\r\r  \rclass :=  Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\rclass comment: descr .\r\r\rinput nextLine . \r',			#stamp : 'jmdc 2/22/2018 17:46',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr class |\r\t\r\t\r   name := input nextLine .\r [ name =  \'4.5\'] whileTrue:[ name := input nextLine ].  \r\t   descr  := input nextLine .\r\r  \rclass :=  Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\rclass comment: descr .\r\r\rinput nextLine . \r',			#stamp : 'jmdc 2/22/2018 17:47',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:03.072195-03:00' ],		#prior : OmReference [ '2384' ],		#self : OmReference [ '2385' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\r\t|   name descr class |\r\t\r\t\r   name := input nextLine .\r [ name =  \'4.5\'] whileTrue:[ name := input nextLine ].  \r\t   descr  := input nextLine .\r\r  \rclass :=  Instruccions  subclass: name asSymbol \r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Educia-Core\'.     \r\t\rclass comment: descr .\r\r\rinput nextLine . \r',			#stamp : 'jmdc 2/22/2018 17:47',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r\tdescr := input nextLine.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\tinput nextLine',			#stamp : 'jmdc 2/22/2018 17:48',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:12.92817-03:00' ],		#prior : OmReference [ '2385' ],		#self : OmReference [ '2386' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r\tdescr := input nextLine.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\tinput nextLine',			#stamp : 'jmdc 2/22/2018 17:48',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r"\r"\r\tdescr := input nextLine.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\tinput nextLine',			#stamp : 'jmdc 2/22/2018 17:48',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.316676-03:00' ],		#prior : OmReference [ '2386' ],		#self : OmReference [ '2387' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.323316-03:00' ],		#prior : OmReference [ '2387' ],		#self : OmReference [ '2388' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.326512-03:00' ],		#prior : OmReference [ '2388' ],		#self : OmReference [ '2389' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.331384-03:00' ],		#prior : OmReference [ '2389' ],		#self : OmReference [ '2390' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.334183-03:00' ],		#prior : OmReference [ '2390' ],		#self : OmReference [ '2391' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.338175-03:00' ],		#prior : OmReference [ '2391' ],		#self : OmReference [ '2392' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.341595-03:00' ],		#prior : OmReference [ '2392' ],		#self : OmReference [ '2393' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:48:20.345515-03:00' ],		#prior : OmReference [ '2393' ],		#self : OmReference [ '2394' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:49:19.089255-03:00' ],		#prior : OmReference [ '2394' ],		#self : OmReference [ '2395' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:49:20.910491-03:00' ],		#prior : OmReference [ '2395' ],		#self : OmReference [ '2396' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:49:32.919654-03:00' ],		#prior : OmReference [ '2396' ],		#self : OmReference [ '2397' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r"\r"\r\tdescr := input nextLine.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\tinput nextLine',			#stamp : 'jmdc 2/22/2018 17:48',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r"\r"\r\tdescr := input nextLine.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:49',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:49:44.883195-03:00' ],		#prior : OmReference [ '2397' ],		#self : OmReference [ '2398' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:49:44.888648-03:00' ],		#prior : OmReference [ '2398' ],		#self : OmReference [ '2399' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:18.58959-03:00' ],		#prior : OmReference [ '2399' ],		#self : OmReference [ '2400' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:19.808226-03:00' ],		#prior : OmReference [ '2400' ],		#self : OmReference [ '2401' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:24.469019-03:00' ],		#prior : OmReference [ '2401' ],		#self : OmReference [ '2402' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn + Op2 + Carry\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn + Op2 + Carry',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn + Op2 + Carry class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn + Op2 + Carry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn + Op2 + Carry',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:24.476407-03:00' ],		#prior : OmReference [ '2402' ],		#self : OmReference [ '2403' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn + Op2 + Carry\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn + Op2 + Carry',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn + Op2 + Carry class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn + Op2 + Carry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn + Op2 + Carry',					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:53.708096-03:00' ],		#prior : OmReference [ '2403' ],		#self : OmReference [ '2404' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:55.473044-03:00' ],		#prior : OmReference [ '2404' ],		#self : OmReference [ '2405' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:59.779242-03:00' ],		#prior : OmReference [ '2405' ],		#self : OmReference [ '2406' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn + Op2 + Carry\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn + Op2 + Carry',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn + Op2 + Carry class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn + Op2 + Carry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn + Op2 + Carry',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:50:59.784799-03:00' ],		#prior : OmReference [ '2406' ],		#self : OmReference [ '2407' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn + Op2 + Carry\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn + Op2 + Carry',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn + Op2 + Carry class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn + Op2 + Carry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn + Op2 + Carry',					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:52:37.033105-03:00' ],		#prior : OmReference [ '2407' ],		#self : OmReference [ '2408' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:52:38.01057-03:00' ],		#prior : OmReference [ '2408' ],		#self : OmReference [ '2409' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:42.386981-03:00' ],		#prior : OmReference [ '2409' ],		#self : OmReference [ '2410' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r"\r"\r\tdescr := input nextLine.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:49',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:55',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.234065-03:00' ],		#prior : OmReference [ '2410' ],		#self : OmReference [ '2411' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.241491-03:00' ],		#prior : OmReference [ '2411' ],		#self : OmReference [ '2412' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.244507-03:00' ],		#prior : OmReference [ '2412' ],		#self : OmReference [ '2413' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.249062-03:00' ],		#prior : OmReference [ '2413' ],		#self : OmReference [ '2414' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.251926-03:00' ],		#prior : OmReference [ '2414' ],		#self : OmReference [ '2415' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.255512-03:00' ],		#prior : OmReference [ '2415' ],		#self : OmReference [ '2416' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.258246-03:00' ],		#prior : OmReference [ '2416' ],		#self : OmReference [ '2417' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:55:54.261784-03:00' ],		#prior : OmReference [ '2417' ],		#self : OmReference [ '2418' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:56:58.191275-03:00' ],		#prior : OmReference [ '2418' ],		#self : OmReference [ '2419' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name = \'4.5\' ] whileTrue: [ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:55',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name first = $4  ] whileTrue: [ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:56',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.840012-03:00' ],		#prior : OmReference [ '2419' ],		#self : OmReference [ '2420' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.847919-03:00' ],		#prior : OmReference [ '2420' ],		#self : OmReference [ '2421' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.850357-03:00' ],		#prior : OmReference [ '2421' ],		#self : OmReference [ '2422' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.856657-03:00' ],		#prior : OmReference [ '2422' ],		#self : OmReference [ '2423' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.859219-03:00' ],		#prior : OmReference [ '2423' ],		#self : OmReference [ '2424' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.863867-03:00' ],		#prior : OmReference [ '2424' ],		#self : OmReference [ '2425' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.866356-03:00' ],		#prior : OmReference [ '2425' ],		#self : OmReference [ '2426' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.870173-03:00' ],		#prior : OmReference [ '2426' ],		#self : OmReference [ '2427' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.8727-03:00' ],		#prior : OmReference [ '2427' ],		#self : OmReference [ '2428' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.876516-03:00' ],		#prior : OmReference [ '2428' ],		#self : OmReference [ '2429' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn AND NOT Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn AND NOT Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.878808-03:00' ],		#prior : OmReference [ '2429' ],		#self : OmReference [ '2430' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.8845-03:00' ],		#prior : OmReference [ '2430' ],		#self : OmReference [ '2431' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'R14 := R15, R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rR14 := R15, R15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.886677-03:00' ],		#prior : OmReference [ '2431' ],		#self : OmReference [ '2432' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:57:09.890451-03:00' ],		#prior : OmReference [ '2432' ],		#self : OmReference [ '2433' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'R15 := Rn,',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rR15 := Rn,',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T17:59:52.336092-03:00' ],		#prior : OmReference [ '2433' ],		#self : OmReference [ '2434' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ name first = $4  ] whileTrue: [ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:56',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name   ] whileTrue: [ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:59',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:01:08.937836-03:00' ],		#prior : OmReference [ '2434' ],		#self : OmReference [ '2435' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #'as yet unclassified',			#sourceCode : 'isValidName: aString\r"\r"\r\t^ aString first ~= $4 and: [ (aString reject: [ :e | e = $: ]) size == 0 ]',			#stamp : 'jmdc 2/22/2018 18:01',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:01:08.986909-03:00' ],		#prior : OmReference [ '2435' ],		#self : OmReference [ '2436' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #'as yet unclassified',			#sourceCode : 'isValidName: aString\r"\r"\r\t^ aString first ~= $4 and: [ (aString reject: [ :e | e = $: ]) size == 0 ]',			#stamp : 'jmdc 2/22/2018 18:01',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r"\r"\r\t^ aString first ~= $4 and: [ (aString reject: [ :e | e = $: ]) size == 0 ]',			#stamp : 'jmdc 2/22/2018 18:01',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:02:13.592976-03:00' ],		#prior : OmReference [ '2436' ],		#self : OmReference [ '2437' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r"\r"\r\t^ aString first ~= $4 and: [ (aString reject: [ :e | e = $: ]) size == 0 ]',			#stamp : 'jmdc 2/22/2018 18:01',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString reject: [ :e | e = $: ]) size == 0 and: [ aString first asString isUppercase ] ]',			#stamp : 'jmdc 2/22/2018 18:02',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:02:21.995141-03:00' ],		#prior : OmReference [ '2437' ],		#self : OmReference [ '2438' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:02:22.002188-03:00' ],		#prior : OmReference [ '2438' ],		#self : OmReference [ '2439' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:03:05.278629-03:00' ],		#prior : OmReference [ '2439' ],		#self : OmReference [ '2440' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name   ] whileTrue: [ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 17:59',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name   ] whileFalse:[ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 18:03',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:04:30.927429-03:00' ],		#prior : OmReference [ '2440' ],		#self : OmReference [ '2441' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name   ] whileFalse:[ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 18:03',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name   ] whileTrue:[ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 18:04',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:04:55.62511-03:00' ],		#prior : OmReference [ '2441' ],		#self : OmReference [ '2442' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:04:55.634659-03:00' ],		#prior : OmReference [ '2442' ],		#self : OmReference [ '2443' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.404824-03:00' ],		#prior : OmReference [ '2443' ],		#self : OmReference [ '2444' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.41476-03:00' ],		#prior : OmReference [ '2444' ],		#self : OmReference [ '2445' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.449523-03:00' ],		#prior : OmReference [ '2445' ],		#self : OmReference [ '2446' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.5\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.5,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.5 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.5 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.5,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.457501-03:00' ],		#prior : OmReference [ '2446' ],		#self : OmReference [ '2447' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.5\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.5,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.5 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.5 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.5,					#isMetaSide : false				},				#parent : @7,				#content : 'Add',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rAdd',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.471407-03:00' ],		#prior : OmReference [ '2447' ],		#self : OmReference [ '2448' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn + Op2\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn + Op2',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn + Op2 class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn + Op2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn + Op2',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.480462-03:00' ],		#prior : OmReference [ '2448' ],		#self : OmReference [ '2449' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn + Op2\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn + Op2',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn + Op2 class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn + Op2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn + Op2',					#isMetaSide : false				},				#parent : @7,				#content : 'AND',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rAND',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.483202-03:00' ],		#prior : OmReference [ '2449' ],		#self : OmReference [ '2450' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.488913-03:00' ],		#prior : OmReference [ '2450' ],		#self : OmReference [ '2451' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.49212-03:00' ],		#prior : OmReference [ '2451' ],		#self : OmReference [ '2452' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.49893-03:00' ],		#prior : OmReference [ '2452' ],		#self : OmReference [ '2453' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.518258-03:00' ],		#prior : OmReference [ '2453' ],		#self : OmReference [ '2454' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.4\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.4,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.4 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.4 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.4,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.524064-03:00' ],		#prior : OmReference [ '2454' ],		#self : OmReference [ '2455' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.4\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.4,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.4 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.4 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.4,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rBit Clear',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.539801-03:00' ],		#prior : OmReference [ '2455' ],		#self : OmReference [ '2456' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn AND NOT Op2\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn AND NOT Op2',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn AND NOT Op2 class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn AND NOT Op2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn AND NOT Op2',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.548278-03:00' ],		#prior : OmReference [ '2456' ],		#self : OmReference [ '2457' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rn AND NOT Op2\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rn AND NOT Op2',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rn AND NOT Op2 class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rn AND NOT Op2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rn AND NOT Op2',					#isMetaSide : false				},				#parent : @7,				#content : 'BL',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rBL',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.560904-03:00' ],		#prior : OmReference [ '2457' ],		#self : OmReference [ '2458' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Branch with Link\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Branch with Link',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Branch with Link class\r\tinstanceVariableNames: \'\''				},				#name : #'Branch with Link class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Branch with Link',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.56853-03:00' ],		#prior : OmReference [ '2458' ],		#self : OmReference [ '2459' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Branch with Link\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Branch with Link',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Branch with Link class\r\tinstanceVariableNames: \'\''				},				#name : #'Branch with Link class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Branch with Link',					#isMetaSide : false				},				#parent : @7,				#content : '4.4',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.4',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.571846-03:00' ],		#prior : OmReference [ '2459' ],		#self : OmReference [ '2460' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.578969-03:00' ],		#prior : OmReference [ '2460' ],		#self : OmReference [ '2461' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'R15 := Rn,',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rR15 := Rn,',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.592435-03:00' ],		#prior : OmReference [ '2461' ],		#self : OmReference [ '2462' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.3\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.3 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.3,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.599898-03:00' ],		#prior : OmReference [ '2462' ],		#self : OmReference [ '2463' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.3\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.3 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.3,					#isMetaSide : false				},				#parent : @7,				#content : 'CDP',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rCDP',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.61755-03:00' ],		#prior : OmReference [ '2463' ],		#self : OmReference [ '2464' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Coprocesor Data Processing\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Coprocesor Data Processing',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Coprocesor Data Processing class\r\tinstanceVariableNames: \'\''				},				#name : #'Coprocesor Data Processing class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Coprocesor Data Processing',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.623133-03:00' ],		#prior : OmReference [ '2464' ],		#self : OmReference [ '2465' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Coprocesor Data Processing\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Coprocesor Data Processing',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Coprocesor Data Processing class\r\tinstanceVariableNames: \'\''				},				#name : #'Coprocesor Data Processing class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Coprocesor Data Processing',					#isMetaSide : false				},				#parent : @7,				#content : '4.14',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.14',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.625507-03:00' ],		#prior : OmReference [ '2465' ],		#self : OmReference [ '2466' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.636463-03:00' ],		#prior : OmReference [ '2466' ],		#self : OmReference [ '2467' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : 'CPSR flags := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rCPSR flags := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.660284-03:00' ],		#prior : OmReference [ '2467' ],		#self : OmReference [ '2468' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.5\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.5,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.5 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.5 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.5,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Add',		#newComment : '\rCompare',		#oldStamp : '<historical>',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.680015-03:00' ],		#prior : OmReference [ '2468' ],		#self : OmReference [ '2469' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'CPSR flags := Rn - Op2\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'CPSR flags := Rn - Op2',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPSR flags := Rn - Op2 class\r\tinstanceVariableNames: \'\''				},				#name : #'CPSR flags := Rn - Op2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'CPSR flags := Rn - Op2',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.686885-03:00' ],		#prior : OmReference [ '2469' ],		#self : OmReference [ '2470' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'CPSR flags := Rn - Op2\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'CPSR flags := Rn - Op2',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CPSR flags := Rn - Op2 class\r\tinstanceVariableNames: \'\''				},				#name : #'CPSR flags := Rn - Op2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'CPSR flags := Rn - Op2',					#isMetaSide : false				},				#parent : @7,				#content : 'EOR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rEOR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.705796-03:00' ],		#prior : OmReference [ '2470' ],		#self : OmReference [ '2471' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Exclusive OR\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Exclusive OR',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exclusive OR class\r\tinstanceVariableNames: \'\''				},				#name : #'Exclusive OR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Exclusive OR',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.714062-03:00' ],		#prior : OmReference [ '2471' ],		#self : OmReference [ '2472' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Exclusive OR\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Exclusive OR',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Exclusive OR class\r\tinstanceVariableNames: \'\''				},				#name : #'Exclusive OR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Exclusive OR',					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.729445-03:00' ],		#prior : OmReference [ '2472' ],		#self : OmReference [ '2473' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'OR (op2 AND NOT Rn)\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'OR (op2 AND NOT Rn)',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OR (op2 AND NOT Rn) class\r\tinstanceVariableNames: \'\''				},				#name : #'OR (op2 AND NOT Rn) class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'OR (op2 AND NOT Rn)',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.735392-03:00' ],		#prior : OmReference [ '2473' ],		#self : OmReference [ '2474' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'OR (op2 AND NOT Rn)\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'OR (op2 AND NOT Rn)',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'OR (op2 AND NOT Rn) class\r\tinstanceVariableNames: \'\''				},				#name : #'OR (op2 AND NOT Rn) class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'OR (op2 AND NOT Rn)',					#isMetaSide : false				},				#parent : @7,				#content : 'Load coprocessor from',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rLoad coprocessor from',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.749254-03:00' ],		#prior : OmReference [ '2474' ],		#self : OmReference [ '2475' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Coprocessor load\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Coprocessor load',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Coprocessor load class\r\tinstanceVariableNames: \'\''				},				#name : #'Coprocessor load class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Coprocessor load',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.757217-03:00' ],		#prior : OmReference [ '2475' ],		#self : OmReference [ '2476' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Coprocessor load\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Coprocessor load',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Coprocessor load class\r\tinstanceVariableNames: \'\''				},				#name : #'Coprocessor load class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Coprocessor load',					#isMetaSide : false				},				#parent : @7,				#content : 'memory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rmemory',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.759876-03:00' ],		#prior : OmReference [ '2476' ],		#self : OmReference [ '2477' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.766848-03:00' ],		#prior : OmReference [ '2477' ],		#self : OmReference [ '2478' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : 'Stack manipulation (Pop)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rStack manipulation (Pop)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.780416-03:00' ],		#prior : OmReference [ '2478' ],		#self : OmReference [ '2479' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.11\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.11,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.11 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.11 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.11,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.791047-03:00' ],		#prior : OmReference [ '2479' ],		#self : OmReference [ '2480' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.11\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.11,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.11 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.11 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.11,					#isMetaSide : false				},				#parent : @7,				#content : 'Load register from memory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rLoad register from memory',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.805751-03:00' ],		#prior : OmReference [ '2480' ],		#self : OmReference [ '2481' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := (address)\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := (address)',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := (address) class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := (address) class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := (address)',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.812643-03:00' ],		#prior : OmReference [ '2481' ],		#self : OmReference [ '2482' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := (address)\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := (address)',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := (address) class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := (address) class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := (address)',					#isMetaSide : false				},				#parent : @7,				#content : 'MCR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rMCR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.833457-03:00' ],		#prior : OmReference [ '2482' ],		#self : OmReference [ '2483' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Move CPU register to\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Move CPU register to',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Move CPU register to class\r\tinstanceVariableNames: \'\''				},				#name : #'Move CPU register to class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Move CPU register to',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.839537-03:00' ],		#prior : OmReference [ '2483' ],		#self : OmReference [ '2484' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Move CPU register to\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Move CPU register to',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Move CPU register to class\r\tinstanceVariableNames: \'\''				},				#name : #'Move CPU register to class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Move CPU register to',					#isMetaSide : false				},				#parent : @7,				#content : '4.16',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.16',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.855589-03:00' ],		#prior : OmReference [ '2484' ],		#self : OmReference [ '2485' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Open Access\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Open Access',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Open Access class\r\tinstanceVariableNames: \'\''				},				#name : #'Open Access class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Open Access',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.862698-03:00' ],		#prior : OmReference [ '2485' ],		#self : OmReference [ '2486' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Open Access\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Open Access',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Open Access class\r\tinstanceVariableNames: \'\''				},				#name : #'Open Access class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Open Access',					#isMetaSide : false				},				#parent : @7,				#content : 'MLA',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rMLA',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.875465-03:00' ],		#prior : OmReference [ '2486' ],		#self : OmReference [ '2487' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Multiply Accumulate\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Multiply Accumulate',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Multiply Accumulate class\r\tinstanceVariableNames: \'\''				},				#name : #'Multiply Accumulate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Multiply Accumulate',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.88457-03:00' ],		#prior : OmReference [ '2487' ],		#self : OmReference [ '2488' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Multiply Accumulate\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Multiply Accumulate',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Multiply Accumulate class\r\tinstanceVariableNames: \'\''				},				#name : #'Multiply Accumulate class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Multiply Accumulate',					#isMetaSide : false				},				#parent : @7,				#content : '4.7, 4.8',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.7, 4.8',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.887411-03:00' ],		#prior : OmReference [ '2488' ],		#self : OmReference [ '2489' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.89523-03:00' ],		#prior : OmReference [ '2489' ],		#self : OmReference [ '2490' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd : = Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd : = Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.91812-03:00' ],		#prior : OmReference [ '2490' ],		#self : OmReference [ '2491' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.5\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.5,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.5 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.5 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.5,					#isMetaSide : false				},				#parent : @7,				#content : 'Move from coprocessor',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Compare',		#newComment : '\rMove from coprocessor',		#oldStamp : '<historical>',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.932781-03:00' ],		#prior : OmReference [ '2491' ],		#self : OmReference [ '2492' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rn := cRn {<op>cRm}\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rn := cRn {<op>cRm}',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rn := cRn {<op>cRm} class\r\tinstanceVariableNames: \'\''				},				#name : #'Rn := cRn {<op>cRm} class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rn := cRn {<op>cRm}',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.940298-03:00' ],		#prior : OmReference [ '2492' ],		#self : OmReference [ '2493' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rn := cRn {<op>cRm}\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rn := cRn {<op>cRm}',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rn := cRn {<op>cRm} class\r\tinstanceVariableNames: \'\''				},				#name : #'Rn := cRn {<op>cRm} class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rn := cRn {<op>cRm}',					#isMetaSide : false				},				#parent : @7,				#content : 'register to CPU register',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rregister to CPU register',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.944986-03:00' ],		#prior : OmReference [ '2493' ],		#self : OmReference [ '2494' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.954737-03:00' ],		#prior : OmReference [ '2494' ],		#self : OmReference [ '2495' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : 'Rn := PSR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRn := PSR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.972074-03:00' ],		#prior : OmReference [ '2495' ],		#self : OmReference [ '2496' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.6\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.6,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.6 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.6 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.6,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.981603-03:00' ],		#prior : OmReference [ '2496' ],		#self : OmReference [ '2497' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.6\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.6,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.6 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.6 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.6,					#isMetaSide : false				},				#parent : @7,				#content : 'MSR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rMSR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:05:59.995765-03:00' ],		#prior : OmReference [ '2497' ],		#self : OmReference [ '2498' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Move register to PSR\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Move register to PSR',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Move register to PSR class\r\tinstanceVariableNames: \'\''				},				#name : #'Move register to PSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Move register to PSR',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.006806-03:00' ],		#prior : OmReference [ '2498' ],		#self : OmReference [ '2499' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Move register to PSR\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Move register to PSR',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Move register to PSR class\r\tinstanceVariableNames: \'\''				},				#name : #'Move register to PSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Move register to PSR',					#isMetaSide : false				},				#parent : @7,				#content : '4.6',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.6',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.024282-03:00' ],		#prior : OmReference [ '2499' ],		#self : OmReference [ '2500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'status/flags\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #status/flags,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'status/flags class\r\tinstanceVariableNames: \'\''				},				#name : #'status/flags class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #status/flags,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.033584-03:00' ],		#prior : OmReference [ '2500' ],		#self : OmReference [ '2501' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'status/flags\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #status/flags,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'status/flags class\r\tinstanceVariableNames: \'\''				},				#name : #'status/flags class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #status/flags,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rMultiply',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.049276-03:00' ],		#prior : OmReference [ '2501' ],		#self : OmReference [ '2502' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rm * Rs\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rm * Rs',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rm * Rs class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rm * Rs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rm * Rs',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.055146-03:00' ],		#prior : OmReference [ '2502' ],		#self : OmReference [ '2503' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Rm * Rs\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Rm * Rs',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Rm * Rs class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Rm * Rs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Rm * Rs',					#isMetaSide : false				},				#parent : @7,				#content : 'MVN',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rMVN',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.071249-03:00' ],		#prior : OmReference [ '2503' ],		#self : OmReference [ '2504' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Move negative register\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Move negative register',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Move negative register class\r\tinstanceVariableNames: \'\''				},				#name : #'Move negative register class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Move negative register',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.077937-03:00' ],		#prior : OmReference [ '2504' ],		#self : OmReference [ '2505' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Move negative register\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Move negative register',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Move negative register class\r\tinstanceVariableNames: \'\''				},				#name : #'Move negative register class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Move negative register',					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.080279-03:00' ],		#prior : OmReference [ '2505' ],		#self : OmReference [ '2506' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.086963-03:00' ],		#prior : OmReference [ '2506' ],		#self : OmReference [ '2507' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn OR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn OR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.106829-03:00' ],		#prior : OmReference [ '2507' ],		#self : OmReference [ '2508' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.5\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.5,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.5 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.5 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.5,					#isMetaSide : false				},				#parent : @7,				#content : 'ARM7TDMI Data Sheet',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Move from coprocessor',		#newComment : '\rARM7TDMI Data Sheet',		#oldStamp : '<historical>',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.118769-03:00' ],		#prior : OmReference [ '2508' ],		#self : OmReference [ '2509' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4-3\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4-3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4-3 class\r\tinstanceVariableNames: \'\''				},				#name : #'4-3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4-3,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.127527-03:00' ],		#prior : OmReference [ '2509' ],		#self : OmReference [ '2510' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4-3\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4-3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4-3 class\r\tinstanceVariableNames: \'\''				},				#name : #'4-3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4-3,					#isMetaSide : false				},				#parent : @7,				#content : 'ARM Instruction Set - Summary',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rARM Instruction Set - Summary',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.131737-03:00' ],		#prior : OmReference [ '2510' ],		#self : OmReference [ '2511' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.140481-03:00' ],		#prior : OmReference [ '2511' ],		#self : OmReference [ '2512' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : 'Action',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rAction',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.15399-03:00' ],		#prior : OmReference [ '2512' ],		#self : OmReference [ '2513' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'See Section:\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'See Section:',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'See Section: class\r\tinstanceVariableNames: \'\''				},				#name : #'See Section: class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'See Section:',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.165656-03:00' ],		#prior : OmReference [ '2513' ],		#self : OmReference [ '2514' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'See Section:\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'See Section:',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'See Section: class\r\tinstanceVariableNames: \'\''				},				#name : #'See Section: class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'See Section:',					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rReverse Subtract',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.183097-03:00' ],		#prior : OmReference [ '2514' ],		#self : OmReference [ '2515' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Op2 - Rn\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Op2 - Rn',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Op2 - Rn class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Op2 - Rn class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Op2 - Rn',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.193822-03:00' ],		#prior : OmReference [ '2515' ],		#self : OmReference [ '2516' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := Op2 - Rn\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := Op2 - Rn',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := Op2 - Rn class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := Op2 - Rn class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := Op2 - Rn',					#isMetaSide : false				},				#parent : @7,				#content : 'RSC',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRSC',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.208638-03:00' ],		#prior : OmReference [ '2516' ],		#self : OmReference [ '2517' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Reverse Subtract with Carry\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Reverse Subtract with Carry',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Reverse Subtract with Carry class\r\tinstanceVariableNames: \'\''				},				#name : #'Reverse Subtract with Carry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Reverse Subtract with Carry',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.215659-03:00' ],		#prior : OmReference [ '2517' ],		#self : OmReference [ '2518' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Reverse Subtract with Carry\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Reverse Subtract with Carry',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Reverse Subtract with Carry class\r\tinstanceVariableNames: \'\''				},				#name : #'Reverse Subtract with Carry class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Reverse Subtract with Carry',					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.219631-03:00' ],		#prior : OmReference [ '2518' ],		#self : OmReference [ '2519' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.227818-03:00' ],		#prior : OmReference [ '2519' ],		#self : OmReference [ '2520' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : 'Rd := Rn - Op2 - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rRd := Rn - Op2 - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.246895-03:00' ],		#prior : OmReference [ '2520' ],		#self : OmReference [ '2521' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.5\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.5,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.5 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.5 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.5,					#isMetaSide : false				},				#parent : @7,				#content : 'Store coprocessor register to',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'ARM7TDMI Data Sheet',		#newComment : '\rStore coprocessor register to',		#oldStamp : '<historical>',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.260577-03:00' ],		#prior : OmReference [ '2521' ],		#self : OmReference [ '2522' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'address := CRn\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'address := CRn',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'address := CRn class\r\tinstanceVariableNames: \'\''				},				#name : #'address := CRn class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'address := CRn',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.267631-03:00' ],		#prior : OmReference [ '2522' ],		#self : OmReference [ '2523' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'address := CRn\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'address := CRn',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'address := CRn class\r\tinstanceVariableNames: \'\''				},				#name : #'address := CRn class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'address := CRn',					#isMetaSide : false				},				#parent : @7,				#content : 'memory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rmemory',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.270001-03:00' ],		#prior : OmReference [ '2523' ],		#self : OmReference [ '2524' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.276872-03:00' ],		#prior : OmReference [ '2524' ],		#self : OmReference [ '2525' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : 'Stack manipulation (Push)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rStack manipulation (Push)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.297408-03:00' ],		#prior : OmReference [ '2525' ],		#self : OmReference [ '2526' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.11\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.11,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.11 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.11 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.11,					#isMetaSide : false				},				#parent : @7,				#content : 'Store register to memory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Load register from memory',		#newComment : '\rStore register to memory',		#oldStamp : '<historical>',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.310079-03:00' ],		#prior : OmReference [ '2526' ],		#self : OmReference [ '2527' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'<address> := Rd\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'<address> := Rd',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '<address> := Rd class\r\tinstanceVariableNames: \'\''				},				#name : #'<address> := Rd class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'<address> := Rd',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.31826-03:00' ],		#prior : OmReference [ '2527' ],		#self : OmReference [ '2528' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'<address> := Rd\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'<address> := Rd',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '<address> := Rd class\r\tinstanceVariableNames: \'\''				},				#name : #'<address> := Rd class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'<address> := Rd',					#isMetaSide : false				},				#parent : @7,				#content : 'SUB',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rSUB',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.321103-03:00' ],		#prior : OmReference [ '2528' ],		#self : OmReference [ '2529' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Subtract\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Subtract,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Subtract class\r\tinstanceVariableNames: \'\''				},				#name : #'Subtract class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Subtract,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.328252-03:00' ],		#prior : OmReference [ '2529' ],		#self : OmReference [ '2530' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Subtract\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Subtract,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Subtract class\r\tinstanceVariableNames: \'\''				},				#name : #'Subtract class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Subtract,					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.330589-03:00' ],		#prior : OmReference [ '2530' ],		#self : OmReference [ '2531' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.337251-03:00' ],		#prior : OmReference [ '2531' ],		#self : OmReference [ '2532' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : 'OS call',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rOS call',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.353895-03:00' ],		#prior : OmReference [ '2532' ],		#self : OmReference [ '2533' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.13\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.13,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.13 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.13 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.13,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.361138-03:00' ],		#prior : OmReference [ '2533' ],		#self : OmReference [ '2534' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'4.13\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #4.13,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : '4.13 class\r\tinstanceVariableNames: \'\''				},				#name : #'4.13 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #4.13,					#isMetaSide : false				},				#parent : @7,				#content : 'Swap register with memory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rSwap register with memory',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.378332-03:00' ],		#prior : OmReference [ '2534' ],		#self : OmReference [ '2535' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := [Rn], [Rn] := Rm\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := [Rn], [Rn] := Rm',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := [Rn], [Rn] := Rm class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := [Rn], [Rn] := Rm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := [Rn], [Rn] := Rm',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.386923-03:00' ],		#prior : OmReference [ '2535' ],		#self : OmReference [ '2536' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Rd := [Rn], [Rn] := Rm\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Rd := [Rn], [Rn] := Rm',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Rd := [Rn], [Rn] := Rm class\r\tinstanceVariableNames: \'\''				},				#name : #'Rd := [Rn], [Rn] := Rm class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Rd := [Rn], [Rn] := Rm',					#isMetaSide : false				},				#parent : @7,				#content : 'TEQ',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rTEQ',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.400711-03:00' ],		#prior : OmReference [ '2536' ],		#self : OmReference [ '2537' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Test bitwise equality\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Test bitwise equality',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Test bitwise equality class\r\tinstanceVariableNames: \'\''				},				#name : #'Test bitwise equality class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Test bitwise equality',					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.413869-03:00' ],		#prior : OmReference [ '2537' ],		#self : OmReference [ '2538' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #\'Test bitwise equality\'\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #'Test bitwise equality',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Test bitwise equality class\r\tinstanceVariableNames: \'\''				},				#name : #'Test bitwise equality class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #'Test bitwise equality',					#isMetaSide : false				},				#parent : @7,				#content : '4.5',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\r4.5',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.417275-03:00' ],		#prior : OmReference [ '2538' ],		#self : OmReference [ '2539' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:06:00.423943-03:00' ],		#prior : OmReference [ '2539' ],		#self : OmReference [ '2540' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : 'CPSR flags := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '\rCPSR flags := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:10:33.592042-03:00' ],		#prior : OmReference [ '2540' ],		#self : OmReference [ '2541' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name   ] whileTrue:[ name := input nextLine ].\r"\r"\r\tstrd := WriteStream on: input nextLine.\r\tstrd cr;\r\tnextPutAll: input nextLine.\r\t \r\tdescr := strd contents.\r\t\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr.\r\t',			#stamp : 'jmdc 2/22/2018 18:04',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileTrue: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:10',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:11:08.048392-03:00' ],		#prior : OmReference [ '2541' ],		#self : OmReference [ '2542' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:11:14.986461-03:00' ],		#prior : OmReference [ '2542' ],		#self : OmReference [ '2543' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry\rRd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:12:13.138053-03:00' ],		#prior : OmReference [ '2543' ],		#self : OmReference [ '2544' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileTrue: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:10',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:12',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:14:03.83278-03:00' ],		#prior : OmReference [ '2544' ],		#self : OmReference [ '2545' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:12',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileTrue: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:14',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:16:52.023266-03:00' ],		#prior : OmReference [ '2545' ],		#self : OmReference [ '2546' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:16:55.018615-03:00' ],		#prior : OmReference [ '2546' ],		#self : OmReference [ '2547' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry\rRd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:19:52.02028-03:00' ],		#prior : OmReference [ '2547' ],		#self : OmReference [ '2548' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString reject: [ :e | e = $: ]) size == 0 and: [ aString first asString isUppercase ] ]',			#stamp : 'jmdc 2/22/2018 18:02',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString select: [ :e | e = $: ]) size == 0 and: [ aString first asString isUppercase ] ]',			#stamp : 'jmdc 2/22/2018 18:19',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:21:31.04289-03:00' ],		#prior : OmReference [ '2548' ],		#self : OmReference [ '2549' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString select: [ :e | e = $: ]) size == 0 and: [ aString first asString isUppercase ] ]',			#stamp : 'jmdc 2/22/2018 18:19',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString select: [ :e | e = $: ]) size == 0 and: [ aString first  isUppercase ] ]',			#stamp : 'jmdc 2/22/2018 18:21',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:21:49.14687-03:00' ],		#prior : OmReference [ '2549' ],		#self : OmReference [ '2550' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileTrue: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:14',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:21',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:24.811969-03:00' ],		#prior : OmReference [ '2550' ],		#self : OmReference [ '2551' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:26.143511-03:00' ],		#prior : OmReference [ '2551' ],		#self : OmReference [ '2552' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry\rRd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.420199-03:00' ],		#prior : OmReference [ '2552' ],		#self : OmReference [ '2553' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.428168-03:00' ],		#prior : OmReference [ '2553' ],		#self : OmReference [ '2554' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add\rRd := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add\rRd := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.430679-03:00' ],		#prior : OmReference [ '2554' ],		#self : OmReference [ '2555' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.438888-03:00' ],		#prior : OmReference [ '2555' ],		#self : OmReference [ '2556' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND\rRd := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND\rRd := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.441274-03:00' ],		#prior : OmReference [ '2556' ],		#self : OmReference [ '2557' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.447023-03:00' ],		#prior : OmReference [ '2557' ],		#self : OmReference [ '2558' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch\rR15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.44928-03:00' ],		#prior : OmReference [ '2558' ],		#self : OmReference [ '2559' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.45647-03:00' ],		#prior : OmReference [ '2559' ],		#self : OmReference [ '2560' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear\rRd := Rn AND NOT Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear\rRd := Rn AND NOT Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.459096-03:00' ],		#prior : OmReference [ '2560' ],		#self : OmReference [ '2561' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.464431-03:00' ],		#prior : OmReference [ '2561' ],		#self : OmReference [ '2562' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link\rR14 := R15, R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link\rR14 := R15, R15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.467337-03:00' ],		#prior : OmReference [ '2562' ],		#self : OmReference [ '2563' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.473202-03:00' ],		#prior : OmReference [ '2563' ],		#self : OmReference [ '2564' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange\rR15 := Rn,',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange\rR15 := Rn,',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.475571-03:00' ],		#prior : OmReference [ '2564' ],		#self : OmReference [ '2565' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.480974-03:00' ],		#prior : OmReference [ '2565' ],		#self : OmReference [ '2566' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : 'Coprocesor Data Processing\r(Coprocessor-specific)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Coprocesor Data Processing\r(Coprocessor-specific)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.483794-03:00' ],		#prior : OmReference [ '2566' ],		#self : OmReference [ '2567' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.489146-03:00' ],		#prior : OmReference [ '2567' ],		#self : OmReference [ '2568' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare Negative\rCPSR flags := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare Negative\rCPSR flags := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.491446-03:00' ],		#prior : OmReference [ '2568' ],		#self : OmReference [ '2569' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.497302-03:00' ],		#prior : OmReference [ '2569' ],		#self : OmReference [ '2570' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare\rCPSR flags := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare\rCPSR flags := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.500296-03:00' ],		#prior : OmReference [ '2570' ],		#self : OmReference [ '2571' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:22:50.505697-03:00' ],		#prior : OmReference [ '2571' ],		#self : OmReference [ '2572' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : 'Exclusive OR\rRd := (Rn AND NOT Op2)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Exclusive OR\rRd := (Rn AND NOT Op2)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:05.383326-03:00' ],		#prior : OmReference [ '2572' ],		#self : OmReference [ '2573' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString select: [ :e | e = $: ]) size == 0 and: [ aString first  isUppercase ] ]',			#stamp : 'jmdc 2/22/2018 18:21',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString select: [ :e | e = $: ]) size == 0 and: [ aString first  isUppercase and:[ (aString select: [ :e | e = Character  space  ]) size == 0 ] ] ]',			#stamp : 'jmdc 2/22/2018 18:25',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:17.687908-03:00' ],		#prior : OmReference [ '2573' ],		#self : OmReference [ '2574' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand:\r\t\t\t[ (aString select: [ :e | e = $: ]) size == 0 and: [ aString first  isUppercase and:[ (aString select: [ :e | e = Character  space  ]) size == 0 ] ] ]',			#stamp : 'jmdc 2/22/2018 18:25',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #'isValidName:',			#protocol : #testing,			#sourceCode : 'isValidName: aString\r\t"\rreturns true if aString has valid class Names.\r"\r\r\t^ aString first ~= $4\r\t\tand: [ (aString select: [ :e | e = $: ]) size == 0\r\t\t\t\tand: [ aString first isUppercase\r\t\t\t\t\t\tand: [ (aString select: [ :e | e = Character space ]) size == 0 ] ] ]',			#stamp : 'jmdc 2/22/2018 18:25',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.286848-03:00' ],		#prior : OmReference [ '2574' ],		#self : OmReference [ '2575' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.296858-03:00' ],		#prior : OmReference [ '2575' ],		#self : OmReference [ '2576' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry\rRd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.299242-03:00' ],		#prior : OmReference [ '2576' ],		#self : OmReference [ '2577' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.305488-03:00' ],		#prior : OmReference [ '2577' ],		#self : OmReference [ '2578' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add\rRd := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add\rRd := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.307876-03:00' ],		#prior : OmReference [ '2578' ],		#self : OmReference [ '2579' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.31474-03:00' ],		#prior : OmReference [ '2579' ],		#self : OmReference [ '2580' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND\rRd := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND\rRd := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.317822-03:00' ],		#prior : OmReference [ '2580' ],		#self : OmReference [ '2581' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.323184-03:00' ],		#prior : OmReference [ '2581' ],		#self : OmReference [ '2582' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch\rR15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.325493-03:00' ],		#prior : OmReference [ '2582' ],		#self : OmReference [ '2583' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.33161-03:00' ],		#prior : OmReference [ '2583' ],		#self : OmReference [ '2584' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear\rRd := Rn AND NOT Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear\rRd := Rn AND NOT Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.333968-03:00' ],		#prior : OmReference [ '2584' ],		#self : OmReference [ '2585' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.339211-03:00' ],		#prior : OmReference [ '2585' ],		#self : OmReference [ '2586' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link\rR14 := R15, R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link\rR14 := R15, R15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.341459-03:00' ],		#prior : OmReference [ '2586' ],		#self : OmReference [ '2587' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.347838-03:00' ],		#prior : OmReference [ '2587' ],		#self : OmReference [ '2588' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange\rR15 := Rn,',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange\rR15 := Rn,',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.349987-03:00' ],		#prior : OmReference [ '2588' ],		#self : OmReference [ '2589' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.355001-03:00' ],		#prior : OmReference [ '2589' ],		#self : OmReference [ '2590' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : 'Coprocesor Data Processing\r(Coprocessor-specific)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Coprocesor Data Processing\r(Coprocessor-specific)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.357122-03:00' ],		#prior : OmReference [ '2590' ],		#self : OmReference [ '2591' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.36282-03:00' ],		#prior : OmReference [ '2591' ],		#self : OmReference [ '2592' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare Negative\rCPSR flags := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare Negative\rCPSR flags := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.365043-03:00' ],		#prior : OmReference [ '2592' ],		#self : OmReference [ '2593' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.370061-03:00' ],		#prior : OmReference [ '2593' ],		#self : OmReference [ '2594' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare\rCPSR flags := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare\rCPSR flags := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.372219-03:00' ],		#prior : OmReference [ '2594' ],		#self : OmReference [ '2595' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.378674-03:00' ],		#prior : OmReference [ '2595' ],		#self : OmReference [ '2596' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : 'Exclusive OR\rRd := (Rn AND NOT Op2)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Exclusive OR\rRd := (Rn AND NOT Op2)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.380967-03:00' ],		#prior : OmReference [ '2596' ],		#self : OmReference [ '2597' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDC class\r\tinstanceVariableNames: \'\''				},				#name : #'LDC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.387101-03:00' ],		#prior : OmReference [ '2597' ],		#self : OmReference [ '2598' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDC class\r\tinstanceVariableNames: \'\''				},				#name : #'LDC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDC,					#isMetaSide : false				},				#parent : @7,				#content : 'Load coprocessor from\rCoprocessor load',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load coprocessor from\rCoprocessor load',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.38933-03:00' ],		#prior : OmReference [ '2598' ],		#self : OmReference [ '2599' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.394458-03:00' ],		#prior : OmReference [ '2599' ],		#self : OmReference [ '2600' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : 'Load multiple registers\rStack manipulation (Pop)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load multiple registers\rStack manipulation (Pop)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.396698-03:00' ],		#prior : OmReference [ '2600' ],		#self : OmReference [ '2601' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDR class\r\tinstanceVariableNames: \'\''				},				#name : #'LDR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.402895-03:00' ],		#prior : OmReference [ '2601' ],		#self : OmReference [ '2602' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDR class\r\tinstanceVariableNames: \'\''				},				#name : #'LDR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDR,					#isMetaSide : false				},				#parent : @7,				#content : 'Load register from memory\rRd := (address)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load register from memory\rRd := (address)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.405203-03:00' ],		#prior : OmReference [ '2602' ],		#self : OmReference [ '2603' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MCR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MCR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MCR class\r\tinstanceVariableNames: \'\''				},				#name : #'MCR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MCR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.410996-03:00' ],		#prior : OmReference [ '2603' ],		#self : OmReference [ '2604' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MCR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MCR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MCR class\r\tinstanceVariableNames: \'\''				},				#name : #'MCR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MCR,					#isMetaSide : false				},				#parent : @7,				#content : 'Move CPU register to\rcRn := rRn {<op>cRm}',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move CPU register to\rcRn := rRn {<op>cRm}',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.413325-03:00' ],		#prior : OmReference [ '2604' ],		#self : OmReference [ '2605' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MLA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MLA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MLA class\r\tinstanceVariableNames: \'\''				},				#name : #'MLA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MLA,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.419517-03:00' ],		#prior : OmReference [ '2605' ],		#self : OmReference [ '2606' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MLA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MLA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MLA class\r\tinstanceVariableNames: \'\''				},				#name : #'MLA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MLA,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply Accumulate\rRd := (Rm * Rs) + Rn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Multiply Accumulate\rRd := (Rm * Rs) + Rn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.421689-03:00' ],		#prior : OmReference [ '2606' ],		#self : OmReference [ '2607' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.426866-03:00' ],		#prior : OmReference [ '2607' ],		#self : OmReference [ '2608' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : 'Move register or constant\rRd : = Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move register or constant\rRd : = Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.429199-03:00' ],		#prior : OmReference [ '2608' ],		#self : OmReference [ '2609' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRC class\r\tinstanceVariableNames: \'\''				},				#name : #'MRC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.435417-03:00' ],		#prior : OmReference [ '2609' ],		#self : OmReference [ '2610' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRC class\r\tinstanceVariableNames: \'\''				},				#name : #'MRC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRC,					#isMetaSide : false				},				#parent : @7,				#content : 'Move from coprocessor\rRn := cRn {<op>cRm}',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move from coprocessor\rRn := cRn {<op>cRm}',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.437664-03:00' ],		#prior : OmReference [ '2610' ],		#self : OmReference [ '2611' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.444602-03:00' ],		#prior : OmReference [ '2611' ],		#self : OmReference [ '2612' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : 'Move PSR status/flags to\rRn := PSR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move PSR status/flags to\rRn := PSR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.446816-03:00' ],		#prior : OmReference [ '2612' ],		#self : OmReference [ '2613' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MSR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MSR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MSR class\r\tinstanceVariableNames: \'\''				},				#name : #'MSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MSR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.452097-03:00' ],		#prior : OmReference [ '2613' ],		#self : OmReference [ '2614' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MSR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MSR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MSR class\r\tinstanceVariableNames: \'\''				},				#name : #'MSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MSR,					#isMetaSide : false				},				#parent : @7,				#content : 'Move register to PSR\rPSR := Rm',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move register to PSR\rPSR := Rm',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.454347-03:00' ],		#prior : OmReference [ '2614' ],		#self : OmReference [ '2615' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MUL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MUL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MUL class\r\tinstanceVariableNames: \'\''				},				#name : #'MUL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MUL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.460673-03:00' ],		#prior : OmReference [ '2615' ],		#self : OmReference [ '2616' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MUL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MUL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MUL class\r\tinstanceVariableNames: \'\''				},				#name : #'MUL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MUL,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply\rRd := Rm * Rs',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Multiply\rRd := Rm * Rs',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.46296-03:00' ],		#prior : OmReference [ '2616' ],		#self : OmReference [ '2617' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MVN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MVN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MVN class\r\tinstanceVariableNames: \'\''				},				#name : #'MVN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MVN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.468285-03:00' ],		#prior : OmReference [ '2617' ],		#self : OmReference [ '2618' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MVN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MVN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MVN class\r\tinstanceVariableNames: \'\''				},				#name : #'MVN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MVN,					#isMetaSide : false				},				#parent : @7,				#content : 'Move negative register\rRd := 0xFFFFFFFF EOR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move negative register\rRd := 0xFFFFFFFF EOR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.470501-03:00' ],		#prior : OmReference [ '2618' ],		#self : OmReference [ '2619' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.477628-03:00' ],		#prior : OmReference [ '2619' ],		#self : OmReference [ '2620' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : 'OR\rRd := Rn OR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'OR\rRd := Rn OR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.479791-03:00' ],		#prior : OmReference [ '2620' ],		#self : OmReference [ '2621' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.486018-03:00' ],		#prior : OmReference [ '2621' ],		#self : OmReference [ '2622' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : 'Instruction\rAction',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Instruction\rAction',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.488234-03:00' ],		#prior : OmReference [ '2622' ],		#self : OmReference [ '2623' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSB class\r\tinstanceVariableNames: \'\''				},				#name : #'RSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.493677-03:00' ],		#prior : OmReference [ '2623' ],		#self : OmReference [ '2624' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSB class\r\tinstanceVariableNames: \'\''				},				#name : #'RSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSB,					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract\rRd := Op2 - Rn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Reverse Subtract\rRd := Op2 - Rn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.495913-03:00' ],		#prior : OmReference [ '2624' ],		#self : OmReference [ '2625' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSC class\r\tinstanceVariableNames: \'\''				},				#name : #'RSC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.502511-03:00' ],		#prior : OmReference [ '2625' ],		#self : OmReference [ '2626' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSC class\r\tinstanceVariableNames: \'\''				},				#name : #'RSC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSC,					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract with Carry\rRd := Op2 - Rn - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Reverse Subtract with Carry\rRd := Op2 - Rn - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.504776-03:00' ],		#prior : OmReference [ '2626' ],		#self : OmReference [ '2627' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.510939-03:00' ],		#prior : OmReference [ '2627' ],		#self : OmReference [ '2628' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : 'Subtract with Carry\rRd := Rn - Op2 - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Subtract with Carry\rRd := Rn - Op2 - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.513256-03:00' ],		#prior : OmReference [ '2628' ],		#self : OmReference [ '2629' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STC class\r\tinstanceVariableNames: \'\''				},				#name : #'STC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.51974-03:00' ],		#prior : OmReference [ '2629' ],		#self : OmReference [ '2630' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STC class\r\tinstanceVariableNames: \'\''				},				#name : #'STC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STC,					#isMetaSide : false				},				#parent : @7,				#content : 'Store coprocessor register to\raddress := CRn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store coprocessor register to\raddress := CRn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.521907-03:00' ],		#prior : OmReference [ '2630' ],		#self : OmReference [ '2631' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.527473-03:00' ],		#prior : OmReference [ '2631' ],		#self : OmReference [ '2632' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : 'Store Multiple\rStack manipulation (Push)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store Multiple\rStack manipulation (Push)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.529822-03:00' ],		#prior : OmReference [ '2632' ],		#self : OmReference [ '2633' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STR class\r\tinstanceVariableNames: \'\''				},				#name : #'STR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.536449-03:00' ],		#prior : OmReference [ '2633' ],		#self : OmReference [ '2634' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STR class\r\tinstanceVariableNames: \'\''				},				#name : #'STR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STR,					#isMetaSide : false				},				#parent : @7,				#content : 'Store register to memory\r<address> := Rd',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store register to memory\r<address> := Rd',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.538805-03:00' ],		#prior : OmReference [ '2634' ],		#self : OmReference [ '2635' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SUB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SUB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SUB class\r\tinstanceVariableNames: \'\''				},				#name : #'SUB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SUB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.545916-03:00' ],		#prior : OmReference [ '2635' ],		#self : OmReference [ '2636' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SUB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SUB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SUB class\r\tinstanceVariableNames: \'\''				},				#name : #'SUB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SUB,					#isMetaSide : false				},				#parent : @7,				#content : 'Subtract\rRd := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Subtract\rRd := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.548072-03:00' ],		#prior : OmReference [ '2636' ],		#self : OmReference [ '2637' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.553676-03:00' ],		#prior : OmReference [ '2637' ],		#self : OmReference [ '2638' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : 'Software Interrupt\rOS call',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Software Interrupt\rOS call',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.555909-03:00' ],		#prior : OmReference [ '2638' ],		#self : OmReference [ '2639' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWP class\r\tinstanceVariableNames: \'\''				},				#name : #'SWP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.562654-03:00' ],		#prior : OmReference [ '2639' ],		#self : OmReference [ '2640' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWP class\r\tinstanceVariableNames: \'\''				},				#name : #'SWP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWP,					#isMetaSide : false				},				#parent : @7,				#content : 'Swap register with memory\rRd := [Rn], [Rn] := Rm',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Swap register with memory\rRd := [Rn], [Rn] := Rm',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.564996-03:00' ],		#prior : OmReference [ '2640' ],		#self : OmReference [ '2641' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TEQ\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TEQ,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TEQ class\r\tinstanceVariableNames: \'\''				},				#name : #'TEQ class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TEQ,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.570699-03:00' ],		#prior : OmReference [ '2641' ],		#self : OmReference [ '2642' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TEQ\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TEQ,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TEQ class\r\tinstanceVariableNames: \'\''				},				#name : #'TEQ class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TEQ,					#isMetaSide : false				},				#parent : @7,				#content : 'Test bitwise equality\rCPSR flags := Rn EOR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test bitwise equality\rCPSR flags := Rn EOR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.572905-03:00' ],		#prior : OmReference [ '2642' ],		#self : OmReference [ '2643' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:25:21.580492-03:00' ],		#prior : OmReference [ '2643' ],		#self : OmReference [ '2644' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : 'Test bits\rCPSR flags := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test bits\rCPSR flags := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:25.12924-03:00' ],		#prior : OmReference [ '2644' ],		#self : OmReference [ '2645' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:21',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\tinput  atEnd ifTrue:[ ^ self ].\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:26',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.460223-03:00' ],		#prior : OmReference [ '2645' ],		#self : OmReference [ '2646' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.468191-03:00' ],		#prior : OmReference [ '2646' ],		#self : OmReference [ '2647' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry\rRd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.471654-03:00' ],		#prior : OmReference [ '2647' ],		#self : OmReference [ '2648' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.478265-03:00' ],		#prior : OmReference [ '2648' ],		#self : OmReference [ '2649' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add\rRd := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add\rRd := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.48067-03:00' ],		#prior : OmReference [ '2649' ],		#self : OmReference [ '2650' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.485943-03:00' ],		#prior : OmReference [ '2650' ],		#self : OmReference [ '2651' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND\rRd := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND\rRd := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.488216-03:00' ],		#prior : OmReference [ '2651' ],		#self : OmReference [ '2652' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.494647-03:00' ],		#prior : OmReference [ '2652' ],		#self : OmReference [ '2653' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch\rR15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.49689-03:00' ],		#prior : OmReference [ '2653' ],		#self : OmReference [ '2654' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.502445-03:00' ],		#prior : OmReference [ '2654' ],		#self : OmReference [ '2655' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear\rRd := Rn AND NOT Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear\rRd := Rn AND NOT Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.506485-03:00' ],		#prior : OmReference [ '2655' ],		#self : OmReference [ '2656' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.511851-03:00' ],		#prior : OmReference [ '2656' ],		#self : OmReference [ '2657' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link\rR14 := R15, R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link\rR14 := R15, R15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.513966-03:00' ],		#prior : OmReference [ '2657' ],		#self : OmReference [ '2658' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.519851-03:00' ],		#prior : OmReference [ '2658' ],		#self : OmReference [ '2659' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange\rR15 := Rn,',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange\rR15 := Rn,',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.522061-03:00' ],		#prior : OmReference [ '2659' ],		#self : OmReference [ '2660' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.527108-03:00' ],		#prior : OmReference [ '2660' ],		#self : OmReference [ '2661' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : 'Coprocesor Data Processing\r(Coprocessor-specific)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Coprocesor Data Processing\r(Coprocessor-specific)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.529252-03:00' ],		#prior : OmReference [ '2661' ],		#self : OmReference [ '2662' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.535816-03:00' ],		#prior : OmReference [ '2662' ],		#self : OmReference [ '2663' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare Negative\rCPSR flags := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare Negative\rCPSR flags := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.53794-03:00' ],		#prior : OmReference [ '2663' ],		#self : OmReference [ '2664' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.542996-03:00' ],		#prior : OmReference [ '2664' ],		#self : OmReference [ '2665' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare\rCPSR flags := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare\rCPSR flags := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.545092-03:00' ],		#prior : OmReference [ '2665' ],		#self : OmReference [ '2666' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.55099-03:00' ],		#prior : OmReference [ '2666' ],		#self : OmReference [ '2667' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : 'Exclusive OR\rRd := (Rn AND NOT Op2)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Exclusive OR\rRd := (Rn AND NOT Op2)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.553209-03:00' ],		#prior : OmReference [ '2667' ],		#self : OmReference [ '2668' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDC class\r\tinstanceVariableNames: \'\''				},				#name : #'LDC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.558239-03:00' ],		#prior : OmReference [ '2668' ],		#self : OmReference [ '2669' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDC class\r\tinstanceVariableNames: \'\''				},				#name : #'LDC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDC,					#isMetaSide : false				},				#parent : @7,				#content : 'Load coprocessor from\rCoprocessor load',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load coprocessor from\rCoprocessor load',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.560389-03:00' ],		#prior : OmReference [ '2669' ],		#self : OmReference [ '2670' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.567055-03:00' ],		#prior : OmReference [ '2670' ],		#self : OmReference [ '2671' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : 'Load multiple registers\rStack manipulation (Pop)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load multiple registers\rStack manipulation (Pop)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.569172-03:00' ],		#prior : OmReference [ '2671' ],		#self : OmReference [ '2672' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDR class\r\tinstanceVariableNames: \'\''				},				#name : #'LDR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.575058-03:00' ],		#prior : OmReference [ '2672' ],		#self : OmReference [ '2673' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDR class\r\tinstanceVariableNames: \'\''				},				#name : #'LDR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDR,					#isMetaSide : false				},				#parent : @7,				#content : 'Load register from memory\rRd := (address)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load register from memory\rRd := (address)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.577276-03:00' ],		#prior : OmReference [ '2673' ],		#self : OmReference [ '2674' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MCR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MCR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MCR class\r\tinstanceVariableNames: \'\''				},				#name : #'MCR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MCR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.582369-03:00' ],		#prior : OmReference [ '2674' ],		#self : OmReference [ '2675' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MCR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MCR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MCR class\r\tinstanceVariableNames: \'\''				},				#name : #'MCR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MCR,					#isMetaSide : false				},				#parent : @7,				#content : 'Move CPU register to\rcRn := rRn {<op>cRm}',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move CPU register to\rcRn := rRn {<op>cRm}',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.584513-03:00' ],		#prior : OmReference [ '2675' ],		#self : OmReference [ '2676' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MLA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MLA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MLA class\r\tinstanceVariableNames: \'\''				},				#name : #'MLA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MLA,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.590695-03:00' ],		#prior : OmReference [ '2676' ],		#self : OmReference [ '2677' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MLA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MLA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MLA class\r\tinstanceVariableNames: \'\''				},				#name : #'MLA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MLA,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply Accumulate\rRd := (Rm * Rs) + Rn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Multiply Accumulate\rRd := (Rm * Rs) + Rn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.592889-03:00' ],		#prior : OmReference [ '2677' ],		#self : OmReference [ '2678' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.59878-03:00' ],		#prior : OmReference [ '2678' ],		#self : OmReference [ '2679' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : 'Move register or constant\rRd : = Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move register or constant\rRd : = Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.600947-03:00' ],		#prior : OmReference [ '2679' ],		#self : OmReference [ '2680' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRC class\r\tinstanceVariableNames: \'\''				},				#name : #'MRC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.607137-03:00' ],		#prior : OmReference [ '2680' ],		#self : OmReference [ '2681' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRC class\r\tinstanceVariableNames: \'\''				},				#name : #'MRC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRC,					#isMetaSide : false				},				#parent : @7,				#content : 'Move from coprocessor\rRn := cRn {<op>cRm}',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move from coprocessor\rRn := cRn {<op>cRm}',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.609267-03:00' ],		#prior : OmReference [ '2681' ],		#self : OmReference [ '2682' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.614437-03:00' ],		#prior : OmReference [ '2682' ],		#self : OmReference [ '2683' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : 'Move PSR status/flags to\rRn := PSR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move PSR status/flags to\rRn := PSR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.61657-03:00' ],		#prior : OmReference [ '2683' ],		#self : OmReference [ '2684' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MSR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MSR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MSR class\r\tinstanceVariableNames: \'\''				},				#name : #'MSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MSR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.622726-03:00' ],		#prior : OmReference [ '2684' ],		#self : OmReference [ '2685' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MSR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MSR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MSR class\r\tinstanceVariableNames: \'\''				},				#name : #'MSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MSR,					#isMetaSide : false				},				#parent : @7,				#content : 'Move register to PSR\rPSR := Rm',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move register to PSR\rPSR := Rm',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.624947-03:00' ],		#prior : OmReference [ '2685' ],		#self : OmReference [ '2686' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MUL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MUL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MUL class\r\tinstanceVariableNames: \'\''				},				#name : #'MUL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MUL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.631723-03:00' ],		#prior : OmReference [ '2686' ],		#self : OmReference [ '2687' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MUL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MUL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MUL class\r\tinstanceVariableNames: \'\''				},				#name : #'MUL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MUL,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply\rRd := Rm * Rs',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Multiply\rRd := Rm * Rs',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.633901-03:00' ],		#prior : OmReference [ '2687' ],		#self : OmReference [ '2688' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MVN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MVN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MVN class\r\tinstanceVariableNames: \'\''				},				#name : #'MVN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MVN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.639206-03:00' ],		#prior : OmReference [ '2688' ],		#self : OmReference [ '2689' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MVN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MVN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MVN class\r\tinstanceVariableNames: \'\''				},				#name : #'MVN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MVN,					#isMetaSide : false				},				#parent : @7,				#content : 'Move negative register\rRd := 0xFFFFFFFF EOR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move negative register\rRd := 0xFFFFFFFF EOR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.641298-03:00' ],		#prior : OmReference [ '2689' ],		#self : OmReference [ '2690' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.647697-03:00' ],		#prior : OmReference [ '2690' ],		#self : OmReference [ '2691' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : 'OR\rRd := Rn OR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'OR\rRd := Rn OR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.649894-03:00' ],		#prior : OmReference [ '2691' ],		#self : OmReference [ '2692' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.655277-03:00' ],		#prior : OmReference [ '2692' ],		#self : OmReference [ '2693' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : 'Instruction\rAction',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Instruction\rAction',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.657431-03:00' ],		#prior : OmReference [ '2693' ],		#self : OmReference [ '2694' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSB class\r\tinstanceVariableNames: \'\''				},				#name : #'RSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.6646-03:00' ],		#prior : OmReference [ '2694' ],		#self : OmReference [ '2695' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSB class\r\tinstanceVariableNames: \'\''				},				#name : #'RSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSB,					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract\rRd := Op2 - Rn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Reverse Subtract\rRd := Op2 - Rn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.666717-03:00' ],		#prior : OmReference [ '2695' ],		#self : OmReference [ '2696' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSC class\r\tinstanceVariableNames: \'\''				},				#name : #'RSC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.673156-03:00' ],		#prior : OmReference [ '2696' ],		#self : OmReference [ '2697' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSC class\r\tinstanceVariableNames: \'\''				},				#name : #'RSC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSC,					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract with Carry\rRd := Op2 - Rn - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Reverse Subtract with Carry\rRd := Op2 - Rn - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.675491-03:00' ],		#prior : OmReference [ '2697' ],		#self : OmReference [ '2698' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.681071-03:00' ],		#prior : OmReference [ '2698' ],		#self : OmReference [ '2699' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : 'Subtract with Carry\rRd := Rn - Op2 - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Subtract with Carry\rRd := Rn - Op2 - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.683232-03:00' ],		#prior : OmReference [ '2699' ],		#self : OmReference [ '2700' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STC class\r\tinstanceVariableNames: \'\''				},				#name : #'STC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.689626-03:00' ],		#prior : OmReference [ '2700' ],		#self : OmReference [ '2701' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STC class\r\tinstanceVariableNames: \'\''				},				#name : #'STC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STC,					#isMetaSide : false				},				#parent : @7,				#content : 'Store coprocessor register to\raddress := CRn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store coprocessor register to\raddress := CRn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.691867-03:00' ],		#prior : OmReference [ '2701' ],		#self : OmReference [ '2702' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.698136-03:00' ],		#prior : OmReference [ '2702' ],		#self : OmReference [ '2703' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : 'Store Multiple\rStack manipulation (Push)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store Multiple\rStack manipulation (Push)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.700328-03:00' ],		#prior : OmReference [ '2703' ],		#self : OmReference [ '2704' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STR class\r\tinstanceVariableNames: \'\''				},				#name : #'STR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.707017-03:00' ],		#prior : OmReference [ '2704' ],		#self : OmReference [ '2705' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STR class\r\tinstanceVariableNames: \'\''				},				#name : #'STR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STR,					#isMetaSide : false				},				#parent : @7,				#content : 'Store register to memory\r<address> := Rd',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store register to memory\r<address> := Rd',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.709206-03:00' ],		#prior : OmReference [ '2705' ],		#self : OmReference [ '2706' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SUB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SUB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SUB class\r\tinstanceVariableNames: \'\''				},				#name : #'SUB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SUB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.714724-03:00' ],		#prior : OmReference [ '2706' ],		#self : OmReference [ '2707' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SUB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SUB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SUB class\r\tinstanceVariableNames: \'\''				},				#name : #'SUB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SUB,					#isMetaSide : false				},				#parent : @7,				#content : 'Subtract\rRd := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Subtract\rRd := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.716842-03:00' ],		#prior : OmReference [ '2707' ],		#self : OmReference [ '2708' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.723696-03:00' ],		#prior : OmReference [ '2708' ],		#self : OmReference [ '2709' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : 'Software Interrupt\rOS call',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Software Interrupt\rOS call',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.725911-03:00' ],		#prior : OmReference [ '2709' ],		#self : OmReference [ '2710' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWP class\r\tinstanceVariableNames: \'\''				},				#name : #'SWP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.732436-03:00' ],		#prior : OmReference [ '2710' ],		#self : OmReference [ '2711' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWP class\r\tinstanceVariableNames: \'\''				},				#name : #'SWP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWP,					#isMetaSide : false				},				#parent : @7,				#content : 'Swap register with memory\rRd := [Rn], [Rn] := Rm',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Swap register with memory\rRd := [Rn], [Rn] := Rm',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.734581-03:00' ],		#prior : OmReference [ '2711' ],		#self : OmReference [ '2712' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TEQ\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TEQ,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TEQ class\r\tinstanceVariableNames: \'\''				},				#name : #'TEQ class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TEQ,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.740151-03:00' ],		#prior : OmReference [ '2712' ],		#self : OmReference [ '2713' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TEQ\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TEQ,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TEQ class\r\tinstanceVariableNames: \'\''				},				#name : #'TEQ class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TEQ,					#isMetaSide : false				},				#parent : @7,				#content : 'Test bitwise equality\rCPSR flags := Rn EOR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test bitwise equality\rCPSR flags := Rn EOR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.742296-03:00' ],		#prior : OmReference [ '2713' ],		#self : OmReference [ '2714' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:26:34.748529-03:00' ],		#prior : OmReference [ '2714' ],		#self : OmReference [ '2715' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : 'Test bits\rCPSR flags := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test bits\rCPSR flags := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:28:17.64011-03:00' ],		#prior : OmReference [ '2715' ],		#self : OmReference [ '2716' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\tinput  atEnd ifTrue:[ ^ self ].\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\tclass comment: descr',			#stamp : 'jmdc 2/22/2018 18:26',			#package : #Educia-tools		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SetGenerator,				#isMetaSide : false			},			#name : #generateClass,			#protocol : #translating,			#sourceCode : 'generateClass\r\t| name descr class strd |\r\tname := input nextLine.\r\t"\r\t"\r\tinput  atEnd ifTrue:[ ^ self ].\r\t[ self isValidName: name ] whileFalse: [ name := input nextLine ].\r\t"\r"\r\tstrd := WriteStream on: String new.\r\tstrd\r\t\tnextPutAll: input nextLine;\r\t\tcr;\r\t\tnextPutAll: input nextLine.\r\tdescr := strd contents.\r\tclass := Instruccions\r\t\tsubclass: name asSymbol\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpackage: \'Educia-Core\'.\r\t\t\r\tclass comment: descr.',			#stamp : 'jmdc 2/22/2018 18:28',			#package : #Educia-tools		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:32:41.317212-03:00' ],		#prior : OmReference [ '2716' ],		#self : OmReference [ '2717' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\tself allSubclasses do:[ :each |   Smalltalk removeKey: each name ifAbsent:[]  ].',			#stamp : 'jmdc 2/22/2018 17:45',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\t"self allSubclasses do:[ :each |   Smalltalk removeKey: each name ifAbsent:[]  ]."\r\t\rInstruccions allSubclasses do:[ :each |  Instruccions removeSubclass: each  ] ',			#stamp : 'jmdc 2/22/2018 18:32',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:32:47.685826-03:00' ],		#prior : OmReference [ '2717' ],		#self : OmReference [ '2718' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\r\t"self allSubclasses do:[ :each |   Smalltalk removeKey: each name ifAbsent:[]  ]."\r\t\rInstruccions allSubclasses do:[ :each |  Instruccions removeSubclass: each  ] ',			#stamp : 'jmdc 2/22/2018 18:32',			#package : #Educia-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Instruccions class',				#isMetaSide : true			},			#name : #clear,			#protocol : #accessing,			#sourceCode : 'clear\r\t"self allSubclasses do:[ :each |   Smalltalk removeKey: each name ifAbsent:[]  ]."\r\r\tInstruccions allSubclasses do: [ :each | Instruccions removeSubclass: each ]',			#stamp : 'jmdc 2/22/2018 18:32',			#package : #Educia-Core		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:32:53.846664-03:00' ],		#prior : OmReference [ '2718' ],		#self : OmReference [ '2719' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'Educia-Core-jmdc.2',		#repositoryDescription : '/home/juan/Documents/Pharo-Educia/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.327694-03:00' ],		#prior : OmReference [ '2719' ],		#self : OmReference [ '2720' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.489043-03:00' ],		#prior : OmReference [ '2720' ],		#self : OmReference [ '2721' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADC class\r\tinstanceVariableNames: \'\''				},				#name : #'ADC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADC,					#isMetaSide : false				},				#parent : @7,				#content : 'Add with carry\rRd := Rn + Op2 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add with carry\rRd := Rn + Op2 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.492733-03:00' ],		#prior : OmReference [ '2721' ],		#self : OmReference [ '2722' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.499441-03:00' ],		#prior : OmReference [ '2722' ],		#self : OmReference [ '2723' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ADD\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ADD,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ADD class\r\tinstanceVariableNames: \'\''				},				#name : #'ADD class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ADD,					#isMetaSide : false				},				#parent : @7,				#content : 'Add\rRd := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add\rRd := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.501834-03:00' ],		#prior : OmReference [ '2723' ],		#self : OmReference [ '2724' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.507238-03:00' ],		#prior : OmReference [ '2724' ],		#self : OmReference [ '2725' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #AND\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #AND,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AND class\r\tinstanceVariableNames: \'\''				},				#name : #'AND class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AND,					#isMetaSide : false				},				#parent : @7,				#content : 'AND\rRd := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AND\rRd := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.509523-03:00' ],		#prior : OmReference [ '2725' ],		#self : OmReference [ '2726' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.516026-03:00' ],		#prior : OmReference [ '2726' ],		#self : OmReference [ '2727' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #B\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #B,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'B class\r\tinstanceVariableNames: \'\''				},				#name : #'B class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #B,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch\rR15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch\rR15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.518331-03:00' ],		#prior : OmReference [ '2727' ],		#self : OmReference [ '2728' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.525117-03:00' ],		#prior : OmReference [ '2728' ],		#self : OmReference [ '2729' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BIC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BIC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BIC class\r\tinstanceVariableNames: \'\''				},				#name : #'BIC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BIC,					#isMetaSide : false				},				#parent : @7,				#content : 'Bit Clear\rRd := Rn AND NOT Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Bit Clear\rRd := Rn AND NOT Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.52734-03:00' ],		#prior : OmReference [ '2729' ],		#self : OmReference [ '2730' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.534453-03:00' ],		#prior : OmReference [ '2730' ],		#self : OmReference [ '2731' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BL class\r\tinstanceVariableNames: \'\''				},				#name : #'BL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BL,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch with Link\rR14 := R15, R15 := address',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch with Link\rR14 := R15, R15 := address',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.536706-03:00' ],		#prior : OmReference [ '2731' ],		#self : OmReference [ '2732' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.542112-03:00' ],		#prior : OmReference [ '2732' ],		#self : OmReference [ '2733' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #BX\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #BX,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BX class\r\tinstanceVariableNames: \'\''				},				#name : #'BX class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BX,					#isMetaSide : false				},				#parent : @7,				#content : 'Branch and Exchange\rR15 := Rn,',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Branch and Exchange\rR15 := Rn,',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.544358-03:00' ],		#prior : OmReference [ '2733' ],		#self : OmReference [ '2734' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.550366-03:00' ],		#prior : OmReference [ '2734' ],		#self : OmReference [ '2735' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CDP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CDP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CDP class\r\tinstanceVariableNames: \'\''				},				#name : #'CDP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CDP,					#isMetaSide : false				},				#parent : @7,				#content : 'Coprocesor Data Processing\r(Coprocessor-specific)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Coprocesor Data Processing\r(Coprocessor-specific)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.552633-03:00' ],		#prior : OmReference [ '2735' ],		#self : OmReference [ '2736' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.559571-03:00' ],		#prior : OmReference [ '2736' ],		#self : OmReference [ '2737' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMN class\r\tinstanceVariableNames: \'\''				},				#name : #'CMN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMN,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare Negative\rCPSR flags := Rn + Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare Negative\rCPSR flags := Rn + Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.561801-03:00' ],		#prior : OmReference [ '2737' ],		#self : OmReference [ '2738' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.567281-03:00' ],		#prior : OmReference [ '2738' ],		#self : OmReference [ '2739' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #CMP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #CMP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CMP class\r\tinstanceVariableNames: \'\''				},				#name : #'CMP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CMP,					#isMetaSide : false				},				#parent : @7,				#content : 'Compare\rCPSR flags := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Compare\rCPSR flags := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.569498-03:00' ],		#prior : OmReference [ '2739' ],		#self : OmReference [ '2740' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.575572-03:00' ],		#prior : OmReference [ '2740' ],		#self : OmReference [ '2741' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #EOR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #EOR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'EOR class\r\tinstanceVariableNames: \'\''				},				#name : #'EOR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #EOR,					#isMetaSide : false				},				#parent : @7,				#content : 'Exclusive OR\rRd := (Rn AND NOT Op2)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Exclusive OR\rRd := (Rn AND NOT Op2)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.577809-03:00' ],		#prior : OmReference [ '2741' ],		#self : OmReference [ '2742' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDC class\r\tinstanceVariableNames: \'\''				},				#name : #'LDC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.583325-03:00' ],		#prior : OmReference [ '2742' ],		#self : OmReference [ '2743' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDC class\r\tinstanceVariableNames: \'\''				},				#name : #'LDC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDC,					#isMetaSide : false				},				#parent : @7,				#content : 'Load coprocessor from\rCoprocessor load',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load coprocessor from\rCoprocessor load',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.585633-03:00' ],		#prior : OmReference [ '2743' ],		#self : OmReference [ '2744' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.592578-03:00' ],		#prior : OmReference [ '2744' ],		#self : OmReference [ '2745' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDM class\r\tinstanceVariableNames: \'\''				},				#name : #'LDM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDM,					#isMetaSide : false				},				#parent : @7,				#content : 'Load multiple registers\rStack manipulation (Pop)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load multiple registers\rStack manipulation (Pop)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.594734-03:00' ],		#prior : OmReference [ '2745' ],		#self : OmReference [ '2746' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDR class\r\tinstanceVariableNames: \'\''				},				#name : #'LDR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.600728-03:00' ],		#prior : OmReference [ '2746' ],		#self : OmReference [ '2747' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #LDR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #LDR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LDR class\r\tinstanceVariableNames: \'\''				},				#name : #'LDR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LDR,					#isMetaSide : false				},				#parent : @7,				#content : 'Load register from memory\rRd := (address)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Load register from memory\rRd := (address)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.602938-03:00' ],		#prior : OmReference [ '2747' ],		#self : OmReference [ '2748' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MCR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MCR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MCR class\r\tinstanceVariableNames: \'\''				},				#name : #'MCR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MCR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.608586-03:00' ],		#prior : OmReference [ '2748' ],		#self : OmReference [ '2749' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MCR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MCR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MCR class\r\tinstanceVariableNames: \'\''				},				#name : #'MCR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MCR,					#isMetaSide : false				},				#parent : @7,				#content : 'Move CPU register to\rcRn := rRn {<op>cRm}',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move CPU register to\rcRn := rRn {<op>cRm}',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.61084-03:00' ],		#prior : OmReference [ '2749' ],		#self : OmReference [ '2750' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MLA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MLA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MLA class\r\tinstanceVariableNames: \'\''				},				#name : #'MLA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MLA,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.61713-03:00' ],		#prior : OmReference [ '2750' ],		#self : OmReference [ '2751' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MLA\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MLA,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MLA class\r\tinstanceVariableNames: \'\''				},				#name : #'MLA class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MLA,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply Accumulate\rRd := (Rm * Rs) + Rn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Multiply Accumulate\rRd := (Rm * Rs) + Rn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.619405-03:00' ],		#prior : OmReference [ '2751' ],		#self : OmReference [ '2752' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.625873-03:00' ],		#prior : OmReference [ '2752' ],		#self : OmReference [ '2753' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MOV\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MOV,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MOV class\r\tinstanceVariableNames: \'\''				},				#name : #'MOV class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MOV,					#isMetaSide : false				},				#parent : @7,				#content : 'Move register or constant\rRd : = Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move register or constant\rRd : = Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.628157-03:00' ],		#prior : OmReference [ '2753' ],		#self : OmReference [ '2754' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRC class\r\tinstanceVariableNames: \'\''				},				#name : #'MRC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.63456-03:00' ],		#prior : OmReference [ '2754' ],		#self : OmReference [ '2755' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRC class\r\tinstanceVariableNames: \'\''				},				#name : #'MRC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRC,					#isMetaSide : false				},				#parent : @7,				#content : 'Move from coprocessor\rRn := cRn {<op>cRm}',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move from coprocessor\rRn := cRn {<op>cRm}',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.636846-03:00' ],		#prior : OmReference [ '2755' ],		#self : OmReference [ '2756' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.643192-03:00' ],		#prior : OmReference [ '2756' ],		#self : OmReference [ '2757' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MRS\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MRS,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MRS class\r\tinstanceVariableNames: \'\''				},				#name : #'MRS class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MRS,					#isMetaSide : false				},				#parent : @7,				#content : 'Move PSR status/flags to\rRn := PSR',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move PSR status/flags to\rRn := PSR',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.645495-03:00' ],		#prior : OmReference [ '2757' ],		#self : OmReference [ '2758' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MSR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MSR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MSR class\r\tinstanceVariableNames: \'\''				},				#name : #'MSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MSR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.651221-03:00' ],		#prior : OmReference [ '2758' ],		#self : OmReference [ '2759' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MSR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MSR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MSR class\r\tinstanceVariableNames: \'\''				},				#name : #'MSR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MSR,					#isMetaSide : false				},				#parent : @7,				#content : 'Move register to PSR\rPSR := Rm',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move register to PSR\rPSR := Rm',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.653605-03:00' ],		#prior : OmReference [ '2759' ],		#self : OmReference [ '2760' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MUL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MUL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MUL class\r\tinstanceVariableNames: \'\''				},				#name : #'MUL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MUL,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.660926-03:00' ],		#prior : OmReference [ '2760' ],		#self : OmReference [ '2761' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MUL\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MUL,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MUL class\r\tinstanceVariableNames: \'\''				},				#name : #'MUL class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MUL,					#isMetaSide : false				},				#parent : @7,				#content : 'Multiply\rRd := Rm * Rs',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Multiply\rRd := Rm * Rs',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.663091-03:00' ],		#prior : OmReference [ '2761' ],		#self : OmReference [ '2762' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MVN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MVN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MVN class\r\tinstanceVariableNames: \'\''				},				#name : #'MVN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MVN,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.669011-03:00' ],		#prior : OmReference [ '2762' ],		#self : OmReference [ '2763' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #MVN\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #MVN,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MVN class\r\tinstanceVariableNames: \'\''				},				#name : #'MVN class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MVN,					#isMetaSide : false				},				#parent : @7,				#content : 'Move negative register\rRd := 0xFFFFFFFF EOR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move negative register\rRd := 0xFFFFFFFF EOR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.671265-03:00' ],		#prior : OmReference [ '2763' ],		#self : OmReference [ '2764' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.677792-03:00' ],		#prior : OmReference [ '2764' ],		#self : OmReference [ '2765' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #ORR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #ORR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ORR class\r\tinstanceVariableNames: \'\''				},				#name : #'ORR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ORR,					#isMetaSide : false				},				#parent : @7,				#content : 'OR\rRd := Rn OR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'OR\rRd := Rn OR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.680057-03:00' ],		#prior : OmReference [ '2765' ],		#self : OmReference [ '2766' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.68646-03:00' ],		#prior : OmReference [ '2766' ],		#self : OmReference [ '2767' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'Mnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Mnemonic,					#isMetaSide : false				},				#parent : @7,				#content : 'Instruction\rAction',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Instruction\rAction',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.688773-03:00' ],		#prior : OmReference [ '2767' ],		#self : OmReference [ '2768' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSB class\r\tinstanceVariableNames: \'\''				},				#name : #'RSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.695552-03:00' ],		#prior : OmReference [ '2768' ],		#self : OmReference [ '2769' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSB class\r\tinstanceVariableNames: \'\''				},				#name : #'RSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSB,					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract\rRd := Op2 - Rn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Reverse Subtract\rRd := Op2 - Rn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.697884-03:00' ],		#prior : OmReference [ '2769' ],		#self : OmReference [ '2770' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSC class\r\tinstanceVariableNames: \'\''				},				#name : #'RSC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.704762-03:00' ],		#prior : OmReference [ '2770' ],		#self : OmReference [ '2771' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #RSC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #RSC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'RSC class\r\tinstanceVariableNames: \'\''				},				#name : #'RSC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #RSC,					#isMetaSide : false				},				#parent : @7,				#content : 'Reverse Subtract with Carry\rRd := Op2 - Rn - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Reverse Subtract with Carry\rRd := Op2 - Rn - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.707028-03:00' ],		#prior : OmReference [ '2771' ],		#self : OmReference [ '2772' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.71317-03:00' ],		#prior : OmReference [ '2772' ],		#self : OmReference [ '2773' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SBC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SBC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SBC class\r\tinstanceVariableNames: \'\''				},				#name : #'SBC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SBC,					#isMetaSide : false				},				#parent : @7,				#content : 'Subtract with Carry\rRd := Rn - Op2 - 1 + Carry',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Subtract with Carry\rRd := Rn - Op2 - 1 + Carry',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.715372-03:00' ],		#prior : OmReference [ '2773' ],		#self : OmReference [ '2774' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STC class\r\tinstanceVariableNames: \'\''				},				#name : #'STC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STC,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.721968-03:00' ],		#prior : OmReference [ '2774' ],		#self : OmReference [ '2775' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STC\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STC,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STC class\r\tinstanceVariableNames: \'\''				},				#name : #'STC class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STC,					#isMetaSide : false				},				#parent : @7,				#content : 'Store coprocessor register to\raddress := CRn',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store coprocessor register to\raddress := CRn',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.724316-03:00' ],		#prior : OmReference [ '2775' ],		#self : OmReference [ '2776' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.731841-03:00' ],		#prior : OmReference [ '2776' ],		#self : OmReference [ '2777' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STM\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STM,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STM class\r\tinstanceVariableNames: \'\''				},				#name : #'STM class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STM,					#isMetaSide : false				},				#parent : @7,				#content : 'Store Multiple\rStack manipulation (Push)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store Multiple\rStack manipulation (Push)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.734105-03:00' ],		#prior : OmReference [ '2777' ],		#self : OmReference [ '2778' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STR class\r\tinstanceVariableNames: \'\''				},				#name : #'STR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STR,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.740248-03:00' ],		#prior : OmReference [ '2778' ],		#self : OmReference [ '2779' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #STR\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #STR,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STR class\r\tinstanceVariableNames: \'\''				},				#name : #'STR class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STR,					#isMetaSide : false				},				#parent : @7,				#content : 'Store register to memory\r<address> := Rd',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Store register to memory\r<address> := Rd',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.742465-03:00' ],		#prior : OmReference [ '2779' ],		#self : OmReference [ '2780' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SUB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SUB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SUB class\r\tinstanceVariableNames: \'\''				},				#name : #'SUB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SUB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.749551-03:00' ],		#prior : OmReference [ '2780' ],		#self : OmReference [ '2781' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SUB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SUB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SUB class\r\tinstanceVariableNames: \'\''				},				#name : #'SUB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SUB,					#isMetaSide : false				},				#parent : @7,				#content : 'Subtract\rRd := Rn - Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Subtract\rRd := Rn - Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.751861-03:00' ],		#prior : OmReference [ '2781' ],		#self : OmReference [ '2782' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.758698-03:00' ],		#prior : OmReference [ '2782' ],		#self : OmReference [ '2783' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWI\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWI class\r\tinstanceVariableNames: \'\''				},				#name : #'SWI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWI,					#isMetaSide : false				},				#parent : @7,				#content : 'Software Interrupt\rOS call',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Software Interrupt\rOS call',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.761136-03:00' ],		#prior : OmReference [ '2783' ],		#self : OmReference [ '2784' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWP class\r\tinstanceVariableNames: \'\''				},				#name : #'SWP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWP,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.768118-03:00' ],		#prior : OmReference [ '2784' ],		#self : OmReference [ '2785' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #SWP\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #SWP,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SWP class\r\tinstanceVariableNames: \'\''				},				#name : #'SWP class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SWP,					#isMetaSide : false				},				#parent : @7,				#content : 'Swap register with memory\rRd := [Rn], [Rn] := Rm',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Swap register with memory\rRd := [Rn], [Rn] := Rm',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.770276-03:00' ],		#prior : OmReference [ '2785' ],		#self : OmReference [ '2786' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TEQ\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TEQ,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TEQ class\r\tinstanceVariableNames: \'\''				},				#name : #'TEQ class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TEQ,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.777262-03:00' ],		#prior : OmReference [ '2786' ],		#self : OmReference [ '2787' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TEQ\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TEQ,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TEQ class\r\tinstanceVariableNames: \'\''				},				#name : #'TEQ class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TEQ,					#isMetaSide : false				},				#parent : @7,				#content : 'Test bitwise equality\rCPSR flags := Rn EOR Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test bitwise equality\rCPSR flags := Rn EOR Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.779488-03:00' ],		#prior : OmReference [ '2787' ],		#self : OmReference [ '2788' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:06.786104-03:00' ],		#prior : OmReference [ '2788' ],		#self : OmReference [ '2789' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #TST\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Educia-Core\''			},			#name : #TST,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TST class\r\tinstanceVariableNames: \'\''				},				#name : #'TST class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TST,					#isMetaSide : false				},				#parent : @7,				#content : 'Test bits\rCPSR flags := Rn AND Op2',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Test bits\rCPSR flags := Rn AND Op2',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-02-22T18:33:18.261946-03:00' ],		#prior : OmReference [ '2789' ],		#self : OmReference [ '2790' ]	},	#content : EpGenericRefactoring {		#storeString : '(RBRemoveClassRefactoring classNames: #(#Mnemonic ))'	}}OmEntry {	#tags : {		#author : 'jmdc',		#prior : OmReference [ '2790' ],		#self : OmReference [ '2791' ],		#time : DateAndTime [ '2018-02-22T18:33:18.329997-03:00' ],		#trigger : @3	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Instruccions',				#traitCompositionSource : '{}',				#definitionSource : 'Instruccions subclass: #Mnemonic\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #\'Educia-Core\''			},			#name : #Mnemonic,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Mnemonic class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoleteMnemonic class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoleteMnemonic,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Educia-Core,			#package : #Educia-Core,			#sharedPools : OrderedCollection [ ]		}	}}