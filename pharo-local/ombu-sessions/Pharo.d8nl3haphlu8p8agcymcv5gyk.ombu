OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:05:43.402945-03:00' ],		#prior : OmReference [ 'Pharo.1vktskefebz4yy46093q9xvhn', '8' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray do: [ :each | (each at: 1) isDigit  ifFalse:[ col add: each  ]].\r\telementArray := col asArray. \r\t',			#stamp : 'jmdc 3/16/2018 16:55',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray do: [ :each | ((each at: 1) isDigit and:[ (each at:1) =\'<address> := Rd\'])ifFalse:[ col add: each  ]].\r\telementArray := col asArray. \r\t',			#stamp : 'jmdc 3/16/2018 17:05',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:05:50.166586-03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray do: [ :each | ((each at: 1) isDigit and:[ (each at:1) =\'<address> := Rd\'])ifFalse:[ col add: each  ]].\r\telementArray := col asArray. \r\t',			#stamp : 'jmdc 3/16/2018 17:05',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = \'<address> := Rd\' ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:05',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:08:03.58175-03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = \'<address> := Rd\' ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:05',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 2) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:08',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:09:13.98993-03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 2) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:08',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:09',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:10:50.928749-03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:09',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) ~= $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:10',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:12:19.064847-03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) ~= $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:10',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:12',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:17:50.910831-03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:12',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ].\r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:17',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:20:51.363078-03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ].\r\t\t\t((each at: 1) isDigit and: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:17',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:20',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:24:00.45819-03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:20',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< or: [ each = \'Branch with Link\' ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:24',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:26:35.99717-03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< or: [ each = \'Branch with Link\' ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:24',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< or: [ each = \'Branch with Link\' or:[ each = \'CPSR flags := Rn - Op2\'] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:26',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:26:47.580856-03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< or: [ each = \'Branch with Link\' or:[ each = \'CPSR flags := Rn - Op2\'] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:26',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< or: [ each = \'Branch with Link\' or: [ each = \'CPSR flags := Rn - Op2\' ] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:26',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:29:09.701837-03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit or: [ (each at: 1) = $< or: [ each = \'Branch with Link\' or: [ each = \'CPSR flags := Rn - Op2\' ] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:26',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit\r\t\t\t\tor: [ (each at: 1) = $< or: [ each = \'Branch with Link\' or: [ each = \'CPSR flags := Rn - Op2\' or: [ each = \'Coprocesor Data Processing\' ] ] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:29',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:31:00.425421-03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit\r\t\t\t\tor: [ (each at: 1) = $< or: [ each = \'Branch with Link\' or: [ each = \'CPSR flags := Rn - Op2\' or: [ each = \'Coprocesor Data Processing\' ] ] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:29',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit\r\t\t\t\tor: [ (each at: 1) = $<\r\t\t\t\t\t\tor: [ each = \'Branch with Link\'\r\t\t\t\t\t\t\t\tor: [ each = \'CPSR flags := Rn - Op2\'\r\t\t\t\t\t\t\t\t\t\tor: [ each = \'Coprocesor Data Processing\' or: [ each = \'Coprocessor load\' ] ] ] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:31',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:33:00.652623-03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t((each at: 1) isDigit\r\t\t\t\tor: [ (each at: 1) = $<\r\t\t\t\t\t\tor: [ each = \'Branch with Link\'\r\t\t\t\t\t\t\t\tor: [ each = \'CPSR flags := Rn - Op2\'\r\t\t\t\t\t\t\t\t\t\tor: [ each = \'Coprocesor Data Processing\' or: [ each = \'Coprocessor load\' ] ] ] ] ])\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:31',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Exclusive OR\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:33',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:34:03.0913-03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Exclusive OR\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:33',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Move CPU register to\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:34',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:35:02.432182-03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Move CPU register to\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:34',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Move negative register\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:35',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:36:09.673661-03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Move negative register\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:35',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Move register to PSR\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:36',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:37:00.704875-03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Move register to PSR\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:36',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Multiply Accumulate\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:37',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:37:58.56875-03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Multiply Accumulate\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:37',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'OR (op2 AND NOT Rn)\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:37',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:38:53.609671-03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'OR (op2 AND NOT Rn)\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:37',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Open Access\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:38',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:39:50.445-03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Open Access\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:38',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Rd := (address)\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:39',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:40:50.297019-03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Rd := (address)\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:39',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Rd := Op2 - Rn\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:40',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:43:10.347212-03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Rd := Op2 - Rn\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:40',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Rd := Rm * Rs\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:43',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:44:02.36845-03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\teach = \'Rd := Rm * Rs\'\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:43',			#package : #Kernel		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Categorizer,				#isMetaSide : false			},			#name : #cleanMess,			#protocol : #'as yet unclassified',			#sourceCode : 'cleanMess\r\t| col arr |\r\tarr := elementArray.\r\tcol := OrderedCollection new.\r\telementArray\r\t\tdo: [ :each | \r\t\t\t"(each at: 1) = $<\r\t\t\t\tifTrue: [ self halt ]."\r\t\t\t(self isValid:each )\r\t\t\t\tifFalse: [ col add: each ] ].\r\telementArray := col asArray',			#stamp : 'jmdc 3/16/2018 17:44',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:44:41.669488-03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\tself shouldBeImplemented.',			#stamp : 'jmdc 3/16/2018 17:44',			#package : #System-Support		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:45:29.023834-03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\tself shouldBeImplemented.',			#stamp : 'jmdc 3/16/2018 17:44',			#package : #System-Support		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\t\r^ aString indexOf:\'#$*:=\' = 0 ',			#stamp : 'jmdc 3/16/2018 17:45',			#package : #System-Support		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:45:38.560812-03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\t\r^ aString indexOf:\'#$*:=\' = 0 ',			#stamp : 'jmdc 3/16/2018 17:45',			#package : #System-Support		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\t\r^ aString indexOf:\'#$*:=)(\' = 0 ',			#stamp : 'jmdc 3/16/2018 17:45',			#package : #System-Support		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:46:08.869707-03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\t\r^ aString indexOf:\'#$*:=)(\' = 0 ',			#stamp : 'jmdc 3/16/2018 17:45',			#package : #System-Support		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\t\r^ (aString indexOf:\'#$*:=)(\' = 0)',			#stamp : 'jmdc 3/16/2018 17:46',			#package : #System-Support		}	}}OmEntry {	#tags : {		#author : 'jmdc',		#time : DateAndTime [ '2018-03-16T17:48:34.757435-03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString \r\t\r^ (aString indexOf:\'#$*:=)(\' = 0)',			#stamp : 'jmdc 3/16/2018 17:46',			#package : #System-Support		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemOrganizer,				#isMetaSide : false			},			#name : #'isValid:',			#protocol : #test,			#sourceCode : 'isValid: aString\r\t^ ((aString indexOf: \'#$*:=)(\') == 0)',			#stamp : 'jmdc 3/16/2018 17:48',			#package : #System-Support		}	}}